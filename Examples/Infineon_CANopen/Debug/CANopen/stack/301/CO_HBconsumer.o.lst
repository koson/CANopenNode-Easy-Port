   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "CO_HBconsumer.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.CO_getUint32,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	CO_getUint32:
  25              	.LFB2:
  26              	 .file 1 "D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301/CO_driver.h"
   1:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
   2:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Interface between CAN hardware and CANopenNode.
   3:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
   4:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @file        CO_driver.h
   5:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @ingroup     CO_driver
   6:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @author      Janez Paternoster
   7:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @copyright   2004 - 2020 Janez Paternoster
   8:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
   9:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * This file is part of CANopenNode, an opensource CANopen Stack.
  10:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Project home page is <https://github.com/CANopenNode/CANopenNode>.
  11:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * For more information on CANopen see <http://www.can-cia.org/>.
  12:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  13:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Licensed under the Apache License, Version 2.0 (the "License");
  14:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * you may not use this file except in compliance with the License.
  15:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * You may obtain a copy of the License at
  16:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  17:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *     http://www.apache.org/licenses/LICENSE-2.0
  18:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  19:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Unless required by applicable law or agreed to in writing, software
  20:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * distributed under the License is distributed on an "AS IS" BASIS,
  21:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * See the License for the specific language governing permissions and
  23:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * limitations under the License.
  24:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
  25:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  26:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_DRIVER_H
  27:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_DRIVER_H
  28:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  29:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #include <string.h>
  30:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  31:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #include "CO_config.h"
  32:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #include "CO_driver_target.h"
  33:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  34:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifdef __cplusplus
  35:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** extern "C" {
  36:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  37:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  38:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /* Stack configuration default global values.
  39:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * For more information see file CO_config.h. */
  40:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_CONFIG_GLOBAL_FLAG_CALLBACK_PRE
  41:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #define CO_CONFIG_GLOBAL_FLAG_CALLBACK_PRE (0)
  42:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  43:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_CONFIG_GLOBAL_RT_FLAG_CALLBACK_PRE
  44:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #define CO_CONFIG_GLOBAL_RT_FLAG_CALLBACK_PRE (0)
  45:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  46:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_CONFIG_GLOBAL_FLAG_TIMERNEXT
  47:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #define CO_CONFIG_GLOBAL_FLAG_TIMERNEXT (0)
  48:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  49:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_CONFIG_GLOBAL_FLAG_OD_DYNAMIC
  50:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #define CO_CONFIG_GLOBAL_FLAG_OD_DYNAMIC CO_CONFIG_FLAG_OD_DYNAMIC
  51:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  52:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifdef CO_DEBUG_COMMON
  53:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #if (CO_CONFIG_DEBUG) & CO_CONFIG_DEBUG_SDO_CLIENT
  54:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****   #define CO_DEBUG_SDO_CLIENT(msg) CO_DEBUG_COMMON(msg)
  55:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #endif
  56:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #if (CO_CONFIG_DEBUG) & CO_CONFIG_DEBUG_SDO_SERVER
  57:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****   #define CO_DEBUG_SDO_SERVER(msg) CO_DEBUG_COMMON(msg)
  58:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #endif
  59:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  60:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  61:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
  62:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @defgroup CO_driver Driver
  63:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Interface between CAN hardware and CANopenNode.
  64:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  65:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @ingroup CO_CANopen_301
  66:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @{
  67:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANopenNode is designed for speed and portability. It runs efficiently on
  68:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * devices from simple 16-bit microcontrollers to PC computers. It can run in
  69:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * multiple threads. Reception of CAN messages is pre-processed with very fast
  70:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * functions. Time critical objects, such as PDO or SYNC are processed in
  71:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * real-time thread and other objects are processed in normal thread. See
  72:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Flowchart in [README.md](index.html) for more information.
  73:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  74:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @anchor CO_obj
  75:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * #### CANopenNode Object
  76:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANopenNode is implemented as a collection of different objects, for example
  77:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * SDO, SYNC, Emergency, PDO, NMT, Heartbeat, etc. Code is written in C language
  78:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * and tries to be object oriented. So each CANopenNode Object is implemented in
  79:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * a pair of .h/.c files. It basically contains a structure with all necessary
  80:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * variables and some functions which operates on it. CANopenNode Object is
  81:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * usually connected with one or more CAN receive or transmit Message Objects.
  82:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * (CAN message Object is a CAN message with specific 11-bit CAN identifier
  83:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * (usually one fixed or a range).)
  84:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  85:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * #### Hardware interface of CANopenNode
  86:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * It consists of minimum three files:
  87:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - **CO_driver.h** file declares common functions. This file is part of the
  88:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANopenNode. It is included from each .c file from CANopenNode.
  89:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - **CO_driver_target.h** file declares microcontroller specific type
  90:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * declarations and defines some macros, which are necessary for CANopenNode.
  91:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * This file is included from CO_driver.h.
  92:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - **CO_driver.c** file defines functions declared in CO_driver.h.
  93:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  94:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * **CO_driver_target.h** and **CO_driver.c** files are specific for each
  95:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * different microcontroller and are not part of CANopenNode. There are separate
  96:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * projects for different microcontrollers, which usually include CANopenNode as
  97:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * a git submodule. CANopenNode only includes those two files in the `example`
  98:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * directory and they are basically empty. It should be possible to compile the
  99:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * `CANopenNode/example` on any system, however compiled program is not usable.
 100:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CO_driver.h contains documentation for all necessary macros, types and
 101:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * functions.
 102:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 103:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * See [CANopenNode/Wiki](https://github.com/CANopenNode/CANopenNode/wiki) for a
 104:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * known list of available implementations of CANopenNode on different systems
 105:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * and microcontrollers. Everybody is welcome to extend the list with a link to
 106:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * his own implementation.
 107:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 108:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Implementation of the hardware interface for specific microcontroller is not
 109:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * always an easy task. For reliable and efficient operation it is necessary to
 110:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * know some parts of the target microcontroller in detail (for example threads
 111:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * (or interrupts), CAN module, etc.).
 112:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 113:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 114:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Major version number of CANopenNode */
 115:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_VERSION_MAJOR 4
 116:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Minor version number of CANopenNode */
 117:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_VERSION_MINOR 0
 118:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 119:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 120:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /* Macros and declarations in following part are only used for documentation. */
 121:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifdef CO_DOXYGEN
 122:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 123:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @defgroup CO_dataTypes Basic definitions
 124:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @{
 125:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 126:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Target specific basic definitions and data types.
 127:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 128:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 129:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 130:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Depending on processor or compiler architecture, one of the two macros must
 131:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * be defined: CO_LITTLE_ENDIAN or CO_BIG_ENDIAN. CANopen itself is little
 132:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * endian.
 133:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 134:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Basic data types may be specified differently on different architectures.
 135:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Usually `true` and `false` are defined in `<stdbool.h>`, `NULL` is defined in
 136:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * `<stddef.h>`, `int8_t` to `uint64_t` are defined in `<stdint.h>`.
 137:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 138:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** CO_LITTLE_ENDIAN or CO_BIG_ENDIAN must be defined */
 139:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_LITTLE_ENDIAN
 140:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Macro must swap bytes, if CO_BIG_ENDIAN is defined */
 141:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_SWAP_16(x) x
 142:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Macro must swap bytes, if CO_BIG_ENDIAN is defined */
 143:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_SWAP_32(x) x
 144:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Macro must swap bytes, if CO_BIG_ENDIAN is defined */
 145:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_SWAP_64(x) x
 146:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** NULL, for general usage */
 147:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define NULL (0)
 148:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Logical true, for general use */
 149:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define true 1
 150:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Logical false, for general use */
 151:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define false 0
 152:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Boolean data type for general use */
 153:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef uint_fast8_t bool_t;
 154:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** INTEGER8 in CANopen (0002h), 8-bit signed integer */
 155:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef signed char int8_t;
 156:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** INTEGER16 in CANopen (0003h), 16-bit signed integer */
 157:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef signed int int16_t;
 158:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** INTEGER32 in CANopen (0004h), 32-bit signed integer */
 159:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef signed long int int32_t;
 160:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** INTEGER64 in CANopen (0015h), 64-bit signed integer */
 161:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef signed long long int int64_t;
 162:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** UNSIGNED8 in CANopen (0005h), 8-bit unsigned integer */
 163:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef unsigned char uint8_t;
 164:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** UNSIGNED16 in CANopen (0006h), 16-bit unsigned integer */
 165:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef unsigned int uint16_t;
 166:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** UNSIGNED32 in CANopen (0007h), 32-bit unsigned integer */
 167:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef unsigned long int uint32_t;
 168:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** UNSIGNED64 in CANopen (001Bh), 64-bit unsigned integer */
 169:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef unsigned long long int uint64_t;
 170:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** REAL32 in CANopen (0008h), single precision floating point value, 32-bit */
 171:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef float float32_t;
 172:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** REAL64 in CANopen (0011h), double precision floating point value, 64-bit */
 173:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef double float64_t;
 174:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** @} */
 175:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 176:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 177:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 178:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @defgroup CO_CAN_Message_reception Reception of CAN messages
 179:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @{
 180:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 181:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Target specific definitions and description of CAN message reception
 182:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 183:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN messages in CANopenNode are usually received by its own thread or higher
 184:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * priority interrupt. Received CAN messages are first filtered by hardware or
 185:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * by software. Thread then examines its 11-bit CAN-id and mask and determines,
 186:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * to which \ref CO_obj "CANopenNode Object" it belongs to. After that it calls
 187:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * predefined CANrx_callback() function, which quickly pre-processes the message
 188:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * and fetches the relevant data. CANrx_callback() function is defined by each
 189:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * \ref CO_obj "CANopenNode Object" separately. Pre-processed fetched data are
 190:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * later processed in another thread.
 191:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 192:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * If \ref CO_obj "CANopenNode Object" reception of specific CAN message, it
 193:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * must first configure its own CO_CANrx_t object with the CO_CANrxBufferInit()
 194:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * function.
 195:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 196:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 197:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 198:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN receive callback function which pre-processes received CAN message
 199:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 200:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * It is called by fast CAN receive thread. Each \ref CO_obj "CANopenNode
 201:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Object" defines its own and registers it with CO_CANrxBufferInit(), by
 202:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * passing function pointer.
 203:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 204:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param object pointer to specific \ref CO_obj "CANopenNode Object",
 205:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * registered with CO_CANrxBufferInit()
 206:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxMsg pointer to received CAN message
 207:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 208:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CANrx_callback(void *object, void *rxMsg);
 209:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 210:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 211:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANrx_callback() can read CAN identifier from received CAN message
 212:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 213:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 214:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 215:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * This is target specific function and is specific for specific
 216:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * microcontroller. It is best to implement it by using inline function or
 217:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * macro. `rxMsg` parameter should cast to a pointer to structure. For best
 218:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * efficiency structure may have the same alignment as CAN registers inside CAN
 219:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * module.
 220:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 221:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxMsg Pointer to received message
 222:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return 11-bit CAN standard identifier.
 223:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 224:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint16_t CO_CANrxMsg_readIdent(void *rxMsg) {
 225:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return 0;
 226:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
 227:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 228:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 229:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANrx_callback() can read Data Length Code from received CAN message
 230:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 231:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * See also CO_CANrxMsg_readIdent():
 232:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 233:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxMsg Pointer to received message
 234:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return data length in bytes (0 to 8)
 235:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 236:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint8_t CO_CANrxMsg_readDLC(void *rxMsg) {
 237:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return 0;
 238:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
 239:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 240:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 241:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANrx_callback() can read pointer to data from received CAN message
 242:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 243:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * See also CO_CANrxMsg_readIdent():
 244:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 245:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxMsg Pointer to received message
 246:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return pointer to data buffer
 247:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 248:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint8_t *CO_CANrxMsg_readData(void *rxMsg) {
 249:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return NULL;
 250:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
 251:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 252:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 253:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Configuration object for CAN received message for specific \ref CO_obj
 254:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * "CANopenNode Object".
 255:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 256:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 257:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 258:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Data fields of this structure are used exclusively by the driver. Usually it
 259:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * has the following data fields, but they may differ for different
 260:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * microcontrollers. Array of multiple CO_CANrx_t objects is included inside
 261:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CO_CANmodule_t.
 262:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 263:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef struct {
 264:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t ident; /**< Standard CAN Identifier (bits 0..10) + RTR (bit 11) */
 265:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t mask;  /**< Standard CAN Identifier mask with the same alignment as
 266:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                        ident */
 267:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void *object;   /**< \ref CO_obj "CANopenNode Object" initialized in from
 268:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                        CO_CANrxBufferInit() */
 269:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void (*pCANrx_callback)(
 270:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         void *object, void *message); /**< Pointer to CANrx_callback()
 271:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          initialized in CO_CANrxBufferInit() */
 272:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_CANrx_t;
 273:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** @} */
 274:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 275:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 276:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 277:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @defgroup CO_CAN_Message_transmission Transmission of CAN messages
 278:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @{
 279:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 280:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Target specific definitions and description of CAN message transmission
 281:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 282:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * If \ref CO_obj "CANopenNode Object" needs transmitting CAN message, it must
 283:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * first configure its own CO_CANtx_t object with the CO_CANtxBufferInit()
 284:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * function. CAN message can then be sent with CO_CANsend() function. If at that
 285:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * moment CAN transmit buffer inside microcontroller's CAN module is free,
 286:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * message is copied directly to the CAN module. Otherwise CO_CANsend() function
 287:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * sets _bufferFull_ flag to true. Message will be then sent by CAN TX interrupt
 288:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * as soon as CAN module is freed. Until message is not copied to CAN module,
 289:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * its contents must not change. If there are multiple CO_CANtx_t objects with
 290:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * _bufferFull_ flag set to true, then CO_CANtx_t with lower index will be sent
 291:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * first.
 292:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 293:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 294:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 295:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Configuration object for CAN transmit message for specific \ref CO_obj
 296:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * "CANopenNode Object".
 297:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 298:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 299:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 300:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Data fields of this structure are used exclusively by the driver. Usually it
 301:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * has the following data fields, but they may differ for different
 302:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * microcontrollers. Array of multiple CO_CANtx_t objects is included inside
 303:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CO_CANmodule_t.
 304:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 305:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef struct {
 306:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint32_t ident;             /**< CAN identifier as aligned in CAN module */
 307:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t DLC;                /**< Length of CAN message */
 308:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t data[8];            /**< 8 data bytes */
 309:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t bufferFull; /**< True if previous message is still in the
 310:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                      buffer */
 311:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t syncFlag;   /**< Synchronous PDO messages has this flag set.
 312:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                   It prevents them to be sent outside the synchronous window */
 313:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_CANtx_t;
 314:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** @} */
 315:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 316:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 317:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 318:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Complete CAN module object.
 319:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 320:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 321:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 322:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Usually it has the following data fields, but they may differ for different
 323:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * microcontrollers.
 324:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 325:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef struct {
 326:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void *CANptr;                      /**< From CO_CANmodule_init() */
 327:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CANrx_t *rxArray;               /**< From CO_CANmodule_init() */
 328:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t rxSize;                   /**< From CO_CANmodule_init() */
 329:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CANtx_t *txArray;               /**< From CO_CANmodule_init() */
 330:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t txSize;                   /**< From CO_CANmodule_init() */
 331:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t CANerrorStatus;           /**< CAN error status bitfield,
 332:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                             see @ref CO_CAN_ERR_status_t */
 333:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t CANnormal;         /**< CAN module is in normal mode */
 334:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t useCANrxFilters;   /**< Value different than zero indicates,
 335:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             that CAN module hardware filters are used for CAN reception. If
 336:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             there is not enough hardware filters, they won't be used. In this
 337:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             case will be *all* received CAN messages processed by software. */
 338:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t bufferInhibitFlag; /**< If flag is true, then message in
 339:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             transmit buffer is synchronous PDO message, which will be aborted,
 340:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             if CO_clearPendingSyncPDOs() function will be called by application.
 341:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             This may be necessary if Synchronous window time was expired. */
 342:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t firstCANtxMessage; /**< Equal to 1, when the first
 343:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             transmitted message (bootup message) is in CAN TX buffers */
 344:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile uint16_t CANtxCount;      /**< Number of messages in transmit
 345:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             buffer, which are waiting to be copied to the CAN module */
 346:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint32_t errOld;                   /**< Previous state of CAN errors */
 347:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_CANmodule_t;
 348:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 349:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 350:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 351:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Data storage object for one entry.
 352:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 353:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 354:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 355:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * For more information on Data storage see @ref CO_storage or **CO_storage.h**
 356:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * file. Structure members documented here are always required or required with
 357:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @ref CO_storage_eeprom. Target system may add own additional, hardware
 358:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * specific variables.
 359:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 360:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef struct {
 361:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Address of data to store, always required. */
 362:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void *addr;
 363:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Length of data to store, always required. */
 364:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     size_t len;
 365:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Sub index in OD objects 1010 and 1011, from 2 to 127. Writing
 366:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * 0x65766173 to 1010,subIndexOD will store data to non-volatile memory.
 367:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * Writing 0x64616F6C to 1011,subIndexOD will restore default data, always
 368:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * required. */
 369:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t subIndexOD;
 370:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Attribute from @ref CO_storage_attributes_t, always required. */
 371:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t attr;
 372:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Pointer to storage module, target system specific usage, required with
 373:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * @ref CO_storage_eeprom. */
 374:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void *storageModule;
 375:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** CRC checksum of the data stored in eeprom, set on store, required with
 376:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * @ref CO_storage_eeprom. */
 377:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t crc;
 378:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Address of entry signature inside eeprom, set by init, required with
 379:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * @ref CO_storage_eeprom. */
 380:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     size_t eepromAddrSignature;
 381:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Address of data inside eeprom, set by init, required with
 382:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * @ref CO_storage_eeprom. */
 383:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     size_t eepromAddr;
 384:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Offset of next byte being updated by automatic storage, required with
 385:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * @ref CO_storage_eeprom. */
 386:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     size_t offset;
 387:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Additional target specific parameters, optional. */
 388:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void *additionalParameters;
 389:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_storage_entry_t;
 390:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 391:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 392:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 393:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @defgroup CO_critical_sections Critical sections
 394:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @{
 395:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 396:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Protection of critical sections in multi-threaded operation.
 397:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 398:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANopenNode is designed to run in different threads, as described in
 399:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * [README.md](index.html). Threads are implemented differently in different
 400:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * systems. In microcontrollers threads are interrupts with different
 401:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * priorities, for example. It is necessary to protect sections, where different
 402:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * threads access to the same resource. In simple systems interrupts or
 403:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * scheduler may be temporary disabled between access to the shared resource.
 404:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Otherwise mutexes or semaphores can be used.
 405:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 406:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * #### Reentrant functions
 407:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Functions CO_CANsend() from C_driver.h, and CO_error() from CO_Emergency.h
 408:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * may be called from different threads. Critical sections must be protected.
 409:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Either by disabling scheduler or interrupts or by mutexes or semaphores.
 410:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Lock/unlock macro is called with pointer to CAN module, which may be used
 411:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * inside.
 412:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 413:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * #### Object Dictionary variables
 414:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * In general, there are two threads, which accesses OD variables: mainline
 415:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * (initialization, storage, SDO access) and timer (PDO access). CANopenNode
 416:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * uses locking mechanism, where SDO server (or other mainline code) prevents
 417:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * execution of the real-time thread at the moment it reads or writes OD
 418:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * variable. CO_LOCK_OD(CAN_MODULE) and CO_UNLOCK_OD(CAN_MODULE) macros
 419:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * are used to protect:
 420:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - Whole real-time thread,
 421:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - SDO server protects read/write access to OD variable, if specific OD
 422:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   variable has ODA_TRPDO or ODA_TRSRDO from @ref OD_attributes_t set. If
 423:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   those attributes are not set, OD variable is not locked by SDO server.
 424:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   Locking of long OD variables, not accessible from real-time thread, may
 425:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   block RT thread.
 426:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - Any mainline code, which accesses PDO-mappable OD variable, must protect
 427:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   read/write with locking macros. Use @ref OD_mappable() for check.
 428:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - Other cases, where non-PDO-mappable OD variable is used inside real-time
 429:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   thread by some other part of the user application must be considered with
 430:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   special care.
 431:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 432:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * #### Synchronization functions for CAN receive
 433:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * After CAN message is received, it is pre-processed in CANrx_callback(), which
 434:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * copies some data into appropriate object and at the end sets **new_message**
 435:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * flag. This flag is then pooled in another thread, which further processes the
 436:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * message. The problem is, that compiler optimization may shuffle memory
 437:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * operations, so it is necessary to ensure, that **new_message** flag is surely
 438:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * set at the end. It is necessary to use [Memory
 439:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * barrier](https://en.wikipedia.org/wiki/Memory_barrier).
 440:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 441:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * If receive function runs inside IRQ, no further synchronization is needed.
 442:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Otherwise, some kind of synchronization has to be included. The following
 443:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * example uses GCC builtin memory barrier `__sync_synchronize()`. More
 444:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * information can be found
 445:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * [here](https://stackoverflow.com/questions/982129/what-does-sync-synchronize-do#982179).
 446:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 447:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 448:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Lock critical section in CO_CANsend() */
 449:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_LOCK_CAN_SEND(CAN_MODULE)
 450:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Unlock critical section in CO_CANsend() */
 451:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_UNLOCK_CAN_SEND(CAN_MODULE)
 452:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Lock critical section in CO_errorReport() or CO_errorReset() */
 453:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_LOCK_EMCY(CAN_MODULE)
 454:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Unlock critical section in CO_errorReport() or CO_errorReset() */
 455:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_UNLOCK_EMCY(CAN_MODULE)
 456:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Lock critical section when accessing Object Dictionary */
 457:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_LOCK_OD(CAN_MODULE)
 458:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Unock critical section when accessing Object Dictionary */
 459:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_UNLOCK_OD(CAN_MODULE)
 460:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 461:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Check if new message has arrived */
 462:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_FLAG_READ(rxNew) ((rxNew) != NULL)
 463:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Set new message flag */
 464:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_FLAG_SET(rxNew) { __sync_synchronize(); rxNew = (void *)1L; }
 465:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Clear new message flag */
 466:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_FLAG_CLEAR(rxNew) { __sync_synchronize(); rxNew = NULL; }
 467:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 468:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** @} */
 469:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif /* CO_DOXYGEN */
 470:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 471:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 472:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 473:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Default CANopen identifiers.
 474:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 475:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Default CANopen identifiers for CANopen communication objects. Same as
 476:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * 11-bit addresses of CAN messages. These are default identifiers and
 477:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * can be changed in CANopen. Especially PDO identifiers are configured
 478:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * in PDO linking phase of the CANopen network configuration.
 479:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 480:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef enum {
 481:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_NMT_SERVICE = 0x000, /**< 0x000, Network management */
 482:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_GFC = 0x001,         /**< 0x001, Global fail-safe command */
 483:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_SYNC = 0x080,        /**< 0x080, Synchronous message */
 484:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_EMERGENCY = 0x080,   /**< 0x080, Emergency messages (+nodeID) */
 485:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_TIME = 0x100,        /**< 0x100, Time message */
 486:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_SRDO_1 = 0x0FF,      /**< 0x0FF, Default SRDO1 (+2*nodeID) */
 487:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_TPDO_1 = 0x180,      /**< 0x180, Default TPDO1 (+nodeID) */
 488:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_RPDO_1 = 0x200,      /**< 0x200, Default RPDO1 (+nodeID) */
 489:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_TPDO_2 = 0x280,      /**< 0x280, Default TPDO2 (+nodeID) */
 490:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_RPDO_2 = 0x300,      /**< 0x300, Default RPDO2 (+nodeID) */
 491:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_TPDO_3 = 0x380,      /**< 0x380, Default TPDO3 (+nodeID) */
 492:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_RPDO_3 = 0x400,      /**< 0x400, Default RPDO3 (+nodeID) */
 493:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_TPDO_4 = 0x480,      /**< 0x480, Default TPDO4 (+nodeID) */
 494:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_RPDO_4 = 0x500,      /**< 0x500, Default RPDO5 (+nodeID) */
 495:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_SDO_SRV = 0x580, /**< 0x580, SDO response from server (+nodeID) */
 496:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_SDO_CLI = 0x600, /**< 0x600, SDO request from client (+nodeID) */
 497:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_HEARTBEAT = 0x700,   /**< 0x700, Heartbeat message */
 498:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_LSS_SLV = 0x7E4,     /**< 0x7E4, LSS response from slave */
 499:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_LSS_MST = 0x7E5      /**< 0x7E5, LSS request from master */
 500:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_Default_CAN_ID_t;
 501:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 502:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 503:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 504:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Restricted CAN-IDs
 505:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 506:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Macro for verifying 'Restricted CAN-IDs', as specified by standard CiA301.
 507:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * They shall not be used for SYNC, TIME, EMCY, PDO and SDO.
 508:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 509:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_IS_RESTRICTED_CAN_ID
 510:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_IS_RESTRICTED_CAN_ID(CAN_ID) ((CAN_ID) <= 0x7F \
 511:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         || ((CAN_ID) >= 0x101 && (CAN_ID) <= 0x180) \
 512:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         || ((CAN_ID) >= 0x581 && (CAN_ID) <= 0x5FF) \
 513:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         || ((CAN_ID) >= 0x601 && (CAN_ID) <= 0x67F) \
 514:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         || ((CAN_ID) >= 0x6E0 && (CAN_ID) <= 0x6FF) \
 515:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         || (CAN_ID) >= 0x701)
 516:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
 517:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 518:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 519:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 520:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN error status bitmasks.
 521:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 522:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN warning level is reached, if CAN transmit or receive error counter is
 523:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * more or equal to 96. CAN passive level is reached, if counters are more or
 524:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * equal to 128. Transmitter goes in error state 'bus off' if transmit error
 525:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * counter is more or equal to 256.
 526:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 527:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef enum {
 528:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRTX_WARNING = 0x0001,  /**< 0x0001, CAN transmitter warning */
 529:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRTX_PASSIVE = 0x0002,  /**< 0x0002, CAN transmitter passive */
 530:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRTX_BUS_OFF = 0x0004,  /**< 0x0004, CAN transmitter bus off */
 531:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRTX_OVERFLOW = 0x0008, /**< 0x0008, CAN transmitter overflow */
 532:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 533:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRTX_PDO_LATE = 0x0080, /**< 0x0080, TPDO is outside sync window */
 534:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 535:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRRX_WARNING = 0x0100,  /**< 0x0100, CAN receiver warning */
 536:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRRX_PASSIVE = 0x0200,  /**< 0x0200, CAN receiver passive */
 537:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRRX_OVERFLOW = 0x0800, /**< 0x0800, CAN receiver overflow */
 538:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 539:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERR_WARN_PASSIVE = 0x0303/**< 0x0303, combination */
 540:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_CAN_ERR_status_t;
 541:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 542:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 543:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 544:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Return values of some CANopen functions. If function was executed
 545:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * successfully it returns 0 otherwise it returns <0.
 546:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 547:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef enum {
 548:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_NO = 0,                /**< Operation completed successfully */
 549:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_ILLEGAL_ARGUMENT = -1, /**< Error in function arguments */
 550:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_OUT_OF_MEMORY = -2,    /**< Memory allocation failed */
 551:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_TIMEOUT = -3,          /**< Function timeout */
 552:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_ILLEGAL_BAUDRATE = -4, /**< Illegal baudrate passed to function
 553:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          CO_CANmodule_init() */
 554:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_RX_OVERFLOW = -5,      /**< Previous message was not processed
 555:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          yet */
 556:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_RX_PDO_OVERFLOW = -6,  /**< previous PDO was not processed yet */
 557:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_RX_MSG_LENGTH = -7,    /**< Wrong receive message length */
 558:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_RX_PDO_LENGTH = -8,    /**< Wrong receive PDO length */
 559:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_TX_OVERFLOW = -9,      /**< Previous message is still waiting,
 560:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          buffer full */
 561:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_TX_PDO_WINDOW = -10,   /**< Synchronous TPDO is outside window */
 562:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_TX_UNCONFIGURED = -11, /**< Transmit buffer was not configured
 563:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          properly */
 564:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_OD_PARAMETERS = -12,   /**< Error in Object Dictionary parameters*/
 565:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_DATA_CORRUPT = -13,    /**< Stored data are corrupt */
 566:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_CRC = -14,             /**< CRC does not match */
 567:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_TX_BUSY = -15,         /**< Sending rejected because driver is
 568:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          busy. Try again */
 569:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_WRONG_NMT_STATE = -16, /**< Command can't be processed in current
 570:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          state */
 571:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_SYSCALL = -17,         /**< Syscall failed */
 572:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_INVALID_STATE = -18,   /**< Driver not ready */
 573:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_NODE_ID_UNCONFIGURED_LSS = -19 /**< Node-id is in LSS unconfigured
 574:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          state. If objects are handled properly,
 575:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          this may not be an error. */
 576:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_ReturnError_t;
 577:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 578:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 579:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 580:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Request CAN configuration (stopped) mode and *wait* until it is set.
 581:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 582:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANptr Pointer to CAN device
 583:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 584:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CO_CANsetConfigurationMode(void *CANptr);
 585:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 586:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 587:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 588:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Request CAN normal (operational) mode and *wait* until it is set.
 589:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 590:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule CO_CANmodule_t object.
 591:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 592:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CO_CANsetNormalMode(CO_CANmodule_t *CANmodule);
 593:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 594:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 595:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 596:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Initialize CAN module object.
 597:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 598:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Function must be called in the communication reset section. CAN module must
 599:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * be in Configuration Mode before.
 600:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 601:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object will be initialized.
 602:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANptr Pointer to CAN device.
 603:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxArray Array for handling received CAN messages
 604:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxSize Size of the above array. Must be equal to number of receiving
 605:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN objects.
 606:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param txArray Array for handling transmitting CAN messages
 607:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param txSize Size of the above array. Must be equal to number of
 608:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * transmitting CAN objects.
 609:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANbitRate Valid values are (in kbps): 10, 20, 50, 125, 250, 500, 800,
 610:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * 1000. If value is illegal, bitrate defaults to 125.
 611:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 612:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Return #CO_ReturnError_t: CO_ERROR_NO or CO_ERROR_ILLEGAL_ARGUMENT.
 613:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 614:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** CO_ReturnError_t CO_CANmodule_init(CO_CANmodule_t *CANmodule,
 615:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    void *CANptr,
 616:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    CO_CANrx_t rxArray[],
 617:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    uint16_t rxSize,
 618:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    CO_CANtx_t txArray[],
 619:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    uint16_t txSize,
 620:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    uint16_t CANbitRate);
 621:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 622:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 623:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 624:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Switch off CANmodule. Call at program exit.
 625:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 626:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule CAN module object.
 627:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 628:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CO_CANmodule_disable(CO_CANmodule_t *CANmodule);
 629:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 630:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 631:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 632:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Configure CAN message receive buffer.
 633:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 634:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Function configures specific CAN receive buffer. It sets CAN identifier
 635:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * and connects buffer with specific object. Function must be called for each
 636:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * member in _rxArray_ from CO_CANmodule_t.
 637:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 638:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object.
 639:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param index Index of the specific buffer in _rxArray_.
 640:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param ident 11-bit standard CAN Identifier. If two or more CANrx buffers
 641:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * have the same _ident_, then buffer with lowest _index_ has precedence and
 642:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * other CANrx buffers will be ignored.
 643:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param mask 11-bit mask for identifier. Most usually set to 0x7FF.
 644:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Received message (rcvMsg) will be accepted if the following
 645:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * condition is true: (((rcvMsgId ^ ident) & mask) == 0).
 646:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rtr If true, 'Remote Transmit Request' messages will be accepted.
 647:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param object CANopen object, to which buffer is connected. It will be used
 648:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * as an argument to CANrx_callback. Its type is (void), CANrx_callback will
 649:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * change its type back to the correct object type.
 650:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANrx_callback Pointer to function, which will be called, if received
 651:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN message matches the identifier. It must be fast function.
 652:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 653:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Return #CO_ReturnError_t: CO_ERROR_NO CO_ERROR_ILLEGAL_ARGUMENT or
 654:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CO_ERROR_OUT_OF_MEMORY (not enough masks for configuration).
 655:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 656:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** CO_ReturnError_t CO_CANrxBufferInit(CO_CANmodule_t *CANmodule,
 657:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     uint16_t index,
 658:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     uint16_t ident,
 659:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     uint16_t mask,
 660:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     bool_t rtr,
 661:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     void *object,
 662:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     void (*CANrx_callback)(void *object,
 663:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                                            void *message));
 664:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 665:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 666:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 667:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Configure CAN message transmit buffer.
 668:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 669:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Function configures specific CAN transmit buffer. Function must be called for
 670:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * each member in _txArray_ from CO_CANmodule_t.
 671:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 672:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object.
 673:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param index Index of the specific buffer in _txArray_.
 674:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param ident 11-bit standard CAN Identifier.
 675:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rtr If true, 'Remote Transmit Request' messages will be transmitted.
 676:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param noOfBytes Length of CAN message in bytes (0 to 8 bytes).
 677:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param syncFlag This flag bit is used for synchronous TPDO messages. If it is
 678:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * set, message will not be sent, if current time is outside synchronous window.
 679:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 680:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return Pointer to CAN transmit message buffer. 8 bytes data array inside
 681:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * buffer should be written, before CO_CANsend() function is called.
 682:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Zero is returned in case of wrong arguments.
 683:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 684:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** CO_CANtx_t *CO_CANtxBufferInit(CO_CANmodule_t *CANmodule,
 685:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                uint16_t index,
 686:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                uint16_t ident,
 687:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                bool_t rtr,
 688:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                uint8_t noOfBytes,
 689:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                bool_t syncFlag);
 690:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 691:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 692:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 693:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Send CAN message.
 694:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 695:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object.
 696:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param buffer Pointer to transmit buffer, returned by CO_CANtxBufferInit().
 697:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Data bytes must be written in buffer before function call.
 698:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 699:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return #CO_ReturnError_t: CO_ERROR_NO, CO_ERROR_TX_OVERFLOW or
 700:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CO_ERROR_TX_PDO_WINDOW (Synchronous TPDO is outside window).
 701:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 702:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** CO_ReturnError_t CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer);
 703:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 704:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 705:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 706:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Clear all synchronous TPDOs from CAN module transmit buffers.
 707:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 708:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANopen allows synchronous PDO communication only inside time between SYNC
 709:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * message and SYNC Window. If time is outside this window, new synchronous PDOs
 710:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * must not be sent and all pending sync TPDOs, which may be on CAN TX buffers,
 711:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * may optionally be cleared.
 712:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 713:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * This function checks (and aborts transmission if necessary) CAN TX buffers
 714:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * when it is called. Function should be called by the stack in the moment,
 715:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * when SYNC time was just passed out of synchronous window.
 716:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 717:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object.
 718:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 719:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule);
 720:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 721:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 722:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 723:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Process can module - verify CAN errors
 724:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 725:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Function must be called cyclically. It should calculate CANerrorStatus
 726:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * bitfield for CAN errors defined in @ref CO_CAN_ERR_status_t.
 727:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 728:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object.
 729:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 730:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CO_CANmodule_process(CO_CANmodule_t *CANmodule);
 731:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 732:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 733:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 734:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Get uint8_t value from memory buffer
 735:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 736:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param buf Memory buffer to get value from.
 737:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 738:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return Value
 739:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 740:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint8_t CO_getUint8(const void *buf) {
 741:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #if (C2000_PORT != 0)
 742:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t value = 0;
 743:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     value = (*((uint8_t *)buf) & 0x00FF);
 744:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return value;
 745:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #else
 746:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 747:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
 748:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
 749:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Get uint16_t value from memory buffer, see @ref CO_getUint8 */
 750:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint16_t CO_getUint16(const void *buf) {
 751:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #if (C2000_PORT != 0)
 752:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t value = 0;
 753:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t * pBuf8 = (uint8_t *)buf;
 754:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     for (int i = 0; i < 2; i++) {
 755:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         value += ((uint16_t)(pBuf8[i])) << (8 * i);
 756:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     }
 757:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return value;
 758:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #else
 759:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 760:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
 761:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
 762:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Get uint32_t value from memory buffer, see @ref CO_getUint8 */
 763:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint32_t CO_getUint32(const void *buf) {
  27              	 .loc 1 763 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31 0000 80B5     	 push {r7,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 8
  34              	 .cfi_offset 7,-8
  35              	 .cfi_offset 14,-4
  36 0002 84B0     	 sub sp,sp,#16
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 764:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #if (C2000_PORT != 0)
 765:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint32_t value = 0;
 766:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t * pBuf8 = (uint8_t *)buf;
 767:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     for(int i = 0; i < 4; i++) {
 768:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         value += ((uint32_t)(pBuf8[i])) << (8 * i);
 769:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     }
 770:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return value;
 771:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #else
 772:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint32_t value; memmove(&value, buf, sizeof(value)); return value;
  43              	 .loc 1 772 0
  44 0008 07F10C03 	 add r3,r7,#12
  45 000c 1846     	 mov r0,r3
  46 000e 7968     	 ldr r1,[r7,#4]
  47 0010 0422     	 movs r2,#4
  48 0012 FFF7FEFF 	 bl memmove
  49 0016 FB68     	 ldr r3,[r7,#12]
 773:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
 774:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
  50              	 .loc 1 774 0
  51 0018 1846     	 mov r0,r3
  52 001a 1037     	 adds r7,r7,#16
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 8
  55 001c BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001e 80BD     	 pop {r7,pc}
  60              	 .cfi_endproc
  61              	.LFE2:
  63              	 .section .text.OD_getIndex,"ax",%progbits
  64              	 .align 2
  65              	 .thumb
  66              	 .thumb_func
  68              	OD_getIndex:
  69              	.LFB6:
  70              	 .file 2 "D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301/CO_ODinterface.h"
   1:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
   2:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * CANopen Object Dictionary interface
   3:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
   4:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @file        CO_ODinterface.h
   5:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ingroup     CO_ODinterface
   6:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @author      Janez Paternoster
   7:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @copyright   2020 Janez Paternoster
   8:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
   9:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * This file is part of CANopenNode, an opensource CANopen Stack.
  10:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Project home page is <https://github.com/CANopenNode/CANopenNode>.
  11:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * For more information on CANopen see <http://www.can-cia.org/>.
  12:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
  13:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Licensed under the Apache License, Version 2.0 (the "License");
  14:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * you may not use this file except in compliance with the License.
  15:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * You may obtain a copy of the License at
  16:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
  17:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *     http://www.apache.org/licenses/LICENSE-2.0
  18:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
  19:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Unless required by applicable law or agreed to in writing, software
  20:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * distributed under the License is distributed on an "AS IS" BASIS,
  21:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * See the License for the specific language governing permissions and
  23:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * limitations under the License.
  24:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
  25:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  26:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #ifndef CO_OD_INTERFACE_H
  27:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #define CO_OD_INTERFACE_H
  28:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  29:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #include "301/CO_driver.h"
  30:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  31:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #ifdef __cplusplus
  32:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** extern "C" {
  33:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
  34:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  35:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
  36:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @defgroup CO_ODinterface OD interface
  37:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * CANopen Object Dictionary interface.
  38:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
  39:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ingroup CO_CANopen_301
  40:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @{
  41:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * See @ref doc/objectDictionary.md
  42:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
  43:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  44:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #ifndef CO_OD_OWN_TYPES
  45:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Variable of type OD_size_t contains data length in bytes of OD variable */
  46:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef uint32_t OD_size_t;
  47:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Type (and size) of Object Dictionary attribute */
  48:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef uint8_t OD_attr_t;
  49:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
  50:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  51:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #ifndef OD_FLAGS_PDO_SIZE
  52:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Size of of flagsPDO variable inside @ref OD_extension_t, from 0 to 32. */
  53:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #define OD_FLAGS_PDO_SIZE 4
  54:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
  55:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  56:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #ifndef CO_PROGMEM
  57:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Modifier for OD objects. This is large amount of data and is specified in
  58:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Object Dictionary (OD.c file usually) */
  59:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #define CO_PROGMEM const
  60:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
  61:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  62:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  63:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
  64:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Common DS301 object dictionary entries.
  65:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
  66:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef enum {
  67:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1000_DEV_TYPE           = 0x1000U,/**< Device type */
  68:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1001_ERR_REG            = 0x1001U,/**< Error register */
  69:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1002_MANUF_STATUS_REG   = 0x1002U,/**< Manufacturer status register */
  70:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1003_PREDEF_ERR_FIELD   = 0x1003U,/**< Predefined error field */
  71:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1004_RSV                = 0x1004U,/**< Reserved */
  72:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1005_COBID_SYNC         = 0x1005U,/**< Sync message cob-id */
  73:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1006_COMM_CYCL_PERIOD   = 0x1006U,/**< Communication cycle period */
  74:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1007_SYNC_WINDOW_LEN    = 0x1007U,/**< Sync windows length */
  75:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1008_MANUF_DEV_NAME     = 0x1008U,/**< Manufacturer device name */
  76:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1009_MANUF_HW_VERSION   = 0x1009U,/**< Manufacturer hardware version */
  77:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100A_MANUF_SW_VERSION   = 0x100AU,/**< Manufacturer software version */
  78:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100B_RSV                = 0x100BU,/**< Reserved */
  79:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100C_GUARD_TIME         = 0x100CU,/**< Guard time */
  80:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100D_LIFETIME_FACTOR    = 0x100DU,/**< Life time factor */
  81:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100E_RSV                = 0x100EU,/**< Reserved */
  82:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100F_RSV                = 0x100FU,/**< Reserved */
  83:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1010_STORE_PARAMETERS   = 0x1010U,/**< Store params in persistent mem.*/
  84:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1011_RESTORE_DEFAULT    = 0x1011U,/**< Restore default parameters */
  85:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1012_COBID_TIME         = 0x1012U,/**< Timestamp message cob-id */
  86:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1013_HIGH_RES_TIMESTAMP = 0x1013U,/**< High resolution timestamp */
  87:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1014_COBID_EMERGENCY    = 0x1014U,/**< Emergency message cob-id */
  88:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1015_INHIBIT_TIME_EMCY  = 0x1015U,/**< Inhibit time emergency message */
  89:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1016_CONSUMER_HB_TIME   = 0x1016U,/**< Consumer heartbeat time */
  90:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1017_PRODUCER_HB_TIME   = 0x1017U,/**< Producer heartbeat time */
  91:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1018_IDENTITY_OBJECT    = 0x1018U,/**< Identity object */
  92:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1019_SYNC_CNT_OVERFLOW  = 0x1019U,/**< Sync counter overflow value */
  93:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1020_VERIFY_CONFIG      = 0x1020U,/**< Verify configuration */
  94:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1021_STORE_EDS          = 0x1021U,/**< Store EDS */
  95:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1022_STORE_FORMAT       = 0x1022U,/**< Store format */
  96:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1023_OS_CMD             = 0x1023U,/**< OS command */
  97:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1024_OS_CMD_MODE        = 0x1024U,/**< OS command mode */
  98:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1025_OS_DBG_INTERFACE   = 0x1025U,/**< OS debug interface */
  99:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1026_OS_PROMPT          = 0x1026U,/**< OS prompt */
 100:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1027_MODULE_LIST        = 0x1027U,/**< Module list */
 101:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1028_EMCY_CONSUMER      = 0x1028U,/**< Emergency consumer object */
 102:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1029_ERR_BEHAVIOR       = 0x1029U,/**< Error behaviour */
 103:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1200_SDO_SERVER_1_PARAM = 0x1200U,/**< SDO server parameter */
 104:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1280_SDO_CLIENT_1_PARAM = 0x1280U,/**< SDO client parameter */
 105:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1300_GFC_PARAM          = 0x1300U,/**< Global fail-safe command param */
 106:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1301_SRDO_1_PARAM       = 0x1301U,/**< SRDO communication parameter */
 107:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1381_SRDO_1_MAPPING     = 0x1381U,/**< SRDO mapping parameter */
 108:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H13FE_SRDO_VALID         = 0x13FEU,/**< SRDO Configuration valid */
 109:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H13FF_SRDO_CHECKSUM      = 0x13FFU,/**< SRDO configuration checksum */
 110:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1400_RXPDO_1_PARAM      = 0x1400U,/**< RXPDO communication parameter */
 111:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1600_RXPDO_1_MAPPING    = 0x1600U,/**< RXPDO mapping parameters */
 112:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1800_TXPDO_1_PARAM      = 0x1800U,/**< TXPDO communication parameter */
 113:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1A00_TXPDO_1_MAPPING    = 0x1A00U,/**< TXPDO mapping parameters */
 114:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_ObjDicId_30x_t;
 115:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 116:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 117:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 118:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Attributes (bit masks) for OD sub-object.
 119:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 120:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef enum {
 121:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_SDO_R = 0x01, /**< SDO server may read from the variable */
 122:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_SDO_W = 0x02, /**< SDO server may write to the variable */
 123:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_SDO_RW = 0x03, /**< SDO server may read from or write to the variable */
 124:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_TPDO = 0x04, /**< Variable is mappable into TPDO (can be read) */
 125:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_RPDO = 0x08, /**< Variable is mappable into RPDO (can be written) */
 126:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_TRPDO = 0x0C, /**< Variable is mappable into TPDO or RPDO */
 127:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_TSRDO = 0x10, /**< Variable is mappable into transmitting SRDO */
 128:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_RSRDO = 0x20, /**< Variable is mappable into receiving SRDO */
 129:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_TRSRDO = 0x30, /**< Variable is mappable into tx or rx SRDO */
 130:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_MB = 0x40, /**< Variable is multi-byte ((u)int16_t to (u)int64_t) */
 131:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_STR = 0x80 /**< Shorter value, than specified variable size, may be
 132:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     written to the variable. SDO write will fill remaining memory with zeroes.
 133:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     Attribute is used for VISIBLE_STRING and UNICODE_STRING. */
 134:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_attributes_t;
 135:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 136:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 137:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 138:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Return codes from OD access functions.
 139:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 140:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_getSDOabCode() can be used to retrieve corresponding SDO abort code.
 141:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 142:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef enum {
 143:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /* !!!! WARNING !!!!
 144:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * If changing these values, change also OD_getSDOabCode() function!
 145:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 146:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Read/write is only partial, make more calls */
 147:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_PARTIAL = -1,
 148:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x00000000 - Read/write successfully finished */
 149:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_OK = 0,
 150:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x05040005 - Out of memory */
 151:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_OUT_OF_MEM = 1,
 152:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06010000 - Unsupported access to an object */
 153:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_UNSUPP_ACCESS = 2,
 154:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06010001 - Attempt to read a write only object */
 155:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_WRITEONLY = 3,
 156:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06010002 - Attempt to write a read only object */
 157:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_READONLY = 4,
 158:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06020000 - Object does not exist in the object dict. */
 159:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_IDX_NOT_EXIST = 5,
 160:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06040041 - Object cannot be mapped to the PDO */
 161:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_NO_MAP = 6,
 162:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06040042 - PDO length exceeded */
 163:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_MAP_LEN = 7,
 164:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06040043 - General parameter incompatibility reasons */
 165:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_PAR_INCOMPAT = 8,
 166:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06040047 - General internal incompatibility in device */
 167:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DEV_INCOMPAT = 9,
 168:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06060000 - Access failed due to hardware error */
 169:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_HW = 10,
 170:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06070010 - Data type does not match */
 171:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_TYPE_MISMATCH = 11,
 172:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06070012 - Data type does not match, length too high */
 173:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DATA_LONG = 12,
 174:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06070013 - Data type does not match, length too short */
 175:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DATA_SHORT = 13,
 176:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06090011 - Sub index does not exist */
 177:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_SUB_NOT_EXIST = 14,
 178:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06090030 - Invalid value for parameter (download only) */
 179:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_INVALID_VALUE = 15,
 180:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06090031 - Value range of parameter written too high */
 181:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_VALUE_HIGH = 16,
 182:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06090032 - Value range of parameter written too low */
 183:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_VALUE_LOW = 17,
 184:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06090036 - Maximum value is less than minimum value */
 185:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_MAX_LESS_MIN = 18,
 186:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x060A0023 - Resource not available: SDO connection */
 187:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_NO_RESOURCE = 19,
 188:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000000 - General error */
 189:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_GENERAL = 20,
 190:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000020 - Data cannot be transferred or stored to app */
 191:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DATA_TRANSF = 21,
 192:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000021 - Data can't be transferred (local control) */
 193:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DATA_LOC_CTRL = 22,
 194:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000022 - Data can't be transf. (present device state) */
 195:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DATA_DEV_STATE = 23,
 196:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000023 - Object dictionary not present */
 197:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_OD_MISSING = 23,
 198:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000024 - No data available */
 199:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_NO_DATA = 25,
 200:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Last element, number of responses */
 201:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_COUNT = 26
 202:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } ODR_t;
 203:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 204:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 205:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 206:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * IO stream structure, used for read/write access to OD variable, part of
 207:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_IO_t.
 208:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 209:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef struct {
 210:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Pointer to original data object, defined by Object Dictionary. Default
 211:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * read/write functions operate on it. If memory for data object is not
 212:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * specified by Object Dictionary, then dataOrig is NULL.
 213:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      */
 214:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     void *dataOrig;
 215:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Pointer to object, passed by @ref OD_extension_init(). Can be used
 216:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * inside read / write functions from IO extension.
 217:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      */
 218:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     void *object;
 219:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Data length in bytes or 0, if length is not specified */
 220:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_size_t dataLength;
 221:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** In case of large data, dataOffset indicates position of already
 222:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * transferred data */
 223:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_size_t dataOffset;
 224:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Attribute bit-field of the OD sub-object, see @ref OD_attributes_t */
 225:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_attr_t attribute;
 226:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Sub index of the OD sub-object, informative */
 227:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint8_t subIndex;
 228:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_stream_t;
 229:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 230:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 231:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 232:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Structure for input / output on the OD variable. It is initialized with
 233:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_getSub() function. Access principle to OD variable is via read/write
 234:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * functions operating on stream, similar as standard read/write.
 235:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 236:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef struct {
 237:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Object Dictionary stream object, passed to read or write */
 238:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_stream_t stream;
 239:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /**
 240:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Function pointer for reading value from specified variable from Object
 241:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Dictionary. If OD variable is larger than buf, then this function must
 242:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * be called several times. After completed successful read function returns
 243:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * 'ODR_OK'. If read is partial, it returns 'ODR_PARTIAL'. In case of errors
 244:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * function returns code similar to SDO abort code.
 245:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 246:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Read can be restarted with @ref OD_rwRestart() function.
 247:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 248:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * At the moment, when Object Dictionary is initialized, every variable has
 249:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * assigned the same "read" function. This default function simply copies
 250:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * data from Object Dictionary variable. Application can bind its own "read"
 251:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * function for specific object. In that case application is able to
 252:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * calculate data for reading from own internal state at the moment of
 253:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * "read" function call. Own "read" function on OD object can be initialized
 254:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * with @ref OD_extension_init() function.
 255:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 256:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * "read" function must always copy all own data to buf, except if "buf" is
 257:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * not large enough. ("*returnCode" must not return 'ODR_PARTIAL', if there
 258:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * is still space in "buf".)
 259:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 260:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @warning When accessing OD variables by calling the read() function, it
 261:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * may be necessary to use @ref CO_LOCK_OD() and @ref CO_UNLOCK_OD() macros.
 262:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * See @ref CO_critical_sections for more information.
 263:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 264:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param stream Object Dictionary stream object.
 265:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param buf Pointer to external buffer, where to data will be copied.
 266:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param count Size of the external buffer in bytes.
 267:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param [out] countRead If return value is "ODR_OK" or "ODR_PARTIAL",
 268:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * then number of bytes successfully read must be returned here.
 269:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 270:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @return Value from @ref ODR_t, "ODR_OK" in case of success.
 271:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      */
 272:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_t (*read)(OD_stream_t *stream, void *buf,
 273:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                   OD_size_t count, OD_size_t *countRead);
 274:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /**
 275:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Function pointer for writing value into specified variable inside Object
 276:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Dictionary. If OD variable is larger than buf, then this function must
 277:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * be called several times. After completed successful write function
 278:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * returns 'ODR_OK'. If write is partial, it returns 'ODR_PARTIAL'. In case
 279:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * of errors function returns code similar to SDO abort code.
 280:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 281:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Write can be restarted with @ref OD_rwRestart() function.
 282:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 283:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * At the moment, when Object Dictionary is initialized, every variable has
 284:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * assigned the same "write" function, which simply copies data to Object
 285:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Dictionary variable. Application can bind its own "write" function,
 286:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * similar as it can bind "read" function.
 287:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 288:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * "write" function must always copy all available data from buf. If OD
 289:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * variable expect more data, then "*returnCode" must return 'ODR_PARTIAL'.
 290:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 291:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @warning When accessing OD variables by calling the read() function, it
 292:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * may be necessary to use @ref CO_LOCK_OD() and @ref CO_UNLOCK_OD() macros.
 293:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * See @ref CO_critical_sections for more information.
 294:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 295:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param stream Object Dictionary stream object.
 296:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param buf Pointer to external buffer, from where data will be copied.
 297:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param count Size of the external buffer in bytes.
 298:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param [out] countWritten If return value is "ODR_OK" or "ODR_PARTIAL",
 299:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * then number of bytes successfully written must be returned here.
 300:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 301:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @return Value from @ref ODR_t, "ODR_OK" in case of success.
 302:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      */
 303:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_t (*write)(OD_stream_t *stream, const void *buf,
 304:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                    OD_size_t count, OD_size_t *countWritten);
 305:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_IO_t;
 306:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 307:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 308:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 309:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Extension of OD object, which can optionally be specified by application in
 310:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * initialization phase with @ref OD_extension_init() function.
 311:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 312:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef struct {
 313:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Object on which read and write will operate, part of @ref OD_stream_t */
 314:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     void *object;
 315:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Application specified read function pointer. If NULL, then read will be
 316:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * disabled. @ref OD_readOriginal can be used here to keep the original read
 317:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * function. For function description see @ref OD_IO_t. */
 318:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_t (*read)(OD_stream_t *stream, void *buf,
 319:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                   OD_size_t count, OD_size_t *countRead);
 320:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Application specified write function pointer. If NULL, then write will
 321:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * be disabled. @ref OD_writeOriginal can be used here to keep the original
 322:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * write function. For function description see @ref OD_IO_t. */
 323:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_t (*write)(OD_stream_t *stream, const void *buf,
 324:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                    OD_size_t count, OD_size_t *countWritten);
 325:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if OD_FLAGS_PDO_SIZE > 0
 326:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /**PDO flags bit-field provides one bit for each OD variable, which exist
 327:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * inside OD object at specific sub index. If application clears that bit,
 328:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * and OD variable is mapped to an event driven TPDO, then TPDO will be
 329:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * sent.
 330:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 331:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @ref OD_FLAGS_PDO_SIZE can have a value from 0 to 32 bytes, which
 332:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * corresponds to 0 to 256 available bits. If, for example,
 333:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @ref OD_FLAGS_PDO_SIZE has value 4, then OD variables with sub index up
 334:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * to 31 will have the TPDO requesting functionality.
 335:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * See also @ref OD_requestTPDO and @ref OD_TPDOtransmitted. */
 336:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint8_t flagsPDO[OD_FLAGS_PDO_SIZE];
 337:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 338:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_extension_t;
 339:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 340:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 341:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 342:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Object Dictionary entry for one OD object.
 343:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 344:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * OD entries are collected inside OD_t as array (list). Each OD entry contains
 345:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * basic information about OD object (index and subEntriesCount), pointer to
 346:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * odObject with additional information about var, array or record entry and
 347:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * pointer to extension, configurable by application.
 348:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 349:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef struct {
 350:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Object Dictionary index */
 351:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint16_t index;
 352:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Number of all sub-entries, including sub-entry at sub-index 0 */
 353:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint8_t subEntriesCount;
 354:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Type of the odObject, indicated by @ref OD_objectTypes_t enumerator. */
 355:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint8_t odObjectType;
 356:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** OD object of type indicated by odObjectType, from which @ref OD_getSub()
 357:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * fetches the information */
 358:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     CO_PROGMEM void *odObject;
 359:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Extension to OD, specified by application */
 360:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_extension_t *extension;
 361:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_entry_t;
 362:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 363:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 364:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 365:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Object Dictionary
 366:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 367:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef struct {
 368:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Number of elements in the list, without last element, which is blank */
 369:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint16_t size;
 370:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** List OD entries (table of contents), ordered by index */
 371:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_entry_t *list;
 372:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_t;
 373:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 374:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 375:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 376:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Read value from original OD location
 377:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 378:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * This function can be used inside read / write functions, specified by
 379:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_extension_init(). It reads data directly from memory location
 380:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * specified by Object dictionary. If no IO extension is used on OD entry, then
 381:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * io->read returned by @ref OD_getSub() equals to this function. See
 382:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * also @ref OD_IO_t.
 383:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 384:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
 385:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                       OD_size_t count, OD_size_t *countRead);
 386:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 387:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 388:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 389:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Write value to original OD location
 390:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 391:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * This function can be used inside read / write functions, specified by
 392:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_extension_init(). It writes data directly to memory location
 393:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * specified by Object dictionary. If no IO extension is used on OD entry, then
 394:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * io->write returned by @ref OD_getSub() equals to this function. See
 395:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * also @ref OD_IO_t.
 396:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 397:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
 398:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                        OD_size_t count, OD_size_t *countWritten);
 399:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 400:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 401:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 402:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Find OD entry in Object Dictionary
 403:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 404:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param od Object Dictionary
 405:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param index CANopen Object Dictionary index of object in Object Dictionary
 406:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 407:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return Pointer to OD entry or NULL if not found
 408:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 409:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** OD_entry_t *OD_find(OD_t *od, uint16_t index);
 410:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 411:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 412:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 413:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Find sub-object with specified sub-index on OD entry returned by OD_find.
 414:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Function populates io structure with sub-object data.
 415:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 416:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @warning
 417:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Read and write functions may be called from different threads, so critical
 418:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * sections in custom functions must be observed, see @ref CO_critical_sections.
 419:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 420:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param entry OD entry returned by @ref OD_find().
 421:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param subIndex Sub-index of the variable from the OD object.
 422:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param [out] io Structure will be populated on success.
 423:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param odOrig If true, then potential IO extension on entry will be
 424:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * ignored and access to data entry in the original OD location will be returned
 425:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 426:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return Value from @ref ODR_t, "ODR_OK" in case of success.
 427:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 428:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
 429:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                 OD_IO_t *io, bool_t odOrig);
 430:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 431:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 432:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 433:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Return index from OD entry
 434:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 435:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param entry OD entry returned by @ref OD_find().
 436:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 437:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return OD index
 438:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 439:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
  71              	 .loc 2 439 0
  72              	 .cfi_startproc
  73              	 
  74              	 
  75              	 
  76 0000 80B4     	 push {r7}
  77              	.LCFI5:
  78              	 .cfi_def_cfa_offset 4
  79              	 .cfi_offset 7,-4
  80 0002 83B0     	 sub sp,sp,#12
  81              	.LCFI6:
  82              	 .cfi_def_cfa_offset 16
  83 0004 00AF     	 add r7,sp,#0
  84              	.LCFI7:
  85              	 .cfi_def_cfa_register 7
  86 0006 7860     	 str r0,[r7,#4]
 440:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return (entry != NULL) ? entry->index : 0;
  87              	 .loc 2 440 0
  88 0008 7B68     	 ldr r3,[r7,#4]
  89 000a 002B     	 cmp r3,#0
  90 000c 02D0     	 beq .L4
  91              	 .loc 2 440 0 is_stmt 0 discriminator 1
  92 000e 7B68     	 ldr r3,[r7,#4]
  93 0010 1B88     	 ldrh r3,[r3]
  94 0012 00E0     	 b .L5
  95              	.L4:
  96              	 .loc 2 440 0 discriminator 2
  97 0014 0023     	 movs r3,#0
  98              	.L5:
 441:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
  99              	 .loc 2 441 0 is_stmt 1 discriminator 4
 100 0016 1846     	 mov r0,r3
 101 0018 0C37     	 adds r7,r7,#12
 102              	.LCFI8:
 103              	 .cfi_def_cfa_offset 4
 104 001a BD46     	 mov sp,r7
 105              	.LCFI9:
 106              	 .cfi_def_cfa_register 13
 107              	 
 108 001c 5DF8047B 	 ldr r7,[sp],#4
 109              	.LCFI10:
 110              	 .cfi_restore 7
 111              	 .cfi_def_cfa_offset 0
 112 0020 7047     	 bx lr
 113              	 .cfi_endproc
 114              	.LFE6:
 116 0022 00BF     	 .section .text.OD_extension_init,"ax",%progbits
 117              	 .align 2
 118              	 .thumb
 119              	 .thumb_func
 121              	OD_extension_init:
 122              	.LFB12:
 442:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 443:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 444:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 445:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Check, if OD variable is mappable to PDO or SRDO.
 446:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 447:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * If OD variable is mappable, then it may be necessary to protect read/write
 448:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * access from mainline function. See @ref CO_critical_sections.
 449:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 450:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param stream Object Dictionary stream object.
 451:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 452:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return true, if OD variable is mappable.
 453:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 454:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline bool_t OD_mappable(OD_stream_t *stream) {
 455:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return (stream != NULL)
 456:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****          ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 457:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 458:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 459:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 460:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 461:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Restart read or write operation on OD variable
 462:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 463:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * It is not necessary to call this function, if stream was initialized by
 464:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_getSub(). It is also not necessary to call this function, if
 465:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * previous read or write was successfully finished.
 466:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 467:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param stream Object Dictionary stream object.
 468:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 469:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline void OD_rwRestart(OD_stream_t *stream) {
 470:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     if (stream != NULL) stream->dataOffset = 0;
 471:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 472:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 473:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 474:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 475:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Get TPDO request flags for OD entry.
 476:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 477:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * flagsPDO can be used for @ref OD_requestTPDO() or @ref OD_TPDOtransmitted().
 478:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 479:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param entry OD entry returned by @ref OD_find().
 480:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 481:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return pointer to flagsPDO
 482:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 483:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline uint8_t *OD_getFlagsPDO(OD_entry_t *entry) {
 484:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if OD_FLAGS_PDO_SIZE > 0
 485:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     if (entry != NULL && entry->extension != NULL) {
 486:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         return &entry->extension->flagsPDO[0];
 487:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     }
 488:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 489:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return 0;
 490:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 491:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 492:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 493:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 494:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Request TPDO, to which OD variable is mapped
 495:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 496:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Function clears the flagPDO bit, which corresponds to OD variable at specific
 497:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * OD index and subindex. For this functionality to work, @ref OD_extension_t
 498:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * must be enabled on OD variable. If OD variable is mapped to any TPDO with
 499:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * event driven transmission, then TPDO will be transmitted after this function
 500:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * call. If OD variable is mapped to more than one TPDO with event driven
 501:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * transmission, only the first matched TPDO will be transmitted.
 502:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 503:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * TPDO event driven transmission is enabled, if TPDO communication parameter,
 504:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * transmission type is set to 0, 254 or 255. For other transmission types
 505:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * (synchronous) flagPDO bit is ignored.
 506:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 507:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param flagsPDO TPDO request flags returned by @ref OD_getFlagsPDO.
 508:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param subIndex subIndex of the OD variable.
 509:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 510:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline void OD_requestTPDO(uint8_t *flagsPDO, uint8_t subIndex) {
 511:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if OD_FLAGS_PDO_SIZE > 0
 512:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     if (flagsPDO != NULL && subIndex < (OD_FLAGS_PDO_SIZE * 8)) {
 513:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         /* clear subIndex-th bit */
 514:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         uint8_t mask = ~(1 << (subIndex & 0x07));
 515:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         flagsPDO[subIndex >> 3] &= mask;
 516:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     }
 517:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 518:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 519:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 520:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 521:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 522:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Check if requested TPDO was transmitted
 523:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 524:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param flagsPDO TPDO request flags returned by @ref OD_getFlagsPDO.
 525:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param subIndex subIndex of the OD variable.
 526:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 527:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return Return true if event driven TPDO with mapping to OD variable,
 528:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * indicated by flagsPDO and subIndex, was transmitted since last
 529:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_requestTPDO call. If there was no @ref OD_requestTPDO call yet and
 530:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * TPDO was transmitted by other event, function also returns true.
 531:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 532:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline bool_t OD_TPDOtransmitted(uint8_t *flagsPDO, uint8_t subIndex) {
 533:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if OD_FLAGS_PDO_SIZE > 0
 534:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     if (flagsPDO != NULL && subIndex < (OD_FLAGS_PDO_SIZE * 8)) {
 535:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         /* return true, if subIndex-th bit is set */
 536:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         uint8_t mask = 1 << (subIndex & 0x07);
 537:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         if ((flagsPDO[subIndex >> 3] & mask) != 0) {
 538:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****             return true;
 539:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         }
 540:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     }
 541:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 542:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return false;
 543:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 544:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 545:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 546:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 547:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Get SDO abort code from returnCode
 548:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 549:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param returnCode Returned from some OD access functions
 550:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 551:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return Corresponding @ref CO_SDO_abortCode_t
 552:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 553:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** uint32_t OD_getSDOabCode(ODR_t returnCode);
 554:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 555:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 556:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 557:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Extend OD object with own read/write functions and/or flagsPDO
 558:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 559:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * This function gives application very powerful tool: definition of own IO
 560:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * access on OD object. Structure and attributes are the same as defined in
 561:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * original OD object, but data are read directly from (or written directly to)
 562:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * application specified object via custom function calls.
 563:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 564:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Before this function specifies extension, OD variables are accessed from
 565:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * original OD location. After this function specifies extension OD variables
 566:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * are accessed from read/write functions specified by extension. (Except when
 567:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * "odOrig" argument to @ref OD_getSub() is set to true.)
 568:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 569:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * This function must also be used, when flagsPDO needs to be enabled for
 570:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * specific entry.
 571:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 572:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @warning
 573:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Object dictionary storage works only directly on OD variables. It does not
 574:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * access read function specified here. So, if extended OD objects needs to be
 575:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * preserved, then @ref OD_writeOriginal can be used inside custom write
 576:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * function.
 577:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 578:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @warning
 579:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Read and write functions may be called from different threads, so critical
 580:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * sections in custom functions must be observed, see @ref CO_critical_sections.
 581:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 582:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param entry OD entry returned by @ref OD_find().
 583:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param extension Extension object, which must be initialized externally.
 584:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Extension object must exist permanently. If NULL, extension will be removed.
 585:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 586:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 587:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 588:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline ODR_t OD_extension_init(OD_entry_t *entry,
 589:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                                       OD_extension_t *extension)
 590:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** {
 123              	 .loc 2 590 0
 124              	 .cfi_startproc
 125              	 
 126              	 
 127              	 
 128 0000 80B4     	 push {r7}
 129              	.LCFI11:
 130              	 .cfi_def_cfa_offset 4
 131              	 .cfi_offset 7,-4
 132 0002 83B0     	 sub sp,sp,#12
 133              	.LCFI12:
 134              	 .cfi_def_cfa_offset 16
 135 0004 00AF     	 add r7,sp,#0
 136              	.LCFI13:
 137              	 .cfi_def_cfa_register 7
 138 0006 7860     	 str r0,[r7,#4]
 139 0008 3960     	 str r1,[r7]
 591:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     if (entry == NULL) return ODR_IDX_NOT_EXIST;
 140              	 .loc 2 591 0
 141 000a 7B68     	 ldr r3,[r7,#4]
 142 000c 002B     	 cmp r3,#0
 143 000e 01D1     	 bne .L8
 144              	 .loc 2 591 0 is_stmt 0 discriminator 1
 145 0010 0523     	 movs r3,#5
 146 0012 03E0     	 b .L9
 147              	.L8:
 592:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     entry->extension = extension;
 148              	 .loc 2 592 0 is_stmt 1
 149 0014 7B68     	 ldr r3,[r7,#4]
 150 0016 3A68     	 ldr r2,[r7]
 151 0018 9A60     	 str r2,[r3,#8]
 593:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return ODR_OK;
 152              	 .loc 2 593 0
 153 001a 0023     	 movs r3,#0
 154              	.L9:
 155 001c 5BB2     	 sxtb r3,r3
 594:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 156              	 .loc 2 594 0
 157 001e 1846     	 mov r0,r3
 158 0020 0C37     	 adds r7,r7,#12
 159              	.LCFI14:
 160              	 .cfi_def_cfa_offset 4
 161 0022 BD46     	 mov sp,r7
 162              	.LCFI15:
 163              	 .cfi_def_cfa_register 13
 164              	 
 165 0024 5DF8047B 	 ldr r7,[sp],#4
 166              	.LCFI16:
 167              	 .cfi_restore 7
 168              	 .cfi_def_cfa_offset 0
 169 0028 7047     	 bx lr
 170              	 .cfi_endproc
 171              	.LFE12:
 173 002a 00BF     	 .section .text.OD_get_u32,"ax",%progbits
 174              	 .align 2
 175              	 .thumb
 176              	 .thumb_func
 178              	OD_get_u32:
 179              	.LFB19:
 595:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 596:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 597:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 598:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @defgroup CO_ODgetSetters Getters and setters
 599:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @{
 600:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 601:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Getter and setter helper functions for accessing different types of Object
 602:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Dictionary variables.
 603:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 604:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 605:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Get variable from Object Dictionary
 606:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 607:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param entry OD entry returned by @ref OD_find().
 608:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param subIndex Sub-index of the variable from the OD object.
 609:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param [out] val Value will be written here.
 610:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param len Size of value to retrieve from OD.
 611:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param odOrig If true, then potential IO extension on entry will be
 612:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * ignored and data in the original OD location will be returned.
 613:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 614:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return Value from @ref ODR_t, "ODR_OK" in case of success. Error, if
 615:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * variable does not exist in object dictionary or it does not have the correct
 616:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * length or other reason.
 617:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 618:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
 619:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                    void *val, OD_size_t len, bool_t odOrig);
 620:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 621:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Get int8_t variable from Object Dictionary, see @ref OD_get_value */
 622:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline ODR_t OD_get_i8(const OD_entry_t *entry, uint8_t subIndex,
 623:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                               int8_t *val, bool_t odOrig)
 624:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** {
 625:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if C2000_PORT != 0
 626:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, 1, odOrig);
 627:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #else
 628:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 629:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 630:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 631:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 632:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Get int16_t variable from Object Dictionary, see @ref OD_get_value */
 633:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline ODR_t OD_get_i16(const OD_entry_t *entry, uint8_t subIndex,
 634:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                                int16_t *val, bool_t odOrig)
 635:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** {
 636:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if C2000_PORT != 0
 637:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, 2, odOrig);
 638:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #else
 639:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 640:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 641:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 642:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 643:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Get int32_t variable from Object Dictionary, see @ref OD_get_value */
 644:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline ODR_t OD_get_i32(const OD_entry_t *entry, uint8_t subIndex,
 645:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                                int32_t *val, bool_t odOrig)
 646:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** {
 647:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if C2000_PORT != 0
 648:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, 4, odOrig);
 649:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #else
 650:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 651:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 652:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 653:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 654:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Get int64_t variable from Object Dictionary, see @ref OD_get_value */
 655:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline ODR_t OD_get_i64(const OD_entry_t *entry, uint8_t subIndex,
 656:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                                int64_t *val, bool_t odOrig)
 657:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** {
 658:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if C2000_PORT != 0
 659:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, 8, odOrig);
 660:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #else
 661:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 662:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 663:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 664:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 665:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Get uint8_t variable from Object Dictionary, see @ref OD_get_value */
 666:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline ODR_t OD_get_u8(const OD_entry_t *entry, uint8_t subIndex,
 667:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                               uint8_t *val, bool_t odOrig)
 668:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** {
 669:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if C2000_PORT != 0
 670:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, 1, odOrig);
 671:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #else
 672:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 673:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 674:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 675:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 676:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Get uint16_t variable from Object Dictionary, see @ref OD_get_value */
 677:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline ODR_t OD_get_u16(const OD_entry_t *entry, uint8_t subIndex,
 678:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                                uint16_t *val, bool_t odOrig)
 679:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** {
 680:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if C2000_PORT != 0
 681:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, 2, odOrig);
 682:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #else
 683:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 684:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 685:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 686:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 687:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
 688:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
 689:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                                uint32_t *val, bool_t odOrig)
 690:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** {
 180              	 .loc 2 690 0
 181              	 .cfi_startproc
 182              	 
 183              	 
 184 0000 80B5     	 push {r7,lr}
 185              	.LCFI17:
 186              	 .cfi_def_cfa_offset 8
 187              	 .cfi_offset 7,-8
 188              	 .cfi_offset 14,-4
 189 0002 86B0     	 sub sp,sp,#24
 190              	.LCFI18:
 191              	 .cfi_def_cfa_offset 32
 192 0004 02AF     	 add r7,sp,#8
 193              	.LCFI19:
 194              	 .cfi_def_cfa 7,24
 195 0006 F860     	 str r0,[r7,#12]
 196 0008 7A60     	 str r2,[r7,#4]
 197 000a 3B60     	 str r3,[r7]
 198 000c 0B46     	 mov r3,r1
 199 000e FB72     	 strb r3,[r7,#11]
 691:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if C2000_PORT != 0
 692:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, 4, odOrig);
 693:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #else
 694:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 200              	 .loc 2 694 0
 201 0010 FA7A     	 ldrb r2,[r7,#11]
 202 0012 3B68     	 ldr r3,[r7]
 203 0014 0093     	 str r3,[sp]
 204 0016 F868     	 ldr r0,[r7,#12]
 205 0018 1146     	 mov r1,r2
 206 001a 7A68     	 ldr r2,[r7,#4]
 207 001c 0423     	 movs r3,#4
 208 001e FFF7FEFF 	 bl OD_get_value
 209 0022 0346     	 mov r3,r0
 695:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 696:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 210              	 .loc 2 696 0
 211 0024 1846     	 mov r0,r3
 212 0026 1037     	 adds r7,r7,#16
 213              	.LCFI20:
 214              	 .cfi_def_cfa_offset 8
 215 0028 BD46     	 mov sp,r7
 216              	.LCFI21:
 217              	 .cfi_def_cfa_register 13
 218              	 
 219 002a 80BD     	 pop {r7,pc}
 220              	 .cfi_endproc
 221              	.LFE19:
 223              	 .section .text.CO_HBcons_receive,"ax",%progbits
 224              	 .align 2
 225              	 .thumb
 226              	 .thumb_func
 228              	CO_HBcons_receive:
 229              	.LFB37:
 230              	 .file 3 "../CANopen/stack/301/CO_HBconsumer.c"
   1:../CANopen/stack/301/CO_HBconsumer.c **** /*
   2:../CANopen/stack/301/CO_HBconsumer.c ****  * CANopen Heartbeat consumer object.
   3:../CANopen/stack/301/CO_HBconsumer.c ****  *
   4:../CANopen/stack/301/CO_HBconsumer.c ****  * @file        CO_HBconsumer.c
   5:../CANopen/stack/301/CO_HBconsumer.c ****  * @ingroup     CO_HBconsumer
   6:../CANopen/stack/301/CO_HBconsumer.c ****  * @author      Janez Paternoster
   7:../CANopen/stack/301/CO_HBconsumer.c ****  * @copyright   2021 Janez Paternoster
   8:../CANopen/stack/301/CO_HBconsumer.c ****  *
   9:../CANopen/stack/301/CO_HBconsumer.c ****  * This file is part of CANopenNode, an opensource CANopen Stack.
  10:../CANopen/stack/301/CO_HBconsumer.c ****  * Project home page is <https://github.com/CANopenNode/CANopenNode>.
  11:../CANopen/stack/301/CO_HBconsumer.c ****  * For more information on CANopen see <http://www.can-cia.org/>.
  12:../CANopen/stack/301/CO_HBconsumer.c ****  *
  13:../CANopen/stack/301/CO_HBconsumer.c ****  * Licensed under the Apache License, Version 2.0 (the "License");
  14:../CANopen/stack/301/CO_HBconsumer.c ****  * you may not use this file except in compliance with the License.
  15:../CANopen/stack/301/CO_HBconsumer.c ****  * You may obtain a copy of the License at
  16:../CANopen/stack/301/CO_HBconsumer.c ****  *
  17:../CANopen/stack/301/CO_HBconsumer.c ****  *     http://www.apache.org/licenses/LICENSE-2.0
  18:../CANopen/stack/301/CO_HBconsumer.c ****  *
  19:../CANopen/stack/301/CO_HBconsumer.c ****  * Unless required by applicable law or agreed to in writing, software
  20:../CANopen/stack/301/CO_HBconsumer.c ****  * distributed under the License is distributed on an "AS IS" BASIS,
  21:../CANopen/stack/301/CO_HBconsumer.c ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:../CANopen/stack/301/CO_HBconsumer.c ****  * See the License for the specific language governing permissions and
  23:../CANopen/stack/301/CO_HBconsumer.c ****  * limitations under the License.
  24:../CANopen/stack/301/CO_HBconsumer.c ****  */
  25:../CANopen/stack/301/CO_HBconsumer.c **** 
  26:../CANopen/stack/301/CO_HBconsumer.c **** #include "301/CO_HBconsumer.h"
  27:../CANopen/stack/301/CO_HBconsumer.c **** 
  28:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
  29:../CANopen/stack/301/CO_HBconsumer.c **** 
  30:../CANopen/stack/301/CO_HBconsumer.c **** /* Verify HB consumer configuration *******************************************/
  31:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
  32:../CANopen/stack/301/CO_HBconsumer.c ****     && (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
  33:../CANopen/stack/301/CO_HBconsumer.c **** #error CO_CONFIG_HB_CONS_CALLBACK_CHANGE and CO_CONFIG_HB_CONS_CALLBACK_MULTI cannot be set simulta
  34:../CANopen/stack/301/CO_HBconsumer.c **** #endif
  35:../CANopen/stack/301/CO_HBconsumer.c **** 
  36:../CANopen/stack/301/CO_HBconsumer.c **** /*
  37:../CANopen/stack/301/CO_HBconsumer.c ****  * Read received message from CAN module.
  38:../CANopen/stack/301/CO_HBconsumer.c ****  *
  39:../CANopen/stack/301/CO_HBconsumer.c ****  * Function will be called (by CAN receive interrupt) every time, when CAN
  40:../CANopen/stack/301/CO_HBconsumer.c ****  * message with correct identifier will be received. For more information and
  41:../CANopen/stack/301/CO_HBconsumer.c ****  * description of parameters see file CO_driver.h.
  42:../CANopen/stack/301/CO_HBconsumer.c ****  */
  43:../CANopen/stack/301/CO_HBconsumer.c **** static void CO_HBcons_receive(void *object, void *msg) {
 231              	 .loc 3 43 0
 232              	 .cfi_startproc
 233              	 
 234              	 
 235              	 
 236 0000 80B4     	 push {r7}
 237              	.LCFI22:
 238              	 .cfi_def_cfa_offset 4
 239              	 .cfi_offset 7,-4
 240 0002 87B0     	 sub sp,sp,#28
 241              	.LCFI23:
 242              	 .cfi_def_cfa_offset 32
 243 0004 00AF     	 add r7,sp,#0
 244              	.LCFI24:
 245              	 .cfi_def_cfa_register 7
 246 0006 7860     	 str r0,[r7,#4]
 247 0008 3960     	 str r1,[r7]
  44:../CANopen/stack/301/CO_HBconsumer.c ****     CO_HBconsNode_t *HBconsNode = object;
 248              	 .loc 3 44 0
 249 000a 7B68     	 ldr r3,[r7,#4]
 250 000c 7B61     	 str r3,[r7,#20]
  45:../CANopen/stack/301/CO_HBconsumer.c ****     uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 251              	 .loc 3 45 0
 252 000e 3B68     	 ldr r3,[r7]
 253 0010 1B79     	 ldrb r3,[r3,#4]
 254 0012 FB74     	 strb r3,[r7,#19]
  46:../CANopen/stack/301/CO_HBconsumer.c ****     uint8_t *data = CO_CANrxMsg_readData(msg);
 255              	 .loc 3 46 0
 256 0014 3B68     	 ldr r3,[r7]
 257 0016 0533     	 adds r3,r3,#5
 258 0018 FB60     	 str r3,[r7,#12]
  47:../CANopen/stack/301/CO_HBconsumer.c **** 
  48:../CANopen/stack/301/CO_HBconsumer.c ****     if (DLC == 1) {
 259              	 .loc 3 48 0
 260 001a FB7C     	 ldrb r3,[r7,#19]
 261 001c 012B     	 cmp r3,#1
 262 001e 07D1     	 bne .L12
  49:../CANopen/stack/301/CO_HBconsumer.c ****         /* copy data and set 'new message' flag. */
  50:../CANopen/stack/301/CO_HBconsumer.c ****         HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 263              	 .loc 3 50 0
 264 0020 FB68     	 ldr r3,[r7,#12]
 265 0022 1B78     	 ldrb r3,[r3]
 266 0024 DAB2     	 uxtb r2,r3
 267 0026 7B69     	 ldr r3,[r7,#20]
 268 0028 5A70     	 strb r2,[r3,#1]
  51:../CANopen/stack/301/CO_HBconsumer.c ****         CO_FLAG_SET(HBconsNode->CANrxNew);
 269              	 .loc 3 51 0
 270 002a 7B69     	 ldr r3,[r7,#20]
 271 002c 0122     	 movs r2,#1
 272 002e DA60     	 str r2,[r3,#12]
 273              	.L12:
  52:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_CALLBACK_PRE
  53:../CANopen/stack/301/CO_HBconsumer.c ****         /* Optional signal to RTOS, which can resume task, which handles HBcons. */
  54:../CANopen/stack/301/CO_HBconsumer.c ****         if (HBconsNode->pFunctSignalPre != NULL) {
  55:../CANopen/stack/301/CO_HBconsumer.c ****             HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
  56:../CANopen/stack/301/CO_HBconsumer.c ****         }
  57:../CANopen/stack/301/CO_HBconsumer.c **** #endif
  58:../CANopen/stack/301/CO_HBconsumer.c ****     }
  59:../CANopen/stack/301/CO_HBconsumer.c **** }
 274              	 .loc 3 59 0
 275 0030 1C37     	 adds r7,r7,#28
 276              	.LCFI25:
 277              	 .cfi_def_cfa_offset 4
 278 0032 BD46     	 mov sp,r7
 279              	.LCFI26:
 280              	 .cfi_def_cfa_register 13
 281              	 
 282 0034 5DF8047B 	 ldr r7,[sp],#4
 283              	.LCFI27:
 284              	 .cfi_restore 7
 285              	 .cfi_def_cfa_offset 0
 286 0038 7047     	 bx lr
 287              	 .cfi_endproc
 288              	.LFE37:
 290              	 .section .text.OD_write_1016,"ax",%progbits
 291              	 .align 2
 292              	 .thumb
 293              	 .thumb_func
 295              	OD_write_1016:
 296              	.LFB38:
  60:../CANopen/stack/301/CO_HBconsumer.c **** 
  61:../CANopen/stack/301/CO_HBconsumer.c **** 
  62:../CANopen/stack/301/CO_HBconsumer.c **** /*
  63:../CANopen/stack/301/CO_HBconsumer.c ****  * Initialize one Heartbeat consumer entry
  64:../CANopen/stack/301/CO_HBconsumer.c ****  *
  65:../CANopen/stack/301/CO_HBconsumer.c ****  * This function is called from the @ref CO_HBconsumer_init() or when writing
  66:../CANopen/stack/301/CO_HBconsumer.c ****  * to OD entry 1016.
  67:../CANopen/stack/301/CO_HBconsumer.c ****  *
  68:../CANopen/stack/301/CO_HBconsumer.c ****  * @param HBcons This object.
  69:../CANopen/stack/301/CO_HBconsumer.c ****  * @param idx index of the node in HBcons object
  70:../CANopen/stack/301/CO_HBconsumer.c ****  * @param nodeId see OD 0x1016 description
  71:../CANopen/stack/301/CO_HBconsumer.c ****  * @param consumerTime_ms in milliseconds. see OD 0x1016 description
  72:../CANopen/stack/301/CO_HBconsumer.c ****  * @return
  73:../CANopen/stack/301/CO_HBconsumer.c ****  */
  74:../CANopen/stack/301/CO_HBconsumer.c **** static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
  75:../CANopen/stack/301/CO_HBconsumer.c ****                                                 uint8_t idx,
  76:../CANopen/stack/301/CO_HBconsumer.c ****                                                 uint8_t nodeId,
  77:../CANopen/stack/301/CO_HBconsumer.c ****                                                 uint16_t consumerTime_ms);
  78:../CANopen/stack/301/CO_HBconsumer.c **** 
  79:../CANopen/stack/301/CO_HBconsumer.c **** 
  80:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
  81:../CANopen/stack/301/CO_HBconsumer.c **** /*
  82:../CANopen/stack/301/CO_HBconsumer.c ****  * Custom function for writing OD object "Consumer heartbeat time"
  83:../CANopen/stack/301/CO_HBconsumer.c ****  *
  84:../CANopen/stack/301/CO_HBconsumer.c ****  * For more information see file CO_ODinterface.h, OD_IO_t.
  85:../CANopen/stack/301/CO_HBconsumer.c ****  */
  86:../CANopen/stack/301/CO_HBconsumer.c **** static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
  87:../CANopen/stack/301/CO_HBconsumer.c ****                            OD_size_t count, OD_size_t *countWritten)
  88:../CANopen/stack/301/CO_HBconsumer.c **** {
 297              	 .loc 3 88 0
 298              	 .cfi_startproc
 299              	 
 300              	 
 301 0000 80B5     	 push {r7,lr}
 302              	.LCFI28:
 303              	 .cfi_def_cfa_offset 8
 304              	 .cfi_offset 7,-8
 305              	 .cfi_offset 14,-4
 306 0002 88B0     	 sub sp,sp,#32
 307              	.LCFI29:
 308              	 .cfi_def_cfa_offset 40
 309 0004 00AF     	 add r7,sp,#0
 310              	.LCFI30:
 311              	 .cfi_def_cfa_register 7
 312 0006 F860     	 str r0,[r7,#12]
 313 0008 B960     	 str r1,[r7,#8]
 314 000a 7A60     	 str r2,[r7,#4]
 315 000c 3B60     	 str r3,[r7]
  89:../CANopen/stack/301/CO_HBconsumer.c ****     CO_HBconsumer_t *HBcons = stream->object;
 316              	 .loc 3 89 0
 317 000e FB68     	 ldr r3,[r7,#12]
 318 0010 5B68     	 ldr r3,[r3,#4]
 319 0012 FB61     	 str r3,[r7,#28]
  90:../CANopen/stack/301/CO_HBconsumer.c **** 
  91:../CANopen/stack/301/CO_HBconsumer.c ****     if (stream == NULL || buf == NULL
 320              	 .loc 3 91 0
 321 0014 FB68     	 ldr r3,[r7,#12]
 322 0016 002B     	 cmp r3,#0
 323 0018 12D0     	 beq .L15
 324              	 .loc 3 91 0 is_stmt 0 discriminator 1
 325 001a BB68     	 ldr r3,[r7,#8]
 326 001c 002B     	 cmp r3,#0
 327 001e 0FD0     	 beq .L15
  92:../CANopen/stack/301/CO_HBconsumer.c ****         || stream->subIndex < 1
 328              	 .loc 3 92 0 is_stmt 1
 329 0020 FB68     	 ldr r3,[r7,#12]
 330 0022 5B7C     	 ldrb r3,[r3,#17]
 331 0024 002B     	 cmp r3,#0
 332 0026 0BD0     	 beq .L15
  93:../CANopen/stack/301/CO_HBconsumer.c ****         || stream->subIndex > HBcons->numberOfMonitoredNodes
 333              	 .loc 3 93 0
 334 0028 FB68     	 ldr r3,[r7,#12]
 335 002a 5A7C     	 ldrb r2,[r3,#17]
 336 002c FB69     	 ldr r3,[r7,#28]
 337 002e 1B7A     	 ldrb r3,[r3,#8]
 338 0030 9A42     	 cmp r2,r3
 339 0032 05D8     	 bhi .L15
  94:../CANopen/stack/301/CO_HBconsumer.c ****         || count != sizeof(uint32_t) || countWritten == NULL
 340              	 .loc 3 94 0
 341 0034 7B68     	 ldr r3,[r7,#4]
 342 0036 042B     	 cmp r3,#4
 343 0038 02D1     	 bne .L15
 344              	 .loc 3 94 0 is_stmt 0 discriminator 1
 345 003a 3B68     	 ldr r3,[r7]
 346 003c 002B     	 cmp r3,#0
 347 003e 01D1     	 bne .L16
 348              	.L15:
  95:../CANopen/stack/301/CO_HBconsumer.c ****     ) {
  96:../CANopen/stack/301/CO_HBconsumer.c ****         return ODR_DEV_INCOMPAT;
 349              	 .loc 3 96 0 is_stmt 1
 350 0040 0923     	 movs r3,#9
 351 0042 20E0     	 b .L17
 352              	.L16:
  97:../CANopen/stack/301/CO_HBconsumer.c ****     }
  98:../CANopen/stack/301/CO_HBconsumer.c **** 
  99:../CANopen/stack/301/CO_HBconsumer.c ****     uint32_t val = CO_getUint32(buf);
 353              	 .loc 3 99 0
 354 0044 B868     	 ldr r0,[r7,#8]
 355 0046 FFF7FEFF 	 bl CO_getUint32
 356 004a B861     	 str r0,[r7,#24]
 100:../CANopen/stack/301/CO_HBconsumer.c ****     uint8_t nodeId = (val >> 16) & 0xFF;
 357              	 .loc 3 100 0
 358 004c BB69     	 ldr r3,[r7,#24]
 359 004e 1B0C     	 lsrs r3,r3,#16
 360 0050 FB75     	 strb r3,[r7,#23]
 101:../CANopen/stack/301/CO_HBconsumer.c ****     uint16_t time = val & 0xFFFF;
 361              	 .loc 3 101 0
 362 0052 BB69     	 ldr r3,[r7,#24]
 363 0054 BB82     	 strh r3,[r7,#20]
 102:../CANopen/stack/301/CO_HBconsumer.c ****     CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 364              	 .loc 3 102 0
 365 0056 FB68     	 ldr r3,[r7,#12]
 366 0058 5B7C     	 ldrb r3,[r3,#17]
 367 005a 013B     	 subs r3,r3,#1
 368 005c D9B2     	 uxtb r1,r3
 369 005e FA7D     	 ldrb r2,[r7,#23]
 370 0060 BB8A     	 ldrh r3,[r7,#20]
 371 0062 F869     	 ldr r0,[r7,#28]
 372 0064 FFF7FEFF 	 bl CO_HBconsumer_initEntry
 373 0068 0346     	 mov r3,r0
 374 006a FB74     	 strb r3,[r7,#19]
 103:../CANopen/stack/301/CO_HBconsumer.c ****                                                    nodeId, time);
 104:../CANopen/stack/301/CO_HBconsumer.c ****     if (ret != CO_ERROR_NO) {
 375              	 .loc 3 104 0
 376 006c 97F91330 	 ldrsb r3,[r7,#19]
 377 0070 002B     	 cmp r3,#0
 378 0072 01D0     	 beq .L18
 105:../CANopen/stack/301/CO_HBconsumer.c ****         return ODR_PAR_INCOMPAT;
 379              	 .loc 3 105 0
 380 0074 0823     	 movs r3,#8
 381 0076 06E0     	 b .L17
 382              	.L18:
 106:../CANopen/stack/301/CO_HBconsumer.c ****     }
 107:../CANopen/stack/301/CO_HBconsumer.c **** 
 108:../CANopen/stack/301/CO_HBconsumer.c ****     /* write value to the original location in the Object Dictionary */
 109:../CANopen/stack/301/CO_HBconsumer.c ****     return OD_writeOriginal(stream, buf, count, countWritten);
 383              	 .loc 3 109 0
 384 0078 F868     	 ldr r0,[r7,#12]
 385 007a B968     	 ldr r1,[r7,#8]
 386 007c 7A68     	 ldr r2,[r7,#4]
 387 007e 3B68     	 ldr r3,[r7]
 388 0080 FFF7FEFF 	 bl OD_writeOriginal
 389 0084 0346     	 mov r3,r0
 390              	.L17:
 391 0086 5BB2     	 sxtb r3,r3
 110:../CANopen/stack/301/CO_HBconsumer.c **** }
 392              	 .loc 3 110 0
 393 0088 1846     	 mov r0,r3
 394 008a 2037     	 adds r7,r7,#32
 395              	.LCFI31:
 396              	 .cfi_def_cfa_offset 8
 397 008c BD46     	 mov sp,r7
 398              	.LCFI32:
 399              	 .cfi_def_cfa_register 13
 400              	 
 401 008e 80BD     	 pop {r7,pc}
 402              	 .cfi_endproc
 403              	.LFE38:
 405              	 .section .text.CO_HBconsumer_init,"ax",%progbits
 406              	 .align 2
 407              	 .global CO_HBconsumer_init
 408              	 .thumb
 409              	 .thumb_func
 411              	CO_HBconsumer_init:
 412              	.LFB39:
 111:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 112:../CANopen/stack/301/CO_HBconsumer.c **** 
 113:../CANopen/stack/301/CO_HBconsumer.c **** 
 114:../CANopen/stack/301/CO_HBconsumer.c **** /******************************************************************************/
 115:../CANopen/stack/301/CO_HBconsumer.c **** CO_ReturnError_t CO_HBconsumer_init(CO_HBconsumer_t *HBcons,
 116:../CANopen/stack/301/CO_HBconsumer.c ****                                     CO_EM_t *em,
 117:../CANopen/stack/301/CO_HBconsumer.c ****                                     CO_HBconsNode_t *monitoredNodes,
 118:../CANopen/stack/301/CO_HBconsumer.c ****                                     uint8_t monitoredNodesCount,
 119:../CANopen/stack/301/CO_HBconsumer.c ****                                     OD_entry_t *OD_1016_HBcons,
 120:../CANopen/stack/301/CO_HBconsumer.c ****                                     CO_CANmodule_t *CANdevRx,
 121:../CANopen/stack/301/CO_HBconsumer.c ****                                     uint16_t CANdevRxIdxStart,
 122:../CANopen/stack/301/CO_HBconsumer.c ****                                     uint32_t *errInfo)
 123:../CANopen/stack/301/CO_HBconsumer.c **** {
 413              	 .loc 3 123 0
 414              	 .cfi_startproc
 415              	 
 416              	 
 417 0000 80B5     	 push {r7,lr}
 418              	.LCFI33:
 419              	 .cfi_def_cfa_offset 8
 420              	 .cfi_offset 7,-8
 421              	 .cfi_offset 14,-4
 422 0002 88B0     	 sub sp,sp,#32
 423              	.LCFI34:
 424              	 .cfi_def_cfa_offset 40
 425 0004 00AF     	 add r7,sp,#0
 426              	.LCFI35:
 427              	 .cfi_def_cfa_register 7
 428 0006 F860     	 str r0,[r7,#12]
 429 0008 B960     	 str r1,[r7,#8]
 430 000a 7A60     	 str r2,[r7,#4]
 431 000c FB70     	 strb r3,[r7,#3]
 124:../CANopen/stack/301/CO_HBconsumer.c ****     ODR_t odRet;
 125:../CANopen/stack/301/CO_HBconsumer.c **** 
 126:../CANopen/stack/301/CO_HBconsumer.c ****     /* verify arguments */
 127:../CANopen/stack/301/CO_HBconsumer.c ****     if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 432              	 .loc 3 127 0
 433 000e FB68     	 ldr r3,[r7,#12]
 434 0010 002B     	 cmp r3,#0
 435 0012 0BD0     	 beq .L20
 436              	 .loc 3 127 0 is_stmt 0 discriminator 1
 437 0014 BB68     	 ldr r3,[r7,#8]
 438 0016 002B     	 cmp r3,#0
 439 0018 08D0     	 beq .L20
 440              	 .loc 3 127 0 discriminator 2
 441 001a 7B68     	 ldr r3,[r7,#4]
 442 001c 002B     	 cmp r3,#0
 443 001e 05D0     	 beq .L20
 128:../CANopen/stack/301/CO_HBconsumer.c ****         || OD_1016_HBcons == NULL || CANdevRx == NULL
 444              	 .loc 3 128 0 is_stmt 1
 445 0020 BB6A     	 ldr r3,[r7,#40]
 446 0022 002B     	 cmp r3,#0
 447 0024 02D0     	 beq .L20
 448              	 .loc 3 128 0 is_stmt 0 discriminator 1
 449 0026 FB6A     	 ldr r3,[r7,#44]
 450 0028 002B     	 cmp r3,#0
 451 002a 01D1     	 bne .L21
 452              	.L20:
 129:../CANopen/stack/301/CO_HBconsumer.c ****     ) {
 130:../CANopen/stack/301/CO_HBconsumer.c ****         return CO_ERROR_ILLEGAL_ARGUMENT;
 453              	 .loc 3 130 0 is_stmt 1
 454 002c FF23     	 movs r3,#255
 455 002e 86E0     	 b .L22
 456              	.L21:
 131:../CANopen/stack/301/CO_HBconsumer.c ****     }
 132:../CANopen/stack/301/CO_HBconsumer.c **** 
 133:../CANopen/stack/301/CO_HBconsumer.c ****     /* Configure object variables */
 134:../CANopen/stack/301/CO_HBconsumer.c ****     memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 457              	 .loc 3 134 0
 458 0030 F868     	 ldr r0,[r7,#12]
 459 0032 0021     	 movs r1,#0
 460 0034 3022     	 movs r2,#48
 461 0036 FFF7FEFF 	 bl memset
 135:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->em = em;
 462              	 .loc 3 135 0
 463 003a FB68     	 ldr r3,[r7,#12]
 464 003c BA68     	 ldr r2,[r7,#8]
 465 003e 1A60     	 str r2,[r3]
 136:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->monitoredNodes = monitoredNodes;
 466              	 .loc 3 136 0
 467 0040 FB68     	 ldr r3,[r7,#12]
 468 0042 7A68     	 ldr r2,[r7,#4]
 469 0044 5A60     	 str r2,[r3,#4]
 137:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->CANdevRx = CANdevRx;
 470              	 .loc 3 137 0
 471 0046 FB68     	 ldr r3,[r7,#12]
 472 0048 FA6A     	 ldr r2,[r7,#44]
 473 004a 9A61     	 str r2,[r3,#24]
 138:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 474              	 .loc 3 138 0
 475 004c FB68     	 ldr r3,[r7,#12]
 476 004e 3A8E     	 ldrh r2,[r7,#48]
 477 0050 9A83     	 strh r2,[r3,#28]
 139:../CANopen/stack/301/CO_HBconsumer.c **** 
 140:../CANopen/stack/301/CO_HBconsumer.c ****     /* get actual number of monitored nodes */
 141:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->numberOfMonitoredNodes =
 142:../CANopen/stack/301/CO_HBconsumer.c ****         OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 143:../CANopen/stack/301/CO_HBconsumer.c ****         OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 478              	 .loc 3 143 0
 479 0052 FA78     	 ldrb r2,[r7,#3]
 480 0054 BB6A     	 ldr r3,[r7,#40]
 481 0056 9B78     	 ldrb r3,[r3,#2]
 482 0058 013B     	 subs r3,r3,#1
 483 005a 9342     	 cmp r3,r2
 484 005c A8BF     	 it ge
 485 005e 1346     	 movge r3,r2
 141:../CANopen/stack/301/CO_HBconsumer.c ****         OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 486              	 .loc 3 141 0
 487 0060 DAB2     	 uxtb r2,r3
 488 0062 FB68     	 ldr r3,[r7,#12]
 489 0064 1A72     	 strb r2,[r3,#8]
 490              	.LBB2:
 144:../CANopen/stack/301/CO_HBconsumer.c **** 
 145:../CANopen/stack/301/CO_HBconsumer.c ****     for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 491              	 .loc 3 145 0
 492 0066 0023     	 movs r3,#0
 493 0068 FB77     	 strb r3,[r7,#31]
 494 006a 41E0     	 b .L23
 495              	.L29:
 496              	.LBB3:
 146:../CANopen/stack/301/CO_HBconsumer.c ****         uint32_t val;
 147:../CANopen/stack/301/CO_HBconsumer.c ****         odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 497              	 .loc 3 147 0
 498 006c FB7F     	 ldrb r3,[r7,#31]
 499 006e 0133     	 adds r3,r3,#1
 500 0070 DAB2     	 uxtb r2,r3
 501 0072 07F11403 	 add r3,r7,#20
 502 0076 B86A     	 ldr r0,[r7,#40]
 503 0078 1146     	 mov r1,r2
 504 007a 1A46     	 mov r2,r3
 505 007c 0123     	 movs r3,#1
 506 007e FFF7FEFF 	 bl OD_get_u32
 507 0082 0346     	 mov r3,r0
 508 0084 BB77     	 strb r3,[r7,#30]
 148:../CANopen/stack/301/CO_HBconsumer.c ****         if (odRet != ODR_OK) {
 509              	 .loc 3 148 0
 510 0086 97F91E30 	 ldrsb r3,[r7,#30]
 511 008a 002B     	 cmp r3,#0
 512 008c 0BD0     	 beq .L24
 149:../CANopen/stack/301/CO_HBconsumer.c ****             if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 513              	 .loc 3 149 0
 514 008e 7B6B     	 ldr r3,[r7,#52]
 515 0090 002B     	 cmp r3,#0
 516 0092 06D0     	 beq .L25
 517              	 .loc 3 149 0 is_stmt 0 discriminator 1
 518 0094 B86A     	 ldr r0,[r7,#40]
 519 0096 FFF7FEFF 	 bl OD_getIndex
 520 009a 0346     	 mov r3,r0
 521 009c 1A46     	 mov r2,r3
 522 009e 7B6B     	 ldr r3,[r7,#52]
 523 00a0 1A60     	 str r2,[r3]
 524              	.L25:
 150:../CANopen/stack/301/CO_HBconsumer.c ****             return CO_ERROR_OD_PARAMETERS;
 525              	 .loc 3 150 0 is_stmt 1
 526 00a2 F423     	 movs r3,#244
 527 00a4 4BE0     	 b .L22
 528              	.L24:
 151:../CANopen/stack/301/CO_HBconsumer.c ****         }
 152:../CANopen/stack/301/CO_HBconsumer.c **** 
 153:../CANopen/stack/301/CO_HBconsumer.c ****         uint8_t nodeId = (val >> 16) & 0xFF;
 529              	 .loc 3 153 0
 530 00a6 7B69     	 ldr r3,[r7,#20]
 531 00a8 1B0C     	 lsrs r3,r3,#16
 532 00aa 7B77     	 strb r3,[r7,#29]
 154:../CANopen/stack/301/CO_HBconsumer.c ****         uint16_t time = val & 0xFFFF;
 533              	 .loc 3 154 0
 534 00ac 7B69     	 ldr r3,[r7,#20]
 535 00ae 7B83     	 strh r3,[r7,#26]
 155:../CANopen/stack/301/CO_HBconsumer.c ****         CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 536              	 .loc 3 155 0
 537 00b0 F97F     	 ldrb r1,[r7,#31]
 538 00b2 7A7F     	 ldrb r2,[r7,#29]
 539 00b4 7B8B     	 ldrh r3,[r7,#26]
 540 00b6 F868     	 ldr r0,[r7,#12]
 541 00b8 FFF7FEFF 	 bl CO_HBconsumer_initEntry
 542 00bc 0346     	 mov r3,r0
 543 00be 7B76     	 strb r3,[r7,#25]
 156:../CANopen/stack/301/CO_HBconsumer.c ****         if (ret != CO_ERROR_NO) {
 544              	 .loc 3 156 0
 545 00c0 97F91930 	 ldrsb r3,[r7,#25]
 546 00c4 002B     	 cmp r3,#0
 547 00c6 10D0     	 beq .L27
 157:../CANopen/stack/301/CO_HBconsumer.c ****             if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 548              	 .loc 3 157 0
 549 00c8 7B6B     	 ldr r3,[r7,#52]
 550 00ca 002B     	 cmp r3,#0
 551 00cc 06D0     	 beq .L28
 552              	 .loc 3 157 0 is_stmt 0 discriminator 1
 553 00ce B86A     	 ldr r0,[r7,#40]
 554 00d0 FFF7FEFF 	 bl OD_getIndex
 555 00d4 0346     	 mov r3,r0
 556 00d6 1A46     	 mov r2,r3
 557 00d8 7B6B     	 ldr r3,[r7,#52]
 558 00da 1A60     	 str r2,[r3]
 559              	.L28:
 158:../CANopen/stack/301/CO_HBconsumer.c ****             /* don't break a program, if only value of a parameter is wrong */
 159:../CANopen/stack/301/CO_HBconsumer.c ****             if (ret != CO_ERROR_OD_PARAMETERS)
 560              	 .loc 3 159 0 is_stmt 1
 561 00dc 97F91930 	 ldrsb r3,[r7,#25]
 562 00e0 13F10C0F 	 cmn r3,#12
 563 00e4 01D0     	 beq .L27
 160:../CANopen/stack/301/CO_HBconsumer.c ****                 return ret;
 564              	 .loc 3 160 0
 565 00e6 7B7E     	 ldrb r3,[r7,#25]
 566 00e8 29E0     	 b .L22
 567              	.L27:
 568              	.LBE3:
 145:../CANopen/stack/301/CO_HBconsumer.c ****         uint32_t val;
 569              	 .loc 3 145 0
 570 00ea FB7F     	 ldrb r3,[r7,#31]
 571 00ec 0133     	 adds r3,r3,#1
 572 00ee FB77     	 strb r3,[r7,#31]
 573              	.L23:
 145:../CANopen/stack/301/CO_HBconsumer.c ****         uint32_t val;
 574              	 .loc 3 145 0 is_stmt 0 discriminator 1
 575 00f0 FB68     	 ldr r3,[r7,#12]
 576 00f2 1B7A     	 ldrb r3,[r3,#8]
 577 00f4 FA7F     	 ldrb r2,[r7,#31]
 578 00f6 9A42     	 cmp r2,r3
 579 00f8 B8D3     	 bcc .L29
 580              	.LBE2:
 161:../CANopen/stack/301/CO_HBconsumer.c ****         }
 162:../CANopen/stack/301/CO_HBconsumer.c ****     }
 163:../CANopen/stack/301/CO_HBconsumer.c **** 
 164:../CANopen/stack/301/CO_HBconsumer.c ****     /* configure extension for OD */
 165:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
 166:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->OD_1016_extension.object = HBcons;
 581              	 .loc 3 166 0 is_stmt 1
 582 00fa FB68     	 ldr r3,[r7,#12]
 583 00fc FA68     	 ldr r2,[r7,#12]
 584 00fe 1A62     	 str r2,[r3,#32]
 167:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->OD_1016_extension.read = OD_readOriginal;
 585              	 .loc 3 167 0
 586 0100 FB68     	 ldr r3,[r7,#12]
 587 0102 114A     	 ldr r2,.L32
 588 0104 5A62     	 str r2,[r3,#36]
 168:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->OD_1016_extension.write = OD_write_1016;
 589              	 .loc 3 168 0
 590 0106 FB68     	 ldr r3,[r7,#12]
 591 0108 104A     	 ldr r2,.L32+4
 592 010a 9A62     	 str r2,[r3,#40]
 169:../CANopen/stack/301/CO_HBconsumer.c ****     odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 593              	 .loc 3 169 0
 594 010c FB68     	 ldr r3,[r7,#12]
 595 010e 2033     	 adds r3,r3,#32
 596 0110 B86A     	 ldr r0,[r7,#40]
 597 0112 1946     	 mov r1,r3
 598 0114 FFF7FEFF 	 bl OD_extension_init
 599 0118 0346     	 mov r3,r0
 600 011a BB77     	 strb r3,[r7,#30]
 170:../CANopen/stack/301/CO_HBconsumer.c ****     if (odRet != ODR_OK) {
 601              	 .loc 3 170 0
 602 011c 97F91E30 	 ldrsb r3,[r7,#30]
 603 0120 002B     	 cmp r3,#0
 604 0122 0BD0     	 beq .L30
 171:../CANopen/stack/301/CO_HBconsumer.c ****         if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 605              	 .loc 3 171 0
 606 0124 7B6B     	 ldr r3,[r7,#52]
 607 0126 002B     	 cmp r3,#0
 608 0128 06D0     	 beq .L31
 609              	 .loc 3 171 0 is_stmt 0 discriminator 1
 610 012a B86A     	 ldr r0,[r7,#40]
 611 012c FFF7FEFF 	 bl OD_getIndex
 612 0130 0346     	 mov r3,r0
 613 0132 1A46     	 mov r2,r3
 614 0134 7B6B     	 ldr r3,[r7,#52]
 615 0136 1A60     	 str r2,[r3]
 616              	.L31:
 172:../CANopen/stack/301/CO_HBconsumer.c ****         return CO_ERROR_OD_PARAMETERS;
 617              	 .loc 3 172 0 is_stmt 1
 618 0138 F423     	 movs r3,#244
 619 013a 00E0     	 b .L22
 620              	.L30:
 173:../CANopen/stack/301/CO_HBconsumer.c ****     }
 174:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 175:../CANopen/stack/301/CO_HBconsumer.c **** 
 176:../CANopen/stack/301/CO_HBconsumer.c ****     return CO_ERROR_NO;
 621              	 .loc 3 176 0
 622 013c 0023     	 movs r3,#0
 623              	.L22:
 624 013e 5BB2     	 sxtb r3,r3
 177:../CANopen/stack/301/CO_HBconsumer.c **** }
 625              	 .loc 3 177 0
 626 0140 1846     	 mov r0,r3
 627 0142 2037     	 adds r7,r7,#32
 628              	.LCFI36:
 629              	 .cfi_def_cfa_offset 8
 630 0144 BD46     	 mov sp,r7
 631              	.LCFI37:
 632              	 .cfi_def_cfa_register 13
 633              	 
 634 0146 80BD     	 pop {r7,pc}
 635              	.L33:
 636              	 .align 2
 637              	.L32:
 638 0148 00000000 	 .word OD_readOriginal
 639 014c 00000000 	 .word OD_write_1016
 640              	 .cfi_endproc
 641              	.LFE39:
 643              	 .section .text.CO_HBconsumer_initEntry,"ax",%progbits
 644              	 .align 2
 645              	 .thumb
 646              	 .thumb_func
 648              	CO_HBconsumer_initEntry:
 649              	.LFB40:
 178:../CANopen/stack/301/CO_HBconsumer.c **** 
 179:../CANopen/stack/301/CO_HBconsumer.c **** 
 180:../CANopen/stack/301/CO_HBconsumer.c **** /******************************************************************************/
 181:../CANopen/stack/301/CO_HBconsumer.c **** static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
 182:../CANopen/stack/301/CO_HBconsumer.c ****                                                 uint8_t idx,
 183:../CANopen/stack/301/CO_HBconsumer.c ****                                                 uint8_t nodeId,
 184:../CANopen/stack/301/CO_HBconsumer.c ****                                                 uint16_t consumerTime_ms)
 185:../CANopen/stack/301/CO_HBconsumer.c **** {
 650              	 .loc 3 185 0
 651              	 .cfi_startproc
 652              	 
 653              	 
 654 0000 90B5     	 push {r4,r7,lr}
 655              	.LCFI38:
 656              	 .cfi_def_cfa_offset 12
 657              	 .cfi_offset 4,-12
 658              	 .cfi_offset 7,-8
 659              	 .cfi_offset 14,-4
 660 0002 8DB0     	 sub sp,sp,#52
 661              	.LCFI39:
 662              	 .cfi_def_cfa_offset 64
 663 0004 04AF     	 add r7,sp,#16
 664              	.LCFI40:
 665              	 .cfi_def_cfa 7,48
 666 0006 7860     	 str r0,[r7,#4]
 667 0008 0846     	 mov r0,r1
 668 000a 1146     	 mov r1,r2
 669 000c 1A46     	 mov r2,r3
 670 000e 0346     	 mov r3,r0
 671 0010 FB70     	 strb r3,[r7,#3]
 672 0012 0B46     	 mov r3,r1
 673 0014 BB70     	 strb r3,[r7,#2]
 674 0016 1346     	 mov r3,r2
 675 0018 3B80     	 strh r3,[r7]
 186:../CANopen/stack/301/CO_HBconsumer.c ****     CO_ReturnError_t ret = CO_ERROR_NO;
 676              	 .loc 3 186 0
 677 001a 0023     	 movs r3,#0
 678 001c FB77     	 strb r3,[r7,#31]
 187:../CANopen/stack/301/CO_HBconsumer.c **** 
 188:../CANopen/stack/301/CO_HBconsumer.c ****     /* verify arguments */
 189:../CANopen/stack/301/CO_HBconsumer.c ****     if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 679              	 .loc 3 189 0
 680 001e 7B68     	 ldr r3,[r7,#4]
 681 0020 002B     	 cmp r3,#0
 682 0022 04D0     	 beq .L35
 683              	 .loc 3 189 0 is_stmt 0 discriminator 1
 684 0024 7B68     	 ldr r3,[r7,#4]
 685 0026 1B7A     	 ldrb r3,[r3,#8]
 686 0028 FA78     	 ldrb r2,[r7,#3]
 687 002a 9A42     	 cmp r2,r3
 688 002c 01D3     	 bcc .L36
 689              	.L35:
 190:../CANopen/stack/301/CO_HBconsumer.c ****         return CO_ERROR_ILLEGAL_ARGUMENT;
 690              	 .loc 3 190 0 is_stmt 1
 691 002e FF23     	 movs r3,#255
 692 0030 77E0     	 b .L37
 693              	.L36:
 191:../CANopen/stack/301/CO_HBconsumer.c ****     }
 192:../CANopen/stack/301/CO_HBconsumer.c **** 
 193:../CANopen/stack/301/CO_HBconsumer.c ****     /* verify for duplicate entries */
 194:../CANopen/stack/301/CO_HBconsumer.c ****     if(consumerTime_ms != 0 && nodeId != 0) {
 694              	 .loc 3 194 0
 695 0032 3B88     	 ldrh r3,[r7]
 696 0034 002B     	 cmp r3,#0
 697 0036 24D0     	 beq .L38
 698              	 .loc 3 194 0 is_stmt 0 discriminator 1
 699 0038 BB78     	 ldrb r3,[r7,#2]
 700 003a 002B     	 cmp r3,#0
 701 003c 21D0     	 beq .L38
 702              	.LBB4:
 195:../CANopen/stack/301/CO_HBconsumer.c ****         for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 703              	 .loc 3 195 0 is_stmt 1
 704 003e 0023     	 movs r3,#0
 705 0040 BB77     	 strb r3,[r7,#30]
 706 0042 19E0     	 b .L39
 707              	.L41:
 708              	.LBB5:
 196:../CANopen/stack/301/CO_HBconsumer.c ****             CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 709              	 .loc 3 196 0
 710 0044 7B68     	 ldr r3,[r7,#4]
 711 0046 5A68     	 ldr r2,[r3,#4]
 712 0048 BB7F     	 ldrb r3,[r7,#30]
 713 004a 1B01     	 lsls r3,r3,#4
 714 004c 1344     	 add r3,r3,r2
 715 004e 07F10804 	 add r4,r7,#8
 716 0052 0FCB     	 ldmia r3,{r0,r1,r2,r3}
 717 0054 84E80F00 	 stmia r4,{r0,r1,r2,r3}
 197:../CANopen/stack/301/CO_HBconsumer.c ****             if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 718              	 .loc 3 197 0
 719 0058 FA78     	 ldrb r2,[r7,#3]
 720 005a BB7F     	 ldrb r3,[r7,#30]
 721 005c 9A42     	 cmp r2,r3
 722 005e 08D0     	 beq .L40
 723              	 .loc 3 197 0 is_stmt 0 discriminator 1
 724 0060 3B69     	 ldr r3,[r7,#16]
 725 0062 002B     	 cmp r3,#0
 726 0064 05D0     	 beq .L40
 727              	 .loc 3 197 0 discriminator 2
 728 0066 3B7A     	 ldrb r3,[r7,#8]
 729 0068 BA78     	 ldrb r2,[r7,#2]
 730 006a 9A42     	 cmp r2,r3
 731 006c 01D1     	 bne .L40
 198:../CANopen/stack/301/CO_HBconsumer.c ****                 ret = CO_ERROR_OD_PARAMETERS;
 732              	 .loc 3 198 0 is_stmt 1
 733 006e F423     	 movs r3,#244
 734 0070 FB77     	 strb r3,[r7,#31]
 735              	.L40:
 736              	.LBE5:
 195:../CANopen/stack/301/CO_HBconsumer.c ****             CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 737              	 .loc 3 195 0 discriminator 2
 738 0072 BB7F     	 ldrb r3,[r7,#30]
 739 0074 0133     	 adds r3,r3,#1
 740 0076 BB77     	 strb r3,[r7,#30]
 741              	.L39:
 195:../CANopen/stack/301/CO_HBconsumer.c ****             CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 742              	 .loc 3 195 0 is_stmt 0 discriminator 1
 743 0078 7B68     	 ldr r3,[r7,#4]
 744 007a 1B7A     	 ldrb r3,[r3,#8]
 745 007c BA7F     	 ldrb r2,[r7,#30]
 746 007e 9A42     	 cmp r2,r3
 747 0080 E0D3     	 bcc .L41
 748              	.L38:
 749              	.LBE4:
 199:../CANopen/stack/301/CO_HBconsumer.c ****             }
 200:../CANopen/stack/301/CO_HBconsumer.c ****         }
 201:../CANopen/stack/301/CO_HBconsumer.c ****     }
 202:../CANopen/stack/301/CO_HBconsumer.c **** 
 203:../CANopen/stack/301/CO_HBconsumer.c ****     /* Configure one monitored node */
 204:../CANopen/stack/301/CO_HBconsumer.c ****     if (ret == CO_ERROR_NO) {
 750              	 .loc 3 204 0 is_stmt 1
 751 0082 97F91F30 	 ldrsb r3,[r7,#31]
 752 0086 002B     	 cmp r3,#0
 753 0088 4AD1     	 bne .L42
 754              	.LBB6:
 205:../CANopen/stack/301/CO_HBconsumer.c ****         uint16_t COB_ID;
 206:../CANopen/stack/301/CO_HBconsumer.c **** 
 207:../CANopen/stack/301/CO_HBconsumer.c ****         CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 755              	 .loc 3 207 0
 756 008a 7B68     	 ldr r3,[r7,#4]
 757 008c 5A68     	 ldr r2,[r3,#4]
 758 008e FB78     	 ldrb r3,[r7,#3]
 759 0090 1B01     	 lsls r3,r3,#4
 760 0092 1344     	 add r3,r3,r2
 761 0094 BB61     	 str r3,[r7,#24]
 208:../CANopen/stack/301/CO_HBconsumer.c ****         monitoredNode->nodeId = nodeId;
 762              	 .loc 3 208 0
 763 0096 BB69     	 ldr r3,[r7,#24]
 764 0098 BA78     	 ldrb r2,[r7,#2]
 765 009a 1A70     	 strb r2,[r3]
 209:../CANopen/stack/301/CO_HBconsumer.c ****         monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 766              	 .loc 3 209 0
 767 009c 3B88     	 ldrh r3,[r7]
 768 009e 4FF47A72 	 mov r2,#1000
 769 00a2 02FB03F3 	 mul r3,r2,r3
 770 00a6 1A46     	 mov r2,r3
 771 00a8 BB69     	 ldr r3,[r7,#24]
 772 00aa 9A60     	 str r2,[r3,#8]
 210:../CANopen/stack/301/CO_HBconsumer.c ****         monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 773              	 .loc 3 210 0
 774 00ac BB69     	 ldr r3,[r7,#24]
 775 00ae FF22     	 movs r2,#255
 776 00b0 5A70     	 strb r2,[r3,#1]
 211:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
 212:../CANopen/stack/301/CO_HBconsumer.c ****     || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
 213:../CANopen/stack/301/CO_HBconsumer.c ****         monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 214:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 215:../CANopen/stack/301/CO_HBconsumer.c ****         CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 777              	 .loc 3 215 0
 778 00b2 BB69     	 ldr r3,[r7,#24]
 779 00b4 0022     	 movs r2,#0
 780 00b6 DA60     	 str r2,[r3,#12]
 216:../CANopen/stack/301/CO_HBconsumer.c **** 
 217:../CANopen/stack/301/CO_HBconsumer.c ****         /* is channel used */
 218:../CANopen/stack/301/CO_HBconsumer.c ****         if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 781              	 .loc 3 218 0
 782 00b8 BB69     	 ldr r3,[r7,#24]
 783 00ba 1B78     	 ldrb r3,[r3]
 784 00bc 002B     	 cmp r3,#0
 785 00be 0DD0     	 beq .L43
 786              	 .loc 3 218 0 is_stmt 0 discriminator 1
 787 00c0 BB69     	 ldr r3,[r7,#24]
 788 00c2 9B68     	 ldr r3,[r3,#8]
 789 00c4 002B     	 cmp r3,#0
 790 00c6 09D0     	 beq .L43
 219:../CANopen/stack/301/CO_HBconsumer.c ****             COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 791              	 .loc 3 219 0 is_stmt 1
 792 00c8 BB69     	 ldr r3,[r7,#24]
 793 00ca 1B78     	 ldrb r3,[r3]
 794 00cc 9BB2     	 uxth r3,r3
 795 00ce 03F5E063 	 add r3,r3,#1792
 796 00d2 BB83     	 strh r3,[r7,#28]
 220:../CANopen/stack/301/CO_HBconsumer.c ****             monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 797              	 .loc 3 220 0
 798 00d4 BB69     	 ldr r3,[r7,#24]
 799 00d6 0122     	 movs r2,#1
 800 00d8 9A70     	 strb r2,[r3,#2]
 801 00da 07E0     	 b .L44
 802              	.L43:
 221:../CANopen/stack/301/CO_HBconsumer.c ****         }
 222:../CANopen/stack/301/CO_HBconsumer.c ****         else {
 223:../CANopen/stack/301/CO_HBconsumer.c ****             COB_ID = 0;
 803              	 .loc 3 223 0
 804 00dc 0023     	 movs r3,#0
 805 00de BB83     	 strh r3,[r7,#28]
 224:../CANopen/stack/301/CO_HBconsumer.c ****             monitoredNode->time_us = 0;
 806              	 .loc 3 224 0
 807 00e0 BB69     	 ldr r3,[r7,#24]
 808 00e2 0022     	 movs r2,#0
 809 00e4 9A60     	 str r2,[r3,#8]
 225:../CANopen/stack/301/CO_HBconsumer.c ****             monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 810              	 .loc 3 225 0
 811 00e6 BB69     	 ldr r3,[r7,#24]
 812 00e8 0022     	 movs r2,#0
 813 00ea 9A70     	 strb r2,[r3,#2]
 814              	.L44:
 226:../CANopen/stack/301/CO_HBconsumer.c ****         }
 227:../CANopen/stack/301/CO_HBconsumer.c **** 
 228:../CANopen/stack/301/CO_HBconsumer.c ****         /* configure Heartbeat consumer (or disable) CAN reception */
 229:../CANopen/stack/301/CO_HBconsumer.c ****         ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 815              	 .loc 3 229 0
 816 00ec 7B68     	 ldr r3,[r7,#4]
 817 00ee 9869     	 ldr r0,[r3,#24]
 230:../CANopen/stack/301/CO_HBconsumer.c ****                                  HBcons->CANdevRxIdxStart + idx,
 818              	 .loc 3 230 0
 819 00f0 7B68     	 ldr r3,[r7,#4]
 820 00f2 9A8B     	 ldrh r2,[r3,#28]
 229:../CANopen/stack/301/CO_HBconsumer.c ****                                  HBcons->CANdevRxIdxStart + idx,
 821              	 .loc 3 229 0
 822 00f4 FB78     	 ldrb r3,[r7,#3]
 823 00f6 9BB2     	 uxth r3,r3
 824 00f8 1344     	 add r3,r3,r2
 825 00fa 99B2     	 uxth r1,r3
 231:../CANopen/stack/301/CO_HBconsumer.c ****                                  COB_ID,
 232:../CANopen/stack/301/CO_HBconsumer.c ****                                  0x7FF,
 233:../CANopen/stack/301/CO_HBconsumer.c ****                                  0,
 234:../CANopen/stack/301/CO_HBconsumer.c ****                                  (void*)&HBcons->monitoredNodes[idx],
 826              	 .loc 3 234 0
 827 00fc 7B68     	 ldr r3,[r7,#4]
 828 00fe 5A68     	 ldr r2,[r3,#4]
 229:../CANopen/stack/301/CO_HBconsumer.c ****                                  HBcons->CANdevRxIdxStart + idx,
 829              	 .loc 3 229 0
 830 0100 FB78     	 ldrb r3,[r7,#3]
 831              	 .loc 3 234 0
 832 0102 1B01     	 lsls r3,r3,#4
 229:../CANopen/stack/301/CO_HBconsumer.c ****                                  HBcons->CANdevRxIdxStart + idx,
 833              	 .loc 3 229 0
 834 0104 1344     	 add r3,r3,r2
 835 0106 BC8B     	 ldrh r4,[r7,#28]
 836 0108 0022     	 movs r2,#0
 837 010a 0092     	 str r2,[sp]
 838 010c 0193     	 str r3,[sp,#4]
 839 010e 074B     	 ldr r3,.L45
 840 0110 0293     	 str r3,[sp,#8]
 841 0112 2246     	 mov r2,r4
 842 0114 40F2FF73 	 movw r3,#2047
 843 0118 FFF7FEFF 	 bl CO_CANrxBufferInit
 844 011c 0346     	 mov r3,r0
 845 011e FB77     	 strb r3,[r7,#31]
 846              	.L42:
 847              	.LBE6:
 235:../CANopen/stack/301/CO_HBconsumer.c ****                                  CO_HBcons_receive);
 236:../CANopen/stack/301/CO_HBconsumer.c ****     }
 237:../CANopen/stack/301/CO_HBconsumer.c ****     return ret;
 848              	 .loc 3 237 0
 849 0120 FB7F     	 ldrb r3,[r7,#31]
 850              	.L37:
 851 0122 5BB2     	 sxtb r3,r3
 238:../CANopen/stack/301/CO_HBconsumer.c **** }
 852              	 .loc 3 238 0
 853 0124 1846     	 mov r0,r3
 854 0126 2437     	 adds r7,r7,#36
 855              	.LCFI41:
 856              	 .cfi_def_cfa_offset 12
 857 0128 BD46     	 mov sp,r7
 858              	.LCFI42:
 859              	 .cfi_def_cfa_register 13
 860              	 
 861 012a 90BD     	 pop {r4,r7,pc}
 862              	.L46:
 863              	 .align 2
 864              	.L45:
 865 012c 00000000 	 .word CO_HBcons_receive
 866              	 .cfi_endproc
 867              	.LFE40:
 869              	 .section .text.CO_HBconsumer_process,"ax",%progbits
 870              	 .align 2
 871              	 .global CO_HBconsumer_process
 872              	 .thumb
 873              	 .thumb_func
 875              	CO_HBconsumer_process:
 876              	.LFB41:
 239:../CANopen/stack/301/CO_HBconsumer.c **** 
 240:../CANopen/stack/301/CO_HBconsumer.c **** 
 241:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_CALLBACK_PRE
 242:../CANopen/stack/301/CO_HBconsumer.c **** /******************************************************************************/
 243:../CANopen/stack/301/CO_HBconsumer.c **** void CO_HBconsumer_initCallbackPre(
 244:../CANopen/stack/301/CO_HBconsumer.c ****         CO_HBconsumer_t        *HBcons,
 245:../CANopen/stack/301/CO_HBconsumer.c ****         void                   *object,
 246:../CANopen/stack/301/CO_HBconsumer.c ****         void                  (*pFunctSignal)(void *object))
 247:../CANopen/stack/301/CO_HBconsumer.c **** {
 248:../CANopen/stack/301/CO_HBconsumer.c ****     if (HBcons != NULL) {
 249:../CANopen/stack/301/CO_HBconsumer.c ****         uint8_t i;
 250:../CANopen/stack/301/CO_HBconsumer.c ****         for(i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 251:../CANopen/stack/301/CO_HBconsumer.c ****             HBcons->monitoredNodes[i].pFunctSignalPre = pFunctSignal;
 252:../CANopen/stack/301/CO_HBconsumer.c ****             HBcons->monitoredNodes[i].functSignalObjectPre = object;
 253:../CANopen/stack/301/CO_HBconsumer.c ****         }
 254:../CANopen/stack/301/CO_HBconsumer.c ****     }
 255:../CANopen/stack/301/CO_HBconsumer.c **** }
 256:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 257:../CANopen/stack/301/CO_HBconsumer.c **** 
 258:../CANopen/stack/301/CO_HBconsumer.c **** 
 259:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
 260:../CANopen/stack/301/CO_HBconsumer.c **** /******************************************************************************/
 261:../CANopen/stack/301/CO_HBconsumer.c **** void CO_HBconsumer_initCallbackNmtChanged(
 262:../CANopen/stack/301/CO_HBconsumer.c ****         CO_HBconsumer_t        *HBcons,
 263:../CANopen/stack/301/CO_HBconsumer.c ****         uint8_t                 idx,
 264:../CANopen/stack/301/CO_HBconsumer.c ****         void                   *object,
 265:../CANopen/stack/301/CO_HBconsumer.c ****         void                  (*pFunctSignal)(uint8_t nodeId, uint8_t idx,
 266:../CANopen/stack/301/CO_HBconsumer.c ****                                               CO_NMT_internalState_t NMTstate,
 267:../CANopen/stack/301/CO_HBconsumer.c ****                                               void *object))
 268:../CANopen/stack/301/CO_HBconsumer.c **** {
 269:../CANopen/stack/301/CO_HBconsumer.c ****     (void) idx;
 270:../CANopen/stack/301/CO_HBconsumer.c ****     if (HBcons==NULL) {
 271:../CANopen/stack/301/CO_HBconsumer.c ****         return;
 272:../CANopen/stack/301/CO_HBconsumer.c ****     }
 273:../CANopen/stack/301/CO_HBconsumer.c **** 
 274:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->pFunctSignalNmtChanged = pFunctSignal;
 275:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->pFunctSignalObjectNmtChanged = object;
 276:../CANopen/stack/301/CO_HBconsumer.c **** }
 277:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 278:../CANopen/stack/301/CO_HBconsumer.c **** 
 279:../CANopen/stack/301/CO_HBconsumer.c **** 
 280:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
 281:../CANopen/stack/301/CO_HBconsumer.c **** /******************************************************************************/
 282:../CANopen/stack/301/CO_HBconsumer.c **** void CO_HBconsumer_initCallbackNmtChanged(
 283:../CANopen/stack/301/CO_HBconsumer.c ****         CO_HBconsumer_t        *HBcons,
 284:../CANopen/stack/301/CO_HBconsumer.c ****         uint8_t                 idx,
 285:../CANopen/stack/301/CO_HBconsumer.c ****         void                   *object,
 286:../CANopen/stack/301/CO_HBconsumer.c ****         void                  (*pFunctSignal)(uint8_t nodeId, uint8_t idx,
 287:../CANopen/stack/301/CO_HBconsumer.c ****                                               CO_NMT_internalState_t NMTstate,
 288:../CANopen/stack/301/CO_HBconsumer.c ****                                               void *object))
 289:../CANopen/stack/301/CO_HBconsumer.c **** {
 290:../CANopen/stack/301/CO_HBconsumer.c ****     if (HBcons==NULL || idx>=HBcons->numberOfMonitoredNodes) {
 291:../CANopen/stack/301/CO_HBconsumer.c ****         return;
 292:../CANopen/stack/301/CO_HBconsumer.c ****     }
 293:../CANopen/stack/301/CO_HBconsumer.c **** 
 294:../CANopen/stack/301/CO_HBconsumer.c ****     CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[idx];
 295:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode->pFunctSignalNmtChanged = pFunctSignal;
 296:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode->pFunctSignalObjectNmtChanged = object;
 297:../CANopen/stack/301/CO_HBconsumer.c **** }
 298:../CANopen/stack/301/CO_HBconsumer.c **** 
 299:../CANopen/stack/301/CO_HBconsumer.c **** 
 300:../CANopen/stack/301/CO_HBconsumer.c **** /******************************************************************************/
 301:../CANopen/stack/301/CO_HBconsumer.c **** void CO_HBconsumer_initCallbackHeartbeatStarted(
 302:../CANopen/stack/301/CO_HBconsumer.c ****     CO_HBconsumer_t        *HBcons,
 303:../CANopen/stack/301/CO_HBconsumer.c ****     uint8_t                 idx,
 304:../CANopen/stack/301/CO_HBconsumer.c ****     void                   *object,
 305:../CANopen/stack/301/CO_HBconsumer.c ****     void                  (*pFunctSignal)(uint8_t nodeId, uint8_t idx, void *object))
 306:../CANopen/stack/301/CO_HBconsumer.c **** {
 307:../CANopen/stack/301/CO_HBconsumer.c ****     CO_HBconsNode_t *monitoredNode;
 308:../CANopen/stack/301/CO_HBconsumer.c **** 
 309:../CANopen/stack/301/CO_HBconsumer.c ****     if (HBcons==NULL || idx>=HBcons->numberOfMonitoredNodes) {
 310:../CANopen/stack/301/CO_HBconsumer.c ****         return;
 311:../CANopen/stack/301/CO_HBconsumer.c ****     }
 312:../CANopen/stack/301/CO_HBconsumer.c **** 
 313:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode = &HBcons->monitoredNodes[idx];
 314:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode->pFunctSignalHbStarted = pFunctSignal;
 315:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode->functSignalObjectHbStarted = object;
 316:../CANopen/stack/301/CO_HBconsumer.c **** }
 317:../CANopen/stack/301/CO_HBconsumer.c **** 
 318:../CANopen/stack/301/CO_HBconsumer.c **** 
 319:../CANopen/stack/301/CO_HBconsumer.c **** /******************************************************************************/
 320:../CANopen/stack/301/CO_HBconsumer.c **** void CO_HBconsumer_initCallbackTimeout(
 321:../CANopen/stack/301/CO_HBconsumer.c ****     CO_HBconsumer_t        *HBcons,
 322:../CANopen/stack/301/CO_HBconsumer.c ****     uint8_t                 idx,
 323:../CANopen/stack/301/CO_HBconsumer.c ****     void                   *object,
 324:../CANopen/stack/301/CO_HBconsumer.c ****     void                  (*pFunctSignal)(uint8_t nodeId, uint8_t idx, void *object))
 325:../CANopen/stack/301/CO_HBconsumer.c **** {
 326:../CANopen/stack/301/CO_HBconsumer.c ****     CO_HBconsNode_t *monitoredNode;
 327:../CANopen/stack/301/CO_HBconsumer.c **** 
 328:../CANopen/stack/301/CO_HBconsumer.c ****     if (HBcons==NULL || idx>=HBcons->numberOfMonitoredNodes) {
 329:../CANopen/stack/301/CO_HBconsumer.c ****         return;
 330:../CANopen/stack/301/CO_HBconsumer.c ****     }
 331:../CANopen/stack/301/CO_HBconsumer.c **** 
 332:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode = &HBcons->monitoredNodes[idx];
 333:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode->pFunctSignalTimeout = pFunctSignal;
 334:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode->functSignalObjectTimeout = object;
 335:../CANopen/stack/301/CO_HBconsumer.c **** }
 336:../CANopen/stack/301/CO_HBconsumer.c **** 
 337:../CANopen/stack/301/CO_HBconsumer.c **** 
 338:../CANopen/stack/301/CO_HBconsumer.c **** /******************************************************************************/
 339:../CANopen/stack/301/CO_HBconsumer.c **** void CO_HBconsumer_initCallbackRemoteReset(
 340:../CANopen/stack/301/CO_HBconsumer.c ****     CO_HBconsumer_t        *HBcons,
 341:../CANopen/stack/301/CO_HBconsumer.c ****     uint8_t                 idx,
 342:../CANopen/stack/301/CO_HBconsumer.c ****     void                   *object,
 343:../CANopen/stack/301/CO_HBconsumer.c ****     void                  (*pFunctSignal)(uint8_t nodeId, uint8_t idx, void *object))
 344:../CANopen/stack/301/CO_HBconsumer.c **** {
 345:../CANopen/stack/301/CO_HBconsumer.c ****     CO_HBconsNode_t *monitoredNode;
 346:../CANopen/stack/301/CO_HBconsumer.c **** 
 347:../CANopen/stack/301/CO_HBconsumer.c ****     if (HBcons==NULL || idx>=HBcons->numberOfMonitoredNodes) {
 348:../CANopen/stack/301/CO_HBconsumer.c ****         return;
 349:../CANopen/stack/301/CO_HBconsumer.c ****     }
 350:../CANopen/stack/301/CO_HBconsumer.c **** 
 351:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode = &HBcons->monitoredNodes[idx];
 352:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode->pFunctSignalRemoteReset = pFunctSignal;
 353:../CANopen/stack/301/CO_HBconsumer.c ****     monitoredNode->functSignalObjectRemoteReset = object;
 354:../CANopen/stack/301/CO_HBconsumer.c **** }
 355:../CANopen/stack/301/CO_HBconsumer.c **** #endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */
 356:../CANopen/stack/301/CO_HBconsumer.c **** 
 357:../CANopen/stack/301/CO_HBconsumer.c **** 
 358:../CANopen/stack/301/CO_HBconsumer.c **** /******************************************************************************/
 359:../CANopen/stack/301/CO_HBconsumer.c **** void CO_HBconsumer_process(
 360:../CANopen/stack/301/CO_HBconsumer.c ****         CO_HBconsumer_t        *HBcons,
 361:../CANopen/stack/301/CO_HBconsumer.c ****         bool_t                  NMTisPreOrOperational,
 362:../CANopen/stack/301/CO_HBconsumer.c ****         uint32_t                timeDifference_us,
 363:../CANopen/stack/301/CO_HBconsumer.c ****         uint32_t               *timerNext_us)
 364:../CANopen/stack/301/CO_HBconsumer.c **** {
 877              	 .loc 3 364 0
 878              	 .cfi_startproc
 879              	 
 880              	 
 881 0000 80B5     	 push {r7,lr}
 882              	.LCFI43:
 883              	 .cfi_def_cfa_offset 8
 884              	 .cfi_offset 7,-8
 885              	 .cfi_offset 14,-4
 886 0002 8EB0     	 sub sp,sp,#56
 887              	.LCFI44:
 888              	 .cfi_def_cfa_offset 64
 889 0004 02AF     	 add r7,sp,#8
 890              	.LCFI45:
 891              	 .cfi_def_cfa 7,56
 892 0006 F860     	 str r0,[r7,#12]
 893 0008 B960     	 str r1,[r7,#8]
 894 000a 7A60     	 str r2,[r7,#4]
 895 000c 3B60     	 str r3,[r7]
 365:../CANopen/stack/301/CO_HBconsumer.c ****     (void)timerNext_us; /* may be unused */
 366:../CANopen/stack/301/CO_HBconsumer.c **** 
 367:../CANopen/stack/301/CO_HBconsumer.c ****     bool_t allMonitoredActiveCurrent = true;
 896              	 .loc 3 367 0
 897 000e 0123     	 movs r3,#1
 898 0010 FB62     	 str r3,[r7,#44]
 368:../CANopen/stack/301/CO_HBconsumer.c ****     bool_t allMonitoredOperationalCurrent = true;
 899              	 .loc 3 368 0
 900 0012 0123     	 movs r3,#1
 901 0014 BB62     	 str r3,[r7,#40]
 369:../CANopen/stack/301/CO_HBconsumer.c **** 
 370:../CANopen/stack/301/CO_HBconsumer.c ****     if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 902              	 .loc 3 370 0
 903 0016 BB68     	 ldr r3,[r7,#8]
 904 0018 002B     	 cmp r3,#0
 905 001a 77D0     	 beq .L48
 906              	 .loc 3 370 0 is_stmt 0 discriminator 1
 907 001c FB68     	 ldr r3,[r7,#12]
 908 001e 5B69     	 ldr r3,[r3,#20]
 909 0020 002B     	 cmp r3,#0
 910 0022 73D0     	 beq .L48
 911              	.LBB7:
 371:../CANopen/stack/301/CO_HBconsumer.c ****         for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 912              	 .loc 3 371 0 is_stmt 1
 913 0024 0023     	 movs r3,#0
 914 0026 87F82730 	 strb r3,[r7,#39]
 915 002a 68E0     	 b .L49
 916              	.L58:
 917              	.LBB8:
 372:../CANopen/stack/301/CO_HBconsumer.c ****             uint32_t timeDifference_us_copy = timeDifference_us;
 918              	 .loc 3 372 0
 919 002c 7B68     	 ldr r3,[r7,#4]
 920 002e 3B62     	 str r3,[r7,#32]
 373:../CANopen/stack/301/CO_HBconsumer.c ****             CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 921              	 .loc 3 373 0
 922 0030 FB68     	 ldr r3,[r7,#12]
 923 0032 5A68     	 ldr r2,[r3,#4]
 924 0034 97F82730 	 ldrb r3,[r7,#39]
 925 0038 1B01     	 lsls r3,r3,#4
 926 003a 1344     	 add r3,r3,r2
 927 003c BB61     	 str r3,[r7,#24]
 374:../CANopen/stack/301/CO_HBconsumer.c **** 
 375:../CANopen/stack/301/CO_HBconsumer.c ****             if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 928              	 .loc 3 375 0
 929 003e BB69     	 ldr r3,[r7,#24]
 930 0040 9B78     	 ldrb r3,[r3,#2]
 931 0042 002B     	 cmp r3,#0
 932 0044 00D1     	 bne .L50
 376:../CANopen/stack/301/CO_HBconsumer.c ****                 /* continue, if node is not monitored */
 377:../CANopen/stack/301/CO_HBconsumer.c ****                 continue;
 933              	 .loc 3 377 0
 934 0046 55E0     	 b .L51
 935              	.L50:
 378:../CANopen/stack/301/CO_HBconsumer.c ****             }
 379:../CANopen/stack/301/CO_HBconsumer.c ****             /* Verify if received message is heartbeat or bootup */
 380:../CANopen/stack/301/CO_HBconsumer.c ****             if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 936              	 .loc 3 380 0
 937 0048 BB69     	 ldr r3,[r7,#24]
 938 004a DB68     	 ldr r3,[r3,#12]
 939 004c 002B     	 cmp r3,#0
 940 004e 22D0     	 beq .L52
 381:../CANopen/stack/301/CO_HBconsumer.c ****                 if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 941              	 .loc 3 381 0
 942 0050 BB69     	 ldr r3,[r7,#24]
 943 0052 5B78     	 ldrb r3,[r3,#1]
 944 0054 002B     	 cmp r3,#0
 945 0056 13D1     	 bne .L53
 382:../CANopen/stack/301/CO_HBconsumer.c ****                     /* bootup message*/
 383:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
 384:../CANopen/stack/301/CO_HBconsumer.c ****                     if (monitoredNode->pFunctSignalRemoteReset != NULL) {
 385:../CANopen/stack/301/CO_HBconsumer.c ****                         monitoredNode->pFunctSignalRemoteReset(
 386:../CANopen/stack/301/CO_HBconsumer.c ****                             monitoredNode->nodeId, i,
 387:../CANopen/stack/301/CO_HBconsumer.c ****                             monitoredNode->functSignalObjectRemoteReset);
 388:../CANopen/stack/301/CO_HBconsumer.c ****                     }
 389:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 390:../CANopen/stack/301/CO_HBconsumer.c ****                     if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 946              	 .loc 3 390 0
 947 0058 BB69     	 ldr r3,[r7,#24]
 948 005a 9B78     	 ldrb r3,[r3,#2]
 949 005c 022B     	 cmp r3,#2
 950 005e 0BD1     	 bne .L54
 391:../CANopen/stack/301/CO_HBconsumer.c ****                         CO_errorReport(HBcons->em,
 951              	 .loc 3 391 0
 952 0060 FB68     	 ldr r3,[r7,#12]
 953 0062 1A68     	 ldr r2,[r3]
 954 0064 97F82730 	 ldrb r3,[r7,#39]
 955 0068 0093     	 str r3,[sp]
 956 006a 1046     	 mov r0,r2
 957 006c 0121     	 movs r1,#1
 958 006e 1C22     	 movs r2,#28
 959 0070 48F23013 	 movw r3,#33072
 960 0074 FFF7FEFF 	 bl CO_error
 961              	.L54:
 392:../CANopen/stack/301/CO_HBconsumer.c ****                                        CO_EM_HB_CONSUMER_REMOTE_RESET,
 393:../CANopen/stack/301/CO_HBconsumer.c ****                                        CO_EMC_HEARTBEAT, i);
 394:../CANopen/stack/301/CO_HBconsumer.c ****                     }
 395:../CANopen/stack/301/CO_HBconsumer.c ****                     monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 962              	 .loc 3 395 0
 963 0078 BB69     	 ldr r3,[r7,#24]
 964 007a 0122     	 movs r2,#1
 965 007c 9A70     	 strb r2,[r3,#2]
 966 007e 07E0     	 b .L55
 967              	.L53:
 396:../CANopen/stack/301/CO_HBconsumer.c **** 
 397:../CANopen/stack/301/CO_HBconsumer.c ****                 }
 398:../CANopen/stack/301/CO_HBconsumer.c ****                 else {
 399:../CANopen/stack/301/CO_HBconsumer.c ****                     /* heartbeat message */
 400:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
 401:../CANopen/stack/301/CO_HBconsumer.c ****                     if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE &&
 402:../CANopen/stack/301/CO_HBconsumer.c ****                         monitoredNode->pFunctSignalHbStarted != NULL) {
 403:../CANopen/stack/301/CO_HBconsumer.c ****                         monitoredNode->pFunctSignalHbStarted(
 404:../CANopen/stack/301/CO_HBconsumer.c ****                             monitoredNode->nodeId, i,
 405:../CANopen/stack/301/CO_HBconsumer.c ****                             monitoredNode->functSignalObjectHbStarted);
 406:../CANopen/stack/301/CO_HBconsumer.c ****                     }
 407:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 408:../CANopen/stack/301/CO_HBconsumer.c ****                     monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 968              	 .loc 3 408 0
 969 0080 BB69     	 ldr r3,[r7,#24]
 970 0082 0222     	 movs r2,#2
 971 0084 9A70     	 strb r2,[r3,#2]
 409:../CANopen/stack/301/CO_HBconsumer.c ****                     /* reset timer */
 410:../CANopen/stack/301/CO_HBconsumer.c ****                     monitoredNode->timeoutTimer = 0;
 972              	 .loc 3 410 0
 973 0086 BB69     	 ldr r3,[r7,#24]
 974 0088 0022     	 movs r2,#0
 975 008a 5A60     	 str r2,[r3,#4]
 411:../CANopen/stack/301/CO_HBconsumer.c ****                     timeDifference_us_copy = 0;
 976              	 .loc 3 411 0
 977 008c 0023     	 movs r3,#0
 978 008e 3B62     	 str r3,[r7,#32]
 979              	.L55:
 412:../CANopen/stack/301/CO_HBconsumer.c ****                 }
 413:../CANopen/stack/301/CO_HBconsumer.c ****                 CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 980              	 .loc 3 413 0
 981 0090 BB69     	 ldr r3,[r7,#24]
 982 0092 0022     	 movs r2,#0
 983 0094 DA60     	 str r2,[r3,#12]
 984              	.L52:
 414:../CANopen/stack/301/CO_HBconsumer.c ****             }
 415:../CANopen/stack/301/CO_HBconsumer.c **** 
 416:../CANopen/stack/301/CO_HBconsumer.c ****             /* Verify timeout */
 417:../CANopen/stack/301/CO_HBconsumer.c ****             if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 985              	 .loc 3 417 0
 986 0096 BB69     	 ldr r3,[r7,#24]
 987 0098 9B78     	 ldrb r3,[r3,#2]
 988 009a 022B     	 cmp r3,#2
 989 009c 1DD1     	 bne .L56
 418:../CANopen/stack/301/CO_HBconsumer.c ****                 monitoredNode->timeoutTimer += timeDifference_us_copy;
 990              	 .loc 3 418 0
 991 009e BB69     	 ldr r3,[r7,#24]
 992 00a0 5A68     	 ldr r2,[r3,#4]
 993 00a2 3B6A     	 ldr r3,[r7,#32]
 994 00a4 1A44     	 add r2,r2,r3
 995 00a6 BB69     	 ldr r3,[r7,#24]
 996 00a8 5A60     	 str r2,[r3,#4]
 419:../CANopen/stack/301/CO_HBconsumer.c **** 
 420:../CANopen/stack/301/CO_HBconsumer.c ****                 if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 997              	 .loc 3 420 0
 998 00aa BB69     	 ldr r3,[r7,#24]
 999 00ac 5A68     	 ldr r2,[r3,#4]
 1000 00ae BB69     	 ldr r3,[r7,#24]
 1001 00b0 9B68     	 ldr r3,[r3,#8]
 1002 00b2 9A42     	 cmp r2,r3
 1003 00b4 11D3     	 bcc .L56
 421:../CANopen/stack/301/CO_HBconsumer.c ****                     /* timeout expired */
 422:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
 423:../CANopen/stack/301/CO_HBconsumer.c ****                     if (monitoredNode->pFunctSignalTimeout!=NULL) {
 424:../CANopen/stack/301/CO_HBconsumer.c ****                         monitoredNode->pFunctSignalTimeout(
 425:../CANopen/stack/301/CO_HBconsumer.c ****                             monitoredNode->nodeId, i,
 426:../CANopen/stack/301/CO_HBconsumer.c ****                             monitoredNode->functSignalObjectTimeout);
 427:../CANopen/stack/301/CO_HBconsumer.c ****                     }
 428:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 429:../CANopen/stack/301/CO_HBconsumer.c ****                     CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 1004              	 .loc 3 429 0
 1005 00b6 FB68     	 ldr r3,[r7,#12]
 1006 00b8 1A68     	 ldr r2,[r3]
 1007 00ba 97F82730 	 ldrb r3,[r7,#39]
 1008 00be 0093     	 str r3,[sp]
 1009 00c0 1046     	 mov r0,r2
 1010 00c2 0121     	 movs r1,#1
 1011 00c4 1B22     	 movs r2,#27
 1012 00c6 48F23013 	 movw r3,#33072
 1013 00ca FFF7FEFF 	 bl CO_error
 430:../CANopen/stack/301/CO_HBconsumer.c ****                                    CO_EMC_HEARTBEAT, i);
 431:../CANopen/stack/301/CO_HBconsumer.c ****                     monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 1014              	 .loc 3 431 0
 1015 00ce BB69     	 ldr r3,[r7,#24]
 1016 00d0 FF22     	 movs r2,#255
 1017 00d2 5A70     	 strb r2,[r3,#1]
 432:../CANopen/stack/301/CO_HBconsumer.c ****                     monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 1018              	 .loc 3 432 0
 1019 00d4 BB69     	 ldr r3,[r7,#24]
 1020 00d6 0322     	 movs r2,#3
 1021 00d8 9A70     	 strb r2,[r3,#2]
 1022              	.L56:
 433:../CANopen/stack/301/CO_HBconsumer.c ****                 }
 434:../CANopen/stack/301/CO_HBconsumer.c **** 
 435:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_TIMERNEXT
 436:../CANopen/stack/301/CO_HBconsumer.c ****                 else if (timerNext_us != NULL) {
 437:../CANopen/stack/301/CO_HBconsumer.c ****                     /* Calculate timerNext_us for next timeout checking. */
 438:../CANopen/stack/301/CO_HBconsumer.c ****                     uint32_t diff = monitoredNode->time_us
 439:../CANopen/stack/301/CO_HBconsumer.c ****                                   - monitoredNode->timeoutTimer;
 440:../CANopen/stack/301/CO_HBconsumer.c ****                     if (*timerNext_us > diff) {
 441:../CANopen/stack/301/CO_HBconsumer.c ****                         *timerNext_us = diff;
 442:../CANopen/stack/301/CO_HBconsumer.c ****                     }
 443:../CANopen/stack/301/CO_HBconsumer.c ****                 }
 444:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 445:../CANopen/stack/301/CO_HBconsumer.c ****             }
 446:../CANopen/stack/301/CO_HBconsumer.c **** 
 447:../CANopen/stack/301/CO_HBconsumer.c ****             if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 1023              	 .loc 3 447 0
 1024 00da BB69     	 ldr r3,[r7,#24]
 1025 00dc 9B78     	 ldrb r3,[r3,#2]
 1026 00de 022B     	 cmp r3,#2
 1027 00e0 01D0     	 beq .L57
 448:../CANopen/stack/301/CO_HBconsumer.c ****                 allMonitoredActiveCurrent = false;
 1028              	 .loc 3 448 0
 1029 00e2 0023     	 movs r3,#0
 1030 00e4 FB62     	 str r3,[r7,#44]
 1031              	.L57:
 449:../CANopen/stack/301/CO_HBconsumer.c ****             }
 450:../CANopen/stack/301/CO_HBconsumer.c ****             if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 1032              	 .loc 3 450 0
 1033 00e6 BB69     	 ldr r3,[r7,#24]
 1034 00e8 5B78     	 ldrb r3,[r3,#1]
 1035 00ea 5BB2     	 sxtb r3,r3
 1036 00ec 052B     	 cmp r3,#5
 1037 00ee 01D0     	 beq .L51
 451:../CANopen/stack/301/CO_HBconsumer.c ****                 allMonitoredOperationalCurrent = false;
 1038              	 .loc 3 451 0
 1039 00f0 0023     	 movs r3,#0
 1040 00f2 BB62     	 str r3,[r7,#40]
 1041              	.L51:
 1042              	.LBE8:
 371:../CANopen/stack/301/CO_HBconsumer.c ****             uint32_t timeDifference_us_copy = timeDifference_us;
 1043              	 .loc 3 371 0 discriminator 2
 1044 00f4 97F82730 	 ldrb r3,[r7,#39]
 1045 00f8 0133     	 adds r3,r3,#1
 1046 00fa 87F82730 	 strb r3,[r7,#39]
 1047              	.L49:
 371:../CANopen/stack/301/CO_HBconsumer.c ****             uint32_t timeDifference_us_copy = timeDifference_us;
 1048              	 .loc 3 371 0 is_stmt 0 discriminator 1
 1049 00fe FB68     	 ldr r3,[r7,#12]
 1050 0100 1B7A     	 ldrb r3,[r3,#8]
 1051 0102 97F82720 	 ldrb r2,[r7,#39]
 1052 0106 9A42     	 cmp r2,r3
 1053 0108 90D3     	 bcc .L58
 1054              	.LBE7:
 371:../CANopen/stack/301/CO_HBconsumer.c ****             uint32_t timeDifference_us_copy = timeDifference_us;
 1055              	 .loc 3 371 0
 1056 010a 28E0     	 b .L59
 1057              	.L48:
 452:../CANopen/stack/301/CO_HBconsumer.c ****             }
 453:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
 454:../CANopen/stack/301/CO_HBconsumer.c ****     || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
 455:../CANopen/stack/301/CO_HBconsumer.c ****             /* Verify, if NMT state of monitored node changed */
 456:../CANopen/stack/301/CO_HBconsumer.c ****             if(monitoredNode->NMTstate != monitoredNode->NMTstatePrev) {
 457:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE
 458:../CANopen/stack/301/CO_HBconsumer.c ****                 if (HBcons->pFunctSignalNmtChanged != NULL) {
 459:../CANopen/stack/301/CO_HBconsumer.c ****                     HBcons->pFunctSignalNmtChanged(
 460:../CANopen/stack/301/CO_HBconsumer.c ****                         monitoredNode->nodeId, i, monitoredNode->NMTstate,
 461:../CANopen/stack/301/CO_HBconsumer.c ****                         HBcons->pFunctSignalObjectNmtChanged);
 462:../CANopen/stack/301/CO_HBconsumer.c **** #else
 463:../CANopen/stack/301/CO_HBconsumer.c ****                 if (monitoredNode->pFunctSignalNmtChanged != NULL) {
 464:../CANopen/stack/301/CO_HBconsumer.c ****                     monitoredNode->pFunctSignalNmtChanged(
 465:../CANopen/stack/301/CO_HBconsumer.c ****                         monitoredNode->nodeId, i, monitoredNode->NMTstate,
 466:../CANopen/stack/301/CO_HBconsumer.c ****                         monitoredNode->pFunctSignalObjectNmtChanged);
 467:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 468:../CANopen/stack/301/CO_HBconsumer.c ****                 }
 469:../CANopen/stack/301/CO_HBconsumer.c ****                 monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
 470:../CANopen/stack/301/CO_HBconsumer.c ****             }
 471:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 472:../CANopen/stack/301/CO_HBconsumer.c ****         }
 473:../CANopen/stack/301/CO_HBconsumer.c ****     }
 474:../CANopen/stack/301/CO_HBconsumer.c ****     else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 1058              	 .loc 3 474 0 is_stmt 1
 1059 010c BB68     	 ldr r3,[r7,#8]
 1060 010e 002B     	 cmp r3,#0
 1061 0110 03D1     	 bne .L60
 1062              	 .loc 3 474 0 is_stmt 0 discriminator 1
 1063 0112 FB68     	 ldr r3,[r7,#12]
 1064 0114 5B69     	 ldr r3,[r3,#20]
 1065 0116 002B     	 cmp r3,#0
 1066 0118 21D0     	 beq .L59
 1067              	.L60:
 1068              	.LBB9:
 475:../CANopen/stack/301/CO_HBconsumer.c ****         /* (pre)operational state changed, clear variables */
 476:../CANopen/stack/301/CO_HBconsumer.c ****         for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 1069              	 .loc 3 476 0 is_stmt 1
 1070 011a 0023     	 movs r3,#0
 1071 011c FB77     	 strb r3,[r7,#31]
 1072 011e 15E0     	 b .L61
 1073              	.L63:
 1074              	.LBB10:
 477:../CANopen/stack/301/CO_HBconsumer.c ****             CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 1075              	 .loc 3 477 0
 1076 0120 FB68     	 ldr r3,[r7,#12]
 1077 0122 5A68     	 ldr r2,[r3,#4]
 1078 0124 FB7F     	 ldrb r3,[r7,#31]
 1079 0126 1B01     	 lsls r3,r3,#4
 1080 0128 1344     	 add r3,r3,r2
 1081 012a 7B61     	 str r3,[r7,#20]
 478:../CANopen/stack/301/CO_HBconsumer.c ****             monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 1082              	 .loc 3 478 0
 1083 012c 7B69     	 ldr r3,[r7,#20]
 1084 012e FF22     	 movs r2,#255
 1085 0130 5A70     	 strb r2,[r3,#1]
 479:../CANopen/stack/301/CO_HBconsumer.c **** #if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
 480:../CANopen/stack/301/CO_HBconsumer.c ****     || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
 481:../CANopen/stack/301/CO_HBconsumer.c ****             monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
 482:../CANopen/stack/301/CO_HBconsumer.c **** #endif
 483:../CANopen/stack/301/CO_HBconsumer.c ****             CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 1086              	 .loc 3 483 0
 1087 0132 7B69     	 ldr r3,[r7,#20]
 1088 0134 0022     	 movs r2,#0
 1089 0136 DA60     	 str r2,[r3,#12]
 484:../CANopen/stack/301/CO_HBconsumer.c ****             if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 1090              	 .loc 3 484 0
 1091 0138 7B69     	 ldr r3,[r7,#20]
 1092 013a 9B78     	 ldrb r3,[r3,#2]
 1093 013c 002B     	 cmp r3,#0
 1094 013e 02D0     	 beq .L62
 485:../CANopen/stack/301/CO_HBconsumer.c ****                 monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 1095              	 .loc 3 485 0
 1096 0140 7B69     	 ldr r3,[r7,#20]
 1097 0142 0122     	 movs r2,#1
 1098 0144 9A70     	 strb r2,[r3,#2]
 1099              	.L62:
 1100              	.LBE10:
 476:../CANopen/stack/301/CO_HBconsumer.c ****             CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 1101              	 .loc 3 476 0 discriminator 2
 1102 0146 FB7F     	 ldrb r3,[r7,#31]
 1103 0148 0133     	 adds r3,r3,#1
 1104 014a FB77     	 strb r3,[r7,#31]
 1105              	.L61:
 476:../CANopen/stack/301/CO_HBconsumer.c ****             CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 1106              	 .loc 3 476 0 is_stmt 0 discriminator 1
 1107 014c FB68     	 ldr r3,[r7,#12]
 1108 014e 1B7A     	 ldrb r3,[r3,#8]
 1109 0150 FA7F     	 ldrb r2,[r7,#31]
 1110 0152 9A42     	 cmp r2,r3
 1111 0154 E4D3     	 bcc .L63
 1112              	.LBE9:
 486:../CANopen/stack/301/CO_HBconsumer.c ****             }
 487:../CANopen/stack/301/CO_HBconsumer.c ****         }
 488:../CANopen/stack/301/CO_HBconsumer.c ****         allMonitoredActiveCurrent = false;
 1113              	 .loc 3 488 0 is_stmt 1
 1114 0156 0023     	 movs r3,#0
 1115 0158 FB62     	 str r3,[r7,#44]
 489:../CANopen/stack/301/CO_HBconsumer.c ****         allMonitoredOperationalCurrent = false;
 1116              	 .loc 3 489 0
 1117 015a 0023     	 movs r3,#0
 1118 015c BB62     	 str r3,[r7,#40]
 1119              	.L59:
 490:../CANopen/stack/301/CO_HBconsumer.c ****     }
 491:../CANopen/stack/301/CO_HBconsumer.c **** 
 492:../CANopen/stack/301/CO_HBconsumer.c ****     /* Clear emergencies when all monitored nodes becomes active.
 493:../CANopen/stack/301/CO_HBconsumer.c ****      * We only have one emergency index for all monitored nodes! */
 494:../CANopen/stack/301/CO_HBconsumer.c ****     if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 1120              	 .loc 3 494 0
 1121 015e FB68     	 ldr r3,[r7,#12]
 1122 0160 DB68     	 ldr r3,[r3,#12]
 1123 0162 002B     	 cmp r3,#0
 1124 0164 16D1     	 bne .L64
 1125              	 .loc 3 494 0 is_stmt 0 discriminator 1
 1126 0166 FB6A     	 ldr r3,[r7,#44]
 1127 0168 002B     	 cmp r3,#0
 1128 016a 13D0     	 beq .L64
 495:../CANopen/stack/301/CO_HBconsumer.c ****         CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 1129              	 .loc 3 495 0 is_stmt 1
 1130 016c FB68     	 ldr r3,[r7,#12]
 1131 016e 1A68     	 ldr r2,[r3]
 1132 0170 0023     	 movs r3,#0
 1133 0172 0093     	 str r3,[sp]
 1134 0174 1046     	 mov r0,r2
 1135 0176 0021     	 movs r1,#0
 1136 0178 1B22     	 movs r2,#27
 1137 017a 0023     	 movs r3,#0
 1138 017c FFF7FEFF 	 bl CO_error
 496:../CANopen/stack/301/CO_HBconsumer.c ****         CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 1139              	 .loc 3 496 0
 1140 0180 FB68     	 ldr r3,[r7,#12]
 1141 0182 1A68     	 ldr r2,[r3]
 1142 0184 0023     	 movs r3,#0
 1143 0186 0093     	 str r3,[sp]
 1144 0188 1046     	 mov r0,r2
 1145 018a 0021     	 movs r1,#0
 1146 018c 1C22     	 movs r2,#28
 1147 018e 0023     	 movs r3,#0
 1148 0190 FFF7FEFF 	 bl CO_error
 1149              	.L64:
 497:../CANopen/stack/301/CO_HBconsumer.c ****     }
 498:../CANopen/stack/301/CO_HBconsumer.c **** 
 499:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 1150              	 .loc 3 499 0
 1151 0194 FB68     	 ldr r3,[r7,#12]
 1152 0196 FA6A     	 ldr r2,[r7,#44]
 1153 0198 DA60     	 str r2,[r3,#12]
 500:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 1154              	 .loc 3 500 0
 1155 019a FB68     	 ldr r3,[r7,#12]
 1156 019c BA6A     	 ldr r2,[r7,#40]
 1157 019e 1A61     	 str r2,[r3,#16]
 501:../CANopen/stack/301/CO_HBconsumer.c ****     HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 1158              	 .loc 3 501 0
 1159 01a0 FB68     	 ldr r3,[r7,#12]
 1160 01a2 BA68     	 ldr r2,[r7,#8]
 1161 01a4 5A61     	 str r2,[r3,#20]
 502:../CANopen/stack/301/CO_HBconsumer.c **** }
 1162              	 .loc 3 502 0
 1163 01a6 3037     	 adds r7,r7,#48
 1164              	.LCFI46:
 1165              	 .cfi_def_cfa_offset 8
 1166 01a8 BD46     	 mov sp,r7
 1167              	.LCFI47:
 1168              	 .cfi_def_cfa_register 13
 1169              	 
 1170 01aa 80BD     	 pop {r7,pc}
 1171              	 .cfi_endproc
 1172              	.LFE41:
 1174              	 .text
 1175              	.Letext0:
 1176              	 .file 4 "d:\\programs\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1177              	 .file 5 "d:\\programs\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1178              	 .file 6 "D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/driver/CO_driver_target.h"
 1179              	 .file 7 "D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301/CO_Emergency.h"
 1180              	 .file 8 "D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301/CO_NMT_Heartbeat.h"
 1181              	 .file 9 "D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301/CO_HBconsumer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CO_HBconsumer.c
    {standard input}:20     .text.CO_getUint32:00000000 $t
    {standard input}:24     .text.CO_getUint32:00000000 CO_getUint32
    {standard input}:64     .text.OD_getIndex:00000000 $t
    {standard input}:68     .text.OD_getIndex:00000000 OD_getIndex
    {standard input}:117    .text.OD_extension_init:00000000 $t
    {standard input}:121    .text.OD_extension_init:00000000 OD_extension_init
    {standard input}:174    .text.OD_get_u32:00000000 $t
    {standard input}:178    .text.OD_get_u32:00000000 OD_get_u32
    {standard input}:224    .text.CO_HBcons_receive:00000000 $t
    {standard input}:228    .text.CO_HBcons_receive:00000000 CO_HBcons_receive
    {standard input}:291    .text.OD_write_1016:00000000 $t
    {standard input}:295    .text.OD_write_1016:00000000 OD_write_1016
    {standard input}:648    .text.CO_HBconsumer_initEntry:00000000 CO_HBconsumer_initEntry
    {standard input}:406    .text.CO_HBconsumer_init:00000000 $t
    {standard input}:411    .text.CO_HBconsumer_init:00000000 CO_HBconsumer_init
    {standard input}:638    .text.CO_HBconsumer_init:00000148 $d
    {standard input}:644    .text.CO_HBconsumer_initEntry:00000000 $t
    {standard input}:865    .text.CO_HBconsumer_initEntry:0000012c $d
    {standard input}:870    .text.CO_HBconsumer_process:00000000 $t
    {standard input}:875    .text.CO_HBconsumer_process:00000000 CO_HBconsumer_process
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memmove
OD_get_value
OD_writeOriginal
memset
OD_readOriginal
CO_CANrxBufferInit
CO_error
