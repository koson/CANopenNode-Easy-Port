   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "CO_storage.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.CO_getUint32,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	CO_getUint32:
  25              	.LFB2:
  26              	 .file 1 "D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301/CO_driver.h"
   1:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
   2:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Interface between CAN hardware and CANopenNode.
   3:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
   4:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @file        CO_driver.h
   5:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @ingroup     CO_driver
   6:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @author      Janez Paternoster
   7:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @copyright   2004 - 2020 Janez Paternoster
   8:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
   9:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * This file is part of CANopenNode, an opensource CANopen Stack.
  10:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Project home page is <https://github.com/CANopenNode/CANopenNode>.
  11:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * For more information on CANopen see <http://www.can-cia.org/>.
  12:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  13:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Licensed under the Apache License, Version 2.0 (the "License");
  14:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * you may not use this file except in compliance with the License.
  15:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * You may obtain a copy of the License at
  16:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  17:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *     http://www.apache.org/licenses/LICENSE-2.0
  18:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  19:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Unless required by applicable law or agreed to in writing, software
  20:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * distributed under the License is distributed on an "AS IS" BASIS,
  21:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * See the License for the specific language governing permissions and
  23:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * limitations under the License.
  24:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
  25:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  26:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_DRIVER_H
  27:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_DRIVER_H
  28:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  29:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #include <string.h>
  30:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  31:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #include "CO_config.h"
  32:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #include "CO_driver_target.h"
  33:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  34:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifdef __cplusplus
  35:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** extern "C" {
  36:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  37:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  38:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /* Stack configuration default global values.
  39:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * For more information see file CO_config.h. */
  40:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_CONFIG_GLOBAL_FLAG_CALLBACK_PRE
  41:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #define CO_CONFIG_GLOBAL_FLAG_CALLBACK_PRE (0)
  42:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  43:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_CONFIG_GLOBAL_RT_FLAG_CALLBACK_PRE
  44:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #define CO_CONFIG_GLOBAL_RT_FLAG_CALLBACK_PRE (0)
  45:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  46:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_CONFIG_GLOBAL_FLAG_TIMERNEXT
  47:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #define CO_CONFIG_GLOBAL_FLAG_TIMERNEXT (0)
  48:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  49:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_CONFIG_GLOBAL_FLAG_OD_DYNAMIC
  50:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #define CO_CONFIG_GLOBAL_FLAG_OD_DYNAMIC CO_CONFIG_FLAG_OD_DYNAMIC
  51:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  52:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifdef CO_DEBUG_COMMON
  53:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #if (CO_CONFIG_DEBUG) & CO_CONFIG_DEBUG_SDO_CLIENT
  54:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****   #define CO_DEBUG_SDO_CLIENT(msg) CO_DEBUG_COMMON(msg)
  55:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #endif
  56:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #if (CO_CONFIG_DEBUG) & CO_CONFIG_DEBUG_SDO_SERVER
  57:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****   #define CO_DEBUG_SDO_SERVER(msg) CO_DEBUG_COMMON(msg)
  58:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  #endif
  59:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
  60:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
  61:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
  62:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @defgroup CO_driver Driver
  63:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Interface between CAN hardware and CANopenNode.
  64:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  65:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @ingroup CO_CANopen_301
  66:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @{
  67:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANopenNode is designed for speed and portability. It runs efficiently on
  68:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * devices from simple 16-bit microcontrollers to PC computers. It can run in
  69:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * multiple threads. Reception of CAN messages is pre-processed with very fast
  70:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * functions. Time critical objects, such as PDO or SYNC are processed in
  71:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * real-time thread and other objects are processed in normal thread. See
  72:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Flowchart in [README.md](index.html) for more information.
  73:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  74:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @anchor CO_obj
  75:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * #### CANopenNode Object
  76:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANopenNode is implemented as a collection of different objects, for example
  77:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * SDO, SYNC, Emergency, PDO, NMT, Heartbeat, etc. Code is written in C language
  78:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * and tries to be object oriented. So each CANopenNode Object is implemented in
  79:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * a pair of .h/.c files. It basically contains a structure with all necessary
  80:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * variables and some functions which operates on it. CANopenNode Object is
  81:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * usually connected with one or more CAN receive or transmit Message Objects.
  82:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * (CAN message Object is a CAN message with specific 11-bit CAN identifier
  83:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * (usually one fixed or a range).)
  84:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  85:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * #### Hardware interface of CANopenNode
  86:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * It consists of minimum three files:
  87:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - **CO_driver.h** file declares common functions. This file is part of the
  88:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANopenNode. It is included from each .c file from CANopenNode.
  89:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - **CO_driver_target.h** file declares microcontroller specific type
  90:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * declarations and defines some macros, which are necessary for CANopenNode.
  91:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * This file is included from CO_driver.h.
  92:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - **CO_driver.c** file defines functions declared in CO_driver.h.
  93:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
  94:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * **CO_driver_target.h** and **CO_driver.c** files are specific for each
  95:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * different microcontroller and are not part of CANopenNode. There are separate
  96:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * projects for different microcontrollers, which usually include CANopenNode as
  97:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * a git submodule. CANopenNode only includes those two files in the `example`
  98:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * directory and they are basically empty. It should be possible to compile the
  99:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * `CANopenNode/example` on any system, however compiled program is not usable.
 100:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CO_driver.h contains documentation for all necessary macros, types and
 101:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * functions.
 102:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 103:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * See [CANopenNode/Wiki](https://github.com/CANopenNode/CANopenNode/wiki) for a
 104:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * known list of available implementations of CANopenNode on different systems
 105:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * and microcontrollers. Everybody is welcome to extend the list with a link to
 106:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * his own implementation.
 107:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 108:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Implementation of the hardware interface for specific microcontroller is not
 109:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * always an easy task. For reliable and efficient operation it is necessary to
 110:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * know some parts of the target microcontroller in detail (for example threads
 111:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * (or interrupts), CAN module, etc.).
 112:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 113:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 114:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Major version number of CANopenNode */
 115:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_VERSION_MAJOR 4
 116:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Minor version number of CANopenNode */
 117:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_VERSION_MINOR 0
 118:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 119:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 120:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /* Macros and declarations in following part are only used for documentation. */
 121:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifdef CO_DOXYGEN
 122:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 123:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @defgroup CO_dataTypes Basic definitions
 124:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @{
 125:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 126:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Target specific basic definitions and data types.
 127:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 128:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 129:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 130:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Depending on processor or compiler architecture, one of the two macros must
 131:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * be defined: CO_LITTLE_ENDIAN or CO_BIG_ENDIAN. CANopen itself is little
 132:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * endian.
 133:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 134:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Basic data types may be specified differently on different architectures.
 135:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Usually `true` and `false` are defined in `<stdbool.h>`, `NULL` is defined in
 136:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * `<stddef.h>`, `int8_t` to `uint64_t` are defined in `<stdint.h>`.
 137:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 138:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** CO_LITTLE_ENDIAN or CO_BIG_ENDIAN must be defined */
 139:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_LITTLE_ENDIAN
 140:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Macro must swap bytes, if CO_BIG_ENDIAN is defined */
 141:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_SWAP_16(x) x
 142:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Macro must swap bytes, if CO_BIG_ENDIAN is defined */
 143:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_SWAP_32(x) x
 144:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Macro must swap bytes, if CO_BIG_ENDIAN is defined */
 145:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_SWAP_64(x) x
 146:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** NULL, for general usage */
 147:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define NULL (0)
 148:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Logical true, for general use */
 149:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define true 1
 150:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Logical false, for general use */
 151:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define false 0
 152:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Boolean data type for general use */
 153:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef uint_fast8_t bool_t;
 154:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** INTEGER8 in CANopen (0002h), 8-bit signed integer */
 155:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef signed char int8_t;
 156:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** INTEGER16 in CANopen (0003h), 16-bit signed integer */
 157:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef signed int int16_t;
 158:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** INTEGER32 in CANopen (0004h), 32-bit signed integer */
 159:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef signed long int int32_t;
 160:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** INTEGER64 in CANopen (0015h), 64-bit signed integer */
 161:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef signed long long int int64_t;
 162:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** UNSIGNED8 in CANopen (0005h), 8-bit unsigned integer */
 163:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef unsigned char uint8_t;
 164:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** UNSIGNED16 in CANopen (0006h), 16-bit unsigned integer */
 165:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef unsigned int uint16_t;
 166:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** UNSIGNED32 in CANopen (0007h), 32-bit unsigned integer */
 167:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef unsigned long int uint32_t;
 168:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** UNSIGNED64 in CANopen (001Bh), 64-bit unsigned integer */
 169:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef unsigned long long int uint64_t;
 170:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** REAL32 in CANopen (0008h), single precision floating point value, 32-bit */
 171:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef float float32_t;
 172:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** REAL64 in CANopen (0011h), double precision floating point value, 64-bit */
 173:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef double float64_t;
 174:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** @} */
 175:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 176:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 177:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 178:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @defgroup CO_CAN_Message_reception Reception of CAN messages
 179:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @{
 180:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 181:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Target specific definitions and description of CAN message reception
 182:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 183:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN messages in CANopenNode are usually received by its own thread or higher
 184:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * priority interrupt. Received CAN messages are first filtered by hardware or
 185:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * by software. Thread then examines its 11-bit CAN-id and mask and determines,
 186:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * to which \ref CO_obj "CANopenNode Object" it belongs to. After that it calls
 187:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * predefined CANrx_callback() function, which quickly pre-processes the message
 188:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * and fetches the relevant data. CANrx_callback() function is defined by each
 189:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * \ref CO_obj "CANopenNode Object" separately. Pre-processed fetched data are
 190:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * later processed in another thread.
 191:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 192:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * If \ref CO_obj "CANopenNode Object" reception of specific CAN message, it
 193:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * must first configure its own CO_CANrx_t object with the CO_CANrxBufferInit()
 194:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * function.
 195:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 196:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 197:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 198:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN receive callback function which pre-processes received CAN message
 199:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 200:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * It is called by fast CAN receive thread. Each \ref CO_obj "CANopenNode
 201:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Object" defines its own and registers it with CO_CANrxBufferInit(), by
 202:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * passing function pointer.
 203:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 204:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param object pointer to specific \ref CO_obj "CANopenNode Object",
 205:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * registered with CO_CANrxBufferInit()
 206:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxMsg pointer to received CAN message
 207:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 208:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CANrx_callback(void *object, void *rxMsg);
 209:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 210:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 211:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANrx_callback() can read CAN identifier from received CAN message
 212:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 213:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 214:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 215:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * This is target specific function and is specific for specific
 216:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * microcontroller. It is best to implement it by using inline function or
 217:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * macro. `rxMsg` parameter should cast to a pointer to structure. For best
 218:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * efficiency structure may have the same alignment as CAN registers inside CAN
 219:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * module.
 220:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 221:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxMsg Pointer to received message
 222:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return 11-bit CAN standard identifier.
 223:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 224:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint16_t CO_CANrxMsg_readIdent(void *rxMsg) {
 225:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return 0;
 226:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
 227:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 228:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 229:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANrx_callback() can read Data Length Code from received CAN message
 230:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 231:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * See also CO_CANrxMsg_readIdent():
 232:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 233:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxMsg Pointer to received message
 234:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return data length in bytes (0 to 8)
 235:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 236:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint8_t CO_CANrxMsg_readDLC(void *rxMsg) {
 237:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return 0;
 238:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
 239:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 240:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 241:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANrx_callback() can read pointer to data from received CAN message
 242:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 243:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * See also CO_CANrxMsg_readIdent():
 244:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 245:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxMsg Pointer to received message
 246:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return pointer to data buffer
 247:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 248:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint8_t *CO_CANrxMsg_readData(void *rxMsg) {
 249:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return NULL;
 250:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
 251:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 252:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 253:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Configuration object for CAN received message for specific \ref CO_obj
 254:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * "CANopenNode Object".
 255:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 256:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 257:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 258:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Data fields of this structure are used exclusively by the driver. Usually it
 259:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * has the following data fields, but they may differ for different
 260:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * microcontrollers. Array of multiple CO_CANrx_t objects is included inside
 261:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CO_CANmodule_t.
 262:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 263:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef struct {
 264:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t ident; /**< Standard CAN Identifier (bits 0..10) + RTR (bit 11) */
 265:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t mask;  /**< Standard CAN Identifier mask with the same alignment as
 266:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                        ident */
 267:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void *object;   /**< \ref CO_obj "CANopenNode Object" initialized in from
 268:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                        CO_CANrxBufferInit() */
 269:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void (*pCANrx_callback)(
 270:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         void *object, void *message); /**< Pointer to CANrx_callback()
 271:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          initialized in CO_CANrxBufferInit() */
 272:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_CANrx_t;
 273:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** @} */
 274:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 275:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 276:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 277:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @defgroup CO_CAN_Message_transmission Transmission of CAN messages
 278:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @{
 279:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 280:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Target specific definitions and description of CAN message transmission
 281:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 282:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * If \ref CO_obj "CANopenNode Object" needs transmitting CAN message, it must
 283:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * first configure its own CO_CANtx_t object with the CO_CANtxBufferInit()
 284:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * function. CAN message can then be sent with CO_CANsend() function. If at that
 285:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * moment CAN transmit buffer inside microcontroller's CAN module is free,
 286:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * message is copied directly to the CAN module. Otherwise CO_CANsend() function
 287:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * sets _bufferFull_ flag to true. Message will be then sent by CAN TX interrupt
 288:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * as soon as CAN module is freed. Until message is not copied to CAN module,
 289:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * its contents must not change. If there are multiple CO_CANtx_t objects with
 290:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * _bufferFull_ flag set to true, then CO_CANtx_t with lower index will be sent
 291:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * first.
 292:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 293:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 294:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 295:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Configuration object for CAN transmit message for specific \ref CO_obj
 296:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * "CANopenNode Object".
 297:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 298:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 299:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 300:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Data fields of this structure are used exclusively by the driver. Usually it
 301:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * has the following data fields, but they may differ for different
 302:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * microcontrollers. Array of multiple CO_CANtx_t objects is included inside
 303:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CO_CANmodule_t.
 304:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 305:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef struct {
 306:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint32_t ident;             /**< CAN identifier as aligned in CAN module */
 307:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t DLC;                /**< Length of CAN message */
 308:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t data[8];            /**< 8 data bytes */
 309:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t bufferFull; /**< True if previous message is still in the
 310:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                      buffer */
 311:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t syncFlag;   /**< Synchronous PDO messages has this flag set.
 312:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                   It prevents them to be sent outside the synchronous window */
 313:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_CANtx_t;
 314:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** @} */
 315:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 316:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 317:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 318:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Complete CAN module object.
 319:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 320:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 321:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 322:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Usually it has the following data fields, but they may differ for different
 323:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * microcontrollers.
 324:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 325:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef struct {
 326:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void *CANptr;                      /**< From CO_CANmodule_init() */
 327:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CANrx_t *rxArray;               /**< From CO_CANmodule_init() */
 328:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t rxSize;                   /**< From CO_CANmodule_init() */
 329:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CANtx_t *txArray;               /**< From CO_CANmodule_init() */
 330:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t txSize;                   /**< From CO_CANmodule_init() */
 331:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t CANerrorStatus;           /**< CAN error status bitfield,
 332:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                             see @ref CO_CAN_ERR_status_t */
 333:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t CANnormal;         /**< CAN module is in normal mode */
 334:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t useCANrxFilters;   /**< Value different than zero indicates,
 335:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             that CAN module hardware filters are used for CAN reception. If
 336:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             there is not enough hardware filters, they won't be used. In this
 337:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             case will be *all* received CAN messages processed by software. */
 338:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t bufferInhibitFlag; /**< If flag is true, then message in
 339:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             transmit buffer is synchronous PDO message, which will be aborted,
 340:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             if CO_clearPendingSyncPDOs() function will be called by application.
 341:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             This may be necessary if Synchronous window time was expired. */
 342:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile bool_t firstCANtxMessage; /**< Equal to 1, when the first
 343:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             transmitted message (bootup message) is in CAN TX buffers */
 344:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     volatile uint16_t CANtxCount;      /**< Number of messages in transmit
 345:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****             buffer, which are waiting to be copied to the CAN module */
 346:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint32_t errOld;                   /**< Previous state of CAN errors */
 347:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_CANmodule_t;
 348:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 349:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 350:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 351:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Data storage object for one entry.
 352:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 353:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Must be defined in the **CO_driver_target.h** file.
 354:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 355:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * For more information on Data storage see @ref CO_storage or **CO_storage.h**
 356:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * file. Structure members documented here are always required or required with
 357:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @ref CO_storage_eeprom. Target system may add own additional, hardware
 358:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * specific variables.
 359:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 360:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef struct {
 361:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Address of data to store, always required. */
 362:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void *addr;
 363:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Length of data to store, always required. */
 364:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     size_t len;
 365:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Sub index in OD objects 1010 and 1011, from 2 to 127. Writing
 366:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * 0x65766173 to 1010,subIndexOD will store data to non-volatile memory.
 367:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * Writing 0x64616F6C to 1011,subIndexOD will restore default data, always
 368:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * required. */
 369:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t subIndexOD;
 370:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Attribute from @ref CO_storage_attributes_t, always required. */
 371:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t attr;
 372:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Pointer to storage module, target system specific usage, required with
 373:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * @ref CO_storage_eeprom. */
 374:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void *storageModule;
 375:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** CRC checksum of the data stored in eeprom, set on store, required with
 376:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * @ref CO_storage_eeprom. */
 377:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t crc;
 378:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Address of entry signature inside eeprom, set by init, required with
 379:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * @ref CO_storage_eeprom. */
 380:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     size_t eepromAddrSignature;
 381:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Address of data inside eeprom, set by init, required with
 382:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * @ref CO_storage_eeprom. */
 383:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     size_t eepromAddr;
 384:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Offset of next byte being updated by automatic storage, required with
 385:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****      * @ref CO_storage_eeprom. */
 386:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     size_t offset;
 387:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     /** Additional target specific parameters, optional. */
 388:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     void *additionalParameters;
 389:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_storage_entry_t;
 390:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 391:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 392:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 393:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @defgroup CO_critical_sections Critical sections
 394:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @{
 395:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 396:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Protection of critical sections in multi-threaded operation.
 397:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 398:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANopenNode is designed to run in different threads, as described in
 399:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * [README.md](index.html). Threads are implemented differently in different
 400:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * systems. In microcontrollers threads are interrupts with different
 401:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * priorities, for example. It is necessary to protect sections, where different
 402:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * threads access to the same resource. In simple systems interrupts or
 403:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * scheduler may be temporary disabled between access to the shared resource.
 404:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Otherwise mutexes or semaphores can be used.
 405:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 406:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * #### Reentrant functions
 407:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Functions CO_CANsend() from C_driver.h, and CO_error() from CO_Emergency.h
 408:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * may be called from different threads. Critical sections must be protected.
 409:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Either by disabling scheduler or interrupts or by mutexes or semaphores.
 410:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Lock/unlock macro is called with pointer to CAN module, which may be used
 411:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * inside.
 412:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 413:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * #### Object Dictionary variables
 414:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * In general, there are two threads, which accesses OD variables: mainline
 415:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * (initialization, storage, SDO access) and timer (PDO access). CANopenNode
 416:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * uses locking mechanism, where SDO server (or other mainline code) prevents
 417:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * execution of the real-time thread at the moment it reads or writes OD
 418:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * variable. CO_LOCK_OD(CAN_MODULE) and CO_UNLOCK_OD(CAN_MODULE) macros
 419:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * are used to protect:
 420:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - Whole real-time thread,
 421:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - SDO server protects read/write access to OD variable, if specific OD
 422:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   variable has ODA_TRPDO or ODA_TRSRDO from @ref OD_attributes_t set. If
 423:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   those attributes are not set, OD variable is not locked by SDO server.
 424:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   Locking of long OD variables, not accessible from real-time thread, may
 425:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   block RT thread.
 426:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - Any mainline code, which accesses PDO-mappable OD variable, must protect
 427:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   read/write with locking macros. Use @ref OD_mappable() for check.
 428:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * - Other cases, where non-PDO-mappable OD variable is used inside real-time
 429:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   thread by some other part of the user application must be considered with
 430:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *   special care.
 431:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 432:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * #### Synchronization functions for CAN receive
 433:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * After CAN message is received, it is pre-processed in CANrx_callback(), which
 434:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * copies some data into appropriate object and at the end sets **new_message**
 435:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * flag. This flag is then pooled in another thread, which further processes the
 436:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * message. The problem is, that compiler optimization may shuffle memory
 437:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * operations, so it is necessary to ensure, that **new_message** flag is surely
 438:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * set at the end. It is necessary to use [Memory
 439:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * barrier](https://en.wikipedia.org/wiki/Memory_barrier).
 440:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 441:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * If receive function runs inside IRQ, no further synchronization is needed.
 442:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Otherwise, some kind of synchronization has to be included. The following
 443:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * example uses GCC builtin memory barrier `__sync_synchronize()`. More
 444:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * information can be found
 445:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * [here](https://stackoverflow.com/questions/982129/what-does-sync-synchronize-do#982179).
 446:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 447:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 448:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Lock critical section in CO_CANsend() */
 449:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_LOCK_CAN_SEND(CAN_MODULE)
 450:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Unlock critical section in CO_CANsend() */
 451:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_UNLOCK_CAN_SEND(CAN_MODULE)
 452:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Lock critical section in CO_errorReport() or CO_errorReset() */
 453:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_LOCK_EMCY(CAN_MODULE)
 454:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Unlock critical section in CO_errorReport() or CO_errorReset() */
 455:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_UNLOCK_EMCY(CAN_MODULE)
 456:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Lock critical section when accessing Object Dictionary */
 457:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_LOCK_OD(CAN_MODULE)
 458:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Unock critical section when accessing Object Dictionary */
 459:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_UNLOCK_OD(CAN_MODULE)
 460:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 461:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Check if new message has arrived */
 462:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_FLAG_READ(rxNew) ((rxNew) != NULL)
 463:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Set new message flag */
 464:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_FLAG_SET(rxNew) { __sync_synchronize(); rxNew = (void *)1L; }
 465:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Clear new message flag */
 466:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_FLAG_CLEAR(rxNew) { __sync_synchronize(); rxNew = NULL; }
 467:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 468:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** @} */
 469:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif /* CO_DOXYGEN */
 470:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 471:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 472:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 473:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Default CANopen identifiers.
 474:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 475:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Default CANopen identifiers for CANopen communication objects. Same as
 476:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * 11-bit addresses of CAN messages. These are default identifiers and
 477:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * can be changed in CANopen. Especially PDO identifiers are configured
 478:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * in PDO linking phase of the CANopen network configuration.
 479:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 480:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef enum {
 481:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_NMT_SERVICE = 0x000, /**< 0x000, Network management */
 482:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_GFC = 0x001,         /**< 0x001, Global fail-safe command */
 483:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_SYNC = 0x080,        /**< 0x080, Synchronous message */
 484:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_EMERGENCY = 0x080,   /**< 0x080, Emergency messages (+nodeID) */
 485:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_TIME = 0x100,        /**< 0x100, Time message */
 486:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_SRDO_1 = 0x0FF,      /**< 0x0FF, Default SRDO1 (+2*nodeID) */
 487:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_TPDO_1 = 0x180,      /**< 0x180, Default TPDO1 (+nodeID) */
 488:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_RPDO_1 = 0x200,      /**< 0x200, Default RPDO1 (+nodeID) */
 489:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_TPDO_2 = 0x280,      /**< 0x280, Default TPDO2 (+nodeID) */
 490:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_RPDO_2 = 0x300,      /**< 0x300, Default RPDO2 (+nodeID) */
 491:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_TPDO_3 = 0x380,      /**< 0x380, Default TPDO3 (+nodeID) */
 492:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_RPDO_3 = 0x400,      /**< 0x400, Default RPDO3 (+nodeID) */
 493:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_TPDO_4 = 0x480,      /**< 0x480, Default TPDO4 (+nodeID) */
 494:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_RPDO_4 = 0x500,      /**< 0x500, Default RPDO5 (+nodeID) */
 495:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_SDO_SRV = 0x580, /**< 0x580, SDO response from server (+nodeID) */
 496:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_SDO_CLI = 0x600, /**< 0x600, SDO request from client (+nodeID) */
 497:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_HEARTBEAT = 0x700,   /**< 0x700, Heartbeat message */
 498:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_LSS_SLV = 0x7E4,     /**< 0x7E4, LSS response from slave */
 499:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ID_LSS_MST = 0x7E5      /**< 0x7E5, LSS request from master */
 500:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_Default_CAN_ID_t;
 501:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 502:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 503:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 504:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Restricted CAN-IDs
 505:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 506:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Macro for verifying 'Restricted CAN-IDs', as specified by standard CiA301.
 507:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * They shall not be used for SYNC, TIME, EMCY, PDO and SDO.
 508:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 509:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #ifndef CO_IS_RESTRICTED_CAN_ID
 510:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #define CO_IS_RESTRICTED_CAN_ID(CAN_ID) ((CAN_ID) <= 0x7F \
 511:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         || ((CAN_ID) >= 0x101 && (CAN_ID) <= 0x180) \
 512:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         || ((CAN_ID) >= 0x581 && (CAN_ID) <= 0x5FF) \
 513:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         || ((CAN_ID) >= 0x601 && (CAN_ID) <= 0x67F) \
 514:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         || ((CAN_ID) >= 0x6E0 && (CAN_ID) <= 0x6FF) \
 515:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         || (CAN_ID) >= 0x701)
 516:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
 517:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 518:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 519:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 520:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN error status bitmasks.
 521:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 522:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN warning level is reached, if CAN transmit or receive error counter is
 523:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * more or equal to 96. CAN passive level is reached, if counters are more or
 524:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * equal to 128. Transmitter goes in error state 'bus off' if transmit error
 525:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * counter is more or equal to 256.
 526:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 527:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef enum {
 528:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRTX_WARNING = 0x0001,  /**< 0x0001, CAN transmitter warning */
 529:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRTX_PASSIVE = 0x0002,  /**< 0x0002, CAN transmitter passive */
 530:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRTX_BUS_OFF = 0x0004,  /**< 0x0004, CAN transmitter bus off */
 531:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRTX_OVERFLOW = 0x0008, /**< 0x0008, CAN transmitter overflow */
 532:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 533:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRTX_PDO_LATE = 0x0080, /**< 0x0080, TPDO is outside sync window */
 534:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 535:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRRX_WARNING = 0x0100,  /**< 0x0100, CAN receiver warning */
 536:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRRX_PASSIVE = 0x0200,  /**< 0x0200, CAN receiver passive */
 537:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERRRX_OVERFLOW = 0x0800, /**< 0x0800, CAN receiver overflow */
 538:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 539:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_CAN_ERR_WARN_PASSIVE = 0x0303/**< 0x0303, combination */
 540:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_CAN_ERR_status_t;
 541:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 542:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 543:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 544:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Return values of some CANopen functions. If function was executed
 545:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * successfully it returns 0 otherwise it returns <0.
 546:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 547:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** typedef enum {
 548:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_NO = 0,                /**< Operation completed successfully */
 549:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_ILLEGAL_ARGUMENT = -1, /**< Error in function arguments */
 550:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_OUT_OF_MEMORY = -2,    /**< Memory allocation failed */
 551:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_TIMEOUT = -3,          /**< Function timeout */
 552:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_ILLEGAL_BAUDRATE = -4, /**< Illegal baudrate passed to function
 553:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          CO_CANmodule_init() */
 554:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_RX_OVERFLOW = -5,      /**< Previous message was not processed
 555:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          yet */
 556:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_RX_PDO_OVERFLOW = -6,  /**< previous PDO was not processed yet */
 557:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_RX_MSG_LENGTH = -7,    /**< Wrong receive message length */
 558:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_RX_PDO_LENGTH = -8,    /**< Wrong receive PDO length */
 559:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_TX_OVERFLOW = -9,      /**< Previous message is still waiting,
 560:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          buffer full */
 561:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_TX_PDO_WINDOW = -10,   /**< Synchronous TPDO is outside window */
 562:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_TX_UNCONFIGURED = -11, /**< Transmit buffer was not configured
 563:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          properly */
 564:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_OD_PARAMETERS = -12,   /**< Error in Object Dictionary parameters*/
 565:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_DATA_CORRUPT = -13,    /**< Stored data are corrupt */
 566:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_CRC = -14,             /**< CRC does not match */
 567:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_TX_BUSY = -15,         /**< Sending rejected because driver is
 568:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          busy. Try again */
 569:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_WRONG_NMT_STATE = -16, /**< Command can't be processed in current
 570:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          state */
 571:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_SYSCALL = -17,         /**< Syscall failed */
 572:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_INVALID_STATE = -18,   /**< Driver not ready */
 573:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     CO_ERROR_NODE_ID_UNCONFIGURED_LSS = -19 /**< Node-id is in LSS unconfigured
 574:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          state. If objects are handled properly,
 575:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                          this may not be an error. */
 576:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** } CO_ReturnError_t;
 577:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 578:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 579:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 580:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Request CAN configuration (stopped) mode and *wait* until it is set.
 581:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 582:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANptr Pointer to CAN device
 583:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 584:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CO_CANsetConfigurationMode(void *CANptr);
 585:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 586:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 587:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 588:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Request CAN normal (operational) mode and *wait* until it is set.
 589:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 590:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule CO_CANmodule_t object.
 591:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 592:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CO_CANsetNormalMode(CO_CANmodule_t *CANmodule);
 593:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 594:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 595:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 596:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Initialize CAN module object.
 597:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 598:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Function must be called in the communication reset section. CAN module must
 599:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * be in Configuration Mode before.
 600:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 601:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object will be initialized.
 602:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANptr Pointer to CAN device.
 603:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxArray Array for handling received CAN messages
 604:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rxSize Size of the above array. Must be equal to number of receiving
 605:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN objects.
 606:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param txArray Array for handling transmitting CAN messages
 607:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param txSize Size of the above array. Must be equal to number of
 608:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * transmitting CAN objects.
 609:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANbitRate Valid values are (in kbps): 10, 20, 50, 125, 250, 500, 800,
 610:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * 1000. If value is illegal, bitrate defaults to 125.
 611:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 612:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Return #CO_ReturnError_t: CO_ERROR_NO or CO_ERROR_ILLEGAL_ARGUMENT.
 613:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 614:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** CO_ReturnError_t CO_CANmodule_init(CO_CANmodule_t *CANmodule,
 615:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    void *CANptr,
 616:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    CO_CANrx_t rxArray[],
 617:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    uint16_t rxSize,
 618:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    CO_CANtx_t txArray[],
 619:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    uint16_t txSize,
 620:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                    uint16_t CANbitRate);
 621:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 622:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 623:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 624:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Switch off CANmodule. Call at program exit.
 625:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 626:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule CAN module object.
 627:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 628:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CO_CANmodule_disable(CO_CANmodule_t *CANmodule);
 629:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 630:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 631:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 632:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Configure CAN message receive buffer.
 633:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 634:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Function configures specific CAN receive buffer. It sets CAN identifier
 635:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * and connects buffer with specific object. Function must be called for each
 636:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * member in _rxArray_ from CO_CANmodule_t.
 637:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 638:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object.
 639:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param index Index of the specific buffer in _rxArray_.
 640:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param ident 11-bit standard CAN Identifier. If two or more CANrx buffers
 641:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * have the same _ident_, then buffer with lowest _index_ has precedence and
 642:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * other CANrx buffers will be ignored.
 643:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param mask 11-bit mask for identifier. Most usually set to 0x7FF.
 644:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Received message (rcvMsg) will be accepted if the following
 645:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * condition is true: (((rcvMsgId ^ ident) & mask) == 0).
 646:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rtr If true, 'Remote Transmit Request' messages will be accepted.
 647:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param object CANopen object, to which buffer is connected. It will be used
 648:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * as an argument to CANrx_callback. Its type is (void), CANrx_callback will
 649:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * change its type back to the correct object type.
 650:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANrx_callback Pointer to function, which will be called, if received
 651:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CAN message matches the identifier. It must be fast function.
 652:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 653:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Return #CO_ReturnError_t: CO_ERROR_NO CO_ERROR_ILLEGAL_ARGUMENT or
 654:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CO_ERROR_OUT_OF_MEMORY (not enough masks for configuration).
 655:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 656:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** CO_ReturnError_t CO_CANrxBufferInit(CO_CANmodule_t *CANmodule,
 657:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     uint16_t index,
 658:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     uint16_t ident,
 659:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     uint16_t mask,
 660:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     bool_t rtr,
 661:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     void *object,
 662:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                     void (*CANrx_callback)(void *object,
 663:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                                            void *message));
 664:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 665:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 666:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 667:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Configure CAN message transmit buffer.
 668:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 669:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Function configures specific CAN transmit buffer. Function must be called for
 670:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * each member in _txArray_ from CO_CANmodule_t.
 671:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 672:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object.
 673:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param index Index of the specific buffer in _txArray_.
 674:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param ident 11-bit standard CAN Identifier.
 675:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param rtr If true, 'Remote Transmit Request' messages will be transmitted.
 676:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param noOfBytes Length of CAN message in bytes (0 to 8 bytes).
 677:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param syncFlag This flag bit is used for synchronous TPDO messages. If it is
 678:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * set, message will not be sent, if current time is outside synchronous window.
 679:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 680:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return Pointer to CAN transmit message buffer. 8 bytes data array inside
 681:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * buffer should be written, before CO_CANsend() function is called.
 682:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Zero is returned in case of wrong arguments.
 683:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 684:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** CO_CANtx_t *CO_CANtxBufferInit(CO_CANmodule_t *CANmodule,
 685:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                uint16_t index,
 686:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                uint16_t ident,
 687:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                bool_t rtr,
 688:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                uint8_t noOfBytes,
 689:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****                                bool_t syncFlag);
 690:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 691:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 692:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 693:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Send CAN message.
 694:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 695:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object.
 696:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param buffer Pointer to transmit buffer, returned by CO_CANtxBufferInit().
 697:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Data bytes must be written in buffer before function call.
 698:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 699:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return #CO_ReturnError_t: CO_ERROR_NO, CO_ERROR_TX_OVERFLOW or
 700:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CO_ERROR_TX_PDO_WINDOW (Synchronous TPDO is outside window).
 701:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 702:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** CO_ReturnError_t CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer);
 703:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 704:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 705:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 706:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Clear all synchronous TPDOs from CAN module transmit buffers.
 707:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 708:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * CANopen allows synchronous PDO communication only inside time between SYNC
 709:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * message and SYNC Window. If time is outside this window, new synchronous PDOs
 710:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * must not be sent and all pending sync TPDOs, which may be on CAN TX buffers,
 711:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * may optionally be cleared.
 712:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 713:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * This function checks (and aborts transmission if necessary) CAN TX buffers
 714:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * when it is called. Function should be called by the stack in the moment,
 715:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * when SYNC time was just passed out of synchronous window.
 716:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 717:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object.
 718:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 719:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule);
 720:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 721:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 722:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 723:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Process can module - verify CAN errors
 724:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 725:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Function must be called cyclically. It should calculate CANerrorStatus
 726:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * bitfield for CAN errors defined in @ref CO_CAN_ERR_status_t.
 727:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 728:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param CANmodule This object.
 729:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 730:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** void CO_CANmodule_process(CO_CANmodule_t *CANmodule);
 731:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 732:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** 
 733:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /**
 734:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * Get uint8_t value from memory buffer
 735:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 736:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @param buf Memory buffer to get value from.
 737:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  *
 738:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  * @return Value
 739:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****  */
 740:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint8_t CO_getUint8(const void *buf) {
 741:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #if (C2000_PORT != 0)
 742:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t value = 0;
 743:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     value = (*((uint8_t *)buf) & 0x00FF);
 744:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return value;
 745:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #else
 746:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 747:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
 748:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
 749:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Get uint16_t value from memory buffer, see @ref CO_getUint8 */
 750:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint16_t CO_getUint16(const void *buf) {
 751:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #if (C2000_PORT != 0)
 752:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t value = 0;
 753:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t * pBuf8 = (uint8_t *)buf;
 754:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     for (int i = 0; i < 2; i++) {
 755:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         value += ((uint16_t)(pBuf8[i])) << (8 * i);
 756:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     }
 757:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return value;
 758:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #else
 759:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 760:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
 761:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
 762:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** /** Get uint32_t value from memory buffer, see @ref CO_getUint8 */
 763:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** static inline uint32_t CO_getUint32(const void *buf) {
  27              	 .loc 1 763 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31 0000 80B5     	 push {r7,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 8
  34              	 .cfi_offset 7,-8
  35              	 .cfi_offset 14,-4
  36 0002 84B0     	 sub sp,sp,#16
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 764:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #if (C2000_PORT != 0)
 765:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint32_t value = 0;
 766:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint8_t * pBuf8 = (uint8_t *)buf;
 767:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     for(int i = 0; i < 4; i++) {
 768:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****         value += ((uint32_t)(pBuf8[i])) << (8 * i);
 769:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     }
 770:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     return value;
 771:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #else
 772:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h ****     uint32_t value; memmove(&value, buf, sizeof(value)); return value;
  43              	 .loc 1 772 0
  44 0008 07F10C03 	 add r3,r7,#12
  45 000c 1846     	 mov r0,r3
  46 000e 7968     	 ldr r1,[r7,#4]
  47 0010 0422     	 movs r2,#4
  48 0012 FFF7FEFF 	 bl memmove
  49 0016 FB68     	 ldr r3,[r7,#12]
 773:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** #endif
 774:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_driver.h **** }
  50              	 .loc 1 774 0
  51 0018 1846     	 mov r0,r3
  52 001a 1037     	 adds r7,r7,#16
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 8
  55 001c BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001e 80BD     	 pop {r7,pc}
  60              	 .cfi_endproc
  61              	.LFE2:
  63              	 .section .text.OD_extension_init,"ax",%progbits
  64              	 .align 2
  65              	 .thumb
  66              	 .thumb_func
  68              	OD_extension_init:
  69              	.LFB12:
  70              	 .file 2 "D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301/CO_ODinterface.h"
   1:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
   2:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * CANopen Object Dictionary interface
   3:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
   4:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @file        CO_ODinterface.h
   5:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ingroup     CO_ODinterface
   6:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @author      Janez Paternoster
   7:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @copyright   2020 Janez Paternoster
   8:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
   9:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * This file is part of CANopenNode, an opensource CANopen Stack.
  10:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Project home page is <https://github.com/CANopenNode/CANopenNode>.
  11:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * For more information on CANopen see <http://www.can-cia.org/>.
  12:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
  13:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Licensed under the Apache License, Version 2.0 (the "License");
  14:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * you may not use this file except in compliance with the License.
  15:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * You may obtain a copy of the License at
  16:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
  17:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *     http://www.apache.org/licenses/LICENSE-2.0
  18:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
  19:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Unless required by applicable law or agreed to in writing, software
  20:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * distributed under the License is distributed on an "AS IS" BASIS,
  21:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * See the License for the specific language governing permissions and
  23:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * limitations under the License.
  24:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
  25:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  26:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #ifndef CO_OD_INTERFACE_H
  27:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #define CO_OD_INTERFACE_H
  28:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  29:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #include "301/CO_driver.h"
  30:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  31:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #ifdef __cplusplus
  32:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** extern "C" {
  33:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
  34:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  35:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
  36:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @defgroup CO_ODinterface OD interface
  37:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * CANopen Object Dictionary interface.
  38:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
  39:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ingroup CO_CANopen_301
  40:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @{
  41:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * See @ref doc/objectDictionary.md
  42:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
  43:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  44:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #ifndef CO_OD_OWN_TYPES
  45:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Variable of type OD_size_t contains data length in bytes of OD variable */
  46:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef uint32_t OD_size_t;
  47:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Type (and size) of Object Dictionary attribute */
  48:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef uint8_t OD_attr_t;
  49:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
  50:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  51:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #ifndef OD_FLAGS_PDO_SIZE
  52:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Size of of flagsPDO variable inside @ref OD_extension_t, from 0 to 32. */
  53:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #define OD_FLAGS_PDO_SIZE 4
  54:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
  55:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  56:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #ifndef CO_PROGMEM
  57:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /** Modifier for OD objects. This is large amount of data and is specified in
  58:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Object Dictionary (OD.c file usually) */
  59:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #define CO_PROGMEM const
  60:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
  61:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  62:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
  63:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
  64:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Common DS301 object dictionary entries.
  65:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
  66:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef enum {
  67:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1000_DEV_TYPE           = 0x1000U,/**< Device type */
  68:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1001_ERR_REG            = 0x1001U,/**< Error register */
  69:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1002_MANUF_STATUS_REG   = 0x1002U,/**< Manufacturer status register */
  70:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1003_PREDEF_ERR_FIELD   = 0x1003U,/**< Predefined error field */
  71:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1004_RSV                = 0x1004U,/**< Reserved */
  72:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1005_COBID_SYNC         = 0x1005U,/**< Sync message cob-id */
  73:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1006_COMM_CYCL_PERIOD   = 0x1006U,/**< Communication cycle period */
  74:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1007_SYNC_WINDOW_LEN    = 0x1007U,/**< Sync windows length */
  75:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1008_MANUF_DEV_NAME     = 0x1008U,/**< Manufacturer device name */
  76:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1009_MANUF_HW_VERSION   = 0x1009U,/**< Manufacturer hardware version */
  77:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100A_MANUF_SW_VERSION   = 0x100AU,/**< Manufacturer software version */
  78:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100B_RSV                = 0x100BU,/**< Reserved */
  79:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100C_GUARD_TIME         = 0x100CU,/**< Guard time */
  80:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100D_LIFETIME_FACTOR    = 0x100DU,/**< Life time factor */
  81:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100E_RSV                = 0x100EU,/**< Reserved */
  82:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H100F_RSV                = 0x100FU,/**< Reserved */
  83:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1010_STORE_PARAMETERS   = 0x1010U,/**< Store params in persistent mem.*/
  84:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1011_RESTORE_DEFAULT    = 0x1011U,/**< Restore default parameters */
  85:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1012_COBID_TIME         = 0x1012U,/**< Timestamp message cob-id */
  86:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1013_HIGH_RES_TIMESTAMP = 0x1013U,/**< High resolution timestamp */
  87:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1014_COBID_EMERGENCY    = 0x1014U,/**< Emergency message cob-id */
  88:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1015_INHIBIT_TIME_EMCY  = 0x1015U,/**< Inhibit time emergency message */
  89:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1016_CONSUMER_HB_TIME   = 0x1016U,/**< Consumer heartbeat time */
  90:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1017_PRODUCER_HB_TIME   = 0x1017U,/**< Producer heartbeat time */
  91:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1018_IDENTITY_OBJECT    = 0x1018U,/**< Identity object */
  92:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1019_SYNC_CNT_OVERFLOW  = 0x1019U,/**< Sync counter overflow value */
  93:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1020_VERIFY_CONFIG      = 0x1020U,/**< Verify configuration */
  94:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1021_STORE_EDS          = 0x1021U,/**< Store EDS */
  95:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1022_STORE_FORMAT       = 0x1022U,/**< Store format */
  96:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1023_OS_CMD             = 0x1023U,/**< OS command */
  97:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1024_OS_CMD_MODE        = 0x1024U,/**< OS command mode */
  98:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1025_OS_DBG_INTERFACE   = 0x1025U,/**< OS debug interface */
  99:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1026_OS_PROMPT          = 0x1026U,/**< OS prompt */
 100:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1027_MODULE_LIST        = 0x1027U,/**< Module list */
 101:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1028_EMCY_CONSUMER      = 0x1028U,/**< Emergency consumer object */
 102:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1029_ERR_BEHAVIOR       = 0x1029U,/**< Error behaviour */
 103:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1200_SDO_SERVER_1_PARAM = 0x1200U,/**< SDO server parameter */
 104:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1280_SDO_CLIENT_1_PARAM = 0x1280U,/**< SDO client parameter */
 105:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1300_GFC_PARAM          = 0x1300U,/**< Global fail-safe command param */
 106:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1301_SRDO_1_PARAM       = 0x1301U,/**< SRDO communication parameter */
 107:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1381_SRDO_1_MAPPING     = 0x1381U,/**< SRDO mapping parameter */
 108:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H13FE_SRDO_VALID         = 0x13FEU,/**< SRDO Configuration valid */
 109:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H13FF_SRDO_CHECKSUM      = 0x13FFU,/**< SRDO configuration checksum */
 110:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1400_RXPDO_1_PARAM      = 0x1400U,/**< RXPDO communication parameter */
 111:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1600_RXPDO_1_MAPPING    = 0x1600U,/**< RXPDO mapping parameters */
 112:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1800_TXPDO_1_PARAM      = 0x1800U,/**< TXPDO communication parameter */
 113:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_H1A00_TXPDO_1_MAPPING    = 0x1A00U,/**< TXPDO mapping parameters */
 114:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_ObjDicId_30x_t;
 115:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 116:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 117:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 118:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Attributes (bit masks) for OD sub-object.
 119:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 120:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef enum {
 121:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_SDO_R = 0x01, /**< SDO server may read from the variable */
 122:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_SDO_W = 0x02, /**< SDO server may write to the variable */
 123:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_SDO_RW = 0x03, /**< SDO server may read from or write to the variable */
 124:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_TPDO = 0x04, /**< Variable is mappable into TPDO (can be read) */
 125:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_RPDO = 0x08, /**< Variable is mappable into RPDO (can be written) */
 126:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_TRPDO = 0x0C, /**< Variable is mappable into TPDO or RPDO */
 127:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_TSRDO = 0x10, /**< Variable is mappable into transmitting SRDO */
 128:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_RSRDO = 0x20, /**< Variable is mappable into receiving SRDO */
 129:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_TRSRDO = 0x30, /**< Variable is mappable into tx or rx SRDO */
 130:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_MB = 0x40, /**< Variable is multi-byte ((u)int16_t to (u)int64_t) */
 131:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODA_STR = 0x80 /**< Shorter value, than specified variable size, may be
 132:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     written to the variable. SDO write will fill remaining memory with zeroes.
 133:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     Attribute is used for VISIBLE_STRING and UNICODE_STRING. */
 134:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_attributes_t;
 135:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 136:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 137:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 138:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Return codes from OD access functions.
 139:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 140:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_getSDOabCode() can be used to retrieve corresponding SDO abort code.
 141:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 142:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef enum {
 143:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /* !!!! WARNING !!!!
 144:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * If changing these values, change also OD_getSDOabCode() function!
 145:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 146:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Read/write is only partial, make more calls */
 147:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_PARTIAL = -1,
 148:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x00000000 - Read/write successfully finished */
 149:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_OK = 0,
 150:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x05040005 - Out of memory */
 151:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_OUT_OF_MEM = 1,
 152:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06010000 - Unsupported access to an object */
 153:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_UNSUPP_ACCESS = 2,
 154:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06010001 - Attempt to read a write only object */
 155:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_WRITEONLY = 3,
 156:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06010002 - Attempt to write a read only object */
 157:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_READONLY = 4,
 158:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06020000 - Object does not exist in the object dict. */
 159:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_IDX_NOT_EXIST = 5,
 160:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06040041 - Object cannot be mapped to the PDO */
 161:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_NO_MAP = 6,
 162:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06040042 - PDO length exceeded */
 163:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_MAP_LEN = 7,
 164:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06040043 - General parameter incompatibility reasons */
 165:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_PAR_INCOMPAT = 8,
 166:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06040047 - General internal incompatibility in device */
 167:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DEV_INCOMPAT = 9,
 168:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06060000 - Access failed due to hardware error */
 169:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_HW = 10,
 170:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06070010 - Data type does not match */
 171:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_TYPE_MISMATCH = 11,
 172:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06070012 - Data type does not match, length too high */
 173:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DATA_LONG = 12,
 174:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06070013 - Data type does not match, length too short */
 175:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DATA_SHORT = 13,
 176:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06090011 - Sub index does not exist */
 177:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_SUB_NOT_EXIST = 14,
 178:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06090030 - Invalid value for parameter (download only) */
 179:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_INVALID_VALUE = 15,
 180:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06090031 - Value range of parameter written too high */
 181:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_VALUE_HIGH = 16,
 182:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06090032 - Value range of parameter written too low */
 183:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_VALUE_LOW = 17,
 184:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x06090036 - Maximum value is less than minimum value */
 185:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_MAX_LESS_MIN = 18,
 186:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x060A0023 - Resource not available: SDO connection */
 187:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_NO_RESOURCE = 19,
 188:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000000 - General error */
 189:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_GENERAL = 20,
 190:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000020 - Data cannot be transferred or stored to app */
 191:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DATA_TRANSF = 21,
 192:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000021 - Data can't be transferred (local control) */
 193:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DATA_LOC_CTRL = 22,
 194:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000022 - Data can't be transf. (present device state) */
 195:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_DATA_DEV_STATE = 23,
 196:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000023 - Object dictionary not present */
 197:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_OD_MISSING = 23,
 198:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** SDO abort 0x08000024 - No data available */
 199:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_NO_DATA = 25,
 200:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Last element, number of responses */
 201:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_COUNT = 26
 202:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } ODR_t;
 203:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 204:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 205:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 206:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * IO stream structure, used for read/write access to OD variable, part of
 207:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_IO_t.
 208:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 209:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef struct {
 210:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Pointer to original data object, defined by Object Dictionary. Default
 211:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * read/write functions operate on it. If memory for data object is not
 212:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * specified by Object Dictionary, then dataOrig is NULL.
 213:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      */
 214:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     void *dataOrig;
 215:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Pointer to object, passed by @ref OD_extension_init(). Can be used
 216:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * inside read / write functions from IO extension.
 217:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      */
 218:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     void *object;
 219:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Data length in bytes or 0, if length is not specified */
 220:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_size_t dataLength;
 221:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** In case of large data, dataOffset indicates position of already
 222:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * transferred data */
 223:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_size_t dataOffset;
 224:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Attribute bit-field of the OD sub-object, see @ref OD_attributes_t */
 225:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_attr_t attribute;
 226:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Sub index of the OD sub-object, informative */
 227:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint8_t subIndex;
 228:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_stream_t;
 229:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 230:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 231:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 232:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Structure for input / output on the OD variable. It is initialized with
 233:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_getSub() function. Access principle to OD variable is via read/write
 234:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * functions operating on stream, similar as standard read/write.
 235:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 236:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef struct {
 237:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Object Dictionary stream object, passed to read or write */
 238:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_stream_t stream;
 239:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /**
 240:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Function pointer for reading value from specified variable from Object
 241:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Dictionary. If OD variable is larger than buf, then this function must
 242:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * be called several times. After completed successful read function returns
 243:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * 'ODR_OK'. If read is partial, it returns 'ODR_PARTIAL'. In case of errors
 244:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * function returns code similar to SDO abort code.
 245:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 246:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Read can be restarted with @ref OD_rwRestart() function.
 247:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 248:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * At the moment, when Object Dictionary is initialized, every variable has
 249:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * assigned the same "read" function. This default function simply copies
 250:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * data from Object Dictionary variable. Application can bind its own "read"
 251:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * function for specific object. In that case application is able to
 252:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * calculate data for reading from own internal state at the moment of
 253:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * "read" function call. Own "read" function on OD object can be initialized
 254:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * with @ref OD_extension_init() function.
 255:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 256:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * "read" function must always copy all own data to buf, except if "buf" is
 257:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * not large enough. ("*returnCode" must not return 'ODR_PARTIAL', if there
 258:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * is still space in "buf".)
 259:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 260:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @warning When accessing OD variables by calling the read() function, it
 261:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * may be necessary to use @ref CO_LOCK_OD() and @ref CO_UNLOCK_OD() macros.
 262:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * See @ref CO_critical_sections for more information.
 263:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 264:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param stream Object Dictionary stream object.
 265:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param buf Pointer to external buffer, where to data will be copied.
 266:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param count Size of the external buffer in bytes.
 267:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param [out] countRead If return value is "ODR_OK" or "ODR_PARTIAL",
 268:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * then number of bytes successfully read must be returned here.
 269:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 270:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @return Value from @ref ODR_t, "ODR_OK" in case of success.
 271:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      */
 272:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_t (*read)(OD_stream_t *stream, void *buf,
 273:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                   OD_size_t count, OD_size_t *countRead);
 274:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /**
 275:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Function pointer for writing value into specified variable inside Object
 276:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Dictionary. If OD variable is larger than buf, then this function must
 277:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * be called several times. After completed successful write function
 278:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * returns 'ODR_OK'. If write is partial, it returns 'ODR_PARTIAL'. In case
 279:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * of errors function returns code similar to SDO abort code.
 280:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 281:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Write can be restarted with @ref OD_rwRestart() function.
 282:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 283:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * At the moment, when Object Dictionary is initialized, every variable has
 284:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * assigned the same "write" function, which simply copies data to Object
 285:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * Dictionary variable. Application can bind its own "write" function,
 286:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * similar as it can bind "read" function.
 287:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 288:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * "write" function must always copy all available data from buf. If OD
 289:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * variable expect more data, then "*returnCode" must return 'ODR_PARTIAL'.
 290:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 291:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @warning When accessing OD variables by calling the read() function, it
 292:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * may be necessary to use @ref CO_LOCK_OD() and @ref CO_UNLOCK_OD() macros.
 293:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * See @ref CO_critical_sections for more information.
 294:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 295:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param stream Object Dictionary stream object.
 296:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param buf Pointer to external buffer, from where data will be copied.
 297:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param count Size of the external buffer in bytes.
 298:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @param [out] countWritten If return value is "ODR_OK" or "ODR_PARTIAL",
 299:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * then number of bytes successfully written must be returned here.
 300:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 301:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @return Value from @ref ODR_t, "ODR_OK" in case of success.
 302:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      */
 303:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_t (*write)(OD_stream_t *stream, const void *buf,
 304:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                    OD_size_t count, OD_size_t *countWritten);
 305:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_IO_t;
 306:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 307:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 308:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 309:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Extension of OD object, which can optionally be specified by application in
 310:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * initialization phase with @ref OD_extension_init() function.
 311:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 312:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef struct {
 313:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Object on which read and write will operate, part of @ref OD_stream_t */
 314:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     void *object;
 315:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Application specified read function pointer. If NULL, then read will be
 316:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * disabled. @ref OD_readOriginal can be used here to keep the original read
 317:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * function. For function description see @ref OD_IO_t. */
 318:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_t (*read)(OD_stream_t *stream, void *buf,
 319:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                   OD_size_t count, OD_size_t *countRead);
 320:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Application specified write function pointer. If NULL, then write will
 321:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * be disabled. @ref OD_writeOriginal can be used here to keep the original
 322:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * write function. For function description see @ref OD_IO_t. */
 323:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     ODR_t (*write)(OD_stream_t *stream, const void *buf,
 324:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                    OD_size_t count, OD_size_t *countWritten);
 325:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if OD_FLAGS_PDO_SIZE > 0
 326:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /**PDO flags bit-field provides one bit for each OD variable, which exist
 327:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * inside OD object at specific sub index. If application clears that bit,
 328:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * and OD variable is mapped to an event driven TPDO, then TPDO will be
 329:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * sent.
 330:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      *
 331:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @ref OD_FLAGS_PDO_SIZE can have a value from 0 to 32 bytes, which
 332:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * corresponds to 0 to 256 available bits. If, for example,
 333:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * @ref OD_FLAGS_PDO_SIZE has value 4, then OD variables with sub index up
 334:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * to 31 will have the TPDO requesting functionality.
 335:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * See also @ref OD_requestTPDO and @ref OD_TPDOtransmitted. */
 336:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint8_t flagsPDO[OD_FLAGS_PDO_SIZE];
 337:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 338:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_extension_t;
 339:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 340:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 341:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 342:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Object Dictionary entry for one OD object.
 343:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 344:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * OD entries are collected inside OD_t as array (list). Each OD entry contains
 345:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * basic information about OD object (index and subEntriesCount), pointer to
 346:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * odObject with additional information about var, array or record entry and
 347:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * pointer to extension, configurable by application.
 348:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 349:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef struct {
 350:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Object Dictionary index */
 351:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint16_t index;
 352:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Number of all sub-entries, including sub-entry at sub-index 0 */
 353:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint8_t subEntriesCount;
 354:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Type of the odObject, indicated by @ref OD_objectTypes_t enumerator. */
 355:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint8_t odObjectType;
 356:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** OD object of type indicated by odObjectType, from which @ref OD_getSub()
 357:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****      * fetches the information */
 358:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     CO_PROGMEM void *odObject;
 359:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Extension to OD, specified by application */
 360:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_extension_t *extension;
 361:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_entry_t;
 362:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 363:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 364:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 365:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Object Dictionary
 366:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 367:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** typedef struct {
 368:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** Number of elements in the list, without last element, which is blank */
 369:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     uint16_t size;
 370:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     /** List OD entries (table of contents), ordered by index */
 371:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     OD_entry_t *list;
 372:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** } OD_t;
 373:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 374:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 375:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 376:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Read value from original OD location
 377:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 378:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * This function can be used inside read / write functions, specified by
 379:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_extension_init(). It reads data directly from memory location
 380:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * specified by Object dictionary. If no IO extension is used on OD entry, then
 381:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * io->read returned by @ref OD_getSub() equals to this function. See
 382:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * also @ref OD_IO_t.
 383:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 384:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
 385:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                       OD_size_t count, OD_size_t *countRead);
 386:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 387:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 388:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 389:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Write value to original OD location
 390:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 391:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * This function can be used inside read / write functions, specified by
 392:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_extension_init(). It writes data directly to memory location
 393:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * specified by Object dictionary. If no IO extension is used on OD entry, then
 394:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * io->write returned by @ref OD_getSub() equals to this function. See
 395:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * also @ref OD_IO_t.
 396:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 397:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
 398:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                        OD_size_t count, OD_size_t *countWritten);
 399:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 400:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 401:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 402:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Find OD entry in Object Dictionary
 403:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 404:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param od Object Dictionary
 405:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param index CANopen Object Dictionary index of object in Object Dictionary
 406:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 407:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return Pointer to OD entry or NULL if not found
 408:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 409:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** OD_entry_t *OD_find(OD_t *od, uint16_t index);
 410:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 411:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 412:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 413:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Find sub-object with specified sub-index on OD entry returned by OD_find.
 414:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Function populates io structure with sub-object data.
 415:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 416:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @warning
 417:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Read and write functions may be called from different threads, so critical
 418:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * sections in custom functions must be observed, see @ref CO_critical_sections.
 419:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 420:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param entry OD entry returned by @ref OD_find().
 421:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param subIndex Sub-index of the variable from the OD object.
 422:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param [out] io Structure will be populated on success.
 423:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param odOrig If true, then potential IO extension on entry will be
 424:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * ignored and access to data entry in the original OD location will be returned
 425:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 426:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return Value from @ref ODR_t, "ODR_OK" in case of success.
 427:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 428:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
 429:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                 OD_IO_t *io, bool_t odOrig);
 430:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 431:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 432:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 433:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Return index from OD entry
 434:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 435:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param entry OD entry returned by @ref OD_find().
 436:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 437:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return OD index
 438:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 439:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 440:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return (entry != NULL) ? entry->index : 0;
 441:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 442:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 443:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 444:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 445:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Check, if OD variable is mappable to PDO or SRDO.
 446:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 447:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * If OD variable is mappable, then it may be necessary to protect read/write
 448:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * access from mainline function. See @ref CO_critical_sections.
 449:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 450:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param stream Object Dictionary stream object.
 451:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 452:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return true, if OD variable is mappable.
 453:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 454:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline bool_t OD_mappable(OD_stream_t *stream) {
 455:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return (stream != NULL)
 456:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****          ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 457:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 458:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 459:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 460:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 461:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Restart read or write operation on OD variable
 462:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 463:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * It is not necessary to call this function, if stream was initialized by
 464:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_getSub(). It is also not necessary to call this function, if
 465:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * previous read or write was successfully finished.
 466:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 467:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param stream Object Dictionary stream object.
 468:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 469:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline void OD_rwRestart(OD_stream_t *stream) {
 470:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     if (stream != NULL) stream->dataOffset = 0;
 471:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 472:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 473:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 474:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 475:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Get TPDO request flags for OD entry.
 476:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 477:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * flagsPDO can be used for @ref OD_requestTPDO() or @ref OD_TPDOtransmitted().
 478:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 479:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param entry OD entry returned by @ref OD_find().
 480:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 481:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return pointer to flagsPDO
 482:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 483:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline uint8_t *OD_getFlagsPDO(OD_entry_t *entry) {
 484:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if OD_FLAGS_PDO_SIZE > 0
 485:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     if (entry != NULL && entry->extension != NULL) {
 486:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         return &entry->extension->flagsPDO[0];
 487:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     }
 488:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 489:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return 0;
 490:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 491:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 492:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 493:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 494:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Request TPDO, to which OD variable is mapped
 495:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 496:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Function clears the flagPDO bit, which corresponds to OD variable at specific
 497:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * OD index and subindex. For this functionality to work, @ref OD_extension_t
 498:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * must be enabled on OD variable. If OD variable is mapped to any TPDO with
 499:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * event driven transmission, then TPDO will be transmitted after this function
 500:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * call. If OD variable is mapped to more than one TPDO with event driven
 501:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * transmission, only the first matched TPDO will be transmitted.
 502:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 503:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * TPDO event driven transmission is enabled, if TPDO communication parameter,
 504:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * transmission type is set to 0, 254 or 255. For other transmission types
 505:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * (synchronous) flagPDO bit is ignored.
 506:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 507:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param flagsPDO TPDO request flags returned by @ref OD_getFlagsPDO.
 508:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param subIndex subIndex of the OD variable.
 509:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 510:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline void OD_requestTPDO(uint8_t *flagsPDO, uint8_t subIndex) {
 511:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if OD_FLAGS_PDO_SIZE > 0
 512:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     if (flagsPDO != NULL && subIndex < (OD_FLAGS_PDO_SIZE * 8)) {
 513:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         /* clear subIndex-th bit */
 514:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         uint8_t mask = ~(1 << (subIndex & 0x07));
 515:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         flagsPDO[subIndex >> 3] &= mask;
 516:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     }
 517:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 518:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 519:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 520:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 521:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 522:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Check if requested TPDO was transmitted
 523:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 524:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param flagsPDO TPDO request flags returned by @ref OD_getFlagsPDO.
 525:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param subIndex subIndex of the OD variable.
 526:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 527:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return Return true if event driven TPDO with mapping to OD variable,
 528:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * indicated by flagsPDO and subIndex, was transmitted since last
 529:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @ref OD_requestTPDO call. If there was no @ref OD_requestTPDO call yet and
 530:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * TPDO was transmitted by other event, function also returns true.
 531:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 532:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline bool_t OD_TPDOtransmitted(uint8_t *flagsPDO, uint8_t subIndex) {
 533:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #if OD_FLAGS_PDO_SIZE > 0
 534:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     if (flagsPDO != NULL && subIndex < (OD_FLAGS_PDO_SIZE * 8)) {
 535:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         /* return true, if subIndex-th bit is set */
 536:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         uint8_t mask = 1 << (subIndex & 0x07);
 537:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         if ((flagsPDO[subIndex >> 3] & mask) != 0) {
 538:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****             return true;
 539:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****         }
 540:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     }
 541:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** #endif
 542:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return false;
 543:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 544:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 545:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 546:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 547:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Get SDO abort code from returnCode
 548:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 549:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param returnCode Returned from some OD access functions
 550:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 551:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return Corresponding @ref CO_SDO_abortCode_t
 552:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 553:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** uint32_t OD_getSDOabCode(ODR_t returnCode);
 554:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 555:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** 
 556:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** /**
 557:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Extend OD object with own read/write functions and/or flagsPDO
 558:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 559:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * This function gives application very powerful tool: definition of own IO
 560:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * access on OD object. Structure and attributes are the same as defined in
 561:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * original OD object, but data are read directly from (or written directly to)
 562:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * application specified object via custom function calls.
 563:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 564:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Before this function specifies extension, OD variables are accessed from
 565:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * original OD location. After this function specifies extension OD variables
 566:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * are accessed from read/write functions specified by extension. (Except when
 567:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * "odOrig" argument to @ref OD_getSub() is set to true.)
 568:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 569:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * This function must also be used, when flagsPDO needs to be enabled for
 570:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * specific entry.
 571:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 572:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @warning
 573:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Object dictionary storage works only directly on OD variables. It does not
 574:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * access read function specified here. So, if extended OD objects needs to be
 575:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * preserved, then @ref OD_writeOriginal can be used inside custom write
 576:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * function.
 577:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 578:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @warning
 579:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Read and write functions may be called from different threads, so critical
 580:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * sections in custom functions must be observed, see @ref CO_critical_sections.
 581:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 582:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param entry OD entry returned by @ref OD_find().
 583:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @param extension Extension object, which must be initialized externally.
 584:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * Extension object must exist permanently. If NULL, extension will be removed.
 585:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  *
 586:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 587:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****  */
 588:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** static inline ODR_t OD_extension_init(OD_entry_t *entry,
 589:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****                                       OD_extension_t *extension)
 590:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** {
  71              	 .loc 2 590 0
  72              	 .cfi_startproc
  73              	 
  74              	 
  75              	 
  76 0000 80B4     	 push {r7}
  77              	.LCFI5:
  78              	 .cfi_def_cfa_offset 4
  79              	 .cfi_offset 7,-4
  80 0002 83B0     	 sub sp,sp,#12
  81              	.LCFI6:
  82              	 .cfi_def_cfa_offset 16
  83 0004 00AF     	 add r7,sp,#0
  84              	.LCFI7:
  85              	 .cfi_def_cfa_register 7
  86 0006 7860     	 str r0,[r7,#4]
  87 0008 3960     	 str r1,[r7]
 591:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     if (entry == NULL) return ODR_IDX_NOT_EXIST;
  88              	 .loc 2 591 0
  89 000a 7B68     	 ldr r3,[r7,#4]
  90 000c 002B     	 cmp r3,#0
  91 000e 01D1     	 bne .L4
  92              	 .loc 2 591 0 is_stmt 0 discriminator 1
  93 0010 0523     	 movs r3,#5
  94 0012 03E0     	 b .L5
  95              	.L4:
 592:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     entry->extension = extension;
  96              	 .loc 2 592 0 is_stmt 1
  97 0014 7B68     	 ldr r3,[r7,#4]
  98 0016 3A68     	 ldr r2,[r7]
  99 0018 9A60     	 str r2,[r3,#8]
 593:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h ****     return ODR_OK;
 100              	 .loc 2 593 0
 101 001a 0023     	 movs r3,#0
 102              	.L5:
 103 001c 5BB2     	 sxtb r3,r3
 594:D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/301\CO_ODinterface.h **** }
 104              	 .loc 2 594 0
 105 001e 1846     	 mov r0,r3
 106 0020 0C37     	 adds r7,r7,#12
 107              	.LCFI8:
 108              	 .cfi_def_cfa_offset 4
 109 0022 BD46     	 mov sp,r7
 110              	.LCFI9:
 111              	 .cfi_def_cfa_register 13
 112              	 
 113 0024 5DF8047B 	 ldr r7,[sp],#4
 114              	.LCFI10:
 115              	 .cfi_restore 7
 116              	 .cfi_def_cfa_offset 0
 117 0028 7047     	 bx lr
 118              	 .cfi_endproc
 119              	.LFE12:
 121 002a 00BF     	 .section .text.OD_write_1010,"ax",%progbits
 122              	 .align 2
 123              	 .thumb
 124              	 .thumb_func
 126              	OD_write_1010:
 127              	.LFB33:
 128              	 .file 3 "../CANopen/stack/storage/CO_storage.c"
   1:../CANopen/stack/storage/CO_storage.c **** /*
   2:../CANopen/stack/storage/CO_storage.c ****  * CANopen data storage base object
   3:../CANopen/stack/storage/CO_storage.c ****  *
   4:../CANopen/stack/storage/CO_storage.c ****  * @file        CO_storage.c
   5:../CANopen/stack/storage/CO_storage.c ****  * @author      Janez Paternoster
   6:../CANopen/stack/storage/CO_storage.c ****  * @copyright   2021 Janez Paternoster
   7:../CANopen/stack/storage/CO_storage.c ****  *
   8:../CANopen/stack/storage/CO_storage.c ****  * This file is part of CANopenNode, an opensource CANopen Stack.
   9:../CANopen/stack/storage/CO_storage.c ****  * Project home page is <https://github.com/CANopenNode/CANopenNode>.
  10:../CANopen/stack/storage/CO_storage.c ****  * For more information on CANopen see <http://www.can-cia.org/>.
  11:../CANopen/stack/storage/CO_storage.c ****  *
  12:../CANopen/stack/storage/CO_storage.c ****  * Licensed under the Apache License, Version 2.0 (the "License");
  13:../CANopen/stack/storage/CO_storage.c ****  * you may not use this file except in compliance with the License.
  14:../CANopen/stack/storage/CO_storage.c ****  * You may obtain a copy of the License at
  15:../CANopen/stack/storage/CO_storage.c ****  *
  16:../CANopen/stack/storage/CO_storage.c ****  *     http://www.apache.org/licenses/LICENSE-2.0
  17:../CANopen/stack/storage/CO_storage.c ****  *
  18:../CANopen/stack/storage/CO_storage.c ****  * Unless required by applicable law or agreed to in writing, software
  19:../CANopen/stack/storage/CO_storage.c ****  * distributed under the License is distributed on an "AS IS" BASIS,
  20:../CANopen/stack/storage/CO_storage.c ****  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../CANopen/stack/storage/CO_storage.c ****  * See the License for the specific language governing permissions and
  22:../CANopen/stack/storage/CO_storage.c ****  * limitations under the License.
  23:../CANopen/stack/storage/CO_storage.c ****  */
  24:../CANopen/stack/storage/CO_storage.c **** 
  25:../CANopen/stack/storage/CO_storage.c **** #include "storage/CO_storage.h"
  26:../CANopen/stack/storage/CO_storage.c **** 
  27:../CANopen/stack/storage/CO_storage.c **** #if (CO_CONFIG_STORAGE) & CO_CONFIG_STORAGE_ENABLE
  28:../CANopen/stack/storage/CO_storage.c **** 
  29:../CANopen/stack/storage/CO_storage.c **** /*
  30:../CANopen/stack/storage/CO_storage.c ****  * Custom function for writing OD object "Store parameters"
  31:../CANopen/stack/storage/CO_storage.c ****  *
  32:../CANopen/stack/storage/CO_storage.c ****  * For more information see file CO_ODinterface.h, OD_IO_t.
  33:../CANopen/stack/storage/CO_storage.c ****  */
  34:../CANopen/stack/storage/CO_storage.c **** static ODR_t OD_write_1010(OD_stream_t *stream, const void *buf,
  35:../CANopen/stack/storage/CO_storage.c ****                            OD_size_t count, OD_size_t *countWritten)
  36:../CANopen/stack/storage/CO_storage.c **** {
 129              	 .loc 3 36 0
 130              	 .cfi_startproc
 131              	 
 132              	 
 133 0000 80B5     	 push {r7,lr}
 134              	.LCFI11:
 135              	 .cfi_def_cfa_offset 8
 136              	 .cfi_offset 7,-8
 137              	 .cfi_offset 14,-4
 138 0002 88B0     	 sub sp,sp,#32
 139              	.LCFI12:
 140              	 .cfi_def_cfa_offset 40
 141 0004 00AF     	 add r7,sp,#0
 142              	.LCFI13:
 143              	 .cfi_def_cfa_register 7
 144 0006 F860     	 str r0,[r7,#12]
 145 0008 B960     	 str r1,[r7,#8]
 146 000a 7A60     	 str r2,[r7,#4]
 147 000c 3B60     	 str r3,[r7]
  37:../CANopen/stack/storage/CO_storage.c ****     /* verify arguments */
  38:../CANopen/stack/storage/CO_storage.c ****     if (stream == NULL || stream->subIndex == 0 || buf == NULL || count != 4
 148              	 .loc 3 38 0
 149 000e FB68     	 ldr r3,[r7,#12]
 150 0010 002B     	 cmp r3,#0
 151 0012 0CD0     	 beq .L7
 152              	 .loc 3 38 0 is_stmt 0 discriminator 1
 153 0014 FB68     	 ldr r3,[r7,#12]
 154 0016 5B7C     	 ldrb r3,[r3,#17]
 155 0018 002B     	 cmp r3,#0
 156 001a 08D0     	 beq .L7
 157              	 .loc 3 38 0 discriminator 2
 158 001c BB68     	 ldr r3,[r7,#8]
 159 001e 002B     	 cmp r3,#0
 160 0020 05D0     	 beq .L7
 161              	 .loc 3 38 0 discriminator 3
 162 0022 7B68     	 ldr r3,[r7,#4]
 163 0024 042B     	 cmp r3,#4
 164 0026 02D1     	 bne .L7
  39:../CANopen/stack/storage/CO_storage.c ****         || countWritten == NULL
 165              	 .loc 3 39 0 is_stmt 1
 166 0028 3B68     	 ldr r3,[r7]
 167 002a 002B     	 cmp r3,#0
 168 002c 01D1     	 bne .L8
 169              	.L7:
  40:../CANopen/stack/storage/CO_storage.c ****     ) {
  41:../CANopen/stack/storage/CO_storage.c ****         return ODR_DEV_INCOMPAT;
 170              	 .loc 3 41 0
 171 002e 0923     	 movs r3,#9
 172 0030 6AE0     	 b .L9
 173              	.L8:
  42:../CANopen/stack/storage/CO_storage.c ****     }
  43:../CANopen/stack/storage/CO_storage.c **** 
  44:../CANopen/stack/storage/CO_storage.c ****     CO_storage_t *storage = stream->object;
 174              	 .loc 3 44 0
 175 0032 FB68     	 ldr r3,[r7,#12]
 176 0034 5B68     	 ldr r3,[r3,#4]
 177 0036 BB61     	 str r3,[r7,#24]
  45:../CANopen/stack/storage/CO_storage.c **** 
  46:../CANopen/stack/storage/CO_storage.c ****     if (stream->subIndex == 0 || storage->store == NULL || !storage->enabled) {
 178              	 .loc 3 46 0
 179 0038 FB68     	 ldr r3,[r7,#12]
 180 003a 5B7C     	 ldrb r3,[r3,#17]
 181 003c 002B     	 cmp r3,#0
 182 003e 07D0     	 beq .L10
 183              	 .loc 3 46 0 is_stmt 0 discriminator 1
 184 0040 BB69     	 ldr r3,[r7,#24]
 185 0042 5B6A     	 ldr r3,[r3,#36]
 186 0044 002B     	 cmp r3,#0
 187 0046 03D0     	 beq .L10
 188              	 .loc 3 46 0 discriminator 2
 189 0048 BB69     	 ldr r3,[r7,#24]
 190 004a 5B6B     	 ldr r3,[r3,#52]
 191 004c 002B     	 cmp r3,#0
 192 004e 01D1     	 bne .L11
 193              	.L10:
  47:../CANopen/stack/storage/CO_storage.c ****         return ODR_READONLY;
 194              	 .loc 3 47 0 is_stmt 1
 195 0050 0423     	 movs r3,#4
 196 0052 59E0     	 b .L9
 197              	.L11:
  48:../CANopen/stack/storage/CO_storage.c ****     }
  49:../CANopen/stack/storage/CO_storage.c **** 
  50:../CANopen/stack/storage/CO_storage.c ****     if (CO_getUint32(buf) != 0x65766173) {
 198              	 .loc 3 50 0
 199 0054 B868     	 ldr r0,[r7,#8]
 200 0056 FFF7FEFF 	 bl CO_getUint32
 201 005a 0246     	 mov r2,r0
 202 005c 2D4B     	 ldr r3,.L23
 203 005e 9A42     	 cmp r2,r3
 204 0060 01D0     	 beq .L12
  51:../CANopen/stack/storage/CO_storage.c ****         return ODR_DATA_TRANSF;
 205              	 .loc 3 51 0
 206 0062 1523     	 movs r3,#21
 207 0064 50E0     	 b .L9
 208              	.L12:
  52:../CANopen/stack/storage/CO_storage.c ****     }
  53:../CANopen/stack/storage/CO_storage.c **** 
  54:../CANopen/stack/storage/CO_storage.c ****     /* loop through entries and store relevant */
  55:../CANopen/stack/storage/CO_storage.c ****     uint8_t found = 0;
 209              	 .loc 3 55 0
 210 0066 0023     	 movs r3,#0
 211 0068 FB77     	 strb r3,[r7,#31]
  56:../CANopen/stack/storage/CO_storage.c ****     ODR_t returnCode = ODR_OK;
 212              	 .loc 3 56 0
 213 006a 0023     	 movs r3,#0
 214 006c BB77     	 strb r3,[r7,#30]
 215              	.LBB2:
  57:../CANopen/stack/storage/CO_storage.c **** 
  58:../CANopen/stack/storage/CO_storage.c ****     for (uint8_t i = 0; i < storage->entriesCount; i++) {
 216              	 .loc 3 58 0
 217 006e 0023     	 movs r3,#0
 218 0070 7B77     	 strb r3,[r7,#29]
 219 0072 31E0     	 b .L13
 220              	.L18:
 221              	.LBB3:
  59:../CANopen/stack/storage/CO_storage.c ****         CO_storage_entry_t *entry = &storage->entries[i];
 222              	 .loc 3 59 0
 223 0074 BB69     	 ldr r3,[r7,#24]
 224 0076 D96A     	 ldr r1,[r3,#44]
 225 0078 7A7F     	 ldrb r2,[r7,#29]
 226 007a 1346     	 mov r3,r2
 227 007c 9B00     	 lsls r3,r3,#2
 228 007e 1344     	 add r3,r3,r2
 229 0080 DB00     	 lsls r3,r3,#3
 230 0082 0B44     	 add r3,r3,r1
 231 0084 7B61     	 str r3,[r7,#20]
  60:../CANopen/stack/storage/CO_storage.c **** 
  61:../CANopen/stack/storage/CO_storage.c ****         if (stream->subIndex == 1 || entry->subIndexOD == stream->subIndex) {
 232              	 .loc 3 61 0
 233 0086 FB68     	 ldr r3,[r7,#12]
 234 0088 5B7C     	 ldrb r3,[r3,#17]
 235 008a 012B     	 cmp r3,#1
 236 008c 05D0     	 beq .L14
 237              	 .loc 3 61 0 is_stmt 0 discriminator 1
 238 008e 7B69     	 ldr r3,[r7,#20]
 239 0090 1A7A     	 ldrb r2,[r3,#8]
 240 0092 FB68     	 ldr r3,[r7,#12]
 241 0094 5B7C     	 ldrb r3,[r3,#17]
 242 0096 9A42     	 cmp r2,r3
 243 0098 1BD1     	 bne .L15
 244              	.L14:
  62:../CANopen/stack/storage/CO_storage.c ****             if (found == 0) found = 1;
 245              	 .loc 3 62 0 is_stmt 1
 246 009a FB7F     	 ldrb r3,[r7,#31]
 247 009c 002B     	 cmp r3,#0
 248 009e 01D1     	 bne .L16
 249              	 .loc 3 62 0 is_stmt 0 discriminator 1
 250 00a0 0123     	 movs r3,#1
 251 00a2 FB77     	 strb r3,[r7,#31]
 252              	.L16:
  63:../CANopen/stack/storage/CO_storage.c ****             if ((entry->attr & CO_storage_cmd) != 0) {
 253              	 .loc 3 63 0 is_stmt 1
 254 00a4 7B69     	 ldr r3,[r7,#20]
 255 00a6 5B7A     	 ldrb r3,[r3,#9]
 256 00a8 03F00103 	 and r3,r3,#1
 257 00ac 002B     	 cmp r3,#0
 258 00ae 10D0     	 beq .L15
 259              	.LBB4:
  64:../CANopen/stack/storage/CO_storage.c ****                 ODR_t code = storage->store(entry, storage->CANmodule);
 260              	 .loc 3 64 0
 261 00b0 BB69     	 ldr r3,[r7,#24]
 262 00b2 5B6A     	 ldr r3,[r3,#36]
 263 00b4 BA69     	 ldr r2,[r7,#24]
 264 00b6 126A     	 ldr r2,[r2,#32]
 265 00b8 7869     	 ldr r0,[r7,#20]
 266 00ba 1146     	 mov r1,r2
 267 00bc 9847     	 blx r3
 268 00be 0346     	 mov r3,r0
 269 00c0 FB74     	 strb r3,[r7,#19]
  65:../CANopen/stack/storage/CO_storage.c ****                 if (code != ODR_OK) returnCode = code;
 270              	 .loc 3 65 0
 271 00c2 97F91330 	 ldrsb r3,[r7,#19]
 272 00c6 002B     	 cmp r3,#0
 273 00c8 01D0     	 beq .L17
 274              	 .loc 3 65 0 is_stmt 0 discriminator 1
 275 00ca FB7C     	 ldrb r3,[r7,#19]
 276 00cc BB77     	 strb r3,[r7,#30]
 277              	.L17:
  66:../CANopen/stack/storage/CO_storage.c ****                 found = 2;
 278              	 .loc 3 66 0 is_stmt 1
 279 00ce 0223     	 movs r3,#2
 280 00d0 FB77     	 strb r3,[r7,#31]
 281              	.L15:
 282              	.LBE4:
 283              	.LBE3:
  58:../CANopen/stack/storage/CO_storage.c ****         CO_storage_entry_t *entry = &storage->entries[i];
 284              	 .loc 3 58 0 discriminator 2
 285 00d2 7B7F     	 ldrb r3,[r7,#29]
 286 00d4 0133     	 adds r3,r3,#1
 287 00d6 7B77     	 strb r3,[r7,#29]
 288              	.L13:
  58:../CANopen/stack/storage/CO_storage.c ****         CO_storage_entry_t *entry = &storage->entries[i];
 289              	 .loc 3 58 0 is_stmt 0 discriminator 1
 290 00d8 BB69     	 ldr r3,[r7,#24]
 291 00da 93F83030 	 ldrb r3,[r3,#48]
 292 00de 7A7F     	 ldrb r2,[r7,#29]
 293 00e0 9A42     	 cmp r2,r3
 294 00e2 C7D3     	 bcc .L18
 295              	.LBE2:
  67:../CANopen/stack/storage/CO_storage.c ****             }
  68:../CANopen/stack/storage/CO_storage.c ****         }
  69:../CANopen/stack/storage/CO_storage.c ****     }
  70:../CANopen/stack/storage/CO_storage.c **** 
  71:../CANopen/stack/storage/CO_storage.c ****     if (found != 2)
 296              	 .loc 3 71 0 is_stmt 1
 297 00e4 FB7F     	 ldrb r3,[r7,#31]
 298 00e6 022B     	 cmp r3,#2
 299 00e8 06D0     	 beq .L19
  72:../CANopen/stack/storage/CO_storage.c ****         returnCode = found == 0 ? ODR_SUB_NOT_EXIST : ODR_READONLY;
 300              	 .loc 3 72 0
 301 00ea FB7F     	 ldrb r3,[r7,#31]
 302 00ec 002B     	 cmp r3,#0
 303 00ee 01D1     	 bne .L20
 304              	 .loc 3 72 0 is_stmt 0 discriminator 1
 305 00f0 0E23     	 movs r3,#14
 306 00f2 00E0     	 b .L21
 307              	.L20:
 308              	 .loc 3 72 0 discriminator 2
 309 00f4 0423     	 movs r3,#4
 310              	.L21:
 311              	 .loc 3 72 0 discriminator 4
 312 00f6 BB77     	 strb r3,[r7,#30]
 313              	.L19:
  73:../CANopen/stack/storage/CO_storage.c **** 
  74:../CANopen/stack/storage/CO_storage.c ****     if (returnCode == ODR_OK) *countWritten = sizeof(uint32_t);
 314              	 .loc 3 74 0 is_stmt 1
 315 00f8 97F91E30 	 ldrsb r3,[r7,#30]
 316 00fc 002B     	 cmp r3,#0
 317 00fe 02D1     	 bne .L22
 318              	 .loc 3 74 0 is_stmt 0 discriminator 1
 319 0100 3B68     	 ldr r3,[r7]
 320 0102 0422     	 movs r2,#4
 321 0104 1A60     	 str r2,[r3]
 322              	.L22:
  75:../CANopen/stack/storage/CO_storage.c ****     return returnCode;
 323              	 .loc 3 75 0 is_stmt 1
 324 0106 BB7F     	 ldrb r3,[r7,#30]
 325              	.L9:
 326 0108 5BB2     	 sxtb r3,r3
  76:../CANopen/stack/storage/CO_storage.c **** }
 327              	 .loc 3 76 0
 328 010a 1846     	 mov r0,r3
 329 010c 2037     	 adds r7,r7,#32
 330              	.LCFI14:
 331              	 .cfi_def_cfa_offset 8
 332 010e BD46     	 mov sp,r7
 333              	.LCFI15:
 334              	 .cfi_def_cfa_register 13
 335              	 
 336 0110 80BD     	 pop {r7,pc}
 337              	.L24:
 338 0112 00BF     	 .align 2
 339              	.L23:
 340 0114 73617665 	 .word 1702257011
 341              	 .cfi_endproc
 342              	.LFE33:
 344              	 .section .text.OD_write_1011,"ax",%progbits
 345              	 .align 2
 346              	 .thumb
 347              	 .thumb_func
 349              	OD_write_1011:
 350              	.LFB34:
  77:../CANopen/stack/storage/CO_storage.c **** 
  78:../CANopen/stack/storage/CO_storage.c **** 
  79:../CANopen/stack/storage/CO_storage.c **** /*
  80:../CANopen/stack/storage/CO_storage.c ****  * Custom function for writing OD object "Restore default parameters"
  81:../CANopen/stack/storage/CO_storage.c ****  *
  82:../CANopen/stack/storage/CO_storage.c ****  * For more information see file CO_ODinterface.h, OD_IO_t.
  83:../CANopen/stack/storage/CO_storage.c ****  */
  84:../CANopen/stack/storage/CO_storage.c **** static ODR_t OD_write_1011(OD_stream_t *stream, const void *buf,
  85:../CANopen/stack/storage/CO_storage.c ****                            OD_size_t count, OD_size_t *countWritten)
  86:../CANopen/stack/storage/CO_storage.c **** {
 351              	 .loc 3 86 0
 352              	 .cfi_startproc
 353              	 
 354              	 
 355 0000 80B5     	 push {r7,lr}
 356              	.LCFI16:
 357              	 .cfi_def_cfa_offset 8
 358              	 .cfi_offset 7,-8
 359              	 .cfi_offset 14,-4
 360 0002 88B0     	 sub sp,sp,#32
 361              	.LCFI17:
 362              	 .cfi_def_cfa_offset 40
 363 0004 00AF     	 add r7,sp,#0
 364              	.LCFI18:
 365              	 .cfi_def_cfa_register 7
 366 0006 F860     	 str r0,[r7,#12]
 367 0008 B960     	 str r1,[r7,#8]
 368 000a 7A60     	 str r2,[r7,#4]
 369 000c 3B60     	 str r3,[r7]
  87:../CANopen/stack/storage/CO_storage.c ****     /* verify arguments */
  88:../CANopen/stack/storage/CO_storage.c ****     if (stream == NULL || stream->subIndex == 0 || buf == NULL || count != 4
 370              	 .loc 3 88 0
 371 000e FB68     	 ldr r3,[r7,#12]
 372 0010 002B     	 cmp r3,#0
 373 0012 0CD0     	 beq .L26
 374              	 .loc 3 88 0 is_stmt 0 discriminator 1
 375 0014 FB68     	 ldr r3,[r7,#12]
 376 0016 5B7C     	 ldrb r3,[r3,#17]
 377 0018 002B     	 cmp r3,#0
 378 001a 08D0     	 beq .L26
 379              	 .loc 3 88 0 discriminator 2
 380 001c BB68     	 ldr r3,[r7,#8]
 381 001e 002B     	 cmp r3,#0
 382 0020 05D0     	 beq .L26
 383              	 .loc 3 88 0 discriminator 3
 384 0022 7B68     	 ldr r3,[r7,#4]
 385 0024 042B     	 cmp r3,#4
 386 0026 02D1     	 bne .L26
  89:../CANopen/stack/storage/CO_storage.c ****         || countWritten == NULL
 387              	 .loc 3 89 0 is_stmt 1
 388 0028 3B68     	 ldr r3,[r7]
 389 002a 002B     	 cmp r3,#0
 390 002c 01D1     	 bne .L27
 391              	.L26:
  90:../CANopen/stack/storage/CO_storage.c ****     ) {
  91:../CANopen/stack/storage/CO_storage.c ****         return ODR_DEV_INCOMPAT;
 392              	 .loc 3 91 0
 393 002e 0923     	 movs r3,#9
 394 0030 6AE0     	 b .L28
 395              	.L27:
  92:../CANopen/stack/storage/CO_storage.c ****     }
  93:../CANopen/stack/storage/CO_storage.c **** 
  94:../CANopen/stack/storage/CO_storage.c ****     CO_storage_t *storage = stream->object;
 396              	 .loc 3 94 0
 397 0032 FB68     	 ldr r3,[r7,#12]
 398 0034 5B68     	 ldr r3,[r3,#4]
 399 0036 BB61     	 str r3,[r7,#24]
  95:../CANopen/stack/storage/CO_storage.c **** 
  96:../CANopen/stack/storage/CO_storage.c ****     if (stream->subIndex == 0 || storage->restore == NULL || !storage->enabled){
 400              	 .loc 3 96 0
 401 0038 FB68     	 ldr r3,[r7,#12]
 402 003a 5B7C     	 ldrb r3,[r3,#17]
 403 003c 002B     	 cmp r3,#0
 404 003e 07D0     	 beq .L29
 405              	 .loc 3 96 0 is_stmt 0 discriminator 1
 406 0040 BB69     	 ldr r3,[r7,#24]
 407 0042 9B6A     	 ldr r3,[r3,#40]
 408 0044 002B     	 cmp r3,#0
 409 0046 03D0     	 beq .L29
 410              	 .loc 3 96 0 discriminator 2
 411 0048 BB69     	 ldr r3,[r7,#24]
 412 004a 5B6B     	 ldr r3,[r3,#52]
 413 004c 002B     	 cmp r3,#0
 414 004e 01D1     	 bne .L30
 415              	.L29:
  97:../CANopen/stack/storage/CO_storage.c ****         return ODR_READONLY;
 416              	 .loc 3 97 0 is_stmt 1
 417 0050 0423     	 movs r3,#4
 418 0052 59E0     	 b .L28
 419              	.L30:
  98:../CANopen/stack/storage/CO_storage.c ****     }
  99:../CANopen/stack/storage/CO_storage.c **** 
 100:../CANopen/stack/storage/CO_storage.c ****     if (CO_getUint32(buf) != 0x64616F6C) {
 420              	 .loc 3 100 0
 421 0054 B868     	 ldr r0,[r7,#8]
 422 0056 FFF7FEFF 	 bl CO_getUint32
 423 005a 0246     	 mov r2,r0
 424 005c 2D4B     	 ldr r3,.L42
 425 005e 9A42     	 cmp r2,r3
 426 0060 01D0     	 beq .L31
 101:../CANopen/stack/storage/CO_storage.c ****         return ODR_DATA_TRANSF;
 427              	 .loc 3 101 0
 428 0062 1523     	 movs r3,#21
 429 0064 50E0     	 b .L28
 430              	.L31:
 102:../CANopen/stack/storage/CO_storage.c ****     }
 103:../CANopen/stack/storage/CO_storage.c **** 
 104:../CANopen/stack/storage/CO_storage.c ****     /* loop through entries and store relevant */
 105:../CANopen/stack/storage/CO_storage.c ****     uint8_t found = 0;
 431              	 .loc 3 105 0
 432 0066 0023     	 movs r3,#0
 433 0068 FB77     	 strb r3,[r7,#31]
 106:../CANopen/stack/storage/CO_storage.c ****     ODR_t returnCode = ODR_OK;
 434              	 .loc 3 106 0
 435 006a 0023     	 movs r3,#0
 436 006c BB77     	 strb r3,[r7,#30]
 437              	.LBB5:
 107:../CANopen/stack/storage/CO_storage.c **** 
 108:../CANopen/stack/storage/CO_storage.c ****     for (uint8_t i = 0; i < storage->entriesCount; i++) {
 438              	 .loc 3 108 0
 439 006e 0023     	 movs r3,#0
 440 0070 7B77     	 strb r3,[r7,#29]
 441 0072 31E0     	 b .L32
 442              	.L37:
 443              	.LBB6:
 109:../CANopen/stack/storage/CO_storage.c ****         CO_storage_entry_t *entry = &storage->entries[i];
 444              	 .loc 3 109 0
 445 0074 BB69     	 ldr r3,[r7,#24]
 446 0076 D96A     	 ldr r1,[r3,#44]
 447 0078 7A7F     	 ldrb r2,[r7,#29]
 448 007a 1346     	 mov r3,r2
 449 007c 9B00     	 lsls r3,r3,#2
 450 007e 1344     	 add r3,r3,r2
 451 0080 DB00     	 lsls r3,r3,#3
 452 0082 0B44     	 add r3,r3,r1
 453 0084 7B61     	 str r3,[r7,#20]
 110:../CANopen/stack/storage/CO_storage.c **** 
 111:../CANopen/stack/storage/CO_storage.c ****         if (stream->subIndex == 1 || entry->subIndexOD == stream->subIndex) {
 454              	 .loc 3 111 0
 455 0086 FB68     	 ldr r3,[r7,#12]
 456 0088 5B7C     	 ldrb r3,[r3,#17]
 457 008a 012B     	 cmp r3,#1
 458 008c 05D0     	 beq .L33
 459              	 .loc 3 111 0 is_stmt 0 discriminator 1
 460 008e 7B69     	 ldr r3,[r7,#20]
 461 0090 1A7A     	 ldrb r2,[r3,#8]
 462 0092 FB68     	 ldr r3,[r7,#12]
 463 0094 5B7C     	 ldrb r3,[r3,#17]
 464 0096 9A42     	 cmp r2,r3
 465 0098 1BD1     	 bne .L34
 466              	.L33:
 112:../CANopen/stack/storage/CO_storage.c ****             if (found == 0) found = 1;
 467              	 .loc 3 112 0 is_stmt 1
 468 009a FB7F     	 ldrb r3,[r7,#31]
 469 009c 002B     	 cmp r3,#0
 470 009e 01D1     	 bne .L35
 471              	 .loc 3 112 0 is_stmt 0 discriminator 1
 472 00a0 0123     	 movs r3,#1
 473 00a2 FB77     	 strb r3,[r7,#31]
 474              	.L35:
 113:../CANopen/stack/storage/CO_storage.c ****             if ((entry->attr & CO_storage_restore) != 0) {
 475              	 .loc 3 113 0 is_stmt 1
 476 00a4 7B69     	 ldr r3,[r7,#20]
 477 00a6 5B7A     	 ldrb r3,[r3,#9]
 478 00a8 03F00403 	 and r3,r3,#4
 479 00ac 002B     	 cmp r3,#0
 480 00ae 10D0     	 beq .L34
 481              	.LBB7:
 114:../CANopen/stack/storage/CO_storage.c ****                 ODR_t code = storage->restore(entry, storage->CANmodule);
 482              	 .loc 3 114 0
 483 00b0 BB69     	 ldr r3,[r7,#24]
 484 00b2 9B6A     	 ldr r3,[r3,#40]
 485 00b4 BA69     	 ldr r2,[r7,#24]
 486 00b6 126A     	 ldr r2,[r2,#32]
 487 00b8 7869     	 ldr r0,[r7,#20]
 488 00ba 1146     	 mov r1,r2
 489 00bc 9847     	 blx r3
 490 00be 0346     	 mov r3,r0
 491 00c0 FB74     	 strb r3,[r7,#19]
 115:../CANopen/stack/storage/CO_storage.c ****                 if (code != ODR_OK) returnCode = code;
 492              	 .loc 3 115 0
 493 00c2 97F91330 	 ldrsb r3,[r7,#19]
 494 00c6 002B     	 cmp r3,#0
 495 00c8 01D0     	 beq .L36
 496              	 .loc 3 115 0 is_stmt 0 discriminator 1
 497 00ca FB7C     	 ldrb r3,[r7,#19]
 498 00cc BB77     	 strb r3,[r7,#30]
 499              	.L36:
 116:../CANopen/stack/storage/CO_storage.c ****                 found = 2;
 500              	 .loc 3 116 0 is_stmt 1
 501 00ce 0223     	 movs r3,#2
 502 00d0 FB77     	 strb r3,[r7,#31]
 503              	.L34:
 504              	.LBE7:
 505              	.LBE6:
 108:../CANopen/stack/storage/CO_storage.c ****         CO_storage_entry_t *entry = &storage->entries[i];
 506              	 .loc 3 108 0 discriminator 2
 507 00d2 7B7F     	 ldrb r3,[r7,#29]
 508 00d4 0133     	 adds r3,r3,#1
 509 00d6 7B77     	 strb r3,[r7,#29]
 510              	.L32:
 108:../CANopen/stack/storage/CO_storage.c ****         CO_storage_entry_t *entry = &storage->entries[i];
 511              	 .loc 3 108 0 is_stmt 0 discriminator 1
 512 00d8 BB69     	 ldr r3,[r7,#24]
 513 00da 93F83030 	 ldrb r3,[r3,#48]
 514 00de 7A7F     	 ldrb r2,[r7,#29]
 515 00e0 9A42     	 cmp r2,r3
 516 00e2 C7D3     	 bcc .L37
 517              	.LBE5:
 117:../CANopen/stack/storage/CO_storage.c ****             }
 118:../CANopen/stack/storage/CO_storage.c ****         }
 119:../CANopen/stack/storage/CO_storage.c ****     }
 120:../CANopen/stack/storage/CO_storage.c **** 
 121:../CANopen/stack/storage/CO_storage.c ****     if (found != 2)
 518              	 .loc 3 121 0 is_stmt 1
 519 00e4 FB7F     	 ldrb r3,[r7,#31]
 520 00e6 022B     	 cmp r3,#2
 521 00e8 06D0     	 beq .L38
 122:../CANopen/stack/storage/CO_storage.c ****         returnCode = found == 0 ? ODR_SUB_NOT_EXIST : ODR_READONLY;
 522              	 .loc 3 122 0
 523 00ea FB7F     	 ldrb r3,[r7,#31]
 524 00ec 002B     	 cmp r3,#0
 525 00ee 01D1     	 bne .L39
 526              	 .loc 3 122 0 is_stmt 0 discriminator 1
 527 00f0 0E23     	 movs r3,#14
 528 00f2 00E0     	 b .L40
 529              	.L39:
 530              	 .loc 3 122 0 discriminator 2
 531 00f4 0423     	 movs r3,#4
 532              	.L40:
 533              	 .loc 3 122 0 discriminator 4
 534 00f6 BB77     	 strb r3,[r7,#30]
 535              	.L38:
 123:../CANopen/stack/storage/CO_storage.c **** 
 124:../CANopen/stack/storage/CO_storage.c ****     if (returnCode == ODR_OK) *countWritten = sizeof(uint32_t);
 536              	 .loc 3 124 0 is_stmt 1
 537 00f8 97F91E30 	 ldrsb r3,[r7,#30]
 538 00fc 002B     	 cmp r3,#0
 539 00fe 02D1     	 bne .L41
 540              	 .loc 3 124 0 is_stmt 0 discriminator 1
 541 0100 3B68     	 ldr r3,[r7]
 542 0102 0422     	 movs r2,#4
 543 0104 1A60     	 str r2,[r3]
 544              	.L41:
 125:../CANopen/stack/storage/CO_storage.c ****     return returnCode;
 545              	 .loc 3 125 0 is_stmt 1
 546 0106 BB7F     	 ldrb r3,[r7,#30]
 547              	.L28:
 548 0108 5BB2     	 sxtb r3,r3
 126:../CANopen/stack/storage/CO_storage.c **** }
 549              	 .loc 3 126 0
 550 010a 1846     	 mov r0,r3
 551 010c 2037     	 adds r7,r7,#32
 552              	.LCFI19:
 553              	 .cfi_def_cfa_offset 8
 554 010e BD46     	 mov sp,r7
 555              	.LCFI20:
 556              	 .cfi_def_cfa_register 13
 557              	 
 558 0110 80BD     	 pop {r7,pc}
 559              	.L43:
 560 0112 00BF     	 .align 2
 561              	.L42:
 562 0114 6C6F6164 	 .word 1684107116
 563              	 .cfi_endproc
 564              	.LFE34:
 566              	 .section .text.CO_storage_init,"ax",%progbits
 567              	 .align 2
 568              	 .global CO_storage_init
 569              	 .thumb
 570              	 .thumb_func
 572              	CO_storage_init:
 573              	.LFB35:
 127:../CANopen/stack/storage/CO_storage.c **** 
 128:../CANopen/stack/storage/CO_storage.c **** 
 129:../CANopen/stack/storage/CO_storage.c **** CO_ReturnError_t CO_storage_init(CO_storage_t *storage,
 130:../CANopen/stack/storage/CO_storage.c ****                                  CO_CANmodule_t *CANmodule,
 131:../CANopen/stack/storage/CO_storage.c ****                                  OD_entry_t *OD_1010_StoreParameters,
 132:../CANopen/stack/storage/CO_storage.c ****                                  OD_entry_t *OD_1011_RestoreDefaultParameters,
 133:../CANopen/stack/storage/CO_storage.c ****                                  ODR_t (*store)(CO_storage_entry_t *entry,
 134:../CANopen/stack/storage/CO_storage.c ****                                                 CO_CANmodule_t *CANmodule),
 135:../CANopen/stack/storage/CO_storage.c ****                                  ODR_t (*restore)(CO_storage_entry_t *entry,
 136:../CANopen/stack/storage/CO_storage.c ****                                                   CO_CANmodule_t *CANmodule),
 137:../CANopen/stack/storage/CO_storage.c ****                                  CO_storage_entry_t *entries,
 138:../CANopen/stack/storage/CO_storage.c ****                                  uint8_t entriesCount)
 139:../CANopen/stack/storage/CO_storage.c **** {
 574              	 .loc 3 139 0
 575              	 .cfi_startproc
 576              	 
 577              	 
 578 0000 80B5     	 push {r7,lr}
 579              	.LCFI21:
 580              	 .cfi_def_cfa_offset 8
 581              	 .cfi_offset 7,-8
 582              	 .cfi_offset 14,-4
 583 0002 84B0     	 sub sp,sp,#16
 584              	.LCFI22:
 585              	 .cfi_def_cfa_offset 24
 586 0004 00AF     	 add r7,sp,#0
 587              	.LCFI23:
 588              	 .cfi_def_cfa_register 7
 589 0006 F860     	 str r0,[r7,#12]
 590 0008 B960     	 str r1,[r7,#8]
 591 000a 7A60     	 str r2,[r7,#4]
 592 000c 3B60     	 str r3,[r7]
 140:../CANopen/stack/storage/CO_storage.c ****     /* verify arguments */
 141:../CANopen/stack/storage/CO_storage.c ****     if (storage == NULL) {
 593              	 .loc 3 141 0
 594 000e FB68     	 ldr r3,[r7,#12]
 595 0010 002B     	 cmp r3,#0
 596 0012 01D1     	 bne .L45
 142:../CANopen/stack/storage/CO_storage.c ****         return CO_ERROR_ILLEGAL_ARGUMENT;
 597              	 .loc 3 142 0
 598 0014 FF23     	 movs r3,#255
 599 0016 34E0     	 b .L46
 600              	.L45:
 143:../CANopen/stack/storage/CO_storage.c ****     }
 144:../CANopen/stack/storage/CO_storage.c **** 
 145:../CANopen/stack/storage/CO_storage.c ****     /* Configure object variables */
 146:../CANopen/stack/storage/CO_storage.c ****     storage->CANmodule = CANmodule;
 601              	 .loc 3 146 0
 602 0018 FB68     	 ldr r3,[r7,#12]
 603 001a BA68     	 ldr r2,[r7,#8]
 604 001c 1A62     	 str r2,[r3,#32]
 147:../CANopen/stack/storage/CO_storage.c ****     storage->store = store;
 605              	 .loc 3 147 0
 606 001e FB68     	 ldr r3,[r7,#12]
 607 0020 BA69     	 ldr r2,[r7,#24]
 608 0022 5A62     	 str r2,[r3,#36]
 148:../CANopen/stack/storage/CO_storage.c ****     storage->restore = restore;
 609              	 .loc 3 148 0
 610 0024 FB68     	 ldr r3,[r7,#12]
 611 0026 FA69     	 ldr r2,[r7,#28]
 612 0028 9A62     	 str r2,[r3,#40]
 149:../CANopen/stack/storage/CO_storage.c ****     storage->entries = entries;
 613              	 .loc 3 149 0
 614 002a FB68     	 ldr r3,[r7,#12]
 615 002c 3A6A     	 ldr r2,[r7,#32]
 616 002e DA62     	 str r2,[r3,#44]
 150:../CANopen/stack/storage/CO_storage.c ****     storage->entriesCount = entriesCount;
 617              	 .loc 3 150 0
 618 0030 FB68     	 ldr r3,[r7,#12]
 619 0032 97F82420 	 ldrb r2,[r7,#36]
 620 0036 83F83020 	 strb r2,[r3,#48]
 151:../CANopen/stack/storage/CO_storage.c **** 
 152:../CANopen/stack/storage/CO_storage.c ****     /* configure extensions */
 153:../CANopen/stack/storage/CO_storage.c ****     if (OD_1010_StoreParameters != NULL) {
 621              	 .loc 3 153 0
 622 003a 7B68     	 ldr r3,[r7,#4]
 623 003c 002B     	 cmp r3,#0
 624 003e 0DD0     	 beq .L47
 154:../CANopen/stack/storage/CO_storage.c ****         storage->OD_1010_extension.object = storage;
 625              	 .loc 3 154 0
 626 0040 FB68     	 ldr r3,[r7,#12]
 627 0042 FA68     	 ldr r2,[r7,#12]
 628 0044 1A60     	 str r2,[r3]
 155:../CANopen/stack/storage/CO_storage.c ****         storage->OD_1010_extension.read = OD_readOriginal;
 629              	 .loc 3 155 0
 630 0046 FB68     	 ldr r3,[r7,#12]
 631 0048 104A     	 ldr r2,.L49
 632 004a 5A60     	 str r2,[r3,#4]
 156:../CANopen/stack/storage/CO_storage.c ****         storage->OD_1010_extension.write = OD_write_1010;
 633              	 .loc 3 156 0
 634 004c FB68     	 ldr r3,[r7,#12]
 635 004e 104A     	 ldr r2,.L49+4
 636 0050 9A60     	 str r2,[r3,#8]
 157:../CANopen/stack/storage/CO_storage.c ****         OD_extension_init(OD_1010_StoreParameters, &storage->OD_1010_extension);
 637              	 .loc 3 157 0
 638 0052 FB68     	 ldr r3,[r7,#12]
 639 0054 7868     	 ldr r0,[r7,#4]
 640 0056 1946     	 mov r1,r3
 641 0058 FFF7FEFF 	 bl OD_extension_init
 642              	.L47:
 158:../CANopen/stack/storage/CO_storage.c ****     }
 159:../CANopen/stack/storage/CO_storage.c **** 
 160:../CANopen/stack/storage/CO_storage.c ****     if (OD_1011_RestoreDefaultParameters != NULL) {
 643              	 .loc 3 160 0
 644 005c 3B68     	 ldr r3,[r7]
 645 005e 002B     	 cmp r3,#0
 646 0060 0ED0     	 beq .L48
 161:../CANopen/stack/storage/CO_storage.c ****         storage->OD_1011_extension.object = storage;
 647              	 .loc 3 161 0
 648 0062 FB68     	 ldr r3,[r7,#12]
 649 0064 FA68     	 ldr r2,[r7,#12]
 650 0066 1A61     	 str r2,[r3,#16]
 162:../CANopen/stack/storage/CO_storage.c ****         storage->OD_1011_extension.read = OD_readOriginal;
 651              	 .loc 3 162 0
 652 0068 FB68     	 ldr r3,[r7,#12]
 653 006a 084A     	 ldr r2,.L49
 654 006c 5A61     	 str r2,[r3,#20]
 163:../CANopen/stack/storage/CO_storage.c ****         storage->OD_1011_extension.write = OD_write_1011;
 655              	 .loc 3 163 0
 656 006e FB68     	 ldr r3,[r7,#12]
 657 0070 084A     	 ldr r2,.L49+8
 658 0072 9A61     	 str r2,[r3,#24]
 164:../CANopen/stack/storage/CO_storage.c ****         OD_extension_init(OD_1011_RestoreDefaultParameters,
 659              	 .loc 3 164 0
 660 0074 FB68     	 ldr r3,[r7,#12]
 661 0076 1033     	 adds r3,r3,#16
 662 0078 3868     	 ldr r0,[r7]
 663 007a 1946     	 mov r1,r3
 664 007c FFF7FEFF 	 bl OD_extension_init
 665              	.L48:
 165:../CANopen/stack/storage/CO_storage.c ****                           &storage->OD_1011_extension);
 166:../CANopen/stack/storage/CO_storage.c ****     }
 167:../CANopen/stack/storage/CO_storage.c **** 
 168:../CANopen/stack/storage/CO_storage.c ****     return CO_ERROR_NO;
 666              	 .loc 3 168 0
 667 0080 0023     	 movs r3,#0
 668              	.L46:
 669 0082 5BB2     	 sxtb r3,r3
 169:../CANopen/stack/storage/CO_storage.c **** }
 670              	 .loc 3 169 0
 671 0084 1846     	 mov r0,r3
 672 0086 1037     	 adds r7,r7,#16
 673              	.LCFI24:
 674              	 .cfi_def_cfa_offset 8
 675 0088 BD46     	 mov sp,r7
 676              	.LCFI25:
 677              	 .cfi_def_cfa_register 13
 678              	 
 679 008a 80BD     	 pop {r7,pc}
 680              	.L50:
 681              	 .align 2
 682              	.L49:
 683 008c 00000000 	 .word OD_readOriginal
 684 0090 00000000 	 .word OD_write_1010
 685 0094 00000000 	 .word OD_write_1011
 686              	 .cfi_endproc
 687              	.LFE35:
 689              	 .text
 690              	.Letext0:
 691              	 .file 4 "d:\\programs\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 692              	 .file 5 "d:\\programs\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 693              	 .file 6 "d:\\programs\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 694              	 .file 7 "D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/driver/CO_driver_target.h"
 695              	 .file 8 "D:/Workspace/Development/my/DAVE/Infineon_CANopen/CANopen/stack/storage/CO_storage.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CO_storage.c
    {standard input}:20     .text.CO_getUint32:00000000 $t
    {standard input}:24     .text.CO_getUint32:00000000 CO_getUint32
    {standard input}:64     .text.OD_extension_init:00000000 $t
    {standard input}:68     .text.OD_extension_init:00000000 OD_extension_init
    {standard input}:122    .text.OD_write_1010:00000000 $t
    {standard input}:126    .text.OD_write_1010:00000000 OD_write_1010
    {standard input}:340    .text.OD_write_1010:00000114 $d
    {standard input}:345    .text.OD_write_1011:00000000 $t
    {standard input}:349    .text.OD_write_1011:00000000 OD_write_1011
    {standard input}:562    .text.OD_write_1011:00000114 $d
    {standard input}:567    .text.CO_storage_init:00000000 $t
    {standard input}:572    .text.CO_storage_init:00000000 CO_storage_init
    {standard input}:683    .text.CO_storage_init:0000008c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memmove
OD_readOriginal
