
Infineon_CANopen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b54c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00020000  2**0
                  ALLOC
  2 .data         00000b80  1ffe8800  0c00b54c  00018800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000074  1ffe9380  0c00c0cc  00019380  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  0001ffc0  2**2
                  ALLOC
  5 .debug_aranges 000015f0  00000000  00000000  00019380  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002808f  00000000  00000000  0001a970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005794  00000000  00000000  000429ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c991  00000000  00000000  00048193  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005ab0  00000000  00000000  00054b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010274  00000000  00000000  0005a5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b590  00000000  00000000  0006a848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012e8  00000000  00000000  00075dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 00000d31  00000000  00000000  000770c0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 b9 a3 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 cd a3 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00b54c 	.word	0x0c00b54c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000b80 	.word	0x00000b80
 8000254:	0c00b54c 	.word	0x0c00b54c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe9380 	.word	0x1ffe9380
 8000264:	00000074 	.word	0x00000074
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	0800a3f9 	.word	0x0800a3f9
    blx  r0
#endif

    ldr  r0, =main
 8000294:	0800a399 	.word	0x0800a399

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ae:	f002 fb45 	bl	800293c <SystemCoreSetup>
  SystemCoreClockSetup();
 80002b2:	f002 fbc1 	bl	8002a38 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f002 fb8c 	bl	80029fc <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	2003ffc0 	.word	0x2003ffc0

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fed2 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2003ffc0 	.word	0x2003ffc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f8c5 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fadb 	bl	8000b4c <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 fb13 	bl	8000bc8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 fafe 	bl	8000ba4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f929 	bl	8000810 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa96 	bl	8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f937 	bl	800084c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f95a 	bl	800089c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f941 	bl	8000874 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f964 	bl	80008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 fb18 	bl	8000c38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fb3d 	bl	8000c88 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d109      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	f083 0301 	eor.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d017      	beq.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000630:	f000 fb4e 	bl	8000cd0 <XMC_SCU_CLOCK_DisableSystemPll>
 8000634:	e014      	b.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000636:	f000 fb3b 	bl	8000cb0 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8899      	ldrh	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000646:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800064c:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	462a      	mov	r2, r5
 800065a:	4623      	mov	r3, r4
 800065c:	f000 fb48 	bl	8000cf0 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000668:	d103      	bne.n	8000672 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800066a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800066e:	f000 f855 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000672:	f7ff fe23 	bl	80002bc <SystemCoreClockUpdate>
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}

0800067c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0f1b      	lsrs	r3, r3, #28
 8000688:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000690:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	461a      	mov	r2, r3
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006a0:	4413      	add	r3, r2
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	50004414 	.word	0x50004414

080006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	0f1b      	lsrs	r3, r3, #28
 80006c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006c8:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006d8:	4413      	add	r3, r2
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	5000440c 	.word	0x5000440c

080006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000700:	f7ff feec 	bl	80004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000704:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000708:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	50004600 	.word	0x50004600

0800071c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	50004600 	.word	0x50004600

08000744 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	50004600 	.word	0x50004600

0800076c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000774:	4906      	ldr	r1, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	50004600 	.word	0x50004600

08000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	60d3      	str	r3, [r2, #12]
 80007b4:	e007      	b.n	80007c6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	60d3      	str	r3, [r2, #12]
  }
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004710 	.word	0x50004710

080007d4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007de:	bf00      	nop
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f8      	bne.n	80007e0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	50004000 	.word	0x50004000
 800080c:	50004300 	.word	0x50004300

08000810 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800081a:	bf00      	nop
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800081e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f8      	bne.n	800081c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000834:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004000 	.word	0x50004000
 8000848:	50004300 	.word	0x50004300

0800084c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004600 	.word	0x50004600

08000874 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000880:	6a1b      	ldr	r3, [r3, #32]
 8000882:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004600 	.word	0x50004600

0800089c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008b2:	4313      	orrs	r3, r2
 80008b4:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	50004600 	.word	0x50004600

080008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	50004600 	.word	0x50004600

080008ec <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000902:	4313      	orrs	r3, r2
 8000904:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	50004600 	.word	0x50004600

08000914 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800092a:	4313      	orrs	r3, r2
 800092c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	50004600 	.word	0x50004600

0800093c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000952:	4313      	orrs	r3, r2
 8000954:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	50004600 	.word	0x50004600

08000964 <XMC_SCU_CLOCK_SetECATClockDivider>:
}

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <XMC_SCU_CLOCK_SetECATClockDivider+0x24>)
 8000970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000972:	f023 0203 	bic.w	r2, r3, #3
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3b01      	subs	r3, #1

#if defined(ECAT0)
/* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
{
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
 800097a:	4313      	orrs	r3, r2
 800097c:	638b      	str	r3, [r1, #56]	; 0x38
                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
}
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	50004600 	.word	0x50004600

0800098c <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	6053      	str	r3, [r2, #4]
}
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	50004600 	.word	0x50004600

080009ac <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	0f1b      	lsrs	r3, r3, #28
 80009b8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009c0:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80009d0:	4413      	add	r3, r2
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	601a      	str	r2, [r3, #0]
}
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	50004648 	.word	0x50004648

080009e4 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	0f1b      	lsrs	r3, r3, #28
 80009f0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009f8:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 8000a08:	4413      	add	r3, r2
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	bf14      	ite	ne
 8000a14:	2301      	movne	r3, #1
 8000a16:	2300      	moveq	r3, #0
 8000a18:	b2db      	uxtb	r3, r3
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	50004640 	.word	0x50004640

08000a2c <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000a30:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a32:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a3a:	f023 0302 	bic.w	r3, r3, #2
 8000a3e:	6153      	str	r3, [r2, #20]
}
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	50004710 	.word	0x50004710

08000a4c <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a56:	4a28      	ldr	r2, [pc, #160]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a62:	bf00      	nop
 8000a64:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a66:	691b      	ldr	r3, [r3, #16]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0f9      	beq.n	8000a64 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a70:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a7c:	491e      	ldr	r1, [pc, #120]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	3b01      	subs	r3, #1
 8000a82:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a8e:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a98:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	f023 0310 	bic.w	r3, r3, #16
 8000aa4:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab0:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000ab2:	bf00      	nop
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f9      	beq.n	8000ab4 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f023 0301 	bic.w	r3, r3, #1
 8000aca:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000acc:	bf00      	nop
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1f9      	bne.n	8000ace <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ae4:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000ae8:	2208      	movs	r2, #8
 8000aea:	60da      	str	r2, [r3, #12]
}
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	50004710 	.word	0x50004710
 8000afc:	50004160 	.word	0x50004160

08000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b14:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10e      	bne.n	8000b3a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b26:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000b28:	2064      	movs	r0, #100	; 0x64
 8000b2a:	f7ff fcef 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000b2e:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b38:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000b3a:	2064      	movs	r0, #100	; 0x64
 8000b3c:	f7ff fce6 	bl	800050c <XMC_SCU_lDelay>
}
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	50004710 	.word	0x50004710

08000b4c <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d109      	bne.n	8000b70 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b62:	bf00      	nop
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0f9      	beq.n	8000b64 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00a      	beq.n	8000b92 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b82:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b84:	bf00      	nop
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f9      	bne.n	8000b86 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	50004200 	.word	0x50004200
 8000ba0:	50004400 	.word	0x50004400

08000ba4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f003 0308 	and.w	r3, r3, #8
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf0c      	ite	eq
 8000bb4:	2301      	moveq	r3, #1
 8000bb6:	2300      	movne	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	50004300 	.word	0x50004300

08000bc8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000bcc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bd0:	f7ff fcca 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000bd4:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bde:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000be0:	bf00      	nop
 8000be2:	f7ff fcb5 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f8      	beq.n	8000be2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000bf0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bf4:	f7ff fcb8 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bfa:	2208      	movs	r2, #8
 8000bfc:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bfe:	bf00      	nop
 8000c00:	f7ff fca6 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0f8      	beq.n	8000c00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000c0e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000c12:	f7ff fca9 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000c16:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000c22:	bf00      	nop
 8000c24:	f7ff fc94 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f8      	beq.n	8000c24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	50004300 	.word	0x50004300

08000c38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c46:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c48:	4d0d      	ldr	r5, [pc, #52]	; (8000c80 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c52:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c56:	f001 fed1 	bl	80029fc <OSCHP_GetFrequency>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8000c62:	0d1b      	lsrs	r3, r3, #20
 8000c64:	3b01      	subs	r3, #1
 8000c66:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c68:	4323      	orrs	r3, r4
 8000c6a:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c6e:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c76:	6053      	str	r3, [r2, #4]
}
 8000c78:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	50004710 	.word	0x50004710
 8000c80:	50004700 	.word	0x50004700
 8000c84:	6b5fca6b 	.word	0x6b5fca6b

08000c88 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c94:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c98:	bf0c      	ite	eq
 8000c9a:	2301      	moveq	r3, #1
 8000c9c:	2300      	movne	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	50004710 	.word	0x50004710

08000cb0 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cb4:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cbe:	f023 0302 	bic.w	r3, r3, #2
 8000cc2:	6053      	str	r3, [r2, #4]
}
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	50004710 	.word	0x50004710

08000cd0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000cd4:	4a05      	ldr	r2, [pc, #20]	; (8000cec <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	6053      	str	r3, [r2, #4]
}
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	50004710 	.word	0x50004710

08000cf0 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60ba      	str	r2, [r7, #8]
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	81fb      	strh	r3, [r7, #14]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000d02:	89fb      	ldrh	r3, [r7, #14]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd45 	bl	8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000d0a:	7b7b      	ldrb	r3, [r7, #13]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	f040 808b 	bne.w	8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000d12:	89fb      	ldrh	r3, [r7, #14]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d109      	bne.n	8000d2c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000d18:	f001 fe70 	bl	80029fc <OSCHP_GetFrequency>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	4b54      	ldr	r3, [pc, #336]	; (8000e70 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000d20:	fba3 2302 	umull	r2, r3, r3, r2
 8000d24:	0c9b      	lsrs	r3, r3, #18
 8000d26:	059b      	lsls	r3, r3, #22
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	e002      	b.n	8000d32 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000d2c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000d30:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	fb02 f203 	mul.w	r2, r2, r3
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d40:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	4a4b      	ldr	r2, [pc, #300]	; (8000e74 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	091b      	lsrs	r3, r3, #4
 8000d4c:	0d9b      	lsrs	r3, r3, #22
 8000d4e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d50:	4a49      	ldr	r2, [pc, #292]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d52:	4b49      	ldr	r3, [pc, #292]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d5c:	bf00      	nop
 8000d5e:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f9      	beq.n	8000d5e <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d6a:	4a43      	ldr	r2, [pc, #268]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d6c:	4b42      	ldr	r3, [pc, #264]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f043 0310 	orr.w	r3, r3, #16
 8000d74:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d76:	4940      	ldr	r1, [pc, #256]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d78:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d7e:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	3a01      	subs	r2, #1
 8000d84:	0212      	lsls	r2, r2, #8
 8000d86:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d8e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d96:	4313      	orrs	r3, r2
 8000d98:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d9a:	4a37      	ldr	r2, [pc, #220]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d9c:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da4:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000da6:	4a34      	ldr	r2, [pc, #208]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f023 0310 	bic.w	r3, r3, #16
 8000db0:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000db2:	4a31      	ldr	r2, [pc, #196]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000dbe:	bf00      	nop
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f9      	beq.n	8000dc0 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000dcc:	4a2a      	ldr	r2, [pc, #168]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000dd8:	bf00      	nop
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f9      	bne.n	8000dda <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	4a25      	ldr	r2, [pc, #148]	; (8000e80 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	0d9b      	lsrs	r3, r3, #22
 8000df2:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000df4:	6a3a      	ldr	r2, [r7, #32]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d202      	bcs.n	8000e02 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dfc:	6938      	ldr	r0, [r7, #16]
 8000dfe:	f000 f845 	bl	8000e8c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	085b      	lsrs	r3, r3, #1
 8000e06:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	095b      	lsrs	r3, r3, #5
 8000e0e:	0d9b      	lsrs	r3, r3, #22
 8000e10:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000e12:	6a3a      	ldr	r2, [r7, #32]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d202      	bcs.n	8000e20 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000e1a:	6938      	ldr	r0, [r7, #16]
 8000e1c:	f000 f836 	bl	8000e8c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000e20:	6a38      	ldr	r0, [r7, #32]
 8000e22:	f000 f833 	bl	8000e8c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000e26:	e01c      	b.n	8000e62 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e28:	4913      	ldr	r1, [pc, #76]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000e36:	4313      	orrs	r3, r2
 8000e38:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000e3a:	bf00      	nop
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f9      	beq.n	8000e3c <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e54:	bf00      	nop
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f9      	beq.n	8000e56 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e64:	2205      	movs	r2, #5
 8000e66:	60da      	str	r2, [r3, #12]
}
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	431bde83 	.word	0x431bde83
 8000e74:	aaaaaaab 	.word	0xaaaaaaab
 8000e78:	50004710 	.word	0x50004710
 8000e7c:	f08080ff 	.word	0xf08080ff
 8000e80:	88888889 	.word	0x88888889
 8000e84:	b60b60b7 	.word	0xb60b60b7
 8000e88:	50004160 	.word	0x50004160

08000e8c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e94:	490b      	ldr	r1, [pc, #44]	; (8000ec4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000ea8:	bf00      	nop
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f9      	beq.n	8000eaa <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000eb6:	2032      	movs	r0, #50	; 0x32
 8000eb8:	f7ff fb28 	bl	800050c <XMC_SCU_lDelay>
}
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	50004710 	.word	0x50004710

08000ec8 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8000ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf0c      	ite	eq
 8000ede:	2301      	moveq	r3, #1
 8000ee0:	2300      	movne	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	4608      	mov	r0, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	4603      	mov	r3, r0
 8000f00:	70fb      	strb	r3, [r7, #3]
 8000f02:	460b      	mov	r3, r1
 8000f04:	70bb      	strb	r3, [r7, #2]
 8000f06:	4613      	mov	r3, r2
 8000f08:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000f0a:	78fa      	ldrb	r2, [r7, #3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000f0c:	78bb      	ldrb	r3, [r7, #2]
 8000f0e:	041b      	lsls	r3, r3, #16
 8000f10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000f14:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8000f16:	787b      	ldrb	r3, [r7, #1]
 8000f18:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8000f1a:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	601a      	str	r2, [r3, #0]
}
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	bf38      	it	cc
 8000f7e:	4613      	movcc	r3, r2
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	bf28      	it	cs
 8000f9e:	4613      	movcs	r3, r2
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	6852      	ldr	r2, [r2, #4]
 8000fbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fc2:	fb02 f201 	mul.w	r2, r2, r1
 8000fc6:	1a9b      	subs	r3, r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f040 8090 	bne.w	80010ee <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>
  {
    uint32_t prescaler = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8000fe4:	2319      	movs	r3, #25
 8000fe6:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8000ff0:	e04b      	b.n	800108a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ffa:	6979      	ldr	r1, [r7, #20]
 8000ffc:	fb01 f202 	mul.w	r2, r1, r2
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d13e      	bne.n	8001084 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d034      	beq.n	8001084 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001020:	d830      	bhi.n	8001084 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	2b3f      	cmp	r3, #63	; 0x3f
 8001026:	d90a      	bls.n	800103e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3b01      	subs	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
              continue;
 8001038:	e027      	b.n	800108a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
 800103a:	2301      	movs	r3, #1
 800103c:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3b01      	subs	r3, #1
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	8912      	ldrh	r2, [r2, #8]
 8001046:	fb02 f303 	mul.w	r3, r2, r3
 800104a:	4a2b      	ldr	r2, [pc, #172]	; (80010f8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14c>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	0b5b      	lsrs	r3, r3, #13
 8001052:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	3b01      	subs	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d90f      	bls.n	8001084 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	d80c      	bhi.n	8001084 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d909      	bls.n	8001084 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b06      	cmp	r3, #6
 8001074:	d806      	bhi.n	8001084 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	895b      	ldrh	r3, [r3, #10]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	429a      	cmp	r2, r3
 8001080:	d800      	bhi.n	8001084 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
 8001082:	e005      	b.n	8001090 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3b01      	subs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b07      	cmp	r3, #7
 800108e:	d8b0      	bhi.n	8000ff2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x46>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b07      	cmp	r3, #7
 8001094:	d92b      	bls.n	80010ee <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff48 	bl	8000f2c <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3b01      	subs	r3, #1
 80010a0:	031b      	lsls	r3, r3, #12
 80010a2:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	895b      	ldrh	r3, [r3, #10]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	019b      	lsls	r3, r3, #6
 80010ae:	b2db      	uxtb	r3, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 80010b0:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 80010bc:	ea42 0103 	orr.w	r1, r2, r3
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	40d3      	lsrs	r3, r2
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 80010d4:	ea41 0203 	orr.w	r2, r1, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	03db      	lsls	r3, r3, #15
 80010dc:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 80010de:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff31 	bl	8000f4c <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x144>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	d1b71759 	.word	0xd1b71759

080010fc <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
 8001108:	4613      	mov	r3, r2
 800110a:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 800110c:	bf00      	nop
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff feda 	bl	8000ec8 <XMC_CAN_IsPanelControlReady>
 8001114:	4603      	mov	r3, r0
 8001116:	f083 0301 	eor.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f6      	bne.n	800110e <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	3301      	adds	r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	78ba      	ldrb	r2, [r7, #2]
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	2102      	movs	r1, #2
 800112c:	f7ff fee0 	bl	8000ef0 <XMC_CAN_PanelControl>
}
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop

08001138 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 8001140:	480a      	ldr	r0, [pc, #40]	; (800116c <XMC_CAN_Enable+0x34>)
 8001142:	f7ff fc33 	bl	80009ac <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8001146:	4809      	ldr	r0, [pc, #36]	; (800116c <XMC_CAN_Enable+0x34>)
 8001148:	f7ff fa98 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 0201 	bic.w	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8001158:	bf00      	nop
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f9      	bne.n	800115a <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	10000010 	.word	0x10000010

08001170 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8001182:	f023 020f 	bic.w	r2, r3, #15
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ffe5 	bl	800119c <XMC_CAN_GetBaudrateClockSource>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d002      	beq.n	80011de <XMC_CAN_GetBaudrateClockFrequency+0x1e>
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d004      	beq.n	80011e6 <XMC_CAN_GetBaudrateClockFrequency+0x26>
 80011dc:	e007      	b.n	80011ee <XMC_CAN_GetBaudrateClockFrequency+0x2e>
  {
#if UC_FAMILY == XMC4
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80011de:	f7ff fa8d 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80011e2:	60f8      	str	r0, [r7, #12]
      break;
 80011e4:	e003      	b.n	80011ee <XMC_CAN_GetBaudrateClockFrequency+0x2e>
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
 80011e6:	f001 fc09 	bl	80029fc <OSCHP_GetFrequency>
 80011ea:	60f8      	str	r0, [r7, #12]
      break;
 80011ec:	bf00      	nop
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	460b      	mov	r3, r1
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff ff96 	bl	8001138 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff ffad 	bl	8001170 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff ffd2 	bl	80011c0 <XMC_CAN_GetBaudrateClockFrequency>
 800121c:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800122a:	2000      	movs	r0, #0
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fe9d 	bl	8000f6c <max>
 8001232:	4603      	mov	r3, r0
 8001234:	4618      	mov	r0, r3
 8001236:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800123a:	f7ff fea7 	bl	8000f8c <min>
 800123e:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	fbb2 f3f3 	udiv	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8001256:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	60da      	str	r2, [r3, #12]

  return freq_n;
 800126e:	697b      	ldr	r3, [r7, #20]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <XMC_CAN_MO_SetIdentifier>:
  return (XMC_CAN_GetBaudrateClockFrequency(obj) * (1024U - step_n));
}

/* Sets the Identifier of the MO */
void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10d      	bne.n	80012ac <XMC_CAN_MO_SetIdentifier+0x34>
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	6992      	ldr	r2, [r2, #24]
 800129a:	f002 4160 	and.w	r1, r2, #3758096384	; 0xe0000000
                               ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_ID_Msk);
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	0492      	lsls	r2, r2, #18
 80012a2:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
/* Sets the Identifier of the MO */
void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
{
  if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 80012a6:	430a      	orrs	r2, r1
 80012a8:	619a      	str	r2, [r3, #24]
 80012aa:	e00b      	b.n	80012c4 <XMC_CAN_MO_SetIdentifier+0x4c>
                               ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_ID_Msk);
  }
  else
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	6992      	ldr	r2, [r2, #24]
 80012b6:	f002 4160 	and.w	r1, r2, #3758096384	; 0xe0000000
                               (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
                               ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_ID_Msk);
  }
  else
  {
    can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 80012c0:	430a      	orrs	r2, r1
 80012c2:	619a      	str	r2, [r3, #24]
                               (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
  }
  can_mo->can_identifier = can_identifier;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6853      	ldr	r3, [r2, #4]
 80012ce:	f361 031c 	bfi	r3, r1, #0, #29
 80012d2:	6053      	str	r3, [r2, #4]
}
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 80012f0:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 80012f4:	095b      	lsrs	r3, r3, #5
 80012f6:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	035a      	lsls	r2, r3, #13
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	6892      	ldr	r2, [r2, #8]
 8001314:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001318:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	6891      	ldr	r1, [r2, #8]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	430a      	orrs	r2, r1
 8001328:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	79db      	ldrb	r3, [r3, #7]
 800132e:	f003 0320 	and.w	r3, r3, #32
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	79db      	ldrb	r3, [r3, #7]
 800133c:	f003 0320 	and.w	r3, r3, #32
 8001340:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <XMC_CAN_MO_Config+0x68>
 8001346:	e060      	b.n	800140a <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8001354:	2b01      	cmp	r3, #1
 8001356:	d000      	beq.n	800135a <XMC_CAN_MO_Config+0x7a>
 8001358:	e057      	b.n	800140a <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2220      	movs	r2, #32
 8001360:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	79db      	ldrb	r3, [r3, #7]
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d128      	bne.n	80013c2 <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800137c:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8001386:	049b      	lsls	r3, r3, #18
 8001388:	461a      	mov	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80013a4:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80013ae:	049b      	lsls	r3, r3, #18
 80013b0:	461a      	mov	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	e009      	b.n	80013d6 <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6852      	ldr	r2, [r2, #4]
 80013ca:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6892      	ldr	r2, [r2, #8]
 80013d4:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7e1b      	ldrb	r3, [r3, #24]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d10c      	bne.n	80013f8 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f81a 	bl	8001418 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ec:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a07      	ldr	r2, [pc, #28]	; (8001410 <XMC_CAN_MO_Config+0x130>)
 80013f4:	61da      	str	r2, [r3, #28]
 80013f6:	e008      	b.n	800140a <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001400:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <XMC_CAN_MO_Config+0x134>)
 8001408:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	062000c0 	.word	0x062000c0
 8001414:	00a00640 	.word	0x00a00640

08001418 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001420:	2303      	movs	r3, #3
 8001422:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7e1b      	ldrb	r3, [r3, #24]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d122      	bne.n	8001472 <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2220      	movs	r2, #32
 8001432:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	7b12      	ldrb	r2, [r2, #12]
 8001446:	0612      	lsls	r2, r2, #24
 8001448:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6912      	ldr	r2, [r2, #16]
 8001458:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6952      	ldr	r2, [r2, #20]
 8001462:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <XMC_CAN_MO_UpdateData+0x6c>)
 800146a:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800146c:	2300      	movs	r3, #0
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	e001      	b.n	8001476 <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8001472:	2303      	movs	r3, #3
 8001474:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	00280040 	.word	0x00280040

08001488 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 80014b6:	2304      	movs	r3, #4
 80014b8:	75fb      	strb	r3, [r7, #23]
 80014ba:	e00c      	b.n	80014d6 <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d102      	bne.n	80014c8 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 80014c2:	2302      	movs	r3, #2
 80014c4:	75fb      	strb	r3, [r7, #23]
 80014c6:	e006      	b.n	80014d6 <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80014d0:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001502:	0adb      	lsrs	r3, r3, #11
 8001504:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800151a:	2303      	movs	r3, #3
 800151c:	75fb      	strb	r3, [r7, #23]
 800151e:	e0a7      	b.n	8001670 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d102      	bne.n	800152c <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 8001526:	2302      	movs	r3, #2
 8001528:	75fb      	strb	r3, [r7, #23]
 800152a:	e0a1      	b.n	8001670 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2208      	movs	r2, #8
 8001532:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800153e:	0f5b      	lsrs	r3, r3, #29
 8001540:	2b00      	cmp	r3, #0
 8001542:	d140      	bne.n	80015c6 <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	79d3      	ldrb	r3, [r2, #7]
 8001548:	f36f 1345 	bfc	r3, #5, #1
 800154c:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <XMC_CAN_MO_Receive+0x19c>)
 8001556:	4013      	ands	r3, r2
 8001558:	0c9b      	lsrs	r3, r3, #18
 800155a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6853      	ldr	r3, [r2, #4]
 8001562:	f361 031c 	bfi	r3, r1, #0, #29
 8001566:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001572:	0f5b      	lsrs	r3, r3, #29
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	b2d9      	uxtb	r1, r3
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	7ad3      	ldrb	r3, [r2, #11]
 8001580:	f361 1345 	bfi	r3, r1, #5, #1
 8001584:	72d3      	strb	r3, [r2, #11]
        if (can_mo->can_ide_mask == 1U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7adb      	ldrb	r3, [r3, #11]
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00d      	beq.n	80015b0 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	4b39      	ldr	r3, [pc, #228]	; (8001680 <XMC_CAN_MO_Receive+0x19c>)
 800159c:	4013      	ands	r3, r2
 800159e:	0c9b      	lsrs	r3, r3, #18
 80015a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6893      	ldr	r3, [r2, #8]
 80015a8:	f361 031c 	bfi	r3, r1, #0, #29
 80015ac:	6093      	str	r3, [r2, #8]
 80015ae:	e032      	b.n	8001616 <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6893      	ldr	r3, [r2, #8]
 80015be:	f361 031c 	bfi	r3, r1, #0, #29
 80015c2:	6093      	str	r3, [r2, #8]
 80015c4:	e027      	b.n	8001616 <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	79d3      	ldrb	r3, [r2, #7]
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6853      	ldr	r3, [r2, #4]
 80015de:	f361 031c 	bfi	r3, r1, #0, #29
 80015e2:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6893      	ldr	r3, [r2, #8]
 80015f2:	f361 031c 	bfi	r3, r1, #0, #29
 80015f6:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001602:	0f5b      	lsrs	r3, r3, #29
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	b2d9      	uxtb	r1, r3
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	7ad3      	ldrb	r3, [r2, #11]
 8001610:	f361 1345 	bfi	r3, r1, #5, #1
 8001614:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001620:	0e1b      	lsrs	r3, r3, #24
 8001622:	b2da      	uxtb	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	757b      	strb	r3, [r7, #21]
    }
    while ((rx_pnd != 0U) && (new_data != 0U));
 8001658:	7dbb      	ldrb	r3, [r7, #22]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <XMC_CAN_MO_Receive+0x182>
 800165e:	7d7b      	ldrb	r3, [r7, #21]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f47f af63 	bne.w	800152c <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 800166c:	2300      	movs	r3, #0
 800166e:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 8001670:	7dfb      	ldrb	r3, [r7, #23]
}
 8001672:	4618      	mov	r0, r3
 8001674:	371c      	adds	r7, #28
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	1ffc0000 	.word	0x1ffc0000

08001684 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001694:	d006      	beq.n	80016a4 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e005      	b.n	80016b0 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699a      	ldr	r2, [r3, #24]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
  }
}
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop

080016bc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ca:	60da      	str	r2, [r3, #12]
}
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <XMC_CCU4_lDeassertReset+0x4c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d103      	bne.n	80016f0 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80016e8:	2004      	movs	r0, #4
 80016ea:	f7fe ffc7 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 80016ee:	e016      	b.n	800171e <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <XMC_CCU4_lDeassertReset+0x50>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d103      	bne.n	8001700 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80016f8:	2008      	movs	r0, #8
 80016fa:	f7fe ffbf 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 80016fe:	e00e      	b.n	800171e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <XMC_CCU4_lDeassertReset+0x54>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d103      	bne.n	8001710 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8001708:	2010      	movs	r0, #16
 800170a:	f7fe ffb7 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
 800170e:	e006      	b.n	800171e <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a07      	ldr	r2, [pc, #28]	; (8001730 <XMC_CCU4_lDeassertReset+0x58>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d102      	bne.n	800171e <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8001718:	4806      	ldr	r0, [pc, #24]	; (8001734 <XMC_CCU4_lDeassertReset+0x5c>)
 800171a:	f7fe ffaf 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	4000c000 	.word	0x4000c000
 8001728:	40010000 	.word	0x40010000
 800172c:	40014000 	.word	0x40014000
 8001730:	48004000 	.word	0x48004000
 8001734:	10000001 	.word	0x10000001

08001738 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <XMC_CCU4_lUngateClock+0x4c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d103      	bne.n	8001750 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8001748:	2004      	movs	r0, #4
 800174a:	f7ff f92f 	bl	80009ac <XMC_SCU_CLOCK_UngatePeripheralClock>
 800174e:	e016      	b.n	800177e <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <XMC_CCU4_lUngateClock+0x50>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d103      	bne.n	8001760 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8001758:	2008      	movs	r0, #8
 800175a:	f7ff f927 	bl	80009ac <XMC_SCU_CLOCK_UngatePeripheralClock>
 800175e:	e00e      	b.n	800177e <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <XMC_CCU4_lUngateClock+0x54>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d103      	bne.n	8001770 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 8001768:	2010      	movs	r0, #16
 800176a:	f7ff f91f 	bl	80009ac <XMC_SCU_CLOCK_UngatePeripheralClock>
 800176e:	e006      	b.n	800177e <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a07      	ldr	r2, [pc, #28]	; (8001790 <XMC_CCU4_lUngateClock+0x58>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d102      	bne.n	800177e <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <XMC_CCU4_lUngateClock+0x5c>)
 800177a:	f7ff f917 	bl	80009ac <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	4000c000 	.word	0x4000c000
 8001788:	40010000 	.word	0x40010000
 800178c:	40014000 	.word	0x40014000
 8001790:	48004000 	.word	0x48004000
 8001794:	10000001 	.word	0x10000001

08001798 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80017a0:	2010      	movs	r0, #16
 80017a2:	f7ff f8f3 	bl	800098c <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffc6 	bl	8001738 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff93 	bl	80016d8 <XMC_CCU4_lDeassertReset>
#endif
}
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ffe7 	bl	8001798 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff76 	bl	80016bc <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017dc:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	039b      	lsls	r3, r3, #14
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	601a      	str	r2, [r3, #0]
}
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	795b      	ldrb	r3, [r3, #5]
 800180a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	051a      	lsls	r2, r3, #20
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	791b      	ldrb	r3, [r3, #4]
 800181a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	795b      	ldrb	r3, [r3, #5]
 800182a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	795b      	ldrb	r3, [r3, #5]
 800183a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	791b      	ldrb	r3, [r3, #4]
 800184a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
 800186c:	4613      	mov	r3, r2
 800186e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	2b0b      	cmp	r3, #11
 8001874:	d836      	bhi.n	80018e4 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 8001876:	a201      	add	r2, pc, #4	; (adr r2, 800187c <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8001878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800187c:	080018ad 	.word	0x080018ad
 8001880:	080018ad 	.word	0x080018ad
 8001884:	080018b7 	.word	0x080018b7
 8001888:	080018b7 	.word	0x080018b7
 800188c:	080018e5 	.word	0x080018e5
 8001890:	080018e5 	.word	0x080018e5
 8001894:	080018e5 	.word	0x080018e5
 8001898:	080018e5 	.word	0x080018e5
 800189c:	080018c1 	.word	0x080018c1
 80018a0:	080018cd 	.word	0x080018cd
 80018a4:	080018d9 	.word	0x080018d9
 80018a8:	080018d9 	.word	0x080018d9
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80018ac:	2303      	movs	r3, #3
 80018ae:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
      break;
 80018b4:	e01b      	b.n	80018ee <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 80018b6:	230c      	movs	r3, #12
 80018b8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 80018ba:	2302      	movs	r3, #2
 80018bc:	617b      	str	r3, [r7, #20]
      break;
 80018be:	e016      	b.n	80018ee <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80018c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018c4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80018c6:	2308      	movs	r3, #8
 80018c8:	617b      	str	r3, [r7, #20]
      break;
 80018ca:	e010      	b.n	80018ee <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80018cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018d0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80018d2:	230a      	movs	r3, #10
 80018d4:	617b      	str	r3, [r7, #20]
      break;
 80018d6:	e00a      	b.n	80018ee <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 80018d8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018dc:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 80018de:	230c      	movs	r3, #12
 80018e0:	617b      	str	r3, [r7, #20]
      break;
 80018e2:	e004      	b.n	80018ee <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
	  pos = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
	  break;
 80018ec:	bf00      	nop
  }

  if (mask != 0)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d013      	beq.n	800191c <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80018fa:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8001906:	78ba      	ldrb	r2, [r7, #2]
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4313      	orrs	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 800191c:	371c      	adds	r7, #28
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop

08001928 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
 8001934:	4613      	mov	r3, r2
 8001936:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4619      	mov	r1, r3
 8001942:	2303      	movs	r3, #3
 8001944:	408b      	lsls	r3, r1
 8001946:	43db      	mvns	r3, r3
 8001948:	401a      	ands	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001952:	78bb      	ldrb	r3, [r7, #2]
 8001954:	78f9      	ldrb	r1, [r7, #3]
 8001956:	0049      	lsls	r1, r1, #1
 8001958:	408b      	lsls	r3, r1
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop

0800196c <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	4613      	mov	r3, r2
 8001978:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f852 	bl	8001a24 <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	795b      	ldrb	r3, [r3, #5]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d115      	bne.n	80019b4 <XMC_SPI_CH_InitEx+0x48>
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d012      	beq.n	80019b4 <XMC_SPI_CH_InitEx+0x48>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	791b      	ldrb	r3, [r3, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d007      	beq.n	80019a6 <XMC_SPI_CH_InitEx+0x3a>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	4619      	mov	r1, r3
 800199e:	2202      	movs	r2, #2
 80019a0:	f000 f8fe 	bl	8001ba0 <XMC_USIC_CH_SetBaudrateEx>
 80019a4:	e006      	b.n	80019b4 <XMC_SPI_CH_InitEx+0x48>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	4619      	mov	r1, r3
 80019ae:	2202      	movs	r2, #2
 80019b0:	f000 f884 	bl	8001abc <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <XMC_SPI_CH_InitEx+0x88>)
 80019b8:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 80019c0:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	795b      	ldrb	r3, [r3, #5]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <XMC_SPI_CH_InitEx+0x6e>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 80019ce:	f043 030b 	orr.w	r3, r3, #11
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	461a      	mov	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	891b      	ldrh	r3, [r3, #8]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	073f0102 	.word	0x073f0102

080019f8 <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a06:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a1a      	ldr	r2, [pc, #104]	; (8001a98 <XMC_USIC_CH_Enable+0x74>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d003      	beq.n	8001a3c <XMC_USIC_CH_Enable+0x18>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <XMC_USIC_CH_Enable+0x78>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d103      	bne.n	8001a44 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001a3c:	4818      	ldr	r0, [pc, #96]	; (8001aa0 <XMC_USIC_CH_Enable+0x7c>)
 8001a3e:	f000 f99d 	bl	8001d7c <XMC_USIC_Enable>
 8001a42:	e016      	b.n	8001a72 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <XMC_USIC_CH_Enable+0x80>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d003      	beq.n	8001a54 <XMC_USIC_CH_Enable+0x30>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <XMC_USIC_CH_Enable+0x84>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d103      	bne.n	8001a5c <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001a54:	4815      	ldr	r0, [pc, #84]	; (8001aac <XMC_USIC_CH_Enable+0x88>)
 8001a56:	f000 f991 	bl	8001d7c <XMC_USIC_Enable>
 8001a5a:	e00a      	b.n	8001a72 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <XMC_USIC_CH_Enable+0x8c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d003      	beq.n	8001a6c <XMC_USIC_CH_Enable+0x48>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <XMC_USIC_CH_Enable+0x90>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d102      	bne.n	8001a72 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001a6c:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <XMC_USIC_CH_Enable+0x94>)
 8001a6e:	f000 f985 	bl	8001d7c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001a78:	bf00      	nop
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f9      	beq.n	8001a7a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f023 020f 	bic.w	r2, r3, #15
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40030000 	.word	0x40030000
 8001a9c:	40030200 	.word	0x40030200
 8001aa0:	40030008 	.word	0x40030008
 8001aa4:	48020000 	.word	0x48020000
 8001aa8:	48020200 	.word	0x48020200
 8001aac:	48020008 	.word	0x48020008
 8001ab0:	48024000 	.word	0x48024000
 8001ab4:	48024200 	.word	0x48024200
 8001ab8:	48024008 	.word	0x48024008

08001abc <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08e      	sub	sp, #56	; 0x38
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b63      	cmp	r3, #99	; 0x63
 8001acc:	d95a      	bls.n	8001b84 <XMC_USIC_CH_SetBaudrate+0xc8>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d057      	beq.n	8001b84 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001ad4:	f7fe fe12 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001adc:	fba3 2302 	umull	r2, r3, r3, r2
 8001ae0:	095b      	lsrs	r3, r3, #5
 8001ae2:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4a2c      	ldr	r2, [pc, #176]	; (8001b98 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8001af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001af6:	2301      	movs	r3, #1
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001afa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
 8001b06:	e022      	b.n	8001b4e <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b0c:	fb02 f203 	mul.w	r2, r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	0a9b      	lsrs	r3, r3, #10
 8001b22:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b2a:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b32:	d809      	bhi.n	8001b48 <XMC_USIC_CH_SetBaudrate+0x8c>
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d205      	bcs.n	8001b48 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1d9      	bne.n	8001b08 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8001b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b56:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001b58:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <XMC_USIC_CH_SetBaudrate+0xe0>)
 8001b66:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	3a01      	subs	r2, #1
 8001b6c:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001b6e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	3b01      	subs	r3, #1
 8001b74:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001b76:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b82:	e002      	b.n	8001b8a <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8001b8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3738      	adds	r7, #56	; 0x38
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	51eb851f 	.word	0x51eb851f
 8001b9c:	fc0080ef 	.word	0xfc0080ef

08001ba0 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001bac:	f7fe fda6 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8001bc2:	6a3a      	ldr	r2, [r7, #32]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dd5f      	ble.n	8001c8a <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001bca:	6a3a      	ldr	r2, [r7, #32]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8001bd4:	e010      	b.n	8001bf8 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 8001bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd8:	3301      	adds	r3, #1
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	fb02 f303 	mul.w	r3, r2, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	fb03 f302 	mul.w	r3, r3, r2
 8001bec:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8001bee:	6a3a      	ldr	r2, [r7, #32]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d8e9      	bhi.n	8001bd6 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8001c02:	6a3a      	ldr	r2, [r7, #32]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c0e:	fb01 f303 	mul.w	r3, r1, r3
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8001c18:	6a3a      	ldr	r2, [r7, #32]
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	fb01 f303 	mul.w	r3, r1, r3
 8001c24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c26:	fb01 f303 	mul.w	r3, r1, r3
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001c3a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	1acb      	subs	r3, r1, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bfb8      	it	lt
 8001c48:	425b      	neglt	r3, r3
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da02      	bge.n	8001c54 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	3301      	adds	r3, #1
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8001c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c56:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001c6c:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	3a01      	subs	r2, #1
 8001c72:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001c74:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001c7c:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c88:	e002      	b.n	8001c90 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8001c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3730      	adds	r7, #48	; 0x30
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	fc0080ef 	.word	0xfc0080ef

08001ca0 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	4613      	mov	r3, r2
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cb6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001cc8:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	0211      	lsls	r1, r2, #8
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001cd2:	79fa      	ldrb	r2, [r7, #7]
 8001cd4:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001cd6:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8001cd8:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	f8ffc0c0 	.word	0xf8ffc0c0

08001cf0 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d06:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8001d18:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	0211      	lsls	r1, r2, #8
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8001d22:	79fa      	ldrb	r2, [r7, #7]
 8001d24:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8001d26:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	efffc0c0 	.word	0xefffc0c0

08001d44 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	7afb      	ldrb	r3, [r7, #11]
 8001d58:	2107      	movs	r1, #7
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop

08001d7c <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <XMC_USIC_Enable+0xac>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d118      	bne.n	8001dbe <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001d8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d90:	f7fe fe0c 	bl	80009ac <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001d94:	bf00      	nop
 8001d96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d9a:	f7fe fe23 	bl	80009e4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f8      	bne.n	8001d96 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001da4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001da8:	f7fe fc68 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001dac:	bf00      	nop
 8001dae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001db2:	f7fe fc7f 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f8      	bne.n	8001dae <XMC_USIC_Enable+0x32>
 8001dbc:	e030      	b.n	8001e20 <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <XMC_USIC_Enable+0xb0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d114      	bne.n	8001df0 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8001dc6:	481a      	ldr	r0, [pc, #104]	; (8001e30 <XMC_USIC_Enable+0xb4>)
 8001dc8:	f7fe fdf0 	bl	80009ac <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8001dcc:	bf00      	nop
 8001dce:	4818      	ldr	r0, [pc, #96]	; (8001e30 <XMC_USIC_Enable+0xb4>)
 8001dd0:	f7fe fe08 	bl	80009e4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f9      	bne.n	8001dce <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8001dda:	4815      	ldr	r0, [pc, #84]	; (8001e30 <XMC_USIC_Enable+0xb4>)
 8001ddc:	f7fe fc4e 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8001de0:	bf00      	nop
 8001de2:	4813      	ldr	r0, [pc, #76]	; (8001e30 <XMC_USIC_Enable+0xb4>)
 8001de4:	f7fe fc66 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f9      	bne.n	8001de2 <XMC_USIC_Enable+0x66>
 8001dee:	e017      	b.n	8001e20 <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <XMC_USIC_Enable+0xb8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d113      	bne.n	8001e20 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8001df8:	480f      	ldr	r0, [pc, #60]	; (8001e38 <XMC_USIC_Enable+0xbc>)
 8001dfa:	f7fe fdd7 	bl	80009ac <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8001dfe:	bf00      	nop
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <XMC_USIC_Enable+0xbc>)
 8001e02:	f7fe fdef 	bl	80009e4 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f9      	bne.n	8001e00 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8001e0c:	480a      	ldr	r0, [pc, #40]	; (8001e38 <XMC_USIC_Enable+0xbc>)
 8001e0e:	f7fe fc35 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8001e12:	bf00      	nop
 8001e14:	4808      	ldr	r0, [pc, #32]	; (8001e38 <XMC_USIC_Enable+0xbc>)
 8001e16:	f7fe fc4d 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f9      	bne.n	8001e14 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40030008 	.word	0x40030008
 8001e2c:	48020008 	.word	0x48020008
 8001e30:	10000080 	.word	0x10000080
 8001e34:	48024008 	.word	0x48024008
 8001e38:	10000100 	.word	0x10000100

08001e3c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001e44:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <_sbrk+0x5c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <_sbrk+0x5c>)
 8001e4e:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <_sbrk+0x60>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <_sbrk+0x5c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3303      	adds	r3, #3
 8001e5c:	f023 0303 	bic.w	r3, r3, #3
 8001e60:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <_sbrk+0x5c>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <_sbrk+0x64>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <_sbrk+0x5c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <_sbrk+0x5c>)
 8001e7a:	6013      	str	r3, [r2, #0]
    return (base);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	e006      	b.n	8001e8e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001e80:	f008 fab4 	bl	800a3ec <__errno>
 8001e84:	4602      	mov	r2, r0
 8001e86:	230c      	movs	r3, #12
 8001e88:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	1ffe9380 	.word	0x1ffe9380
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	2003ffc0 	.word	0x2003ffc0

08001ea4 <_init>:

/* Init */
void _init(void)
{}
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <ucSPI_TransmitReceive>:
  * @brief  Example static function
  * @param  ucTxData: SPI transmit data
  * @retval Receive value from SPI
  */
static inline uint8_t ucSPI_TransmitReceive ( const uint8_t ucTxData )
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]

	// SPI Hardware Transmit Receive Function
#ifdef INFINEON
	SPI_MASTER_Transfer(&SPI_MASTER_0, &ucTxData, &ucRxData, 1);
#endif
	return ucRxData;
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	b2db      	uxtb	r3, r3
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop

08001ecc <vSPI_ChipSelect>:


static inline void vSPI_ChipSelect ( const Hardware_SPI_CS_State_t xState )
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]

	else
		DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
#endif

}
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <xEEPROM_Init>:
/**
  * @brief  Initialize EEPROM
  * @retval Status
  */
EEPROM_Status_t xEEPROM_Init ( void )
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	return xEEPROM_IsReady();
 8001ee4:	f000 f804 	bl	8001ef0 <xEEPROM_IsReady>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop

08001ef0 <xEEPROM_IsReady>:
/**
  * @brief  EEPROM is ready or not
  * @retval Status
  */
EEPROM_Status_t xEEPROM_IsReady ( void )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
	uint16_t usIndex;

	for ( usIndex = 0; usIndex < MAX_BUSY_WAIT; usIndex++ )
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	80fb      	strh	r3, [r7, #6]
 8001efa:	e009      	b.n	8001f10 <xEEPROM_IsReady+0x20>
	{
	    if ( ucEEPROM_ReadStatus() )
 8001efc:	f000 f810 	bl	8001f20 <ucEEPROM_ReadStatus>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <xEEPROM_IsReady+0x1a>
		{
			return EEPROM_STATUS_SUCCESS;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e006      	b.n	8001f18 <xEEPROM_IsReady+0x28>
  */
EEPROM_Status_t xEEPROM_IsReady ( void )
{
	uint16_t usIndex;

	for ( usIndex = 0; usIndex < MAX_BUSY_WAIT; usIndex++ )
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	80fb      	strh	r3, [r7, #6]
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	2b63      	cmp	r3, #99	; 0x63
 8001f14:	d9f2      	bls.n	8001efc <xEEPROM_IsReady+0xc>
		{
			return EEPROM_STATUS_SUCCESS;
		}
	}

	return EEPROM_STATUS_ERROR;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <ucEEPROM_ReadStatus>:
  * @brief  Read Status EEPROM
  * @retval 1: if EEPROM is ready
  * 		0: if EEPROM is not ready
  */
static uint8_t ucEEPROM_ReadStatus ( void )
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
	volatile uint8_t ucTempData;

	vSPI_ChipSelect(EEPROM_CS_STATE_LOW);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff ffd0 	bl	8001ecc <vSPI_ChipSelect>
	ucSPI_TransmitReceive(EEPROM_RDSR);
 8001f2c:	2005      	movs	r0, #5
 8001f2e:	f7ff ffbf 	bl	8001eb0 <ucSPI_TransmitReceive>
	ucTempData = ucSPI_TransmitReceive(0x00);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff ffbc 	bl	8001eb0 <ucSPI_TransmitReceive>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	71fb      	strb	r3, [r7, #7]
	vSPI_ChipSelect(EEPROM_CS_STATE_HIGH);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7ff ffc5 	bl	8001ecc <vSPI_ChipSelect>

	return !(ucTempData & 0x01);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <ucEEPROM_ReadByte>:
/**
  * @brief  Read byte given EEPROM address
  * @param  usAddress: Address
  */
uint8_t ucEEPROM_ReadByte ( const uint16_t usAddress )
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]
	volatile uint8_t ucTempData;

	vSPI_ChipSelect(EEPROM_CS_STATE_LOW);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff ffb0 	bl	8001ecc <vSPI_ChipSelect>
	ucSPI_TransmitReceive(EEPROM_READ);
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	f7ff ff9f 	bl	8001eb0 <ucSPI_TransmitReceive>
	ucSPI_TransmitReceive((usAddress >> 8) & 0xFF);
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff98 	bl	8001eb0 <ucSPI_TransmitReceive>
	ucSPI_TransmitReceive(usAddress & 0xFF);
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff93 	bl	8001eb0 <ucSPI_TransmitReceive>
	ucTempData = ucSPI_TransmitReceive(0x00);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff ff90 	bl	8001eb0 <ucSPI_TransmitReceive>
 8001f90:	4603      	mov	r3, r0
 8001f92:	73fb      	strb	r3, [r7, #15]
	vSPI_ChipSelect(EEPROM_CS_STATE_HIGH);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff ff99 	bl	8001ecc <vSPI_ChipSelect>

	return ucTempData;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	b2db      	uxtb	r3, r3
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop

08001fa8 <vEEPROM_WriteByte>:
  * @brief  Write a byte to EEPROM address
  * @param  usAddress: Address
  * @param  ucValue: Value
  */
void vEEPROM_WriteByte ( const uint16_t usAddress, const uint8_t ucValue )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	80fb      	strh	r3, [r7, #6]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	717b      	strb	r3, [r7, #5]
	vSPI_ChipSelect(EEPROM_CS_STATE_LOW);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7ff ff87 	bl	8001ecc <vSPI_ChipSelect>
	ucSPI_TransmitReceive(EEPROM_WREN);		/* Write Enable */
 8001fbe:	2006      	movs	r0, #6
 8001fc0:	f7ff ff76 	bl	8001eb0 <ucSPI_TransmitReceive>
	vSPI_ChipSelect(EEPROM_CS_STATE_HIGH);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7ff ff81 	bl	8001ecc <vSPI_ChipSelect>

	vSPI_ChipSelect(EEPROM_CS_STATE_LOW);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff ff7e 	bl	8001ecc <vSPI_ChipSelect>
	ucSPI_TransmitReceive(EEPROM_WRITE);
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f7ff ff6d 	bl	8001eb0 <ucSPI_TransmitReceive>
	ucSPI_TransmitReceive((usAddress >> 8) & 0xFF);
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff66 	bl	8001eb0 <ucSPI_TransmitReceive>
	ucSPI_TransmitReceive(usAddress & 0xFF);
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff61 	bl	8001eb0 <ucSPI_TransmitReceive>
	ucSPI_TransmitReceive(ucValue);
 8001fee:	797b      	ldrb	r3, [r7, #5]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ff5d 	bl	8001eb0 <ucSPI_TransmitReceive>
	vSPI_ChipSelect(EEPROM_CS_STATE_HIGH);
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7ff ff68 	bl	8001ecc <vSPI_ChipSelect>

}
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop

08002004 <xEEPROM_WritePage>:
  * @param  pucWriteData: Address of data to write
  * @param  usDataSize: Size of data to write
  * @retval Status
  */
static EEPROM_Status_t xEEPROM_WritePage ( const uint16_t usStartAddress, const uint8_t *pucWriteData, const uint8_t ucDataSize )
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	80fb      	strh	r3, [r7, #6]
 8002010:	4613      	mov	r3, r2
 8002012:	717b      	strb	r3, [r7, #5]
	EEPROM_Status_t status;
	uint16_t usIndex;
	uint16_t usWaitIndex;

	status = xEEPROM_IsReady();
 8002014:	f7ff ff6c 	bl	8001ef0 <xEEPROM_IsReady>
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]

	for ( usIndex = 0; usIndex < ucDataSize; usIndex++ )
 800201c:	2300      	movs	r3, #0
 800201e:	81bb      	strh	r3, [r7, #12]
 8002020:	e025      	b.n	800206e <xEEPROM_WritePage+0x6a>
	{
		vEEPROM_WriteByte((usStartAddress+usIndex), pucWriteData[usIndex]);
 8002022:	88fa      	ldrh	r2, [r7, #6]
 8002024:	89bb      	ldrh	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	b299      	uxth	r1, r3
 800202a:	89bb      	ldrh	r3, [r7, #12]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4413      	add	r3, r2
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	4608      	mov	r0, r1
 8002034:	4619      	mov	r1, r3
 8002036:	f7ff ffb7 	bl	8001fa8 <vEEPROM_WriteByte>

		for ( usWaitIndex = 0; usWaitIndex <= EEPROM_WRITE_TIMEOUT; usWaitIndex++ )
 800203a:	2300      	movs	r3, #0
 800203c:	817b      	strh	r3, [r7, #10]
 800203e:	e00f      	b.n	8002060 <xEEPROM_WritePage+0x5c>
		{
			if ( usWaitIndex == EEPROM_WRITE_TIMEOUT )
 8002040:	897b      	ldrh	r3, [r7, #10]
 8002042:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002046:	d108      	bne.n	800205a <xEEPROM_WritePage+0x56>
			{
				status = xEEPROM_IsReady();
 8002048:	f7ff ff52 	bl	8001ef0 <xEEPROM_IsReady>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]

				if ( status != EEPROM_STATUS_SUCCESS )
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <xEEPROM_WritePage+0x56>
					return status;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	e00f      	b.n	800207a <xEEPROM_WritePage+0x76>

	for ( usIndex = 0; usIndex < ucDataSize; usIndex++ )
	{
		vEEPROM_WriteByte((usStartAddress+usIndex), pucWriteData[usIndex]);

		for ( usWaitIndex = 0; usWaitIndex <= EEPROM_WRITE_TIMEOUT; usWaitIndex++ )
 800205a:	897b      	ldrh	r3, [r7, #10]
 800205c:	3301      	adds	r3, #1
 800205e:	817b      	strh	r3, [r7, #10]
 8002060:	897b      	ldrh	r3, [r7, #10]
 8002062:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002066:	d9eb      	bls.n	8002040 <xEEPROM_WritePage+0x3c>
	uint16_t usIndex;
	uint16_t usWaitIndex;

	status = xEEPROM_IsReady();

	for ( usIndex = 0; usIndex < ucDataSize; usIndex++ )
 8002068:	89bb      	ldrh	r3, [r7, #12]
 800206a:	3301      	adds	r3, #1
 800206c:	81bb      	strh	r3, [r7, #12]
 800206e:	797b      	ldrb	r3, [r7, #5]
 8002070:	b29b      	uxth	r3, r3
 8002072:	89ba      	ldrh	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d3d4      	bcc.n	8002022 <xEEPROM_WritePage+0x1e>
			}
		}

	}

	return status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop

08002084 <vEEPROM_Write>:
  * @param  pucWriteData: Address of data to write
  * @param  usDataSize: Size of data to write
  * @retval Status
  */
EEPROM_Status_t vEEPROM_Write ( const uint16_t usStartAddress, const uint8_t *pucWriteData, const uint16_t usDataSize )
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	80fb      	strh	r3, [r7, #6]
 8002090:	4613      	mov	r3, r2
 8002092:	80bb      	strh	r3, [r7, #4]
	uint16_t usIndex;
	uint16_t usPacketIndex;
	uint16_t usNumberBytesPacket;
	uint16_t usNumberBytesWastePacket;

	usPacketIndex = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	827b      	strh	r3, [r7, #18]
	usNumberBytesPacket = usDataSize / EEPROM_PAGE_SIZE;
 8002098:	88bb      	ldrh	r3, [r7, #4]
 800209a:	099b      	lsrs	r3, r3, #6
 800209c:	823b      	strh	r3, [r7, #16]
	usNumberBytesWastePacket = usDataSize % EEPROM_PAGE_SIZE;
 800209e:	88bb      	ldrh	r3, [r7, #4]
 80020a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a4:	81fb      	strh	r3, [r7, #14]

	for ( usIndex = 0; usIndex < usNumberBytesPacket; usIndex++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	82bb      	strh	r3, [r7, #20]
 80020aa:	e018      	b.n	80020de <vEEPROM_Write+0x5a>
	{
		status = xEEPROM_WritePage((usStartAddress + usPacketIndex), (pucWriteData + usPacketIndex), EEPROM_PAGE_SIZE);
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	8a7b      	ldrh	r3, [r7, #18]
 80020b0:	4413      	add	r3, r2
 80020b2:	b299      	uxth	r1, r3
 80020b4:	8a7b      	ldrh	r3, [r7, #18]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	4608      	mov	r0, r1
 80020bc:	4619      	mov	r1, r3
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	f7ff ffa0 	bl	8002004 <xEEPROM_WritePage>
 80020c4:	4603      	mov	r3, r0
 80020c6:	75fb      	strb	r3, [r7, #23]
		usPacketIndex += EEPROM_PAGE_SIZE;
 80020c8:	8a7b      	ldrh	r3, [r7, #18]
 80020ca:	3340      	adds	r3, #64	; 0x40
 80020cc:	827b      	strh	r3, [r7, #18]

		if (status != EEPROM_STATUS_SUCCESS)
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <vEEPROM_Write+0x54>
		{
			return status;
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	e01a      	b.n	800210e <vEEPROM_Write+0x8a>

	usPacketIndex = 0;
	usNumberBytesPacket = usDataSize / EEPROM_PAGE_SIZE;
	usNumberBytesWastePacket = usDataSize % EEPROM_PAGE_SIZE;

	for ( usIndex = 0; usIndex < usNumberBytesPacket; usIndex++)
 80020d8:	8abb      	ldrh	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	82bb      	strh	r3, [r7, #20]
 80020de:	8aba      	ldrh	r2, [r7, #20]
 80020e0:	8a3b      	ldrh	r3, [r7, #16]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d3e2      	bcc.n	80020ac <vEEPROM_Write+0x28>
		{
			return status;
		}
	}

	if (usNumberBytesWastePacket)
 80020e6:	89fb      	ldrh	r3, [r7, #14]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00f      	beq.n	800210c <vEEPROM_Write+0x88>
	{
		status = xEEPROM_WritePage((usStartAddress + usPacketIndex), (pucWriteData + usPacketIndex), usNumberBytesWastePacket);
 80020ec:	88fa      	ldrh	r2, [r7, #6]
 80020ee:	8a7b      	ldrh	r3, [r7, #18]
 80020f0:	4413      	add	r3, r2
 80020f2:	b299      	uxth	r1, r3
 80020f4:	8a7b      	ldrh	r3, [r7, #18]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	441a      	add	r2, r3
 80020fa:	89fb      	ldrh	r3, [r7, #14]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4608      	mov	r0, r1
 8002100:	4611      	mov	r1, r2
 8002102:	461a      	mov	r2, r3
 8002104:	f7ff ff7e 	bl	8002004 <xEEPROM_WritePage>
 8002108:	4603      	mov	r3, r0
 800210a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800210c:	7dfb      	ldrb	r3, [r7, #23]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop

08002118 <vEEPROM_Read>:
  * @param  pucWriteData: Address of data to write
  * @param  usDataSize: Size of data to write
  * @retval Status
  */
EEPROM_Status_t vEEPROM_Read ( const uint16_t usStartAddress, uint8_t *pucReadData, const uint16_t usDataSize )
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	80fb      	strh	r3, [r7, #6]
 8002124:	4613      	mov	r3, r2
 8002126:	80bb      	strh	r3, [r7, #4]
	uint16_t usIndex;

	for ( usIndex = 0; usIndex < usDataSize; usIndex++ )
 8002128:	2300      	movs	r3, #0
 800212a:	81fb      	strh	r3, [r7, #14]
 800212c:	e00e      	b.n	800214c <vEEPROM_Read+0x34>
	{
		pucReadData[usIndex] = ucEEPROM_ReadByte((usStartAddress+usIndex));
 800212e:	89fb      	ldrh	r3, [r7, #14]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	18d4      	adds	r4, r2, r3
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	89fb      	ldrh	r3, [r7, #14]
 8002138:	4413      	add	r3, r2
 800213a:	b29b      	uxth	r3, r3
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff0d 	bl	8001f5c <ucEEPROM_ReadByte>
 8002142:	4603      	mov	r3, r0
 8002144:	7023      	strb	r3, [r4, #0]
  */
EEPROM_Status_t vEEPROM_Read ( const uint16_t usStartAddress, uint8_t *pucReadData, const uint16_t usDataSize )
{
	uint16_t usIndex;

	for ( usIndex = 0; usIndex < usDataSize; usIndex++ )
 8002146:	89fb      	ldrh	r3, [r7, #14]
 8002148:	3301      	adds	r3, #1
 800214a:	81fb      	strh	r3, [r7, #14]
 800214c:	89fa      	ldrh	r2, [r7, #14]
 800214e:	88bb      	ldrh	r3, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d3ec      	bcc.n	800212e <vEEPROM_Read+0x16>
	{
		pucReadData[usIndex] = ucEEPROM_ReadByte((usStartAddress+usIndex));
	}

	return xEEPROM_IsReady();
 8002154:	f7ff fecc 	bl	8001ef0 <xEEPROM_IsReady>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bd90      	pop	{r4, r7, pc}
 8002162:	bf00      	nop

08002164 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	2201      	movs	r2, #1
 8002174:	409a      	lsls	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	60da      	str	r2, [r3, #12]
}
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	60da      	str	r2, [r3, #12]
}
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	611a      	str	r2, [r3, #16]
}
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80021c0:	887a      	ldrh	r2, [r7, #2]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80021dc:	887a      	ldrh	r2, [r7, #2]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	611a      	str	r2, [r3, #16]
}
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop

08002208 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	2101      	movs	r1, #1
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	2201      	movs	r2, #1
 8002244:	409a      	lsls	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800226a:	f083 0301 	eor.w	r3, r3, #1
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800227a:	2b00      	cmp	r3, #0
 800227c:	d104      	bne.n	8002288 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f81a 	bl	80022b8 <TIMER_CCU4_lInit>
 8002284:	4603      	mov	r3, r0
 8002286:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8002288:	7bfb      	ldrb	r3, [r7, #15]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop

08002294 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	4618      	mov	r0, r3
 80022ac:	2100      	movs	r1, #0
 80022ae:	f7ff ffc1 	bl	8002234 <XMC_CCU4_SLICE_ClearEvent>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fab3 	bl	8002830 <GLOBAL_CCU4_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7e1b      	ldrb	r3, [r3, #24]
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f7ff ff42 	bl	8002164 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7ff fa82 	bl	80017f4 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f82d 	bl	8002350 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00f      	beq.n	8002320 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230a:	4610      	mov	r0, r2
 800230c:	2100      	movs	r1, #0
 800230e:	461a      	mov	r2, r3
 8002310:	f7ff faa6 	bl	8001860 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	4618      	mov	r0, r3
 800231a:	2100      	movs	r1, #0
 800231c:	f7ff ff74 	bl	8002208 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff39 	bl	800219c <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff1f 	bl	8002184 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7ff ff26 	bl	80021b4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	4618      	mov	r0, r3
 800236e:	2100      	movs	r1, #0
 8002370:	f7ff ff2e 	bl	80021d0 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f7ff ff33 	bl	80021ec <XMC_CCU4_EnableShadowTransfer>
}
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4798      	blx	r3
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]

  return status;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop

080023ac <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
 80023b8:	4613      	mov	r3, r2
 80023ba:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80023bc:	78f8      	ldrb	r0, [r7, #3]
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	3306      	adds	r3, #6
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80023ce:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80023d0:	431a      	orrs	r2, r3
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	1d83      	adds	r3, r0, #6
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	3b01      	subs	r3, #1
 8002400:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002424:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	3b01      	subs	r3, #1
 800242c:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop

08002440 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8002454:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
 8002456:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop

0800246c <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	f023 020f 	bic.w	r2, r3, #15
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop

08002494 <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	6839      	ldr	r1, [r7, #0]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f7ff fa62 	bl	800196c <XMC_SPI_CH_InitEx>
}
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop

080024b0 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	2101      	movs	r1, #1
 80024bc:	f7ff ffd6 	bl	800246c <XMC_USIC_CH_SetMode>
}
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop

080024c8 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
 8002500:	4313      	orrs	r3, r2
 8002502:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <XMC_SPI_CH_DisableFEM>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	f023 0208 	bic.w	r2, r3, #8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop

08002534 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	f7ff ff7b 	bl	8002440 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4619      	mov	r1, r3
 8002562:	f7ff ff41 	bl	80023e8 <XMC_USIC_CH_SetWordLength>
}
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4619      	mov	r1, r3
 800257e:	f7ff ff49 	bl	8002414 <XMC_USIC_CH_SetFrameLength>
}
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
 8002594:	4613      	mov	r3, r2
 8002596:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8002598:	78f8      	ldrb	r0, [r7, #3]
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	3306      	adds	r3, #6
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80025aa:	f043 0210 	orr.w	r2, r3, #16
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	1d83      	adds	r3, r0, #6
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	78bb      	ldrb	r3, [r7, #2]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4611      	mov	r1, r2
 80025c0:	461a      	mov	r2, r3
 80025c2:	f7ff fef3 	bl	80023ac <XMC_USIC_CH_SetInputSource>
}
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 80025d2:	2300      	movs	r3, #0
 80025d4:	71fb      	strb	r3, [r7, #7]
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH0, &SPI_MASTER_0_Channel_Config);
 80025d6:	4829      	ldr	r0, [pc, #164]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 80025d8:	4929      	ldr	r1, [pc, #164]	; (8002680 <SPI_MASTER_0_lInit+0xb4>)
 80025da:	f7ff ff5b 	bl	8002494 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI0_CH0);
 80025de:	4827      	ldr	r0, [pc, #156]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 80025e0:	f7ff ff98 	bl	8002514 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH0);
 80025e4:	4825      	ldr	r0, [pc, #148]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 80025e6:	f7ff ff6f 	bl	80024c8 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH0, (uint8_t)8);
 80025ea:	4824      	ldr	r0, [pc, #144]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 80025ec:	2108      	movs	r1, #8
 80025ee:	f7ff ffaf 	bl	8002550 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH0, (uint8_t)8);
 80025f2:	4822      	ldr	r0, [pc, #136]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 80025f4:	2108      	movs	r1, #8
 80025f6:	f7ff ffb9 	bl	800256c <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH0,
 80025fa:	4820      	ldr	r0, [pc, #128]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 80025fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002600:	2200      	movs	r2, #0
 8002602:	f7ff ff97 	bl	8002534 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH0, 2U);
 8002606:	481d      	ldr	r0, [pc, #116]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 8002608:	2102      	movs	r1, #2
 800260a:	f7ff ff6d 	bl	80024e8 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)0, &SPI_MASTER_0_MISO_Config.port_config);
 800260e:	481d      	ldr	r0, [pc, #116]	; (8002684 <SPI_MASTER_0_lInit+0xb8>)
 8002610:	2100      	movs	r1, #0
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <SPI_MASTER_0_lInit+0xbc>)
 8002614:	f7fd febc 	bl	8000390 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_D);
 8002618:	4818      	ldr	r0, [pc, #96]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 800261a:	2100      	movs	r1, #0
 800261c:	2203      	movs	r2, #3
 800261e:	f7ff ffb3 	bl	8002588 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH0);
 8002622:	4816      	ldr	r0, [pc, #88]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 8002624:	f7ff ff44 	bl	80024b0 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT5_BASE, (uint8_t)1, &SPI_MASTER_0_MOSI_Config.port_config);
 8002628:	4816      	ldr	r0, [pc, #88]	; (8002684 <SPI_MASTER_0_lInit+0xb8>)
 800262a:	2101      	movs	r1, #1
 800262c:	4a17      	ldr	r2, [pc, #92]	; (800268c <SPI_MASTER_0_lInit+0xc0>)
 800262e:	f7fd feaf 	bl	8000390 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)10, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 8002632:	4817      	ldr	r0, [pc, #92]	; (8002690 <SPI_MASTER_0_lInit+0xc4>)
 8002634:	210a      	movs	r1, #10
 8002636:	4a17      	ldr	r2, [pc, #92]	; (8002694 <SPI_MASTER_0_lInit+0xc8>)
 8002638:	f7fd feaa 	bl	8000390 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT0_BASE, (uint8_t)7, &SPI_MASTER_0_SS_0_Config.port_config);
 800263c:	4816      	ldr	r0, [pc, #88]	; (8002698 <SPI_MASTER_0_lInit+0xcc>)
 800263e:	2107      	movs	r1, #7
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <SPI_MASTER_0_lInit+0xd0>)
 8002642:	f7fd fea5 	bl	8000390 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 8002646:	480d      	ldr	r0, [pc, #52]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 8002648:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800264c:	f7ff f9d4 	bl	80019f8 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8002650:	480a      	ldr	r0, [pc, #40]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 8002652:	2110      	movs	r1, #16
 8002654:	2200      	movs	r2, #0
 8002656:	f7ff fb75 	bl	8001d44 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
            
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI0_CH0,
 800265a:	4808      	ldr	r0, [pc, #32]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 800265c:	2120      	movs	r1, #32
 800265e:	2205      	movs	r2, #5
 8002660:	2301      	movs	r3, #1
 8002662:	f7ff fb1d 	bl	8001ca0 <XMC_USIC_CH_TXFIFO_Configure>
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  /* Configure receive FIFO settings */
  XMC_USIC_CH_RXFIFO_Configure(XMC_SPI0_CH0,
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <SPI_MASTER_0_lInit+0xb0>)
 8002668:	2100      	movs	r1, #0
 800266a:	2205      	movs	r2, #5
 800266c:	231f      	movs	r3, #31
 800266e:	f7ff fb3f 	bl	8001cf0 <XMC_USIC_CH_RXFIFO_Configure>
                               0U,
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_32WORDS,
                               31U);
             
  return status;
 8002672:	79fb      	ldrb	r3, [r7, #7]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40030000 	.word	0x40030000
 8002680:	1ffe8844 	.word	0x1ffe8844
 8002684:	48028500 	.word	0x48028500
 8002688:	1ffe9384 	.word	0x1ffe9384
 800268c:	1ffe8830 	.word	0x1ffe8830
 8002690:	48028100 	.word	0x48028100
 8002694:	0800a658 	.word	0x0800a658
 8002698:	48028000 	.word	0x48028000
 800269c:	0800a674 	.word	0x0800a674

080026a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <__NVIC_GetPriorityGrouping+0x18>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026ac:	0a1b      	lsrs	r3, r3, #8
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	db0b      	blt.n	80026e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ce:	4908      	ldr	r1, [pc, #32]	; (80026f0 <__NVIC_EnableIRQ+0x34>)
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	79fa      	ldrb	r2, [r7, #7]
 80026d8:	f002 021f 	and.w	r2, r2, #31
 80026dc:	2001      	movs	r0, #1
 80026de:	fa00 f202 	lsl.w	r2, r0, r2
 80026e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	490d      	ldr	r1, [pc, #52]	; (8002740 <__NVIC_SetPriority+0x4c>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	4909      	ldr	r1, [pc, #36]	; (8002744 <__NVIC_SetPriority+0x50>)
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	3b04      	subs	r3, #4
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	0092      	lsls	r2, r2, #2
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
  }
}
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b06      	cmp	r3, #6
 8002764:	bf28      	it	cs
 8002766:	2306      	movcs	r3, #6
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3306      	adds	r3, #6
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b01      	subs	r3, #1
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2201      	movs	r2, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	401a      	ands	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	1e59      	subs	r1, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800279c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop

080027ac <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ff7e 	bl	80026bc <__NVIC_EnableIRQ>
}
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop

080027c8 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	781c      	ldrb	r4, [r3, #0]
 80027d4:	f7ff ff64 	bl	80026a0 <__NVIC_GetPriorityGrouping>
 80027d8:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80027de:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	f7ff ffad 	bl	8002748 <NVIC_EncodePriority>
 80027ee:	4602      	mov	r2, r0
 80027f0:	b263      	sxtb	r3, r4
 80027f2:	4618      	mov	r0, r3
 80027f4:	4611      	mov	r1, r2
 80027f6:	f7ff ff7d 	bl	80026f4 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	78db      	ldrb	r3, [r3, #3]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffd2 	bl	80027ac <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bd90      	pop	{r4, r7, pc}
 8002812:	bf00      	nop

08002814 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002822:	60da      	str	r2, [r3, #12]
}
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7b5b      	ldrb	r3, [r3, #13]
 800283c:	f083 0301 	eor.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00f      	beq.n	8002866 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	7b1b      	ldrb	r3, [r3, #12]
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f7fe ffb1 	bl	80017b8 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ffda 	bl	8002814 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8002878:	2300      	movs	r3, #0
 800287a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7a5b      	ldrb	r3, [r3, #9]
 8002880:	f083 0301 	eor.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00f      	beq.n	80028aa <GLOBAL_CAN_Init+0x3a>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7a1a      	ldrb	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4608      	mov	r0, r1
 8002898:	4611      	mov	r1, r2
 800289a:	461a      	mov	r2, r3
 800289c:	f7fe fcac 	bl	80011f8 <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80028aa:	7bfb      	ldrb	r3, [r7, #15]

}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7c1a      	ldrb	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3304      	adds	r3, #4
 80028c8:	4608      	mov	r0, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	f7fd fd5f 	bl	8000390 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6819      	ldr	r1, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7c1a      	ldrb	r2, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7c5b      	ldrb	r3, [r3, #17]
 80028de:	4608      	mov	r0, r1
 80028e0:	4611      	mov	r1, r2
 80028e2:	461a      	mov	r2, r3
 80028e4:	f7ff f820 	bl	8001928 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop

080028f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800291c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	60d3      	str	r3, [r2, #12]
}
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8002942:	2001      	movs	r0, #1
 8002944:	f7ff ffd6 	bl	80028f4 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002948:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800294a:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <SystemCoreSetup+0x94>)
 800294c:	4a21      	ldr	r2, [pc, #132]	; (80029d4 <SystemCoreSetup+0x98>)
 800294e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002950:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002954:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002956:	4a1e      	ldr	r2, [pc, #120]	; (80029d0 <SystemCoreSetup+0x94>)
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <SystemCoreSetup+0x94>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002962:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <SystemCoreSetup+0x9c>)
 8002968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800296c:	3314      	adds	r3, #20
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f023 030f 	bic.w	r3, r3, #15
 8002978:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <SystemCoreSetup+0x9c>)
 8002984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002988:	3314      	adds	r3, #20
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <SystemCoreSetup+0x94>)
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <SystemCoreSetup+0x94>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f023 0310 	bic.w	r3, r3, #16
 8002998:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800299a:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <SystemCoreSetup+0x94>)
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <SystemCoreSetup+0x94>)
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f023 0308 	bic.w	r3, r3, #8
 80029a4:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <SystemCoreSetup+0x94>)
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <SystemCoreSetup+0x94>)
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029b0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <SystemCoreSetup+0x94>)
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <SystemCoreSetup+0x94>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80029bc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <SystemCoreSetup+0x94>)
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <SystemCoreSetup+0x94>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	e000ed00 	.word	0xe000ed00
 80029d4:	08000000 	.word	0x08000000
 80029d8:	58001000 	.word	0x58001000

080029dc <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]

  return (status);
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <OSCHP_GetFrequency+0x10>)
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	00b71b00 	.word	0x00b71b00

08002a10 <XMC_SCU_CLOCK_SetECATClockSource>:
 * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
 8002a18:	4906      	ldr	r1, [pc, #24]	; (8002a34 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <XMC_SCU_CLOCK_SetECATClockSource+0x24>)
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	638b      	str	r3, [r1, #56]	; 0x38
                       ((uint32_t)source);
}
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	50004600 	.word	0x50004600

08002a38 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002a38:	b5b0      	push	{r4, r5, r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <SystemCoreClockSetup+0x60>)
 8002a40:	1d3c      	adds	r4, r7, #4
 8002a42:	461d      	mov	r5, r3
 8002a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd98 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fd febd 	bl	80007d4 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_SYSPLL);
 8002a5a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002a5e:	f7fd fe71 	bl	8000744 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(6U);
 8002a62:	2006      	movs	r0, #6
 8002a64:	f7fd ff42 	bl	80008ec <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8002a68:	f7fd ffe0 	bl	8000a2c <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(3U, 100U);
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	2164      	movs	r1, #100	; 0x64
 8002a70:	f7fd ffec 	bl	8000a4c <XMC_SCU_CLOCK_StartUsbPll>
  
#ifdef CLOCK_XMC4_ECATCLK_ENABLED    
  /* ECAT source clock */
  XMC_SCU_CLOCK_SetECATClockSource(XMC_SCU_CLOCK_ECATCLKSRC_USBPLL);
 8002a74:	2000      	movs	r0, #0
 8002a76:	f7ff ffcb 	bl	8002a10 <XMC_SCU_CLOCK_SetECATClockSource>
  /* ECAT divider setting */
  XMC_SCU_CLOCK_SetECATClockDivider(2U);
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f7fd ff72 	bl	8000964 <XMC_SCU_CLOCK_SetECATClockDivider>
#endif

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7fd fe73 	bl	800076c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7fd ff58 	bl	800093c <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	f7fd ff41 	bl	8000914 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bdb0      	pop	{r4, r5, r7, pc}
 8002a98:	0800a730 	.word	0x0800a730

08002a9c <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	2107      	movs	r1, #7
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	401a      	ands	r2, r3
 8002aba:	7afb      	ldrb	r3, [r7, #11]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop

08002ad4 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop

08002b00 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]
}
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop

08002b20 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop

08002b40 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	601a      	str	r2, [r3, #0]
}
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop

08002b60 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	601a      	str	r2, [r3, #0]
}
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop

08002b80 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 0201 	bic.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	601a      	str	r2, [r3, #0]
}
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop

08002ba0 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	601a      	str	r2, [r3, #0]
}
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	6891      	ldr	r1, [r2, #8]
 8002bd8:	7afa      	ldrb	r2, [r7, #11]
 8002bda:	2007      	movs	r0, #7
 8002bdc:	fa00 f202 	lsl.w	r2, r0, r2
 8002be0:	43d2      	mvns	r2, r2
 8002be2:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
 8002be4:	7afa      	ldrb	r2, [r7, #11]
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69db      	ldr	r3, [r3, #28]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop

08002c18 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	61da      	str	r2, [r3, #28]
}
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	6811      	ldr	r1, [r2, #0]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
}
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002c6a:	f7ff ffe3 	bl	8002c34 <XMC_CAN_MO_EnableEvent>
}
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002c86:	f7ff ffd5 	bl	8002c34 <XMC_CAN_MO_EnableEvent>
}
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f831 	bl	8002d04 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f043 0302 	orr.w	r3, r3, #2
 8002cb2:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f043 0308 	orr.w	r3, r3, #8
 8002cd6:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	68f9      	ldr	r1, [r7, #12]
 8002ce0:	f7fe fcd0 	bl	8001684 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cf8:	f7fe fcc4 	bl	8001684 <XMC_CAN_NODE_EnableEvent>
  }

}
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop

08002d04 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d16:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8002d18:	4610      	mov	r0, r2
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f7ff febd 	bl	8002a9c <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d2c:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8002d2e:	4610      	mov	r0, r2
 8002d30:	2104      	movs	r1, #4
 8002d32:	461a      	mov	r2, r3
 8002d34:	f7ff feb2 	bl	8002a9c <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d42:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8002d44:	4610      	mov	r0, r2
 8002d46:	2108      	movs	r1, #8
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f7ff fea7 	bl	8002a9c <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d58:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	210c      	movs	r1, #12
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f7ff fe9c 	bl	8002a9c <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop

08002d6c <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fab1 	bl	80012e0 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	79db      	ldrb	r3, [r3, #7]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	795b      	ldrb	r3, [r3, #5]
 8002d8e:	4610      	mov	r0, r2
 8002d90:	2104      	movs	r1, #4
 8002d92:	461a      	mov	r2, r3
 8002d94:	f7ff ff14 	bl	8002bc0 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff5d 	bl	8002c58 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7a1b      	ldrb	r3, [r3, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	799b      	ldrb	r3, [r3, #6]
 8002dae:	4610      	mov	r0, r2
 8002db0:	2100      	movs	r1, #0
 8002db2:	461a      	mov	r2, r3
 8002db4:	f7ff ff04 	bl	8002bc0 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ff5b 	bl	8002c74 <CAN_NODE_MO_EnableRxEvent>
  }

}
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fb57 	bl	8001488 <XMC_CAN_MO_Transmit>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	73fb      	strb	r3, [r7, #15]
  return (status);
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7fe fb73 	bl	80014e4 <XMC_CAN_MO_Receive>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	73fb      	strb	r3, [r7, #15]
  return (status);
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	6852      	ldr	r2, [r2, #4]
 8002e30:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe faee 	bl	8001418 <XMC_CAN_MO_UpdateData>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73fb      	strb	r3, [r7, #15]
  return (status);
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop

08002e4c <CAN_NODE_MO_GetStatus>:

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fecf 	bl	8002bfc <XMC_CAN_MO_GetStatus>
 8002e5e:	60f8      	str	r0, [r7, #12]

  return (status);
 8002e60:	68fb      	ldr	r3, [r7, #12]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop

08002e6c <CAN_NODE_MO_ClearStatus>:

/*  Function to clear/ reset the status of the CAN Message Object  */
void CAN_NODE_MO_ClearStatus(const CAN_NODE_LMO_t *lmo_ptr, const uint32_t mask)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]

  XMC_ASSERT("CAN_NODE_MO_ClearStatus: lmo_ptr null", lmo_ptr != NULL);
  XMC_ASSERT("CAN_NODE_MO_ClearStatus: mask invalid", (mask <= CAN_NODE_MO_CLEAR_MASK));

  XMC_CAN_MO_ResetStatus(lmo_ptr->mo_ptr, mask);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	f7ff fecb 	bl	8002c18 <XMC_CAN_MO_ResetStatus>

}
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8002e90:	2300      	movs	r3, #0
 8002e92:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fce5 	bl	8002870 <GLOBAL_CAN_Init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f040 8087 	bne.w	8002fc0 <CAN_NODE_Init+0x138>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f7fe f875 	bl	8000fac <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d178      	bne.n	8002fba <CAN_NODE_Init+0x132>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fe27 	bl	8002b20 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe42 	bl	8002b60 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fe5d 	bl	8002ba0 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <CAN_NODE_Init+0x74>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fe03 	bl	8002b00 <XMC_CAN_NODE_EnableLoopBack>
 8002efa:	e018      	b.n	8002f2e <CAN_NODE_Init+0xa6>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f0a:	791a      	ldrb	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f12:	4608      	mov	r0, r1
 8002f14:	4611      	mov	r1, r2
 8002f16:	461a      	mov	r2, r3
 8002f18:	f7fd fa3a 	bl	8000390 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f7ff fdd3 	bl	8002ad4 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff feae 	bl	8002c90 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	e019      	b.n	8002f6e <CAN_NODE_Init+0xe6>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	3302      	adds	r3, #2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	791b      	ldrb	r3, [r3, #4]
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f7fe f8cd 	bl	80010fc <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 8002f62:	68b8      	ldr	r0, [r7, #8]
 8002f64:	f7ff ff02 	bl	8002d6c <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8002f74:	461a      	mov	r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d8de      	bhi.n	8002f3a <CAN_NODE_Init+0xb2>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fddd 	bl	8002b40 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fdf8 	bl	8002b80 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8002f96:	f083 0301 	eor.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d011      	beq.n	8002fc4 <CAN_NODE_Init+0x13c>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6819      	ldr	r1, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	791a      	ldrb	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fae:	4608      	mov	r0, r1
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f7fd f9ec 	bl	8000390 <XMC_GPIO_Init>
 8002fb8:	e004      	b.n	8002fc4 <CAN_NODE_Init+0x13c>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	75fb      	strb	r3, [r7, #23]
 8002fbe:	e001      	b.n	8002fc4 <CAN_NODE_Init+0x13c>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop

08002fd0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8002fda:	481d      	ldr	r0, [pc, #116]	; (8003050 <DAVE_Init+0x80>)
 8002fdc:	f7ff fcfe 	bl	80029dc <CLOCK_XMC4_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <DAVE_Init+0x24>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 8002fea:	481a      	ldr	r0, [pc, #104]	; (8003054 <DAVE_Init+0x84>)
 8002fec:	f7ff ff4c 	bl	8002e88 <CAN_NODE_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d104      	bne.n	8003004 <DAVE_Init+0x34>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8002ffa:	4817      	ldr	r0, [pc, #92]	; (8003058 <DAVE_Init+0x88>)
 8002ffc:	f7ff f92c 	bl	8002258 <TIMER_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d104      	bne.n	8003014 <DAVE_Init+0x44>
  {
	 /**  Initialization of INTERRUPT APP instance TIMER_INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&TIMER_INTERRUPT_0); 
 800300a:	4814      	ldr	r0, [pc, #80]	; (800305c <DAVE_Init+0x8c>)
 800300c:	f7ff fbdc 	bl	80027c8 <INTERRUPT_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d104      	bne.n	8003024 <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance CAN_RECEIVE_INTERRUPT_1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&CAN_RECEIVE_INTERRUPT_1); 
 800301a:	4811      	ldr	r0, [pc, #68]	; (8003060 <DAVE_Init+0x90>)
 800301c:	f7ff fbd4 	bl	80027c8 <INTERRUPT_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <DAVE_Init+0x64>
  {
	 /**  Initialization of SPI_MASTER APP instance SPI_MASTER_0 */
	 init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_MASTER_0); 
 800302a:	480e      	ldr	r0, [pc, #56]	; (8003064 <DAVE_Init+0x94>)
 800302c:	f7ff f9ae 	bl	800238c <SPI_MASTER_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_0 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0); 
 800303a:	480b      	ldr	r0, [pc, #44]	; (8003068 <DAVE_Init+0x98>)
 800303c:	f7ff fc3a 	bl	80028b4 <DIGITAL_IO_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8003044:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	1ffe9398 	.word	0x1ffe9398
 8003054:	0800a794 	.word	0x0800a794
 8003058:	1ffe8808 	.word	0x1ffe8808
 800305c:	0800a714 	.word	0x0800a714
 8003060:	0800a718 	.word	0x0800a718
 8003064:	1ffe8874 	.word	0x1ffe8874
 8003068:	0800a71c 	.word	0x0800a71c

0800306c <CO_getUint32>:
#else
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
#endif
}
/** Get uint32_t value from memory buffer, see @ref CO_getUint8 */
static inline uint32_t CO_getUint32(const void *buf) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 4; i++) {
        value += ((uint32_t)(pBuf8[i])) << (8 * i);
    }
    return value;
#else
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	4618      	mov	r0, r3
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	2204      	movs	r2, #4
 800307e:	f007 f9fc 	bl	800a47a <memmove>
 8003082:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <OD_extension_init+0x14>
 800309c:	2305      	movs	r3, #5
 800309e:	e003      	b.n	80030a8 <OD_extension_init+0x1c>
    entry->extension = extension;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	b25b      	sxtb	r3, r3
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop

080030b8 <OD_write_1010>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1010(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if (stream == NULL || stream->subIndex == 0 || buf == NULL || count != 4
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00c      	beq.n	80030e6 <OD_write_1010+0x2e>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	7c5b      	ldrb	r3, [r3, #17]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <OD_write_1010+0x2e>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <OD_write_1010+0x2e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d102      	bne.n	80030e6 <OD_write_1010+0x2e>
        || countWritten == NULL
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <OD_write_1010+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80030e6:	2309      	movs	r3, #9
 80030e8:	e06a      	b.n	80031c0 <OD_write_1010+0x108>
    }

    CO_storage_t *storage = stream->object;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	61bb      	str	r3, [r7, #24]

    if (stream->subIndex == 0 || storage->store == NULL || !storage->enabled) {
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	7c5b      	ldrb	r3, [r3, #17]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <OD_write_1010+0x50>
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <OD_write_1010+0x50>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <OD_write_1010+0x54>
        return ODR_READONLY;
 8003108:	2304      	movs	r3, #4
 800310a:	e059      	b.n	80031c0 <OD_write_1010+0x108>
    }

    if (CO_getUint32(buf) != 0x65766173) {
 800310c:	68b8      	ldr	r0, [r7, #8]
 800310e:	f7ff ffad 	bl	800306c <CO_getUint32>
 8003112:	4602      	mov	r2, r0
 8003114:	4b2d      	ldr	r3, [pc, #180]	; (80031cc <OD_write_1010+0x114>)
 8003116:	429a      	cmp	r2, r3
 8003118:	d001      	beq.n	800311e <OD_write_1010+0x66>
        return ODR_DATA_TRANSF;
 800311a:	2315      	movs	r3, #21
 800311c:	e050      	b.n	80031c0 <OD_write_1010+0x108>
    }

    /* loop through entries and store relevant */
    uint8_t found = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	77fb      	strb	r3, [r7, #31]
    ODR_t returnCode = ODR_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	77bb      	strb	r3, [r7, #30]

    for (uint8_t i = 0; i < storage->entriesCount; i++) {
 8003126:	2300      	movs	r3, #0
 8003128:	777b      	strb	r3, [r7, #29]
 800312a:	e031      	b.n	8003190 <OD_write_1010+0xd8>
        CO_storage_entry_t *entry = &storage->entries[i];
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003130:	7f7a      	ldrb	r2, [r7, #29]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	440b      	add	r3, r1
 800313c:	617b      	str	r3, [r7, #20]

        if (stream->subIndex == 1 || entry->subIndexOD == stream->subIndex) {
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	7c5b      	ldrb	r3, [r3, #17]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d005      	beq.n	8003152 <OD_write_1010+0x9a>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	7a1a      	ldrb	r2, [r3, #8]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	7c5b      	ldrb	r3, [r3, #17]
 800314e:	429a      	cmp	r2, r3
 8003150:	d11b      	bne.n	800318a <OD_write_1010+0xd2>
            if (found == 0) found = 1;
 8003152:	7ffb      	ldrb	r3, [r7, #31]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <OD_write_1010+0xa4>
 8003158:	2301      	movs	r3, #1
 800315a:	77fb      	strb	r3, [r7, #31]
            if ((entry->attr & CO_storage_cmd) != 0) {
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	7a5b      	ldrb	r3, [r3, #9]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <OD_write_1010+0xd2>
                ODR_t code = storage->store(entry, storage->CANmodule);
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	6a12      	ldr	r2, [r2, #32]
 8003170:	6978      	ldr	r0, [r7, #20]
 8003172:	4611      	mov	r1, r2
 8003174:	4798      	blx	r3
 8003176:	4603      	mov	r3, r0
 8003178:	74fb      	strb	r3, [r7, #19]
                if (code != ODR_OK) returnCode = code;
 800317a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <OD_write_1010+0xce>
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	77bb      	strb	r3, [r7, #30]
                found = 2;
 8003186:	2302      	movs	r3, #2
 8003188:	77fb      	strb	r3, [r7, #31]

    /* loop through entries and store relevant */
    uint8_t found = 0;
    ODR_t returnCode = ODR_OK;

    for (uint8_t i = 0; i < storage->entriesCount; i++) {
 800318a:	7f7b      	ldrb	r3, [r7, #29]
 800318c:	3301      	adds	r3, #1
 800318e:	777b      	strb	r3, [r7, #29]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003196:	7f7a      	ldrb	r2, [r7, #29]
 8003198:	429a      	cmp	r2, r3
 800319a:	d3c7      	bcc.n	800312c <OD_write_1010+0x74>
                found = 2;
            }
        }
    }

    if (found != 2)
 800319c:	7ffb      	ldrb	r3, [r7, #31]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d006      	beq.n	80031b0 <OD_write_1010+0xf8>
        returnCode = found == 0 ? ODR_SUB_NOT_EXIST : ODR_READONLY;
 80031a2:	7ffb      	ldrb	r3, [r7, #31]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <OD_write_1010+0xf4>
 80031a8:	230e      	movs	r3, #14
 80031aa:	e000      	b.n	80031ae <OD_write_1010+0xf6>
 80031ac:	2304      	movs	r3, #4
 80031ae:	77bb      	strb	r3, [r7, #30]

    if (returnCode == ODR_OK) *countWritten = sizeof(uint32_t);
 80031b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <OD_write_1010+0x106>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2204      	movs	r2, #4
 80031bc:	601a      	str	r2, [r3, #0]
    return returnCode;
 80031be:	7fbb      	ldrb	r3, [r7, #30]
 80031c0:	b25b      	sxtb	r3, r3
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	65766173 	.word	0x65766173

080031d0 <OD_write_1011>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1011(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if (stream == NULL || stream->subIndex == 0 || buf == NULL || count != 4
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00c      	beq.n	80031fe <OD_write_1011+0x2e>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	7c5b      	ldrb	r3, [r3, #17]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <OD_write_1011+0x2e>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <OD_write_1011+0x2e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d102      	bne.n	80031fe <OD_write_1011+0x2e>
        || countWritten == NULL
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <OD_write_1011+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80031fe:	2309      	movs	r3, #9
 8003200:	e06a      	b.n	80032d8 <OD_write_1011+0x108>
    }

    CO_storage_t *storage = stream->object;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]

    if (stream->subIndex == 0 || storage->restore == NULL || !storage->enabled){
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	7c5b      	ldrb	r3, [r3, #17]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <OD_write_1011+0x50>
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <OD_write_1011+0x50>
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <OD_write_1011+0x54>
        return ODR_READONLY;
 8003220:	2304      	movs	r3, #4
 8003222:	e059      	b.n	80032d8 <OD_write_1011+0x108>
    }

    if (CO_getUint32(buf) != 0x64616F6C) {
 8003224:	68b8      	ldr	r0, [r7, #8]
 8003226:	f7ff ff21 	bl	800306c <CO_getUint32>
 800322a:	4602      	mov	r2, r0
 800322c:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <OD_write_1011+0x114>)
 800322e:	429a      	cmp	r2, r3
 8003230:	d001      	beq.n	8003236 <OD_write_1011+0x66>
        return ODR_DATA_TRANSF;
 8003232:	2315      	movs	r3, #21
 8003234:	e050      	b.n	80032d8 <OD_write_1011+0x108>
    }

    /* loop through entries and store relevant */
    uint8_t found = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	77fb      	strb	r3, [r7, #31]
    ODR_t returnCode = ODR_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	77bb      	strb	r3, [r7, #30]

    for (uint8_t i = 0; i < storage->entriesCount; i++) {
 800323e:	2300      	movs	r3, #0
 8003240:	777b      	strb	r3, [r7, #29]
 8003242:	e031      	b.n	80032a8 <OD_write_1011+0xd8>
        CO_storage_entry_t *entry = &storage->entries[i];
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003248:	7f7a      	ldrb	r2, [r7, #29]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	617b      	str	r3, [r7, #20]

        if (stream->subIndex == 1 || entry->subIndexOD == stream->subIndex) {
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	7c5b      	ldrb	r3, [r3, #17]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d005      	beq.n	800326a <OD_write_1011+0x9a>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	7a1a      	ldrb	r2, [r3, #8]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	7c5b      	ldrb	r3, [r3, #17]
 8003266:	429a      	cmp	r2, r3
 8003268:	d11b      	bne.n	80032a2 <OD_write_1011+0xd2>
            if (found == 0) found = 1;
 800326a:	7ffb      	ldrb	r3, [r7, #31]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <OD_write_1011+0xa4>
 8003270:	2301      	movs	r3, #1
 8003272:	77fb      	strb	r3, [r7, #31]
            if ((entry->attr & CO_storage_restore) != 0) {
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	7a5b      	ldrb	r3, [r3, #9]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <OD_write_1011+0xd2>
                ODR_t code = storage->restore(entry, storage->CANmodule);
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	6a12      	ldr	r2, [r2, #32]
 8003288:	6978      	ldr	r0, [r7, #20]
 800328a:	4611      	mov	r1, r2
 800328c:	4798      	blx	r3
 800328e:	4603      	mov	r3, r0
 8003290:	74fb      	strb	r3, [r7, #19]
                if (code != ODR_OK) returnCode = code;
 8003292:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <OD_write_1011+0xce>
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	77bb      	strb	r3, [r7, #30]
                found = 2;
 800329e:	2302      	movs	r3, #2
 80032a0:	77fb      	strb	r3, [r7, #31]

    /* loop through entries and store relevant */
    uint8_t found = 0;
    ODR_t returnCode = ODR_OK;

    for (uint8_t i = 0; i < storage->entriesCount; i++) {
 80032a2:	7f7b      	ldrb	r3, [r7, #29]
 80032a4:	3301      	adds	r3, #1
 80032a6:	777b      	strb	r3, [r7, #29]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ae:	7f7a      	ldrb	r2, [r7, #29]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d3c7      	bcc.n	8003244 <OD_write_1011+0x74>
                found = 2;
            }
        }
    }

    if (found != 2)
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d006      	beq.n	80032c8 <OD_write_1011+0xf8>
        returnCode = found == 0 ? ODR_SUB_NOT_EXIST : ODR_READONLY;
 80032ba:	7ffb      	ldrb	r3, [r7, #31]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <OD_write_1011+0xf4>
 80032c0:	230e      	movs	r3, #14
 80032c2:	e000      	b.n	80032c6 <OD_write_1011+0xf6>
 80032c4:	2304      	movs	r3, #4
 80032c6:	77bb      	strb	r3, [r7, #30]

    if (returnCode == ODR_OK) *countWritten = sizeof(uint32_t);
 80032c8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <OD_write_1011+0x106>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2204      	movs	r2, #4
 80032d4:	601a      	str	r2, [r3, #0]
    return returnCode;
 80032d6:	7fbb      	ldrb	r3, [r7, #30]
 80032d8:	b25b      	sxtb	r3, r3
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	64616f6c 	.word	0x64616f6c

080032e8 <CO_storage_init>:
                                                CO_CANmodule_t *CANmodule),
                                 ODR_t (*restore)(CO_storage_entry_t *entry,
                                                  CO_CANmodule_t *CANmodule),
                                 CO_storage_entry_t *entries,
                                 uint8_t entriesCount)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
    /* verify arguments */
    if (storage == NULL) {
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <CO_storage_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80032fc:	23ff      	movs	r3, #255	; 0xff
 80032fe:	e034      	b.n	800336a <CO_storage_init+0x82>
    }

    /* Configure object variables */
    storage->CANmodule = CANmodule;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	621a      	str	r2, [r3, #32]
    storage->store = store;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24
    storage->restore = restore;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	629a      	str	r2, [r3, #40]	; 0x28
    storage->entries = entries;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c
    storage->entriesCount = entriesCount;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800331e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* configure extensions */
    if (OD_1010_StoreParameters != NULL) {
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00d      	beq.n	8003344 <CO_storage_init+0x5c>
        storage->OD_1010_extension.object = storage;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	601a      	str	r2, [r3, #0]
        storage->OD_1010_extension.read = OD_readOriginal;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a10      	ldr	r2, [pc, #64]	; (8003374 <CO_storage_init+0x8c>)
 8003332:	605a      	str	r2, [r3, #4]
        storage->OD_1010_extension.write = OD_write_1010;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a10      	ldr	r2, [pc, #64]	; (8003378 <CO_storage_init+0x90>)
 8003338:	609a      	str	r2, [r3, #8]
        OD_extension_init(OD_1010_StoreParameters, &storage->OD_1010_extension);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4619      	mov	r1, r3
 8003340:	f7ff fea4 	bl	800308c <OD_extension_init>
    }

    if (OD_1011_RestoreDefaultParameters != NULL) {
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00e      	beq.n	8003368 <CO_storage_init+0x80>
        storage->OD_1011_extension.object = storage;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	611a      	str	r2, [r3, #16]
        storage->OD_1011_extension.read = OD_readOriginal;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <CO_storage_init+0x8c>)
 8003354:	615a      	str	r2, [r3, #20]
        storage->OD_1011_extension.write = OD_write_1011;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a08      	ldr	r2, [pc, #32]	; (800337c <CO_storage_init+0x94>)
 800335a:	619a      	str	r2, [r3, #24]
        OD_extension_init(OD_1011_RestoreDefaultParameters,
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3310      	adds	r3, #16
 8003360:	6838      	ldr	r0, [r7, #0]
 8003362:	4619      	mov	r1, r3
 8003364:	f7ff fe92 	bl	800308c <OD_extension_init>
                          &storage->OD_1011_extension);
    }

    return CO_ERROR_NO;
 8003368:	2300      	movs	r3, #0
 800336a:	b25b      	sxtb	r3, r3
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	0800558d 	.word	0x0800558d
 8003378:	080030b9 	.word	0x080030b9
 800337c:	080031d1 	.word	0x080031d1

08003380 <storeEeprom>:
/*
 * Function for writing data on "Store parameters" command - OD object 1010
 *
 * For more information see file CO_storage.h, CO_storage_entry_t.
 */
static ODR_t storeEeprom(CO_storage_entry_t *entry, CO_CANmodule_t *CANmodule) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
    bool_t writeOk;

    /* save data to the eeprom */
    CO_LOCK_OD(CANmodule);
    writeOk = CO_eeprom_writeBlock(entry->storageModule, entry->addr,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68d8      	ldr	r0, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f006 fe43 	bl	800a024 <CO_eeprom_writeBlock>
 800339e:	6178      	str	r0, [r7, #20]
                                   entry->eepromAddr, entry->len);
    entry->crc = crc16_ccitt(entry->addr, entry->len, 0);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	2200      	movs	r2, #0
 80033ae:	f005 fcd7 	bl	8008d60 <crc16_ccitt>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	821a      	strh	r2, [r3, #16]
    CO_UNLOCK_OD(CANmodule);

    /* Verify, if data in eeprom are equal */
    uint16_t crc_read = CO_eeprom_getCrcBlock(entry->storageModule,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68d9      	ldr	r1, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4608      	mov	r0, r1
 80033c8:	4611      	mov	r1, r2
 80033ca:	461a      	mov	r2, r3
 80033cc:	f006 fe44 	bl	800a058 <CO_eeprom_getCrcBlock>
 80033d0:	4603      	mov	r3, r0
 80033d2:	827b      	strh	r3, [r7, #18]
                                              entry->eepromAddr, entry->len);
    if (entry->crc != crc_read || !writeOk) {
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8a1b      	ldrh	r3, [r3, #16]
 80033d8:	8a7a      	ldrh	r2, [r7, #18]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d102      	bne.n	80033e4 <storeEeprom+0x64>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <storeEeprom+0x68>
        return ODR_HW;
 80033e4:	230a      	movs	r3, #10
 80033e6:	e02b      	b.n	8003440 <storeEeprom+0xc0>
    }

    /* Write signature (see CO_storageEeprom_init() for info) */
    uint16_t signatureOfEntry = (uint16_t)entry->len;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	823b      	strh	r3, [r7, #16]
    uint32_t signature = (((uint32_t)entry->crc) << 16) | signatureOfEntry;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8a1b      	ldrh	r3, [r3, #16]
 80033f2:	041a      	lsls	r2, r3, #16
 80033f4:	8a3b      	ldrh	r3, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
    writeOk = CO_eeprom_writeBlock(entry->storageModule,
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68d9      	ldr	r1, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f107 020c 	add.w	r2, r7, #12
 8003406:	4608      	mov	r0, r1
 8003408:	4611      	mov	r1, r2
 800340a:	461a      	mov	r2, r3
 800340c:	2304      	movs	r3, #4
 800340e:	f006 fe09 	bl	800a024 <CO_eeprom_writeBlock>
 8003412:	6178      	str	r0, [r7, #20]
                                   entry->eepromAddrSignature,
                                   sizeof(signature));

    /* verify signature and write */
    uint32_t signatureRead;
    CO_eeprom_readBlock(entry->storageModule,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68d9      	ldr	r1, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f107 0208 	add.w	r2, r7, #8
 8003420:	4608      	mov	r0, r1
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	2304      	movs	r3, #4
 8003428:	f006 fde8 	bl	8009ffc <CO_eeprom_readBlock>
                        (uint8_t *)&signatureRead,
                        entry->eepromAddrSignature,
                        sizeof(signatureRead));
    if(signature != signatureRead || !writeOk) {
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	d102      	bne.n	800343a <storeEeprom+0xba>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <storeEeprom+0xbe>
        return ODR_HW;
 800343a:	230a      	movs	r3, #10
 800343c:	e000      	b.n	8003440 <storeEeprom+0xc0>
    }

    return ODR_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	b25b      	sxtb	r3, r3
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop

0800344c <restoreEeprom>:
 *
 * For more information see file CO_storage.h, CO_storage_entry_t.
 */
static ODR_t restoreEeprom(CO_storage_entry_t *entry,
                           CO_CANmodule_t *CANmodule)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
    (void) CANmodule;
    bool_t writeOk;

    /* Write empty signature */
    uint32_t signature = 0xFFFFFFFF;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	613b      	str	r3, [r7, #16]
    writeOk = CO_eeprom_writeBlock(entry->storageModule,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68d9      	ldr	r1, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f107 0210 	add.w	r2, r7, #16
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	2304      	movs	r3, #4
 8003470:	f006 fdd8 	bl	800a024 <CO_eeprom_writeBlock>
 8003474:	6178      	str	r0, [r7, #20]
                                   entry->eepromAddrSignature,
                                   sizeof(signature));

    /* verify signature and protection */
    uint32_t signatureRead;
    CO_eeprom_readBlock(entry->storageModule,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68d9      	ldr	r1, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f107 020c 	add.w	r2, r7, #12
 8003482:	4608      	mov	r0, r1
 8003484:	4611      	mov	r1, r2
 8003486:	461a      	mov	r2, r3
 8003488:	2304      	movs	r3, #4
 800348a:	f006 fdb7 	bl	8009ffc <CO_eeprom_readBlock>
                        (uint8_t *)&signatureRead,
                        entry->eepromAddrSignature,
                        sizeof(signatureRead));
    if(signature != signatureRead || !writeOk) {
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	429a      	cmp	r2, r3
 8003494:	d102      	bne.n	800349c <restoreEeprom+0x50>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <restoreEeprom+0x54>
        return ODR_HW;
 800349c:	230a      	movs	r3, #10
 800349e:	e000      	b.n	80034a2 <restoreEeprom+0x56>
    }

    return ODR_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	b25b      	sxtb	r3, r3
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <CO_storageEeprom_init>:
                                       OD_entry_t *OD_1010_StoreParameters,
                                       OD_entry_t *OD_1011_RestoreDefaultParam,
                                       CO_storage_entry_t *entries,
                                       uint8_t entriesCount,
                                       uint32_t *storageInitError)
{
 80034ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b0:	b094      	sub	sp, #80	; 0x50
 80034b2:	af04      	add	r7, sp, #16
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	466b      	mov	r3, sp
 80034be:	469a      	mov	sl, r3
    CO_ReturnError_t ret;
    bool_t eepromOvf = false;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]

    /* verify arguments */
    if (storage == NULL || entries == NULL || entriesCount == 0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <CO_storageEeprom_init+0x32>
 80034ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d006      	beq.n	80034de <CO_storageEeprom_init+0x32>
 80034d0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <CO_storageEeprom_init+0x32>
        || storageInitError == NULL
 80034d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <CO_storageEeprom_init+0x36>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80034de:	23ff      	movs	r3, #255	; 0xff
 80034e0:	e105      	b.n	80036ee <CO_storageEeprom_init+0x242>
    }

    storage->enabled = false;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Initialize storage hardware */
    if (!CO_eeprom_init(storageModule)) {
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f006 fd31 	bl	8009f50 <CO_eeprom_init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <CO_storageEeprom_init+0x54>
        *storageInitError = 0xFFFFFFFF;
 80034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f6:	f04f 32ff 	mov.w	r2, #4294967295
 80034fa:	601a      	str	r2, [r3, #0]
        return CO_ERROR_DATA_CORRUPT;
 80034fc:	23f3      	movs	r3, #243	; 0xf3
 80034fe:	e0f6      	b.n	80036ee <CO_storageEeprom_init+0x242>
    }

    /* initialize storage and OD extensions */
    ret = CO_storage_init(storage,
 8003500:	4b7e      	ldr	r3, [pc, #504]	; (80036fc <CO_storageEeprom_init+0x250>)
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4b7e      	ldr	r3, [pc, #504]	; (8003700 <CO_storageEeprom_init+0x254>)
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350a:	9302      	str	r3, [sp, #8]
 800350c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003510:	9303      	str	r3, [sp, #12]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800351a:	f7ff fee5 	bl	80032e8 <CO_storage_init>
 800351e:	4603      	mov	r3, r0
 8003520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                          OD_1011_RestoreDefaultParam,
                          storeEeprom,
                          restoreEeprom,
                          entries,
                          entriesCount);
    if (ret != CO_ERROR_NO) {
 8003524:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <CO_storageEeprom_init+0x86>
        return ret;
 800352c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003530:	e0dd      	b.n	80036ee <CO_storageEeprom_init+0x242>
    }

    /* Read entry signatures from the eeprom */
    uint32_t signatures[entriesCount];
 8003532:	f897 6068 	ldrb.w	r6, [r7, #104]	; 0x68
 8003536:	4633      	mov	r3, r6
 8003538:	3b01      	subs	r3, #1
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
 800353c:	b2f2      	uxtb	r2, r6
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	ea4f 1943 	mov.w	r9, r3, lsl #5
 8003546:	ea49 69d2 	orr.w	r9, r9, r2, lsr #27
 800354a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800354e:	b2f2      	uxtb	r2, r6
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	015d      	lsls	r5, r3, #5
 8003556:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800355a:	0154      	lsls	r4, r2, #5
 800355c:	4633      	mov	r3, r6
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	3303      	adds	r3, #3
 8003562:	3307      	adds	r3, #7
 8003564:	08db      	lsrs	r3, r3, #3
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	ebad 0d03 	sub.w	sp, sp, r3
 800356c:	ab04      	add	r3, sp, #16
 800356e:	3303      	adds	r3, #3
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t signaturesAddress = CO_eeprom_getAddr(storageModule,
 8003576:	4633      	mov	r3, r6
 8003578:	009a      	lsls	r2, r3, #2
 800357a:	f107 0310 	add.w	r3, r7, #16
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	2100      	movs	r1, #0
 8003582:	f006 fcf5 	bl	8009f70 <CO_eeprom_getAddr>
 8003586:	62b8      	str	r0, [r7, #40]	; 0x28
                                                 false,
                                                 sizeof(signatures),
                                                 &eepromOvf);
    CO_eeprom_readBlock(storageModule,
                        (uint8_t *)signatures,
 8003588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    uint32_t signatures[entriesCount];
    size_t signaturesAddress = CO_eeprom_getAddr(storageModule,
                                                 false,
                                                 sizeof(signatures),
                                                 &eepromOvf);
    CO_eeprom_readBlock(storageModule,
 800358a:	4633      	mov	r3, r6
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4611      	mov	r1, r2
 8003592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003594:	f006 fd32 	bl	8009ffc <CO_eeprom_readBlock>
                        (uint8_t *)signatures,
                        signaturesAddress,
                        sizeof(signatures));

    /* initialize entries */
    *storageInitError = 0;
 8003598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < entriesCount; i++) {
 800359e:	2300      	movs	r3, #0
 80035a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80035a4:	e097      	b.n	80036d6 <CO_storageEeprom_init+0x22a>
        CO_storage_entry_t *entry = &entries[i];
 80035a6:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	461a      	mov	r2, r3
 80035b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035b6:	4413      	add	r3, r2
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
        bool_t isAuto = (entry->attr & CO_storage_auto) != 0;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	7a5b      	ldrb	r3, [r3, #9]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf14      	ite	ne
 80035c6:	2301      	movne	r3, #1
 80035c8:	2300      	moveq	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	623b      	str	r3, [r7, #32]

        /* verify arguments */
        if (entry->addr == NULL || entry->len == 0 || entry->subIndexOD < 2) {
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <CO_storageEeprom_init+0x13a>
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <CO_storageEeprom_init+0x13a>
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	7a1b      	ldrb	r3, [r3, #8]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d805      	bhi.n	80035f2 <CO_storageEeprom_init+0x146>
            *storageInitError = i;
 80035e6:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80035ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ec:	601a      	str	r2, [r3, #0]
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80035ee:	23ff      	movs	r3, #255	; 0xff
 80035f0:	e07d      	b.n	80036ee <CO_storageEeprom_init+0x242>
        }

        /* calculate addresses inside eeprom */
        entry->eepromAddrSignature = signaturesAddress + sizeof(uint32_t) * i;
 80035f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80035f6:	009a      	lsls	r2, r3, #2
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	441a      	add	r2, r3
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	615a      	str	r2, [r3, #20]
        entry->eepromAddr = CO_eeprom_getAddr(storageModule,
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	f107 0310 	add.w	r3, r7, #16
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	6a39      	ldr	r1, [r7, #32]
 800360c:	f006 fcb0 	bl	8009f70 <CO_eeprom_getAddr>
 8003610:	4602      	mov	r2, r0
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	619a      	str	r2, [r3, #24]
                                              isAuto,
                                              entry->len,
                                              &eepromOvf);
        entry->offset = 0;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	2200      	movs	r2, #0
 800361a:	61da      	str	r2, [r3, #28]

        /* verify if eeprom is too small */
        if (eepromOvf) {
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <CO_storageEeprom_init+0x182>
            *storageInitError = i;
 8003622:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8003626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003628:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OUT_OF_MEMORY;
 800362a:	23fe      	movs	r3, #254	; 0xfe
 800362c:	e05f      	b.n	80036ee <CO_storageEeprom_init+0x242>
        }

        /* 32bit signature (which was stored in eeprom) is combined from
         * 16bit signature of the entry and 16bit CRC checksum of the data
         * block. 16bit signature of the entry is entry->len. */
        uint32_t signature = signatures[i];
 800362e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003638:	61fb      	str	r3, [r7, #28]
        uint16_t signatureInEeprom = (uint16_t)signature;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	837b      	strh	r3, [r7, #26]
        entry->crc = (uint16_t)(signature >> 16);
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	b29a      	uxth	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	821a      	strh	r2, [r3, #16]
        uint16_t signatureOfEntry = (uint16_t)entry->len;
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	833b      	strh	r3, [r7, #24]

        /* Verify two signatures */
        bool_t dataCorrupt = false;
 800364e:	2300      	movs	r3, #0
 8003650:	63bb      	str	r3, [r7, #56]	; 0x38
        if (signatureInEeprom != signatureOfEntry) {
 8003652:	8b7a      	ldrh	r2, [r7, #26]
 8003654:	8b3b      	ldrh	r3, [r7, #24]
 8003656:	429a      	cmp	r2, r3
 8003658:	d002      	beq.n	8003660 <CO_storageEeprom_init+0x1b4>
            dataCorrupt = true;
 800365a:	2301      	movs	r3, #1
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
 800365e:	e01e      	b.n	800369e <CO_storageEeprom_init+0x1f2>
        }
        else {
            /* Read data into storage location */
            CO_eeprom_readBlock(entry->storageModule, entry->addr,
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	68d8      	ldr	r0, [r3, #12]
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	6819      	ldr	r1, [r3, #0]
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f006 fcc4 	bl	8009ffc <CO_eeprom_readBlock>
                                entry->eepromAddr, entry->len);

            /* Verify CRC, except for auto storage variables */
            if (!isAuto) {
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d111      	bne.n	800369e <CO_storageEeprom_init+0x1f2>
                uint16_t crc = crc16_ccitt(entry->addr, entry->len, 0);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4610      	mov	r0, r2
 8003684:	4619      	mov	r1, r3
 8003686:	2200      	movs	r2, #0
 8003688:	f005 fb6a 	bl	8008d60 <crc16_ccitt>
 800368c:	4603      	mov	r3, r0
 800368e:	82fb      	strh	r3, [r7, #22]
                if (crc != entry->crc) {
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	8a1b      	ldrh	r3, [r3, #16]
 8003694:	8afa      	ldrh	r2, [r7, #22]
 8003696:	429a      	cmp	r2, r3
 8003698:	d001      	beq.n	800369e <CO_storageEeprom_init+0x1f2>
                    dataCorrupt = true;
 800369a:	2301      	movs	r3, #1
 800369c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
            }
        }

        /* additional info in case of error */
        if (dataCorrupt) {
 800369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <CO_storageEeprom_init+0x220>
            uint32_t errorBit = entry->subIndexOD;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	7a1b      	ldrb	r3, [r3, #8]
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
            if (errorBit > 31) errorBit = 31;
 80036aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ac:	2b1f      	cmp	r3, #31
 80036ae:	d901      	bls.n	80036b4 <CO_storageEeprom_init+0x208>
 80036b0:	231f      	movs	r3, #31
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
            *storageInitError |= ((uint32_t) 1) << errorBit;
 80036b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ba:	2101      	movs	r1, #1
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	431a      	orrs	r2, r3
 80036c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c4:	601a      	str	r2, [r3, #0]
            ret = CO_ERROR_DATA_CORRUPT;
 80036c6:	23f3      	movs	r3, #243	; 0xf3
 80036c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        signaturesAddress,
                        sizeof(signatures));

    /* initialize entries */
    *storageInitError = 0;
    for (uint8_t i = 0; i < entriesCount; i++) {
 80036cc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80036d0:	3301      	adds	r3, #1
 80036d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80036d6:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80036da:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80036de:	429a      	cmp	r2, r3
 80036e0:	f4ff af61 	bcc.w	80035a6 <CO_storageEeprom_init+0xfa>
            *storageInitError |= ((uint32_t) 1) << errorBit;
            ret = CO_ERROR_DATA_CORRUPT;
        }
    } /* for (entries) */

    storage->enabled = true;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	635a      	str	r2, [r3, #52]	; 0x34
    return ret;
 80036ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036ee:	46d5      	mov	sp, sl
 80036f0:	b25b      	sxtb	r3, r3
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3740      	adds	r7, #64	; 0x40
 80036f6:	46bd      	mov	sp, r7
 80036f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fc:	08003381 	.word	0x08003381
 8003700:	0800344d 	.word	0x0800344d

08003704 <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b090      	sub	sp, #64	; 0x40
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	791b      	ldrb	r3, [r3, #4]
 8003716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 800371a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800371e:	2b08      	cmp	r3, #8
 8003720:	f040 8164 	bne.w	80039ec <CO_LSSslave_receive+0x2e8>
 8003724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	2b00      	cmp	r3, #0
 800372a:	f040 815f 	bne.w	80039ec <CO_LSSslave_receive+0x2e8>
        bool_t request_LSSslave_process = false;
 800372e:	2300      	movs	r3, #0
 8003730:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	3305      	adds	r3, #5
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8003740:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003744:	2b04      	cmp	r3, #4
 8003746:	d12f      	bne.n	80037a8 <CO_LSSslave_receive+0xa4>
            uint8_t mode = data[1];
 8003748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374a:	785b      	ldrb	r3, [r3, #1]
 800374c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            switch (mode) {
 8003750:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <CO_LSSslave_receive+0x5a>
 8003758:	2b01      	cmp	r3, #1
 800375a:	d020      	beq.n	800379e <CO_LSSslave_receive+0x9a>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 800375c:	e023      	b.n	80037a6 <CO_LSSslave_receive+0xa2>
        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
            uint8_t mode = data[1];

            switch (mode) {
                case CO_LSS_STATE_WAITING:
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 800375e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003760:	7c1b      	ldrb	r3, [r3, #16]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d110      	bne.n	8003788 <CO_LSSslave_receive+0x84>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
            uint8_t mode = data[1];

            switch (mode) {
                case CO_LSS_STATE_WAITING:
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 800376c:	2bff      	cmp	r3, #255	; 0xff
 800376e:	d10b      	bne.n	8003788 <CO_LSSslave_receive+0x84>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 8003770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	781b      	ldrb	r3, [r3, #0]
            uint8_t mode = data[1];

            switch (mode) {
                case CO_LSS_STATE_WAITING:
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8003776:	2bff      	cmp	r3, #255	; 0xff
 8003778:	d006      	beq.n	8003788 <CO_LSSslave_receive+0x84>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
                    {
                        /* Slave process function will request NMT Reset comm.*/
                        LSSslave->service = cs;
 800377a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8003784:	2301      	movs	r3, #1
 8003786:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8003788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378a:	2200      	movs	r2, #0
 800378c:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 800378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003790:	3314      	adds	r3, #20
 8003792:	4618      	mov	r0, r3
 8003794:	2100      	movs	r1, #0
 8003796:	2210      	movs	r2, #16
 8003798:	f006 fe8a 	bl	800a4b0 <memset>
                           sizeof(LSSslave->lssSelect));
                    break;
 800379c:	e003      	b.n	80037a6 <CO_LSSslave_receive+0xa2>
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a0:	2201      	movs	r2, #1
 80037a2:	741a      	strb	r2, [r3, #16]
                    break;
 80037a4:	bf00      	nop
 80037a6:	e11b      	b.n	80039e0 <CO_LSSslave_receive+0x2dc>
                default:
                    break;
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	7c1b      	ldrb	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f040 8109 	bne.w	80039c4 <CO_LSSslave_receive+0x2c0>
            switch (cs) {
 80037b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037b6:	3b40      	subs	r3, #64	; 0x40
 80037b8:	2b11      	cmp	r3, #17
 80037ba:	f200 80ff 	bhi.w	80039bc <CO_LSSslave_receive+0x2b8>
 80037be:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <CO_LSSslave_receive+0xc0>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	0800380d 	.word	0x0800380d
 80037c8:	08003829 	.word	0x08003829
 80037cc:	08003845 	.word	0x08003845
 80037d0:	08003861 	.word	0x08003861
 80037d4:	080039bd 	.word	0x080039bd
 80037d8:	080039bd 	.word	0x080039bd
 80037dc:	080039bd 	.word	0x080039bd
 80037e0:	080039bd 	.word	0x080039bd
 80037e4:	080039bd 	.word	0x080039bd
 80037e8:	080039bd 	.word	0x080039bd
 80037ec:	080039bd 	.word	0x080039bd
 80037f0:	080039bd 	.word	0x080039bd
 80037f4:	080039bd 	.word	0x080039bd
 80037f8:	080039bd 	.word	0x080039bd
 80037fc:	080039bd 	.word	0x080039bd
 8003800:	080039bd 	.word	0x080039bd
 8003804:	080039bd 	.word	0x080039bd
 8003808:	080038c1 	.word	0x080038c1
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380e:	3301      	adds	r3, #1
 8003810:	f107 0218 	add.w	r2, r7, #24
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	2204      	movs	r2, #4
 800381a:	f006 fe23 	bl	800a464 <memcpy>
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003822:	615a      	str	r2, [r3, #20]
                break;
 8003824:	bf00      	nop
 8003826:	e0cc      	b.n	80039c2 <CO_LSSslave_receive+0x2be>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	3301      	adds	r3, #1
 800382c:	f107 0214 	add.w	r2, r7, #20
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	2204      	movs	r2, #4
 8003836:	f006 fe15 	bl	800a464 <memcpy>
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	619a      	str	r2, [r3, #24]
                break;
 8003840:	bf00      	nop
 8003842:	e0be      	b.n	80039c2 <CO_LSSslave_receive+0x2be>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	3301      	adds	r3, #1
 8003848:	f107 0210 	add.w	r2, r7, #16
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	2204      	movs	r2, #4
 8003852:	f006 fe07 	bl	800a464 <memcpy>
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385a:	61da      	str	r2, [r3, #28]
                break;
 800385c:	bf00      	nop
 800385e:	e0b0      	b.n	80039c2 <CO_LSSslave_receive+0x2be>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	3301      	adds	r3, #1
 8003864:	f107 020c 	add.w	r2, r7, #12
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	2204      	movs	r2, #4
 800386e:	f006 fdf9 	bl	800a464 <memcpy>
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 8003878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	429a      	cmp	r2, r3
 8003882:	d11b      	bne.n	80038bc <CO_LSSslave_receive+0x1b8>
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	429a      	cmp	r2, r3
 800388e:	d115      	bne.n	80038bc <CO_LSSslave_receive+0x1b8>
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	429a      	cmp	r2, r3
 800389a:	d10f      	bne.n	80038bc <CO_LSSslave_receive+0x1b8>
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d109      	bne.n	80038bc <CO_LSSslave_receive+0x1b8>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	2201      	movs	r2, #1
 80038ac:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 80038ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80038b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 80038b8:	2301      	movs	r3, #1
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 80038bc:	bf00      	nop
 80038be:	e080      	b.n	80039c2 <CO_LSSslave_receive+0x2be>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80038c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2bff      	cmp	r3, #255	; 0xff
 80038c8:	d17a      	bne.n	80039c0 <CO_LSSslave_receive+0x2bc>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 80038ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                }
                break;
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80038d0:	2bff      	cmp	r3, #255	; 0xff
 80038d2:	d175      	bne.n	80039c0 <CO_LSSslave_receive+0x2bc>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
                {
                    uint8_t bitCheck = data[5];
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	795b      	ldrb	r3, [r3, #5]
 80038d8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssSub = data[6];
 80038dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038de:	799b      	ldrb	r3, [r3, #6]
 80038e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint8_t lssNext = data[7];
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e6:	79db      	ldrb	r3, [r3, #7]
 80038e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 80038ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80038f0:	2b1f      	cmp	r3, #31
 80038f2:	d903      	bls.n	80038fc <CO_LSSslave_receive+0x1f8>
 80038f4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80038f8:	2b80      	cmp	r3, #128	; 0x80
 80038fa:	d162      	bne.n	80039c2 <CO_LSSslave_receive+0x2be>
 80038fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003900:	2b03      	cmp	r3, #3
 8003902:	d85e      	bhi.n	80039c2 <CO_LSSslave_receive+0x2be>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8003904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003908:	2b03      	cmp	r3, #3
 800390a:	d85a      	bhi.n	80039c2 <CO_LSSslave_receive+0x2be>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	3301      	adds	r3, #1
 8003910:	f107 0208 	add.w	r2, r7, #8
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	2204      	movs	r2, #4
 800391a:	f006 fda3 	bl	800a464 <memcpy>
                    idNumber = CO_SWAP_32(valSw);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	623b      	str	r3, [r7, #32]
                    ack = false;
 8003922:	2300      	movs	r3, #0
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8003926:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800392a:	2b80      	cmp	r3, #128	; 0x80
 800392c:	d10d      	bne.n	800394a <CO_LSSslave_receive+0x246>
                        /* Confirm, Reset */
                        ack = true;
 800392e:	2301      	movs	r3, #1
 8003930:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8003932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 800393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393c:	3324      	adds	r3, #36	; 0x24
 800393e:	4618      	mov	r0, r3
 8003940:	2100      	movs	r1, #0
 8003942:	2210      	movs	r2, #16
 8003944:	f006 fdb4 	bl	800a4b0 <memset>
 8003948:	e02c      	b.n	80039a4 <CO_LSSslave_receive+0x2a0>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 800394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003950:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003954:	429a      	cmp	r2, r3
 8003956:	d125      	bne.n	80039a4 <CO_LSSslave_receive+0x2a0>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8003958:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	61fb      	str	r3, [r7, #28]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8003966:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	405a      	eors	r2, r3
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4013      	ands	r3, r2
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
                        uint32_t mask = 0xFFFFFFFF << bitCheck;

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8003978:	2b00      	cmp	r3, #0
 800397a:	d113      	bne.n	80039a4 <CO_LSSslave_receive+0x2a0>
                            == (idNumber & mask))
                        {
                            /* all requested bits match */
                            ack = true;
 800397c:	2301      	movs	r3, #1
 800397e:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 8003980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003982:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 800398a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800398e:	2b00      	cmp	r3, #0
 8003990:	d108      	bne.n	80039a4 <CO_LSSslave_receive+0x2a0>
 8003992:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800399a:	429a      	cmp	r2, r3
 800399c:	d202      	bcs.n	80039a4 <CO_LSSslave_receive+0x2a0>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	2201      	movs	r2, #1
 80039a2:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 80039a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d007      	beq.n	80039ba <CO_LSSslave_receive+0x2b6>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80039b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80039b4:	2301      	movs	r3, #1
 80039b6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 80039b8:	e002      	b.n	80039c0 <CO_LSSslave_receive+0x2bc>
 80039ba:	e001      	b.n	80039c0 <CO_LSSslave_receive+0x2bc>
            }
            default: {
                break;
 80039bc:	bf00      	nop
 80039be:	e00f      	b.n	80039e0 <CO_LSSslave_receive+0x2dc>
                        LSSslave->service = cs;
                        request_LSSslave_process = true;
#endif
                    }
                }
                break;
 80039c0:	bf00      	nop
 80039c2:	e00d      	b.n	80039e0 <CO_LSSslave_receive+0x2dc>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	3349      	adds	r3, #73	; 0x49
 80039c8:	4618      	mov	r0, r3
 80039ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039cc:	2208      	movs	r2, #8
 80039ce:	f006 fd49 	bl	800a464 <memcpy>
            LSSslave->service = cs;
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80039d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 80039dc:	2301      	movs	r3, #1
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        if (request_LSSslave_process) {
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <CO_LSSslave_receive+0x2e8>
            CO_FLAG_SET(LSSslave->sendResponse);
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	2201      	movs	r2, #1
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 80039ec:	3740      	adds	r7, #64	; 0x40
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop

080039f4 <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af04      	add	r7, sp, #16
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d019      	beq.n	8003a40 <CO_LSSslave_init+0x4c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d016      	beq.n	8003a40 <CO_LSSslave_init+0x4c>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d013      	beq.n	8003a40 <CO_LSSslave_init+0x4c>
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d010      	beq.n	8003a40 <CO_LSSslave_init+0x4c>
        CANdevRx==NULL || CANdevTx==NULL ||
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00d      	beq.n	8003a40 <CO_LSSslave_init+0x4c>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
{
    CO_ReturnError_t ret = CO_ERROR_NO;

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
        CANdevRx==NULL || CANdevTx==NULL ||
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <CO_LSSslave_init+0x44>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	da05      	bge.n	8003a44 <CO_LSSslave_init+0x50>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2bff      	cmp	r3, #255	; 0xff
 8003a3e:	d001      	beq.n	8003a44 <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003a40:	23ff      	movs	r3, #255	; 0xff
 8003a42:	e045      	b.n	8003ad0 <CO_LSSslave_init+0xdc>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	2100      	movs	r1, #0
 8003a48:	2274      	movs	r2, #116	; 0x74
 8003a4a:	f006 fd31 	bl	800a4b0 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4618      	mov	r0, r3
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	2210      	movs	r2, #16
 8003a56:	f006 fd05 	bl	800a464 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	781a      	ldrb	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8003a84:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003a86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <CO_LSSslave_init+0xe8>)
 8003a92:	9302      	str	r3, [sp, #8]
 8003a94:	6a38      	ldr	r0, [r7, #32]
 8003a96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003a9a:	f006 f87b 	bl	8009b94 <CO_CANrxBufferInit>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa6:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8003aa8:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8003aaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003aac:	2308      	movs	r3, #8
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f006 f8be 	bl	8009c38 <CO_CANtxBufferInit>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003aca:	23ff      	movs	r3, #255	; 0xff
 8003acc:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	b25b      	sxtb	r3, r3
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	08003705 	.word	0x08003705

08003ae0 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	; 0x30
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 821e 	beq.w	8003f32 <CO_LSSslave_process+0x452>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8003af6:	2300      	movs	r3, #0
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afe:	3305      	adds	r3, #5
 8003b00:	4618      	mov	r0, r3
 8003b02:	2100      	movs	r1, #0
 8003b04:	2208      	movs	r2, #8
 8003b06:	f006 fcd3 	bl	800a4b0 <memset>

        switch (LSSslave->service) {
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003b10:	3b04      	subs	r3, #4
 8003b12:	2b5a      	cmp	r3, #90	; 0x5a
 8003b14:	f200 81fe 	bhi.w	8003f14 <CO_LSSslave_process+0x434>
 8003b18:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <CO_LSSslave_process+0x40>)
 8003b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1e:	bf00      	nop
 8003b20:	08003c8d 	.word	0x08003c8d
 8003b24:	08003f15 	.word	0x08003f15
 8003b28:	08003f15 	.word	0x08003f15
 8003b2c:	08003f15 	.word	0x08003f15
 8003b30:	08003f15 	.word	0x08003f15
 8003b34:	08003f15 	.word	0x08003f15
 8003b38:	08003f15 	.word	0x08003f15
 8003b3c:	08003f15 	.word	0x08003f15
 8003b40:	08003f15 	.word	0x08003f15
 8003b44:	08003f15 	.word	0x08003f15
 8003b48:	08003f15 	.word	0x08003f15
 8003b4c:	08003f15 	.word	0x08003f15
 8003b50:	08003f15 	.word	0x08003f15
 8003b54:	08003ca1 	.word	0x08003ca1
 8003b58:	08003f15 	.word	0x08003f15
 8003b5c:	08003cf9 	.word	0x08003cf9
 8003b60:	08003f15 	.word	0x08003f15
 8003b64:	08003da3 	.word	0x08003da3
 8003b68:	08003f15 	.word	0x08003f15
 8003b6c:	08003de3 	.word	0x08003de3
 8003b70:	08003f15 	.word	0x08003f15
 8003b74:	08003f15 	.word	0x08003f15
 8003b78:	08003f15 	.word	0x08003f15
 8003b7c:	08003f15 	.word	0x08003f15
 8003b80:	08003f15 	.word	0x08003f15
 8003b84:	08003f15 	.word	0x08003f15
 8003b88:	08003f15 	.word	0x08003f15
 8003b8c:	08003f15 	.word	0x08003f15
 8003b90:	08003f15 	.word	0x08003f15
 8003b94:	08003f15 	.word	0x08003f15
 8003b98:	08003f15 	.word	0x08003f15
 8003b9c:	08003f15 	.word	0x08003f15
 8003ba0:	08003f15 	.word	0x08003f15
 8003ba4:	08003f15 	.word	0x08003f15
 8003ba8:	08003f15 	.word	0x08003f15
 8003bac:	08003f15 	.word	0x08003f15
 8003bb0:	08003f15 	.word	0x08003f15
 8003bb4:	08003f15 	.word	0x08003f15
 8003bb8:	08003f15 	.word	0x08003f15
 8003bbc:	08003f15 	.word	0x08003f15
 8003bc0:	08003f15 	.word	0x08003f15
 8003bc4:	08003f15 	.word	0x08003f15
 8003bc8:	08003f15 	.word	0x08003f15
 8003bcc:	08003f15 	.word	0x08003f15
 8003bd0:	08003f15 	.word	0x08003f15
 8003bd4:	08003f15 	.word	0x08003f15
 8003bd8:	08003f15 	.word	0x08003f15
 8003bdc:	08003f15 	.word	0x08003f15
 8003be0:	08003f15 	.word	0x08003f15
 8003be4:	08003f15 	.word	0x08003f15
 8003be8:	08003f15 	.word	0x08003f15
 8003bec:	08003f15 	.word	0x08003f15
 8003bf0:	08003f15 	.word	0x08003f15
 8003bf4:	08003f15 	.word	0x08003f15
 8003bf8:	08003f15 	.word	0x08003f15
 8003bfc:	08003f15 	.word	0x08003f15
 8003c00:	08003f15 	.word	0x08003f15
 8003c04:	08003f15 	.word	0x08003f15
 8003c08:	08003f15 	.word	0x08003f15
 8003c0c:	08003f15 	.word	0x08003f15
 8003c10:	08003f15 	.word	0x08003f15
 8003c14:	08003f15 	.word	0x08003f15
 8003c18:	08003f15 	.word	0x08003f15
 8003c1c:	08003c93 	.word	0x08003c93
 8003c20:	08003f15 	.word	0x08003f15
 8003c24:	08003f15 	.word	0x08003f15
 8003c28:	08003f15 	.word	0x08003f15
 8003c2c:	08003f15 	.word	0x08003f15
 8003c30:	08003f15 	.word	0x08003f15
 8003c34:	08003f15 	.word	0x08003f15
 8003c38:	08003f15 	.word	0x08003f15
 8003c3c:	08003f15 	.word	0x08003f15
 8003c40:	08003f15 	.word	0x08003f15
 8003c44:	08003f15 	.word	0x08003f15
 8003c48:	08003f15 	.word	0x08003f15
 8003c4c:	08003f15 	.word	0x08003f15
 8003c50:	08003f15 	.word	0x08003f15
 8003c54:	08003f07 	.word	0x08003f07
 8003c58:	08003f15 	.word	0x08003f15
 8003c5c:	08003f15 	.word	0x08003f15
 8003c60:	08003f15 	.word	0x08003f15
 8003c64:	08003f15 	.word	0x08003f15
 8003c68:	08003f15 	.word	0x08003f15
 8003c6c:	08003f15 	.word	0x08003f15
 8003c70:	08003f15 	.word	0x08003f15
 8003c74:	08003f15 	.word	0x08003f15
 8003c78:	08003e39 	.word	0x08003e39
 8003c7c:	08003e65 	.word	0x08003e65
 8003c80:	08003e91 	.word	0x08003e91
 8003c84:	08003ebd 	.word	0x08003ebd
 8003c88:	08003ee9 	.word	0x08003ee9
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8003c90:	e141      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	2244      	movs	r2, #68	; 0x44
 8003c98:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c9e:	e13a      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 8003cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <CO_LSSslave_process+0x1e2>
 8003cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cbc:	b25b      	sxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	da03      	bge.n	8003cca <CO_LSSslave_process+0x1ea>
 8003cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc6:	2bff      	cmp	r3, #255	; 0xff
 8003cc8:	d105      	bne.n	8003cd6 <CO_LSSslave_process+0x1f6>
                *LSSslave->pendingNodeID = nid;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e002      	b.n	8003cdc <CO_LSSslave_process+0x1fc>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8003ce6:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003cf0:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cf6:	e10e      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d100      	bne.n	8003d02 <CO_LSSslave_process+0x222>
                /* setting bit timing is not supported. Drop request */
                break;
 8003d00:	e109      	b.n	8003f16 <CO_LSSslave_process+0x436>
            }

            tableSelector = LSSslave->CANdata[1];
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            tableIndex = LSSslave->CANdata[2];
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003d12:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8003d22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d125      	bne.n	8003d76 <CO_LSSslave_process+0x296>
 8003d2a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003d2e:	2b05      	cmp	r3, #5
 8003d30:	d021      	beq.n	8003d76 <CO_LSSslave_process+0x296>
 8003d32:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003d36:	2b09      	cmp	r3, #9
 8003d38:	d81d      	bhi.n	8003d76 <CO_LSSslave_process+0x296>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8003d3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003d3e:	4a7f      	ldr	r2, [pc, #508]	; (8003f3c <CO_LSSslave_process+0x45c>)
 8003d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d44:	83fb      	strh	r3, [r7, #30]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8003d4e:	8bfa      	ldrh	r2, [r7, #30]
 8003d50:	4608      	mov	r0, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	4798      	blx	r3
 8003d56:	61b8      	str	r0, [r7, #24]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d004      	beq.n	8003d68 <CO_LSSslave_process+0x288>
                    *LSSslave->pendingBitRate = bit;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	8bfa      	ldrh	r2, [r7, #30]
 8003d64:	801a      	strh	r2, [r3, #0]
            tableSelector = LSSslave->CANdata[1];
            tableIndex = LSSslave->CANdata[2];
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8003d66:	e009      	b.n	8003d7c <CO_LSSslave_process+0x29c>

                if (bit_rate_supported) {
                    *LSSslave->pendingBitRate = bit;
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8003d68:	23ff      	movs	r3, #255	; 0xff
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            tableSelector = LSSslave->CANdata[1];
            tableIndex = LSSslave->CANdata[2];
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8003d74:	e002      	b.n	8003d7c <CO_LSSslave_process+0x29c>
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8003d86:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003d90:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8003d9a:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003da0:	e0b9      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d100      	bne.n	8003dac <CO_LSSslave_process+0x2cc>
                /* setting bit timing is not supported. Drop request */
                break;
 8003daa:	e0b4      	b.n	8003f16 <CO_LSSslave_process+0x436>
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d015      	beq.n	8003de0 <CO_LSSslave_process+0x300>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	82fb      	strh	r3, [r7, #22]
                delay |= LSSslave->CANdata[1];
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	8afb      	ldrh	r3, [r7, #22]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	82fb      	strh	r3, [r7, #22]
                LSSslave->pFunctLSSactivateBitRate(
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8003dd6:	8afa      	ldrh	r2, [r7, #22]
 8003dd8:	4608      	mov	r0, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 8003dde:	e09a      	b.n	8003f16 <CO_LSSslave_process+0x436>
 8003de0:	e099      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <CO_LSSslave_process+0x318>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df6:	e011      	b.n	8003e1c <CO_LSSslave_process+0x33c>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6e90      	ldr	r0, [r2, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8003e04:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingNodeID,
                                               *LSSslave->pendingBitRate);
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6b92      	ldr	r2, [r2, #56]	; 0x38
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8003e0a:	8812      	ldrh	r2, [r2, #0]
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
 8003e0c:	4798      	blx	r3
 8003e0e:	6138      	str	r0, [r7, #16]
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
                                               *LSSslave->pendingNodeID,
                                               *LSSslave->pendingBitRate);
                if (!result) {
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <CO_LSSslave_process+0x33c>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8003e16:	2302      	movs	r3, #2
 8003e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8003e26:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003e30:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8003e32:	2301      	movs	r3, #1
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e36:	e06e      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8003e42:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	1d9a      	adds	r2, r3, #6
 8003e50:	f107 030c 	add.w	r3, r7, #12
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	2204      	movs	r2, #4
 8003e5a:	f006 fb03 	bl	800a464 <memcpy>
            CANsend = true;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e62:	e058      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8003e6e:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	1d9a      	adds	r2, r3, #6
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	2204      	movs	r2, #4
 8003e86:	f006 faed 	bl	800a464 <memcpy>
            CANsend = true;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003e8e:	e042      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8003e9a:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	1d9a      	adds	r2, r3, #6
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	f006 fad7 	bl	800a464 <memcpy>
            CANsend = true;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003eba:	e02c      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8003ec6:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	1d9a      	adds	r2, r3, #6
 8003ed4:	f107 030c 	add.w	r3, r7, #12
 8003ed8:	4610      	mov	r0, r2
 8003eda:	4619      	mov	r1, r3
 8003edc:	2204      	movs	r2, #4
 8003ede:	f006 fac1 	bl	800a464 <memcpy>
            CANsend = true;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ee6:	e016      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8003ef2:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8003efe:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 8003f00:	2301      	movs	r3, #1
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f04:	e007      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	224f      	movs	r2, #79	; 0x4f
 8003f0c:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f12:	e000      	b.n	8003f16 <CO_LSSslave_process+0x436>
        }
        default: {
            break;
 8003f14:	bf00      	nop
        }
        }

        if(CANsend) {
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <CO_LSSslave_process+0x44c>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f005 febc 	bl	8009ca4 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3730      	adds	r7, #48	; 0x30
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	0800a83c 	.word	0x0800a83c

08003f40 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <CO_LEDs_init+0x16>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003f52:	23ff      	movs	r3, #255	; 0xff
 8003f54:	e005      	b.n	8003f62 <CO_LEDs_init+0x22>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	2100      	movs	r1, #0
 8003f5a:	220c      	movs	r2, #12
 8003f5c:	f006 faa8 	bl	800a4b0 <memset>

    return ret;
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	b25b      	sxtb	r3, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b089      	sub	sp, #36	; 0x24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	441a      	add	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 8003f94:	e0fc      	b.n	8004190 <CO_LEDs_process+0x224>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	7a5b      	ldrb	r3, [r3, #9]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bf0c      	ite	eq
 8003fa2:	2301      	moveq	r3, #1
 8003fa4:	2300      	movne	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	613b      	str	r3, [r7, #16]

        tick = true;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8003fb6:	3b50      	subs	r3, #80	; 0x50
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	791b      	ldrb	r3, [r3, #4]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	711a      	strb	r2, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	791b      	ldrb	r3, [r3, #4]
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	f240 80c9 	bls.w	8004164 <CO_LEDs_process+0x1f8>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77bb      	strb	r3, [r7, #30]
 8003fdc:	7fbb      	ldrb	r3, [r7, #30]
 8003fde:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	7a5b      	ldrb	r3, [r3, #9]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <CO_LEDs_process+0x8a>
 8003fec:	7ffb      	ldrb	r3, [r7, #31]
 8003fee:	f043 0302 	orr.w	r3, r3, #2
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e003      	b.n	8003ffe <CO_LEDs_process+0x92>
            else                                    gr |= CO_LED_blink;
 8003ff6:	7fbb      	ldrb	r3, [r7, #30]
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	795b      	ldrb	r3, [r3, #5]
 8004002:	3301      	adds	r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	715a      	strb	r2, [r3, #5]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	795b      	ldrb	r3, [r3, #5]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d009      	beq.n	8004026 <CO_LEDs_process+0xba>
 8004012:	2b06      	cmp	r3, #6
 8004014:	d00c      	beq.n	8004030 <CO_LEDs_process+0xc4>
 8004016:	2b01      	cmp	r3, #1
 8004018:	d000      	beq.n	800401c <CO_LEDs_process+0xb0>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 800401a:	e00d      	b.n	8004038 <CO_LEDs_process+0xcc>

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
            else                                    gr |= CO_LED_blink;

            switch (++LEDs->LEDtmrflash_1) {
                case 1: rd |= CO_LED_flash_1; break;
 800401c:	7ffb      	ldrb	r3, [r7, #31]
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e008      	b.n	8004038 <CO_LEDs_process+0xcc>
                case 2: gr |= CO_LED_flash_1; break;
 8004026:	7fbb      	ldrb	r3, [r7, #30]
 8004028:	f043 0304 	orr.w	r3, r3, #4
 800402c:	77bb      	strb	r3, [r7, #30]
 800402e:	e003      	b.n	8004038 <CO_LEDs_process+0xcc>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	715a      	strb	r2, [r3, #5]
 8004036:	bf00      	nop
                default: break;
            }
            switch (++LEDs->LEDtmrflash_2) {
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	799b      	ldrb	r3, [r3, #6]
 800403c:	3301      	adds	r3, #1
 800403e:	b2da      	uxtb	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	719a      	strb	r2, [r3, #6]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	799b      	ldrb	r3, [r3, #6]
 8004048:	3b01      	subs	r3, #1
 800404a:	2b07      	cmp	r3, #7
 800404c:	d820      	bhi.n	8004090 <CO_LEDs_process+0x124>
 800404e:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <CO_LEDs_process+0xe8>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	08004075 	.word	0x08004075
 8004058:	0800407f 	.word	0x0800407f
 800405c:	08004075 	.word	0x08004075
 8004060:	0800407f 	.word	0x0800407f
 8004064:	08004091 	.word	0x08004091
 8004068:	08004091 	.word	0x08004091
 800406c:	08004091 	.word	0x08004091
 8004070:	08004089 	.word	0x08004089
                case 1: case 3: rd |= CO_LED_flash_2; break;
 8004074:	7ffb      	ldrb	r3, [r7, #31]
 8004076:	f043 0308 	orr.w	r3, r3, #8
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e009      	b.n	8004092 <CO_LEDs_process+0x126>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 800407e:	7fbb      	ldrb	r3, [r7, #30]
 8004080:	f043 0308 	orr.w	r3, r3, #8
 8004084:	77bb      	strb	r3, [r7, #30]
 8004086:	e004      	b.n	8004092 <CO_LEDs_process+0x126>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	719a      	strb	r2, [r3, #6]
 800408e:	e000      	b.n	8004092 <CO_LEDs_process+0x126>
                default: break;
 8004090:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	79db      	ldrb	r3, [r3, #7]
 8004096:	3301      	adds	r3, #1
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	71da      	strb	r2, [r3, #7]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	79db      	ldrb	r3, [r3, #7]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	2b09      	cmp	r3, #9
 80040a6:	d825      	bhi.n	80040f4 <CO_LEDs_process+0x188>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <CO_LEDs_process+0x144>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040d9 	.word	0x080040d9
 80040b4:	080040e3 	.word	0x080040e3
 80040b8:	080040d9 	.word	0x080040d9
 80040bc:	080040e3 	.word	0x080040e3
 80040c0:	080040d9 	.word	0x080040d9
 80040c4:	080040e3 	.word	0x080040e3
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	080040f5 	.word	0x080040f5
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	080040ed 	.word	0x080040ed
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 80040d8:	7ffb      	ldrb	r3, [r7, #31]
 80040da:	f043 0310 	orr.w	r3, r3, #16
 80040de:	77fb      	strb	r3, [r7, #31]
 80040e0:	e009      	b.n	80040f6 <CO_LEDs_process+0x18a>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 80040e2:	7fbb      	ldrb	r3, [r7, #30]
 80040e4:	f043 0310 	orr.w	r3, r3, #16
 80040e8:	77bb      	strb	r3, [r7, #30]
 80040ea:	e004      	b.n	80040f6 <CO_LEDs_process+0x18a>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	71da      	strb	r2, [r3, #7]
 80040f2:	e000      	b.n	80040f6 <CO_LEDs_process+0x18a>
                default: break;
 80040f4:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	7a1b      	ldrb	r3, [r3, #8]
 80040fa:	3301      	adds	r3, #1
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	721a      	strb	r2, [r3, #8]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	7a1b      	ldrb	r3, [r3, #8]
 8004106:	3b01      	subs	r3, #1
 8004108:	2b0b      	cmp	r3, #11
 800410a:	d829      	bhi.n	8004160 <CO_LEDs_process+0x1f4>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <CO_LEDs_process+0x1a8>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004145 	.word	0x08004145
 8004118:	0800414f 	.word	0x0800414f
 800411c:	08004145 	.word	0x08004145
 8004120:	0800414f 	.word	0x0800414f
 8004124:	08004145 	.word	0x08004145
 8004128:	0800414f 	.word	0x0800414f
 800412c:	08004145 	.word	0x08004145
 8004130:	0800414f 	.word	0x0800414f
 8004134:	08004161 	.word	0x08004161
 8004138:	08004161 	.word	0x08004161
 800413c:	08004161 	.word	0x08004161
 8004140:	08004159 	.word	0x08004159
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 8004144:	7ffb      	ldrb	r3, [r7, #31]
 8004146:	f043 0320 	orr.w	r3, r3, #32
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e009      	b.n	8004162 <CO_LEDs_process+0x1f6>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 800414e:	7fbb      	ldrb	r3, [r7, #30]
 8004150:	f043 0320 	orr.w	r3, r3, #32
 8004154:	77bb      	strb	r3, [r7, #30]
 8004156:	e004      	b.n	8004162 <CO_LEDs_process+0x1f6>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	721a      	strb	r2, [r3, #8]
 800415e:	e000      	b.n	8004162 <CO_LEDs_process+0x1f6>
                default: break;
 8004160:	bf00      	nop
 8004162:	e009      	b.n	8004178 <CO_LEDs_process+0x20c>
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	7a5b      	ldrb	r3, [r3, #9]
 8004168:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800416c:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	7a9b      	ldrb	r3, [r3, #10]
 8004172:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004176:	77bb      	strb	r3, [r7, #30]
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <CO_LEDs_process+0x21c>
 800417e:	7ffb      	ldrb	r3, [r7, #31]
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e003      	b.n	8004190 <CO_LEDs_process+0x224>
        else               gr |= CO_LED_flicker;
 8004188:	7fbb      	ldrb	r3, [r7, #30]
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	77bb      	strb	r3, [r7, #30]
    uint8_t rd = 0;
    uint8_t gr = 0;
    bool_t tick = false;

    LEDs->LEDtmr50ms += timeDifference_us;
    while (LEDs->LEDtmr50ms >= 50000) {
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004198:	4293      	cmp	r3, r2
 800419a:	f63f aefc 	bhi.w	8003f96 <CO_LEDs_process+0x2a>
        if (rdFlickerNext) rd |= CO_LED_flicker;
        else               gr |= CO_LED_flicker;

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d077      	beq.n	8004294 <CO_LEDs_process+0x328>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d002      	beq.n	80041b0 <CO_LEDs_process+0x244>
 80041aa:	2301      	movs	r3, #1
 80041ac:	75fb      	strb	r3, [r7, #23]
 80041ae:	e032      	b.n	8004216 <CO_LEDs_process+0x2aa>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <CO_LEDs_process+0x256>
 80041b8:	7ffb      	ldrb	r3, [r7, #31]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	75fb      	strb	r3, [r7, #23]
 80041c0:	e029      	b.n	8004216 <CO_LEDs_process+0x2aa>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d004      	beq.n	80041d2 <CO_LEDs_process+0x266>
 80041c8:	7ffb      	ldrb	r3, [r7, #31]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	75fb      	strb	r3, [r7, #23]
 80041d0:	e021      	b.n	8004216 <CO_LEDs_process+0x2aa>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <CO_LEDs_process+0x276>
 80041d8:	7ffb      	ldrb	r3, [r7, #31]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	75fb      	strb	r3, [r7, #23]
 80041e0:	e019      	b.n	8004216 <CO_LEDs_process+0x2aa>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d004      	beq.n	80041f2 <CO_LEDs_process+0x286>
 80041e8:	7ffb      	ldrb	r3, [r7, #31]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	75fb      	strb	r3, [r7, #23]
 80041f0:	e011      	b.n	8004216 <CO_LEDs_process+0x2aa>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <CO_LEDs_process+0x296>
 80041f8:	7ffb      	ldrb	r3, [r7, #31]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	75fb      	strb	r3, [r7, #23]
 8004200:	e009      	b.n	8004216 <CO_LEDs_process+0x2aa>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 8004202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <CO_LEDs_process+0x2a6>
 8004208:	7ffb      	ldrb	r3, [r7, #31]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	75fb      	strb	r3, [r7, #23]
 8004210:	e001      	b.n	8004216 <CO_LEDs_process+0x2aa>
        else                                        rd_co = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <CO_LEDs_process+0x2ba>
 800421c:	7fbb      	ldrb	r3, [r7, #30]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	75bb      	strb	r3, [r7, #22]
 8004224:	e022      	b.n	800426c <CO_LEDs_process+0x300>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 8004226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <CO_LEDs_process+0x2ca>
 800422c:	7fbb      	ldrb	r3, [r7, #30]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	75bb      	strb	r3, [r7, #22]
 8004234:	e01a      	b.n	800426c <CO_LEDs_process+0x300>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	2b04      	cmp	r3, #4
 800423c:	d104      	bne.n	8004248 <CO_LEDs_process+0x2dc>
 800423e:	7fbb      	ldrb	r3, [r7, #30]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	75bb      	strb	r3, [r7, #22]
 8004246:	e011      	b.n	800426c <CO_LEDs_process+0x300>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 8004248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424c:	2b7f      	cmp	r3, #127	; 0x7f
 800424e:	d104      	bne.n	800425a <CO_LEDs_process+0x2ee>
 8004250:	7fbb      	ldrb	r3, [r7, #30]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	75bb      	strb	r3, [r7, #22]
 8004258:	e008      	b.n	800426c <CO_LEDs_process+0x300>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	2b05      	cmp	r3, #5
 8004260:	d102      	bne.n	8004268 <CO_LEDs_process+0x2fc>
 8004262:	2301      	movs	r3, #1
 8004264:	75bb      	strb	r3, [r7, #22]
 8004266:	e001      	b.n	800426c <CO_LEDs_process+0x300>
        else                                        gr_co = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <CO_LEDs_process+0x30e>
 8004272:	7ffb      	ldrb	r3, [r7, #31]
 8004274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004278:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 800427a:	7dbb      	ldrb	r3, [r7, #22]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <CO_LEDs_process+0x31c>
 8004280:	7fbb      	ldrb	r3, [r7, #30]
 8004282:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004286:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	7ffa      	ldrb	r2, [r7, #31]
 800428c:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	7fba      	ldrb	r2, [r7, #30]
 8004292:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8004294:	3724      	adds	r7, #36	; 0x24
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop

080042a0 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
#if (C2000_PORT != 0)
    uint8_t value = 0;
    value = (*((uint8_t *)buf) & 0x00FF);
    return value;
#else
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	73fb      	strb	r3, [r7, #15]
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70fb      	strb	r3, [r7, #3]
#if (C2000_PORT != 0)
    uint8_t * pBuf8 = (uint8_t *)buf;
    pBuf8[0] = value;
    return 1;
#else
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	2301      	movs	r3, #1
#endif
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <CO_setUint32>:
#else
    memmove(buf, &value, sizeof(value)); return sizeof(value);
#endif
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < 4; i++) {
        pBuf8[i] = (uint8_t)((value >> (8 * i)) & 0x00FF);
    }
    return 4;
#else
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80042e6:	463b      	mov	r3, r7
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4619      	mov	r1, r3
 80042ec:	2204      	movs	r2, #4
 80042ee:	f006 f8c4 	bl	800a47a <memmove>
 80042f2:	2304      	movs	r3, #4
#endif
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <OD_getIndex+0x14>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	e000      	b.n	8004312 <OD_getIndex+0x16>
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop

08004320 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <OD_extension_init+0x14>
 8004330:	2305      	movs	r3, #5
 8004332:	e003      	b.n	800433c <OD_extension_init+0x1c>
    entry->extension = extension;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	b25b      	sxtb	r3, r3
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop

0800434c <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	460b      	mov	r3, r1
 800435a:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 4, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800435c:	7afa      	ldrb	r2, [r7, #11]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	4611      	mov	r1, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	2304      	movs	r3, #4
 800436a:	f001 fb4f 	bl	8005a0c <OD_get_value>
 800436e:	4603      	mov	r3, r0
#endif
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00c      	beq.n	80043a6 <OD_read_1014_default+0x2e>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	7c5b      	ldrb	r3, [r3, #17]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d108      	bne.n	80043a6 <OD_read_1014_default+0x2e>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <OD_read_1014_default+0x2e>
#if (C2000_PORT != 0)
        || count < 4 || countRead == NULL
#else
        || count < sizeof(uint32_t) || countRead == NULL
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d902      	bls.n	80043a6 <OD_read_1014_default+0x2e>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <OD_read_1014_default+0x32>
#endif
    ) {
        return ODR_DEV_INCOMPAT;
 80043a6:	2309      	movs	r3, #9
 80043a8:	e01b      	b.n	80043e2 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <OD_read_1014_default+0x44>
 80043b8:	2300      	movs	r3, #0
 80043ba:	e001      	b.n	80043c0 <OD_read_1014_default+0x48>
 80043bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043c0:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043c8:	3380      	adds	r3, #128	; 0x80
 80043ca:	461a      	mov	r2, r3
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 80043d2:	68b8      	ldr	r0, [r7, #8]
 80043d4:	6939      	ldr	r1, [r7, #16]
 80043d6:	f7ff ff81 	bl	80042dc <CO_setUint32>

#if (C2000_PORT != 0)
    *countRead = 4;
#else
    *countRead = sizeof(uint32_t);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2204      	movs	r2, #4
 80043de:	601a      	str	r2, [r3, #0]
#endif
    return ODR_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	b25b      	sxtb	r3, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00f      	beq.n	8004420 <OD_read_1003+0x34>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <OD_read_1003+0x34>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b03      	cmp	r3, #3
 8004410:	d803      	bhi.n	800441a <OD_read_1003+0x2e>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	7c5b      	ldrb	r3, [r3, #17]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <OD_read_1003+0x34>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 8004420:	2309      	movs	r3, #9
 8004422:	e04d      	b.n	80044c0 <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	7f1b      	ldrb	r3, [r3, #28]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d801      	bhi.n	8004436 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8004432:	2309      	movs	r3, #9
 8004434:	e044      	b.n	80044c0 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	7c5b      	ldrb	r3, [r3, #17]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10b      	bne.n	8004456 <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004444:	68b8      	ldr	r0, [r7, #8]
 8004446:	4619      	mov	r1, r3
 8004448:	f7ff ff38 	bl	80042bc <CO_setUint8>

        *countRead = sizeof(uint8_t);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e034      	b.n	80044c0 <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	7c5a      	ldrb	r2, [r3, #17]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004460:	429a      	cmp	r2, r3
 8004462:	d82c      	bhi.n	80044be <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	7f5b      	ldrb	r3, [r3, #29]
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	7c5b      	ldrb	r3, [r3, #17]
 800446e:	b29b      	uxth	r3, r3
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	b29b      	uxth	r3, r3
 8004474:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8004476:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800447a:	2b00      	cmp	r3, #0
 800447c:	da07      	bge.n	800448e <OD_read_1003+0xa2>
            index += em->fifoSize;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	7f1b      	ldrb	r3, [r3, #28]
 8004482:	b29a      	uxth	r2, r3
 8004484:	8afb      	ldrh	r3, [r7, #22]
 8004486:	4413      	add	r3, r2
 8004488:	b29b      	uxth	r3, r3
 800448a:	82fb      	strh	r3, [r7, #22]
 800448c:	e007      	b.n	800449e <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 800448e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	7f12      	ldrb	r2, [r2, #28]
 8004496:	4293      	cmp	r3, r2
 8004498:	db01      	blt.n	800449e <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 800449a:	2309      	movs	r3, #9
 800449c:	e010      	b.n	80044c0 <OD_read_1003+0xd4>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68b8      	ldr	r0, [r7, #8]
 80044ae:	4619      	mov	r1, r3
 80044b0:	f7ff ff14 	bl	80042dc <CO_setUint32>

#if (C2000_PORT != 0)
        *countRead = 4;
#else
        *countRead = sizeof(uint32_t);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2204      	movs	r2, #4
 80044b8:	601a      	str	r2, [r3, #0]
#endif
        return ODR_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	e000      	b.n	80044c0 <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 80044be:	2319      	movs	r3, #25
 80044c0:	b25b      	sxtb	r3, r3
    }
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop

080044cc <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00c      	beq.n	80044fa <OD_write_1003+0x2e>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	7c5b      	ldrb	r3, [r3, #17]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d108      	bne.n	80044fa <OD_write_1003+0x2e>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <OD_write_1003+0x2e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d102      	bne.n	80044fa <OD_write_1003+0x2e>
        || countWritten == NULL)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 80044fa:	2309      	movs	r3, #9
 80044fc:	e012      	b.n	8004524 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 80044fe:	68b8      	ldr	r0, [r7, #8]
 8004500:	f7ff fece 	bl	80042a0 <CO_getUint8>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 800450a:	230f      	movs	r3, #15
 800450c:	e00a      	b.n	8004524 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	b25b      	sxtb	r3, r3
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop

08004530 <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01b      	beq.n	8004580 <CO_EM_init+0x50>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d018      	beq.n	8004580 <CO_EM_init+0x50>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <CO_EM_init+0x2c>
 8004554:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d811      	bhi.n	8004580 <CO_EM_init+0x50>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00e      	beq.n	8004580 <CO_EM_init+0x50>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00b      	beq.n	8004580 <CO_EM_init+0x50>
        || nodeId < 1 || nodeId > 127
 8004568:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <CO_EM_init+0x50>
 8004570:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004574:	b25b      	sxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	db02      	blt.n	8004580 <CO_EM_init+0x50>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004580:	23ff      	movs	r3, #255	; 0xff
 8004582:	e0a3      	b.n	80046cc <CO_EM_init+0x19c>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	2100      	movs	r1, #0
 8004588:	2250      	movs	r2, #80	; 0x50
 800458a:	f005 ff91 	bl	800a4b0 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	2100      	movs	r1, #0
 8004598:	2201      	movs	r2, #1
 800459a:	2300      	movs	r3, #0
 800459c:	f001 faa4 	bl	8005ae8 <OD_getPtr>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <CO_EM_init+0x96>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 80045ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <CO_EM_init+0x92>
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff fea1 	bl	80042fc <OD_getIndex>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c0:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80045c2:	23f4      	movs	r3, #244	; 0xf4
 80045c4:	e082      	b.n	80046cc <CO_EM_init+0x19c>
    }
    *em->errorRegister = 0;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80045da:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80045dc:	f107 0310 	add.w	r3, r7, #16
 80045e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045e2:	2100      	movs	r1, #0
 80045e4:	461a      	mov	r2, r3
 80045e6:	2301      	movs	r3, #1
 80045e8:	f7ff feb0 	bl	800434c <OD_get_u32>
 80045ec:	4603      	mov	r3, r0
 80045ee:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80045f0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <CO_EM_init+0xd2>
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <CO_EM_init+0x1a8>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00f      	beq.n	8004622 <CO_EM_init+0xf2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	2b00      	cmp	r3, #0
 8004606:	d006      	beq.n	8004616 <CO_EM_init+0xe6>
 8004608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800460a:	f7ff fe77 	bl	80042fc <OD_getIndex>
 800460e:	4603      	mov	r3, r0
 8004610:	461a      	mov	r2, r3
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 8004616:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <CO_EM_init+0xf2>
            return CO_ERROR_OD_PARAMETERS;
 800461e:	23f4      	movs	r3, #244	; 0xf4
 8004620:	e054      	b.n	80046cc <CO_EM_init+0x19c>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 8004622:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004626:	b29b      	uxth	r3, r3
 8004628:	3380      	adds	r3, #128	; 0x80
 800462a:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	43db      	mvns	r3, r3
 8004630:	0fdb      	lsrs	r3, r3, #31
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4a26      	ldr	r2, [pc, #152]	; (80046dc <CO_EM_init+0x1ac>)
 8004644:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <CO_EM_init+0x1b0>)
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	3330      	adds	r3, #48	; 0x30
 8004650:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004652:	4619      	mov	r1, r3
 8004654:	f7ff fe64 	bl	8004320 <OD_extension_init>
 8004658:	4603      	mov	r3, r0
 800465a:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800465c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <CO_EM_init+0x14c>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	2b00      	cmp	r3, #0
 8004668:	d006      	beq.n	8004678 <CO_EM_init+0x148>
 800466a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800466c:	f7ff fe46 	bl	80042fc <OD_getIndex>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004676:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004678:	23f4      	movs	r3, #244	; 0xf4
 800467a:	e027      	b.n	80046cc <CO_EM_init+0x19c>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 8004686:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004688:	8aba      	ldrh	r2, [r7, #20]
 800468a:	2308      	movs	r3, #8
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2300      	movs	r3, #0
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	68b8      	ldr	r0, [r7, #8]
 8004694:	2300      	movs	r3, #0
 8004696:	f005 facf 	bl	8009c38 <CO_CANtxBufferInit>
 800469a:	4602      	mov	r2, r0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <CO_EM_init+0x17c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80046a8:	23ff      	movs	r3, #255	; 0xff
 80046aa:	e00f      	b.n	80046cc <CO_EM_init+0x19c>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a0b      	ldr	r2, [pc, #44]	; (80046e4 <CO_EM_init+0x1b4>)
 80046b6:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a0b      	ldr	r2, [pc, #44]	; (80046e8 <CO_EM_init+0x1b8>)
 80046bc:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3340      	adds	r3, #64	; 0x40
 80046c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046c4:	4619      	mov	r1, r3
 80046c6:	f7ff fe2b 	bl	8004320 <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	b25b      	sxtb	r3, r3
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	7ffff800 	.word	0x7ffff800
 80046dc:	08004379 	.word	0x08004379
 80046e0:	0800563d 	.word	0x0800563d
 80046e4:	080043ed 	.word	0x080043ed
 80046e8:	080044cd 	.word	0x080044cd

080046ec <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	8a5b      	ldrh	r3, [r3, #18]
 8004700:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8a1b      	ldrh	r3, [r3, #16]
 8004706:	8aba      	ldrh	r2, [r7, #20]
 8004708:	429a      	cmp	r2, r3
 800470a:	f000 80a9 	beq.w	8004860 <CO_EM_process+0x174>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8a1a      	ldrh	r2, [r3, #16]
 8004712:	8abb      	ldrh	r3, [r7, #20]
 8004714:	4053      	eors	r3, r2
 8004716:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8aba      	ldrh	r2, [r7, #20]
 800471c:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 800471e:	8a7a      	ldrh	r2, [r7, #18]
 8004720:	f240 1301 	movw	r3, #257	; 0x101
 8004724:	4013      	ands	r3, r2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d011      	beq.n	800474e <CO_EM_process+0x62>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 800472a:	8aba      	ldrh	r2, [r7, #20]
 800472c:	f240 1301 	movw	r3, #257	; 0x101
 8004730:	4013      	ands	r3, r2
    if (CANerrSt != em->CANerrorStatusOld) {
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
        em->CANerrorStatusOld = CANerrSt;

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
            CO_error(em,
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	2300      	movs	r3, #0
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	4611      	mov	r1, r2
 8004746:	2201      	movs	r2, #1
 8004748:	2300      	movs	r3, #0
 800474a:	f000 f91f 	bl	800498c <CO_error>
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 800474e:	8a7b      	ldrh	r3, [r7, #18]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d011      	beq.n	800477c <CO_EM_process+0x90>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 8004758:	8abb      	ldrh	r3, [r7, #20]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf14      	ite	ne
 8004762:	2301      	movne	r3, #1
 8004764:	2300      	moveq	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	4611      	mov	r1, r2
 8004772:	2207      	movs	r2, #7
 8004774:	f248 1320 	movw	r3, #33056	; 0x8120
 8004778:	f000 f908 	bl	800498c <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 800477c:	8a7b      	ldrh	r3, [r7, #18]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d011      	beq.n	80047aa <CO_EM_process+0xbe>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8004786:	8abb      	ldrh	r3, [r7, #20]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	2300      	movs	r3, #0
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	4611      	mov	r1, r2
 80047a0:	2212      	movs	r2, #18
 80047a2:	f248 1340 	movw	r3, #33088	; 0x8140
 80047a6:	f000 f8f1 	bl	800498c <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 80047aa:	8a7b      	ldrh	r3, [r7, #18]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d011      	beq.n	80047d8 <CO_EM_process+0xec>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 80047b4:	8abb      	ldrh	r3, [r7, #20]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	2300      	movs	r3, #0
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	4611      	mov	r1, r2
 80047ce:	2214      	movs	r2, #20
 80047d0:	f248 1310 	movw	r3, #33040	; 0x8110
 80047d4:	f000 f8da 	bl	800498c <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 80047d8:	8a7b      	ldrh	r3, [r7, #18]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d011      	beq.n	8004806 <CO_EM_process+0x11a>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 80047e2:	8abb      	ldrh	r3, [r7, #20]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	2300      	movs	r3, #0
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	4611      	mov	r1, r2
 80047fc:	2215      	movs	r2, #21
 80047fe:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8004802:	f000 f8c3 	bl	800498c <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 8004806:	8a7b      	ldrh	r3, [r7, #18]
 8004808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800480c:	2b00      	cmp	r3, #0
 800480e:	d011      	beq.n	8004834 <CO_EM_process+0x148>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8004810:	8abb      	ldrh	r3, [r7, #20]
 8004812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004816:	2b00      	cmp	r3, #0
 8004818:	bf14      	ite	ne
 800481a:	2301      	movne	r3, #1
 800481c:	2300      	moveq	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	2300      	movs	r3, #0
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	4611      	mov	r1, r2
 800482a:	2206      	movs	r2, #6
 800482c:	f248 1320 	movw	r3, #33056	; 0x8120
 8004830:	f000 f8ac 	bl	800498c <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8004834:	8a7b      	ldrh	r3, [r7, #18]
 8004836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800483a:	2b00      	cmp	r3, #0
 800483c:	d010      	beq.n	8004860 <CO_EM_process+0x174>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 800483e:	8abb      	ldrh	r3, [r7, #20]
 8004840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	2300      	movs	r3, #0
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	4611      	mov	r1, r2
 8004858:	2213      	movs	r2, #19
 800485a:	2313      	movs	r3, #19
 800485c:	f000 f896 	bl	800498c <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	795b      	ldrb	r3, [r3, #5]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <CO_EM_process+0x188>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	789b      	ldrb	r3, [r3, #2]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d103      	bne.n	8004884 <CO_EM_process+0x198>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	78db      	ldrb	r3, [r3, #3]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <CO_EM_process+0x1a0>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	f043 0310 	orr.w	r3, r3, #16
 800488a:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	7a1b      	ldrb	r3, [r3, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d103      	bne.n	800489c <CO_EM_process+0x1b0>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	7a5b      	ldrb	r3, [r3, #9]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <CO_EM_process+0x1b8>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048a2:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	7dfa      	ldrb	r2, [r7, #23]
 80048aa:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d100      	bne.n	80048b4 <CO_EM_process+0x1c8>
        return;
 80048b2:	e068      	b.n	8004986 <CO_EM_process+0x29a>
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	7f1b      	ldrb	r3, [r3, #28]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d963      	bls.n	8004984 <CO_EM_process+0x298>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	7f9b      	ldrb	r3, [r3, #30]
 80048c0:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	7f5b      	ldrb	r3, [r3, #29]
 80048c6:	7c7a      	ldrb	r2, [r7, #17]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d05b      	beq.n	8004984 <CO_EM_process+0x298>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d156      	bne.n	8004984 <CO_EM_process+0x298>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	7c7b      	ldrb	r3, [r7, #17]
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	6991      	ldr	r1, [r2, #24]
 80048e4:	7c7a      	ldrb	r2, [r7, #17]
 80048e6:	00d2      	lsls	r2, r2, #3
 80048e8:	440a      	add	r2, r1
 80048ea:	6811      	ldr	r1, [r2, #0]
 80048ec:	7dfa      	ldrb	r2, [r7, #23]
 80048ee:	0412      	lsls	r2, r2, #16
 80048f0:	430a      	orrs	r2, r1
 80048f2:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	1d59      	adds	r1, r3, #5
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	7c7b      	ldrb	r3, [r7, #17]
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	4608      	mov	r0, r1
 8004906:	4619      	mov	r1, r3
 8004908:	2208      	movs	r2, #8
 800490a:	f005 fdab 	bl	800a464 <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	f005 f9c3 	bl	8009ca4 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 800491e:	7c7b      	ldrb	r3, [r7, #17]
 8004920:	3301      	adds	r3, #1
 8004922:	747b      	strb	r3, [r7, #17]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	7f1b      	ldrb	r3, [r3, #28]
 8004928:	7c7a      	ldrb	r2, [r7, #17]
 800492a:	429a      	cmp	r2, r3
 800492c:	d201      	bcs.n	8004932 <CO_EM_process+0x246>
 800492e:	7c7a      	ldrb	r2, [r7, #17]
 8004930:	e000      	b.n	8004934 <CO_EM_process+0x248>
 8004932:	2200      	movs	r2, #0
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	7fdb      	ldrb	r3, [r3, #31]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d10c      	bne.n	800495a <CO_EM_process+0x26e>
                em->fifoOverflow = 2;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2202      	movs	r2, #2
 8004944:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 8004946:	2300      	movs	r3, #0
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	2101      	movs	r1, #1
 800494e:	2220      	movs	r2, #32
 8004950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004954:	f000 f81a 	bl	800498c <CO_error>
 8004958:	e014      	b.n	8004984 <CO_EM_process+0x298>
                               CO_EMC_GENERIC, 0);
            }
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	7fdb      	ldrb	r3, [r3, #31]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d110      	bne.n	8004984 <CO_EM_process+0x298>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	7f9a      	ldrb	r2, [r3, #30]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	7f5b      	ldrb	r3, [r3, #29]
 800496a:	429a      	cmp	r2, r3
 800496c:	d10a      	bne.n	8004984 <CO_EM_process+0x298>
                em->fifoOverflow = 0;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8004974:	2300      	movs	r3, #0
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	2100      	movs	r1, #0
 800497c:	2220      	movs	r2, #32
 800497e:	2300      	movs	r3, #0
 8004980:	f000 f804 	bl	800498c <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8004984:	bf00      	nop
}
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 800498c:	b480      	push	{r7}
 800498e:	b08b      	sub	sp, #44	; 0x2c
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	4611      	mov	r1, r2
 8004998:	461a      	mov	r2, r3
 800499a:	460b      	mov	r3, r1
 800499c:	71fb      	strb	r3, [r7, #7]
 800499e:	4613      	mov	r3, r2
 80049a0:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d100      	bne.n	80049aa <CO_error+0x1e>
 80049a8:	e092      	b.n	8004ad0 <CO_error+0x144>

    uint8_t index = errorBit >> 3;
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	08db      	lsrs	r3, r3, #3
 80049ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	2201      	movs	r2, #1
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 80049c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049c6:	2b09      	cmp	r3, #9
 80049c8:	d90a      	bls.n	80049e0 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 80049ca:	2305      	movs	r3, #5
 80049cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 80049d0:	2301      	movs	r3, #1
 80049d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 80049d6:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80049da:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	633b      	str	r3, [r7, #48]	; 0x30
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 80049e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	623b      	str	r3, [r7, #32]
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049f2:	4013      	ands	r3, r2
 80049f4:	77fb      	strb	r3, [r7, #31]

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <CO_error+0x78>
        if (errorStatusBitMasked != 0) {
 80049fc:	7ffb      	ldrb	r3, [r7, #31]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d006      	beq.n	8004a10 <CO_error+0x84>
            return;
 8004a02:	e065      	b.n	8004ad0 <CO_error+0x144>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8004a04:	7ffb      	ldrb	r3, [r7, #31]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d100      	bne.n	8004a0c <CO_error+0x80>
            return;
 8004a0a:	e061      	b.n	8004ad0 <CO_error+0x144>
        }
        errorCode = CO_EMC_NO_ERROR;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	061a      	lsls	r2, r3, #24
 8004a14:	88bb      	ldrh	r3, [r7, #4]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	617b      	str	r3, [r7, #20]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
    if (setError) *errorStatusBits |= bitmask;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <CO_error+0xaa>
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	781a      	ldrb	r2, [r3, #0]
 8004a28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e00b      	b.n	8004a4e <CO_error+0xc2>
    else          *errorStatusBits &= ~bitmask;
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a40:	43db      	mvns	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	4013      	ands	r3, r2
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	7f1b      	ldrb	r3, [r3, #28]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d93c      	bls.n	8004ad0 <CO_error+0x144>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	7f5b      	ldrb	r3, [r3, #29]
 8004a5a:	74fb      	strb	r3, [r7, #19]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8004a5c:	7cfb      	ldrb	r3, [r7, #19]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (fifoWrPtrNext >= em->fifoSize) {
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	7f1b      	ldrb	r3, [r3, #28]
 8004a68:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d302      	bcc.n	8004a76 <CO_error+0xea>
            fifoWrPtrNext = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	7f9b      	ldrb	r3, [r3, #30]
 8004a7a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d103      	bne.n	8004a8a <CO_error+0xfe>
            em->fifoOverflow = 1;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	77da      	strb	r2, [r3, #31]
 8004a88:	e022      	b.n	8004ad0 <CO_error+0x144>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	7cfb      	ldrb	r3, [r7, #19]
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	4413      	add	r3, r2
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	7cfb      	ldrb	r3, [r7, #19]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004aac:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	7f1b      	ldrb	r3, [r3, #28]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	429a      	cmp	r2, r3
 8004abe:	da07      	bge.n	8004ad0 <CO_error+0x144>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f883 2020 	strb.w	r2, [r3, #32]
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8004ad0:	372c      	adds	r7, #44	; 0x2c
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop

08004adc <CO_getUint32>:
#else
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
#endif
}
/** Get uint32_t value from memory buffer, see @ref CO_getUint8 */
static inline uint32_t CO_getUint32(const void *buf) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 4; i++) {
        value += ((uint32_t)(pBuf8[i])) << (8 * i);
    }
    return value;
#else
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	4618      	mov	r0, r3
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	2204      	movs	r2, #4
 8004aee:	f005 fcc4 	bl	800a47a <memmove>
 8004af2:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <OD_getIndex+0x14>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	e000      	b.n	8004b12 <OD_getIndex+0x16>
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop

08004b20 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <OD_extension_init+0x14>
 8004b30:	2305      	movs	r3, #5
 8004b32:	e003      	b.n	8004b3c <OD_extension_init+0x1c>
    entry->extension = extension;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	b25b      	sxtb	r3, r3
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop

08004b4c <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 4, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004b5c:	7afa      	ldrb	r2, [r7, #11]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	4611      	mov	r1, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	2304      	movs	r3, #4
 8004b6a:	f000 ff4f 	bl	8005a0c <OD_get_value>
 8004b6e:	4603      	mov	r3, r0
#endif
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	791b      	ldrb	r3, [r3, #4]
 8004b8a:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	3305      	adds	r3, #5
 8004b90:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8004b92:	7cfb      	ldrb	r3, [r7, #19]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8004ba8:	371c      	adds	r7, #28
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop

08004bb4 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d012      	beq.n	8004bf4 <OD_write_1016+0x40>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00f      	beq.n	8004bf4 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	7c5b      	ldrb	r3, [r3, #17]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	7c5a      	ldrb	r2, [r3, #17]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	7a1b      	ldrb	r3, [r3, #8]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d805      	bhi.n	8004bf4 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d102      	bne.n	8004bf4 <OD_write_1016+0x40>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8004bf4:	2309      	movs	r3, #9
 8004bf6:	e020      	b.n	8004c3a <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8004bf8:	68b8      	ldr	r0, [r7, #8]
 8004bfa:	f7ff ff6f 	bl	8004adc <CO_getUint32>
 8004bfe:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	0c1b      	lsrs	r3, r3, #16
 8004c04:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	7c5b      	ldrb	r3, [r3, #17]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b2d9      	uxtb	r1, r3
 8004c12:	7dfa      	ldrb	r2, [r7, #23]
 8004c14:	8abb      	ldrh	r3, [r7, #20]
 8004c16:	69f8      	ldr	r0, [r7, #28]
 8004c18:	f000 f8bc 	bl	8004d94 <CO_HBconsumer_initEntry>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8004c20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8004c28:	2308      	movs	r3, #8
 8004c2a:	e006      	b.n	8004c3a <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	f000 fd02 	bl	800563c <OD_writeOriginal>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	b25b      	sxtb	r3, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00b      	beq.n	8004c70 <CO_HBconsumer_init+0x2c>
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d008      	beq.n	8004c70 <CO_HBconsumer_init+0x2c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <CO_HBconsumer_init+0x2c>
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <CO_HBconsumer_init+0x30>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004c70:	23ff      	movs	r3, #255	; 0xff
 8004c72:	e086      	b.n	8004d82 <CO_HBconsumer_init+0x13e>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	2100      	movs	r1, #0
 8004c78:	2230      	movs	r2, #48	; 0x30
 8004c7a:	f005 fc19 	bl	800a4b0 <memset>
    HBcons->em = em;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c8e:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8004c94:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8004c96:	78fa      	ldrb	r2, [r7, #3]
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	789b      	ldrb	r3, [r3, #2]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	bfa8      	it	ge
 8004ca2:	4613      	movge	r3, r2
    HBcons->monitoredNodes = monitoredNodes;
    HBcons->CANdevRx = CANdevRx;
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	721a      	strb	r2, [r3, #8]
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8004caa:	2300      	movs	r3, #0
 8004cac:	77fb      	strb	r3, [r7, #31]
 8004cae:	e041      	b.n	8004d34 <CO_HBconsumer_init+0xf0>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8004cb0:	7ffb      	ldrb	r3, [r7, #31]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	f107 0314 	add.w	r3, r7, #20
 8004cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f7ff ff43 	bl	8004b4c <OD_get_u32>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8004cca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d006      	beq.n	8004ce6 <CO_HBconsumer_init+0xa2>
 8004cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cda:	f7ff ff0f 	bl	8004afc <OD_getIndex>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce4:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8004ce6:	23f4      	movs	r3, #244	; 0xf4
 8004ce8:	e04b      	b.n	8004d82 <CO_HBconsumer_init+0x13e>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8004cf4:	7ff9      	ldrb	r1, [r7, #31]
 8004cf6:	7f7a      	ldrb	r2, [r7, #29]
 8004cf8:	8b7b      	ldrh	r3, [r7, #26]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f84a 	bl	8004d94 <CO_HBconsumer_initEntry>
 8004d00:	4603      	mov	r3, r0
 8004d02:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8004d04:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d010      	beq.n	8004d2e <CO_HBconsumer_init+0xea>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d006      	beq.n	8004d20 <CO_HBconsumer_init+0xdc>
 8004d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d14:	f7ff fef2 	bl	8004afc <OD_getIndex>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8004d20:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8004d24:	f113 0f0c 	cmn.w	r3, #12
 8004d28:	d001      	beq.n	8004d2e <CO_HBconsumer_init+0xea>
                return ret;
 8004d2a:	7e7b      	ldrb	r3, [r7, #25]
 8004d2c:	e029      	b.n	8004d82 <CO_HBconsumer_init+0x13e>
    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8004d2e:	7ffb      	ldrb	r3, [r7, #31]
 8004d30:	3301      	adds	r3, #1
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	7a1b      	ldrb	r3, [r3, #8]
 8004d38:	7ffa      	ldrb	r2, [r7, #31]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d3b8      	bcc.n	8004cb0 <CO_HBconsumer_init+0x6c>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <CO_HBconsumer_init+0x148>)
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4a10      	ldr	r2, [pc, #64]	; (8004d90 <CO_HBconsumer_init+0x14c>)
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3320      	adds	r3, #32
 8004d54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d56:	4619      	mov	r1, r3
 8004d58:	f7ff fee2 	bl	8004b20 <OD_extension_init>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8004d60:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <CO_HBconsumer_init+0x13c>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d006      	beq.n	8004d7c <CO_HBconsumer_init+0x138>
 8004d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d70:	f7ff fec4 	bl	8004afc <OD_getIndex>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8004d7c:	23f4      	movs	r3, #244	; 0xf4
 8004d7e:	e000      	b.n	8004d82 <CO_HBconsumer_init+0x13e>
    }
#endif

    return CO_ERROR_NO;
 8004d80:	2300      	movs	r3, #0
 8004d82:	b25b      	sxtb	r3, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	0800558d 	.word	0x0800558d
 8004d90:	08004bb5 	.word	0x08004bb5

08004d94 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8004d94:	b590      	push	{r4, r7, lr}
 8004d96:	b08d      	sub	sp, #52	; 0x34
 8004d98:	af04      	add	r7, sp, #16
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	461a      	mov	r2, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	70fb      	strb	r3, [r7, #3]
 8004da6:	460b      	mov	r3, r1
 8004da8:	70bb      	strb	r3, [r7, #2]
 8004daa:	4613      	mov	r3, r2
 8004dac:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8004dae:	2300      	movs	r3, #0
 8004db0:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <CO_HBconsumer_initEntry+0x2e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	7a1b      	ldrb	r3, [r3, #8]
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d301      	bcc.n	8004dc6 <CO_HBconsumer_initEntry+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004dc2:	23ff      	movs	r3, #255	; 0xff
 8004dc4:	e077      	b.n	8004eb6 <CO_HBconsumer_initEntry+0x122>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 8004dc6:	883b      	ldrh	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d024      	beq.n	8004e16 <CO_HBconsumer_initEntry+0x82>
 8004dcc:	78bb      	ldrb	r3, [r7, #2]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d021      	beq.n	8004e16 <CO_HBconsumer_initEntry+0x82>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	77bb      	strb	r3, [r7, #30]
 8004dd6:	e019      	b.n	8004e0c <CO_HBconsumer_initEntry+0x78>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	7fbb      	ldrb	r3, [r7, #30]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	4413      	add	r3, r2
 8004de2:	f107 0408 	add.w	r4, r7, #8
 8004de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	7fbb      	ldrb	r3, [r7, #30]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d008      	beq.n	8004e06 <CO_HBconsumer_initEntry+0x72>
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <CO_HBconsumer_initEntry+0x72>
 8004dfa:	7a3b      	ldrb	r3, [r7, #8]
 8004dfc:	78ba      	ldrb	r2, [r7, #2]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d101      	bne.n	8004e06 <CO_HBconsumer_initEntry+0x72>
                ret = CO_ERROR_OD_PARAMETERS;
 8004e02:	23f4      	movs	r3, #244	; 0xf4
 8004e04:	77fb      	strb	r3, [r7, #31]
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8004e06:	7fbb      	ldrb	r3, [r7, #30]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	77bb      	strb	r3, [r7, #30]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	7a1b      	ldrb	r3, [r3, #8]
 8004e10:	7fba      	ldrb	r2, [r7, #30]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d3e0      	bcc.n	8004dd8 <CO_HBconsumer_initEntry+0x44>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8004e16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d14a      	bne.n	8004eb4 <CO_HBconsumer_initEntry+0x120>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	4413      	add	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	78ba      	ldrb	r2, [r7, #2]
 8004e2e:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8004e30:	883b      	ldrh	r3, [r7, #0]
 8004e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	22ff      	movs	r2, #255	; 0xff
 8004e44:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <CO_HBconsumer_initEntry+0xdc>
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d009      	beq.n	8004e70 <CO_HBconsumer_initEntry+0xdc>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8004e66:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	709a      	strb	r2, [r3, #2]
 8004e6e:	e007      	b.n	8004e80 <CO_HBconsumer_initEntry+0xec>
        }
        else {
            COB_ID = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	2200      	movs	r2, #0
 8004e78:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8b9a      	ldrh	r2, [r3, #28]
            monitoredNode->time_us = 0;
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	b299      	uxth	r1, r3
                                 HBcons->CANdevRxIdxStart + idx,
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685a      	ldr	r2, [r3, #4]
            monitoredNode->time_us = 0;
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8004e94:	78fb      	ldrb	r3, [r7, #3]
                                 HBcons->CANdevRxIdxStart + idx,
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8004e96:	011b      	lsls	r3, r3, #4
            monitoredNode->time_us = 0;
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8004e98:	4413      	add	r3, r2
 8004e9a:	8bbc      	ldrh	r4, [r7, #28]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	9200      	str	r2, [sp, #0]
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <CO_HBconsumer_initEntry+0x12c>)
 8004ea4:	9302      	str	r3, [sp, #8]
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004eac:	f004 fe72 	bl	8009b94 <CO_CANrxBufferInit>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	77fb      	strb	r3, [r7, #31]
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
                                 CO_HBcons_receive);
    }
    return ret;
 8004eb4:	7ffb      	ldrb	r3, [r7, #31]
 8004eb6:	b25b      	sxtb	r3, r3
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3724      	adds	r7, #36	; 0x24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}
 8004ec0:	08004b79 	.word	0x08004b79

08004ec4 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	; 0x38
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d077      	beq.n	8004fd0 <CO_HBconsumer_process+0x10c>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d073      	beq.n	8004fd0 <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004eee:	e068      	b.n	8004fc2 <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	4413      	add	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	789b      	ldrb	r3, [r3, #2]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d100      	bne.n	8004f0c <CO_HBconsumer_process+0x48>
                /* continue, if node is not monitored */
                continue;
 8004f0a:	e055      	b.n	8004fb8 <CO_HBconsumer_process+0xf4>
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d022      	beq.n	8004f5a <CO_HBconsumer_process+0x96>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d113      	bne.n	8004f44 <CO_HBconsumer_process+0x80>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	789b      	ldrb	r3, [r3, #2]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d10b      	bne.n	8004f3c <CO_HBconsumer_process+0x78>
                        CO_errorReport(HBcons->em,
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4610      	mov	r0, r2
 8004f30:	2101      	movs	r1, #1
 8004f32:	221c      	movs	r2, #28
 8004f34:	f248 1330 	movw	r3, #33072	; 0x8130
 8004f38:	f7ff fd28 	bl	800498c <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	709a      	strb	r2, [r3, #2]
 8004f42:	e007      	b.n	8004f54 <CO_HBconsumer_process+0x90>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2202      	movs	r2, #2
 8004f48:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2200      	movs	r2, #0
 8004f58:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	789b      	ldrb	r3, [r3, #2]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d11d      	bne.n	8004f9e <CO_HBconsumer_process+0xda>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	441a      	add	r2, r3
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d311      	bcc.n	8004f9e <CO_HBconsumer_process+0xda>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	4610      	mov	r0, r2
 8004f86:	2101      	movs	r1, #1
 8004f88:	221b      	movs	r2, #27
 8004f8a:	f248 1330 	movw	r3, #33072	; 0x8130
 8004f8e:	f7ff fcfd 	bl	800498c <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	22ff      	movs	r2, #255	; 0xff
 8004f96:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	789b      	ldrb	r3, [r3, #2]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d001      	beq.n	8004faa <CO_HBconsumer_process+0xe6>
                allMonitoredActiveCurrent = false;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	b25b      	sxtb	r3, r3
 8004fb0:	2b05      	cmp	r3, #5
 8004fb2:	d001      	beq.n	8004fb8 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28

    bool_t allMonitoredActiveCurrent = true;
    bool_t allMonitoredOperationalCurrent = true;

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8004fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	7a1b      	ldrb	r3, [r3, #8]
 8004fc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d390      	bcc.n	8004ef0 <CO_HBconsumer_process+0x2c>
 8004fce:	e028      	b.n	8005022 <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <CO_HBconsumer_process+0x11a>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d021      	beq.n	8005022 <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8004fde:	2300      	movs	r3, #0
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e015      	b.n	8005010 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	7ffb      	ldrb	r3, [r7, #31]
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	4413      	add	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	22ff      	movs	r2, #255	; 0xff
 8004ff4:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	789b      	ldrb	r3, [r3, #2]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2201      	movs	r2, #1
 8005008:	709a      	strb	r2, [r3, #2]
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800500a:	7ffb      	ldrb	r3, [r7, #31]
 800500c:	3301      	adds	r3, #1
 800500e:	77fb      	strb	r3, [r7, #31]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	7a1b      	ldrb	r3, [r3, #8]
 8005014:	7ffa      	ldrb	r2, [r7, #31]
 8005016:	429a      	cmp	r2, r3
 8005018:	d3e4      	bcc.n	8004fe4 <CO_HBconsumer_process+0x120>
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
            }
        }
        allMonitoredActiveCurrent = false;
 800501a:	2300      	movs	r3, #0
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 800501e:	2300      	movs	r3, #0
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d116      	bne.n	8005058 <CO_HBconsumer_process+0x194>
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	2b00      	cmp	r3, #0
 800502e:	d013      	beq.n	8005058 <CO_HBconsumer_process+0x194>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	2300      	movs	r3, #0
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4610      	mov	r0, r2
 800503a:	2100      	movs	r1, #0
 800503c:	221b      	movs	r2, #27
 800503e:	2300      	movs	r3, #0
 8005040:	f7ff fca4 	bl	800498c <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	2300      	movs	r3, #0
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	4610      	mov	r0, r2
 800504e:	2100      	movs	r1, #0
 8005050:	221c      	movs	r2, #28
 8005052:	2300      	movs	r3, #0
 8005054:	f7ff fc9a 	bl	800498c <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800505c:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005062:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	615a      	str	r2, [r3, #20]
}
 800506a:	3730      	adds	r7, #48	; 0x30
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <CO_getUint16>:
#else
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
#endif
}
/** Get uint16_t value from memory buffer, see @ref CO_getUint8 */
static inline uint16_t CO_getUint16(const void *buf) {
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 2; i++) {
        value += ((uint16_t)(pBuf8[i])) << (8 * i);
    }
    return value;
#else
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8005078:	f107 030e 	add.w	r3, r7, #14
 800507c:	4618      	mov	r0, r3
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	2202      	movs	r2, #2
 8005082:	f005 f9fa 	bl	800a47a <memmove>
 8005086:	89fb      	ldrh	r3, [r7, #14]
#endif
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <OD_getIndex+0x14>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	e000      	b.n	80050a6 <OD_getIndex+0x16>
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop

080050b4 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <OD_extension_init+0x14>
 80050c4:	2305      	movs	r3, #5
 80050c6:	e003      	b.n	80050d0 <OD_extension_init+0x1c>
    entry->extension = extension;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	b25b      	sxtb	r3, r3
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop

080050e0 <OD_get_u16>:
}

/** Get uint16_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u16(const OD_entry_t *entry, uint8_t subIndex,
                               uint16_t *val, bool_t odOrig)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	460b      	mov	r3, r1
 80050ee:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 2, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80050f0:	7afa      	ldrb	r2, [r7, #11]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	4611      	mov	r1, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	2302      	movs	r3, #2
 80050fe:	f000 fc85 	bl	8005a0c <OD_get_value>
 8005102:	4603      	mov	r3, r0
#endif
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	08db      	lsrs	r3, r3, #3
 800511c:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800511e:	78fb      	ldrb	r3, [r7, #3]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	2201      	movs	r2, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <CO_isError+0x3c>
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
    uint8_t index = errorBit >> 3;
    uint8_t bitmask = 1 << (errorBit & 0x7);

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2b09      	cmp	r3, #9
 8005136:	d807      	bhi.n	8005148 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	5cd2      	ldrb	r2, [r2, r3]
 800513e:	7bbb      	ldrb	r3, [r7, #14]
 8005140:	4013      	ands	r3, r2
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <CO_isError+0x40>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <CO_isError+0x42>
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop

0800515c <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <CO_getErrorRegister+0x1e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <CO_getErrorRegister+0x1e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	e000      	b.n	800517c <CO_getErrorRegister+0x20>
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	791b      	ldrb	r3, [r3, #4]
 8005196:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	3305      	adds	r3, #5
 800519c:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d10a      	bne.n	80051ca <CO_NMT_receive+0x42>
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d004      	beq.n	80051c4 <CO_NMT_receive+0x3c>
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	78db      	ldrb	r3, [r3, #3]
 80051be:	7bba      	ldrb	r2, [r7, #14]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d102      	bne.n	80051ca <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00c      	beq.n	8005202 <OD_write_1017+0x2e>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	7c5b      	ldrb	r3, [r3, #17]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d108      	bne.n	8005202 <OD_write_1017+0x2e>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <OD_write_1017+0x2e>
#if (C2000_PORT != 0)
        || count != 2 || countWritten == NULL
#else
        || count != sizeof(uint16_t) || countWritten == NULL
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d102      	bne.n	8005202 <OD_write_1017+0x2e>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <OD_write_1017+0x32>
#endif
    ) {
        return ODR_DEV_INCOMPAT;
 8005202:	2309      	movs	r3, #9
 8005204:	e017      	b.n	8005236 <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 800520c:	68b8      	ldr	r0, [r7, #8]
 800520e:	f7ff ff2f 	bl	8005070 <CO_getUint16>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800521a:	fb03 f202 	mul.w	r2, r3, r2
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2200      	movs	r2, #0
 8005226:	60da      	str	r2, [r3, #12]
    /* write value to the original location in the Object Dictionary */
#if (C2000_PORT != 0)
    uint16_t value = CO_getUint16(buf);
    return OD_writeOriginal(stream, &value, count, countWritten);
#else
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	68b9      	ldr	r1, [r7, #8]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f000 fa04 	bl	800563c <OD_writeOriginal>
 8005234:	4603      	mov	r3, r0
 8005236:	b25b      	sxtb	r3, r3
#endif
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af04      	add	r7, sp, #16
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800524e:	2300      	movs	r3, #0
 8005250:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <CO_NMT_init+0x30>
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <CO_NMT_init+0x30>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <CO_NMT_init+0x30>
 800526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <CO_NMT_init+0x34>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005270:	23ff      	movs	r3, #255	; 0xff
 8005272:	e094      	b.n	800539e <CO_NMT_init+0x15e>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	2100      	movs	r1, #0
 8005278:	222c      	movs	r2, #44	; 0x2c
 800527a:	f005 f919 	bl	800a4b0 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8c3a      	ldrh	r2, [r7, #32]
 8005294:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 800529c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800529e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 80052ac:	f107 0314 	add.w	r3, r7, #20
 80052b0:	68b8      	ldr	r0, [r7, #8]
 80052b2:	2100      	movs	r1, #0
 80052b4:	461a      	mov	r2, r3
 80052b6:	2301      	movs	r3, #1
 80052b8:	f7ff ff12 	bl	80050e0 <OD_get_u16>
 80052bc:	4603      	mov	r3, r0
 80052be:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80052c0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <CO_NMT_init+0xa0>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80052c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d006      	beq.n	80052dc <CO_NMT_init+0x9c>
 80052ce:	68b8      	ldr	r0, [r7, #8]
 80052d0:	f7ff fede 	bl	8005090 <OD_getIndex>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052da:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80052dc:	23f4      	movs	r3, #244	; 0xf4
 80052de:	e05e      	b.n	800539e <CO_NMT_init+0x15e>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 80052e0:	8abb      	ldrh	r3, [r7, #20]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052e8:	fb03 f202 	mul.w	r2, r3, r2
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a2b      	ldr	r2, [pc, #172]	; (80053a8 <CO_NMT_init+0x168>)
 80052fa:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a2b      	ldr	r2, [pc, #172]	; (80053ac <CO_NMT_init+0x16c>)
 8005300:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3310      	adds	r3, #16
 8005306:	68b8      	ldr	r0, [r7, #8]
 8005308:	4619      	mov	r1, r3
 800530a:	f7ff fed3 	bl	80050b4 <OD_extension_init>
 800530e:	4603      	mov	r3, r0
 8005310:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8005312:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <CO_NMT_init+0xf2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 800531a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d006      	beq.n	800532e <CO_NMT_init+0xee>
 8005320:	68b8      	ldr	r0, [r7, #8]
 8005322:	f7ff feb5 	bl	8005090 <OD_getIndex>
 8005326:	4603      	mov	r3, r0
 8005328:	461a      	mov	r2, r3
 800532a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800532c:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800532e:	23f4      	movs	r3, #244	; 0xf4
 8005330:	e035      	b.n	800539e <CO_NMT_init+0x15e>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	d903      	bls.n	8005346 <CO_NMT_init+0x106>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8005346:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8005348:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800534a:	2300      	movs	r3, #0
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	4b17      	ldr	r3, [pc, #92]	; (80053b0 <CO_NMT_init+0x170>)
 8005354:	9302      	str	r3, [sp, #8]
 8005356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005358:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800535c:	f004 fc1a 	bl	8009b94 <CO_CANrxBufferInit>
 8005360:	4603      	mov	r3, r0
 8005362:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8005364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <CO_NMT_init+0x130>
        return ret;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	e016      	b.n	800539e <CO_NMT_init+0x15e>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005374:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8005376:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8005378:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800537a:	2301      	movs	r3, #1
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	2300      	movs	r3, #0
 8005380:	9301      	str	r3, [sp, #4]
 8005382:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005384:	2300      	movs	r3, #0
 8005386:	f004 fc57 	bl	8009c38 <CO_CANtxBufferInit>
 800538a:	4602      	mov	r2, r0
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <CO_NMT_init+0x15c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005398:	23ff      	movs	r3, #255	; 0xff
 800539a:	e000      	b.n	800539e <CO_NMT_init+0x15e>
    }

    return ret;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	b25b      	sxtb	r3, r3
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	0800558d 	.word	0x0800558d
 80053ac:	080051d5 	.word	0x080051d5
 80053b0:	08005189 	.word	0x08005189

080053b4 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 80053c8:	2300      	movs	r3, #0
 80053ca:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 80053cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf0c      	ite	eq
 80053d4:	2301      	moveq	r3, #1
 80053d6:	2300      	movne	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68da      	ldr	r2, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d904      	bls.n	80053f0 <CO_NMT_process+0x3c>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	e000      	b.n	80053f2 <CO_NMT_process+0x3e>
 80053f0:	2300      	movs	r3, #0
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	60d3      	str	r3, [r2, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10e      	bne.n	800541a <CO_NMT_process+0x66>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d029      	beq.n	8005458 <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d006      	beq.n	800541a <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8005414:	b25b      	sxtb	r3, r3
 8005416:	429a      	cmp	r2, r3
 8005418:	d01e      	beq.n	8005458 <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	7ffa      	ldrb	r2, [r7, #31]
 8005420:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	4610      	mov	r0, r2
 800542c:	4619      	mov	r1, r3
 800542e:	f004 fc39 	bl	8009ca4 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8005432:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	889b      	ldrh	r3, [r3, #4]
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <CO_NMT_process+0x96>
 8005446:	2305      	movs	r3, #5
 8005448:	e000      	b.n	800544c <CO_NMT_process+0x98>
 800544a:	237f      	movs	r3, #127	; 0x7f
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e003      	b.n	8005458 <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	7ffa      	ldrb	r2, [r7, #31]
 800545c:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	789b      	ldrb	r3, [r3, #2]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d021      	beq.n	80054aa <CO_NMT_process+0xf6>
        switch (NMT->internalCommand) {
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	789b      	ldrb	r3, [r3, #2]
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d011      	beq.n	8005492 <CO_NMT_process+0xde>
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	dc04      	bgt.n	800547c <CO_NMT_process+0xc8>
 8005472:	2b01      	cmp	r3, #1
 8005474:	d007      	beq.n	8005486 <CO_NMT_process+0xd2>
 8005476:	2b02      	cmp	r3, #2
 8005478:	d008      	beq.n	800548c <CO_NMT_process+0xd8>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 800547a:	e013      	b.n	80054a4 <CO_NMT_process+0xf0>
    NMT->operatingStatePrev = NMTstateCpy;

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
        switch (NMT->internalCommand) {
 800547c:	2b81      	cmp	r3, #129	; 0x81
 800547e:	d00b      	beq.n	8005498 <CO_NMT_process+0xe4>
 8005480:	2b82      	cmp	r3, #130	; 0x82
 8005482:	d00c      	beq.n	800549e <CO_NMT_process+0xea>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 8005484:	e00e      	b.n	80054a4 <CO_NMT_process+0xf0>
    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
        switch (NMT->internalCommand) {
            case CO_NMT_ENTER_OPERATIONAL:
                NMTstateCpy = CO_NMT_OPERATIONAL;
 8005486:	2305      	movs	r3, #5
 8005488:	77fb      	strb	r3, [r7, #31]
                break;
 800548a:	e00b      	b.n	80054a4 <CO_NMT_process+0xf0>
            case CO_NMT_ENTER_STOPPED:
                NMTstateCpy = CO_NMT_STOPPED;
 800548c:	2304      	movs	r3, #4
 800548e:	77fb      	strb	r3, [r7, #31]
                break;
 8005490:	e008      	b.n	80054a4 <CO_NMT_process+0xf0>
            case CO_NMT_ENTER_PRE_OPERATIONAL:
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 8005492:	237f      	movs	r3, #127	; 0x7f
 8005494:	77fb      	strb	r3, [r7, #31]
                break;
 8005496:	e005      	b.n	80054a4 <CO_NMT_process+0xf0>
            case CO_NMT_RESET_NODE:
                resetCommand = CO_RESET_APP;
 8005498:	2302      	movs	r3, #2
 800549a:	77bb      	strb	r3, [r7, #30]
                break;
 800549c:	e002      	b.n	80054a4 <CO_NMT_process+0xf0>
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
 800549e:	2301      	movs	r3, #1
 80054a0:	77bb      	strb	r3, [r7, #30]
                break;
 80054a2:	bf00      	nop
            default:
                break;
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	889b      	ldrh	r3, [r3, #4]
 80054ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01c      	beq.n	80054f0 <CO_NMT_process+0x13c>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	4618      	mov	r0, r3
 80054bc:	2112      	movs	r1, #18
 80054be:	f7ff fe25 	bl	800510c <CO_isError>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d111      	bne.n	80054ec <CO_NMT_process+0x138>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	4618      	mov	r0, r3
 80054ce:	211b      	movs	r1, #27
 80054d0:	f7ff fe1c 	bl	800510c <CO_isError>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <CO_NMT_process+0x138>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	4618      	mov	r0, r3
 80054e0:	211c      	movs	r1, #28
 80054e2:	f7ff fe13 	bl	800510c <CO_isError>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <CO_NMT_process+0x13c>
        NMT->internalCommand = CO_NMT_NO_COMMAND;
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <CO_NMT_process+0x13e>
 80054f0:	2300      	movs	r3, #0
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80054f2:	617b      	str	r3, [r7, #20]
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	889b      	ldrh	r3, [r3, #4]
 80054f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00d      	beq.n	800551c <CO_NMT_process+0x168>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fe29 	bl	800515c <CO_getErrorRegister>
 800550a:	4603      	mov	r3, r0
 800550c:	461a      	mov	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	889b      	ldrh	r3, [r3, #4]
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <CO_NMT_process+0x168>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <CO_NMT_process+0x16a>
 800551c:	2300      	movs	r3, #0
    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 800551e:	613b      	str	r3, [r7, #16]
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 8005520:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005524:	2b05      	cmp	r3, #5
 8005526:	d110      	bne.n	800554a <CO_NMT_process+0x196>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <CO_NMT_process+0x180>
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <CO_NMT_process+0x196>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	889b      	ldrh	r3, [r3, #4]
 8005538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <CO_NMT_process+0x190>
 8005540:	2304      	movs	r3, #4
 8005542:	e000      	b.n	8005546 <CO_NMT_process+0x192>
 8005544:	237f      	movs	r3, #127	; 0x7f
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e011      	b.n	800556e <CO_NMT_process+0x1ba>
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	889b      	ldrh	r3, [r3, #4]
 800554e:	b29b      	uxth	r3, r3
 8005550:	b21b      	sxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	da0b      	bge.n	800556e <CO_NMT_process+0x1ba>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 8005556:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800555a:	2b7f      	cmp	r3, #127	; 0x7f
 800555c:	d107      	bne.n	800556e <CO_NMT_process+0x1ba>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <CO_NMT_process+0x1ba>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <CO_NMT_process+0x1ba>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 800556a:	2305      	movs	r3, #5
 800556c:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	7ffa      	ldrb	r2, [r7, #31]
 8005572:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <CO_NMT_process+0x1cc>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	7ffa      	ldrb	r2, [r7, #31]
 800557e:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 8005580:	7fbb      	ldrb	r3, [r7, #30]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3720      	adds	r7, #32
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop

0800558c <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <OD_readOriginal+0x20>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <OD_readOriginal+0x20>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80055ac:	2309      	movs	r3, #9
 80055ae:	e040      	b.n	8005632 <OD_readOriginal+0xa6>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 80055c2:	230e      	movs	r3, #14
 80055c4:	e035      	b.n	8005632 <OD_readOriginal+0xa6>
    }

    ODR_t returnCode = ODR_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <OD_readOriginal+0x4e>
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d922      	bls.n	8005620 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d301      	bcc.n	80055e8 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 80055e4:	2309      	movs	r3, #9
 80055e6:	e024      	b.n	8005632 <OD_readOriginal+0xa6>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	4413      	add	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	429a      	cmp	r2, r3
 8005602:	d90a      	bls.n	800561a <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	441a      	add	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8005614:	23ff      	movs	r3, #255	; 0xff
 8005616:	75fb      	strb	r3, [r7, #23]
 8005618:	e002      	b.n	8005620 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	60da      	str	r2, [r3, #12]
    } else {
        /* As-is for string */
        memcpy(buf, dataOrig, dataLenToCopy);
    }
#else
    memcpy(buf, dataOrig, dataLenToCopy);
 8005620:	68b8      	ldr	r0, [r7, #8]
 8005622:	69b9      	ldr	r1, [r7, #24]
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	f004 ff1d 	bl	800a464 <memcpy>
#endif

    *countRead = dataLenToCopy;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	601a      	str	r2, [r3, #0]
    return returnCode;
 8005630:	7dfb      	ldrb	r3, [r7, #23]
 8005632:	b25b      	sxtb	r3, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	3720      	adds	r7, #32
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <OD_writeOriginal+0x20>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <OD_writeOriginal+0x20>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800565c:	2309      	movs	r3, #9
 800565e:	e046      	b.n	80056ee <OD_writeOriginal+0xb2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8005672:	230e      	movs	r3, #14
 8005674:	e03b      	b.n	80056ee <OD_writeOriginal+0xb2>
    }

    ODR_t returnCode = ODR_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <OD_writeOriginal+0x4e>
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d922      	bls.n	80056d0 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	429a      	cmp	r2, r3
 8005692:	d301      	bcc.n	8005698 <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8005694:	2309      	movs	r3, #9
 8005696:	e02a      	b.n	80056ee <OD_writeOriginal+0xb2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4413      	add	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d90a      	bls.n	80056ca <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	441a      	add	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80056c4:	23ff      	movs	r3, #255	; 0xff
 80056c6:	75fb      	strb	r3, [r7, #23]
 80056c8:	e002      	b.n	80056d0 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 80056d0:	69fa      	ldr	r2, [r7, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d201      	bcs.n	80056dc <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 80056d8:	230c      	movs	r3, #12
 80056da:	e008      	b.n	80056ee <OD_writeOriginal+0xb2>
    } else {
        /* As-is for string */
        memcpy(dataOrig, buf, dataLenToCopy);
    }
#else
    memcpy(dataOrig, buf, dataLenToCopy);
 80056dc:	69b8      	ldr	r0, [r7, #24]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	f004 febf 	bl	800a464 <memcpy>
#endif

    *countWritten = dataLenToCopy;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	601a      	str	r2, [r3, #0]
    return returnCode;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	b25b      	sxtb	r3, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 8005706:	2302      	movs	r3, #2
 8005708:	b25b      	sxtb	r3, r3
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop

08005718 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 8005726:	2302      	movs	r3, #2
 8005728:	b25b      	sxtb	r3, r3
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop

08005738 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <OD_find+0x1a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <OD_find+0x1e>
        return NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	e046      	b.n	80057e4 <OD_find+0xac>
    }

    uint16_t min = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	3b01      	subs	r3, #1
 8005760:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 8005762:	e026      	b.n	80057b2 <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8005764:	8afa      	ldrh	r2, [r7, #22]
 8005766:	8abb      	ldrh	r3, [r7, #20]
 8005768:	4413      	add	r3, r2
 800576a:	105b      	asrs	r3, r3, #1
 800576c:	827b      	strh	r3, [r7, #18]
        OD_entry_t* entry = &od->list[cur];
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	8a7a      	ldrh	r2, [r7, #18]
 8005774:	4613      	mov	r3, r2
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	60fb      	str	r3, [r7, #12]

        if (index == entry->index) {
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	887a      	ldrh	r2, [r7, #2]
 8005786:	429a      	cmp	r2, r3
 8005788:	d101      	bne.n	800578e <OD_find+0x56>
            return entry;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	e02a      	b.n	80057e4 <OD_find+0xac>
        }

        if (index < entry->index) {
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	429a      	cmp	r2, r3
 8005796:	d209      	bcs.n	80057ac <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8005798:	8a7b      	ldrh	r3, [r7, #18]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <OD_find+0x6e>
 800579e:	8a7b      	ldrh	r3, [r7, #18]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	e000      	b.n	80057a8 <OD_find+0x70>
 80057a6:	8a7b      	ldrh	r3, [r7, #18]
 80057a8:	82bb      	strh	r3, [r7, #20]
 80057aa:	e002      	b.n	80057b2 <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 80057ac:	8a7b      	ldrh	r3, [r7, #18]
 80057ae:	3301      	adds	r3, #1
 80057b0:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 80057b2:	8afa      	ldrh	r2, [r7, #22]
 80057b4:	8abb      	ldrh	r3, [r7, #20]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3d4      	bcc.n	8005764 <OD_find+0x2c>
        else {
            min = cur + 1;
        }
    }

    if (min == max) {
 80057ba:	8afa      	ldrh	r2, [r7, #22]
 80057bc:	8abb      	ldrh	r3, [r7, #20]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d10f      	bne.n	80057e2 <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6859      	ldr	r1, [r3, #4]
 80057c6:	8afa      	ldrh	r2, [r7, #22]
 80057c8:	4613      	mov	r3, r2
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	60bb      	str	r3, [r7, #8]
        if (index == entry->index) {
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d101      	bne.n	80057e2 <OD_find+0xaa>
            return entry;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	e000      	b.n	80057e4 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b08d      	sub	sp, #52	; 0x34
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	460b      	mov	r3, r1
 80057fe:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <OD_getSub+0x1e>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <OD_getSub+0x22>
 800580e:	2305      	movs	r3, #5
 8005810:	e0cf      	b.n	80059b2 <OD_getSub+0x1c2>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <OD_getSub+0x2c>
 8005818:	2309      	movs	r3, #9
 800581a:	e0ca      	b.n	80059b2 <OD_getSub+0x1c2>

    OD_stream_t *stream = &io->stream;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	78db      	ldrb	r3, [r3, #3]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	2b02      	cmp	r3, #2
 800582a:	d019      	beq.n	8005860 <OD_getSub+0x70>
 800582c:	2b03      	cmp	r3, #3
 800582e:	d04b      	beq.n	80058c8 <OD_getSub+0xd8>
 8005830:	2b01      	cmp	r3, #1
 8005832:	f040 8087 	bne.w	8005944 <OD_getSub+0x154>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8005836:	7afb      	ldrb	r3, [r7, #11]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <OD_getSub+0x50>
 800583c:	230e      	movs	r3, #14
 800583e:	e0b8      	b.n	80059b2 <OD_getSub+0x1c2>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	623b      	str	r3, [r7, #32]


        stream->attribute = odo->attribute;
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	791a      	ldrb	r2, [r3, #4]
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	609a      	str	r2, [r3, #8]
        break;
 800585e:	e073      	b.n	8005948 <OD_getSub+0x158>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	789b      	ldrb	r3, [r3, #2]
 8005864:	7afa      	ldrb	r2, [r7, #11]
 8005866:	429a      	cmp	r2, r3
 8005868:	d301      	bcc.n	800586e <OD_getSub+0x7e>
 800586a:	230e      	movs	r3, #14
 800586c:	e0a1      	b.n	80059b2 <OD_getSub+0x1c2>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 8005874:	7afb      	ldrb	r3, [r7, #11]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10b      	bne.n	8005892 <OD_getSub+0xa2>
            stream->attribute = odo->attribute0;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	7a1a      	ldrb	r2, [r3, #8]
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	2201      	movs	r2, #1
 800588e:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8005890:	e05a      	b.n	8005948 <OD_getSub+0x158>
            stream->attribute = odo->attribute0;
            stream->dataOrig = odo->dataOrig0;
            stream->dataLength = 1;
        }
        else {
            stream->attribute = odo->attribute;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	7a5a      	ldrb	r2, [r3, #9]
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <OD_getSub+0xc8>
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	7afa      	ldrb	r2, [r7, #11]
 80058ac:	3a01      	subs	r2, #1
 80058ae:	fb02 f303 	mul.w	r3, r2, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4413      	add	r3, r2
 80058b6:	e000      	b.n	80058ba <OD_getSub+0xca>
 80058b8:	69bb      	ldr	r3, [r7, #24]
            stream->dataLength = 1;
        }
        else {
            stream->attribute = odo->attribute;
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
 80058ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058bc:	6013      	str	r3, [r2, #0]
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	609a      	str	r2, [r3, #8]
        }
        break;
 80058c6:	e03f      	b.n	8005948 <OD_getSub+0x158>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	617b      	str	r3, [r7, #20]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 80058d2:	2300      	movs	r3, #0
 80058d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d8:	e01c      	b.n	8005914 <OD_getSub+0x124>
            if (odoArr[i].subIndex == subIndex) {
 80058da:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80058de:	4613      	mov	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	461a      	mov	r2, r3
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	4413      	add	r3, r2
 80058ec:	791b      	ldrb	r3, [r3, #4]
 80058ee:	7afa      	ldrb	r2, [r7, #11]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d10a      	bne.n	800590a <OD_getSub+0x11a>
                odo = &odoArr[i];
 80058f4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	461a      	mov	r2, r3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	4413      	add	r3, r2
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8005908:	e00a      	b.n	8005920 <OD_getSub+0x130>
        break;
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
        CO_PROGMEM OD_obj_record_t *odo = NULL;
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 800590a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800590e:	3301      	adds	r3, #1
 8005910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	789b      	ldrb	r3, [r3, #2]
 8005918:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800591c:	429a      	cmp	r2, r3
 800591e:	d3dc      	bcc.n	80058da <OD_getSub+0xea>
            if (odoArr[i].subIndex == subIndex) {
                odo = &odoArr[i];
                break;
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <OD_getSub+0x13a>
 8005926:	230e      	movs	r3, #14
 8005928:	e043      	b.n	80059b2 <OD_getSub+0x1c2>

        stream->attribute = odo->attribute;
 800592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592c:	795a      	ldrb	r2, [r3, #5]
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	609a      	str	r2, [r3, #8]
        break;
 8005942:	e001      	b.n	8005948 <OD_getSub+0x158>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8005944:	2309      	movs	r3, #9
 8005946:	e034      	b.n	80059b2 <OD_getSub+0x1c2>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <OD_getSub+0x166>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <OD_getSub+0x17a>
        io->read = OD_readOriginal;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <OD_getSub+0x1d0>)
 800595a:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <OD_getSub+0x1d4>)
 8005960:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	2200      	movs	r2, #0
 8005966:	605a      	str	r2, [r3, #4]
 8005968:	e01c      	b.n	80059a4 <OD_getSub+0x1b4>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <OD_getSub+0x18c>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	e000      	b.n	800597e <OD_getSub+0x18e>
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <OD_getSub+0x1d8>)
        io->write = OD_writeOriginal;
        stream->object = NULL;
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6153      	str	r3, [r2, #20]
                   entry->extension->read : OD_readDisabled;
        io->write = entry->extension->write != NULL ?
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <OD_getSub+0x1a4>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	e000      	b.n	8005996 <OD_getSub+0x1a6>
 8005994:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <OD_getSub+0x1dc>)
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
                   entry->extension->read : OD_readDisabled;
        io->write = entry->extension->write != NULL ?
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6193      	str	r3, [r2, #24]
                    entry->extension->write : OD_writeDisabled;
        stream->object = entry->extension->object;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	2200      	movs	r2, #0
 80059a8:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	7afa      	ldrb	r2, [r7, #11]
 80059ae:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	b25b      	sxtb	r3, r3
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3734      	adds	r7, #52	; 0x34
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	0800558d 	.word	0x0800558d
 80059c4:	0800563d 	.word	0x0800563d
 80059c8:	080056f9 	.word	0x080056f9
 80059cc:	08005719 	.word	0x08005719

080059d0 <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 80059da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	db03      	blt.n	80059ea <OD_getSDOabCode+0x1a>
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 80059e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e6:	2b19      	cmp	r3, #25
 80059e8:	dd01      	ble.n	80059ee <OD_getSDOabCode+0x1e>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <OD_getSDOabCode+0x34>)
 80059ec:	e004      	b.n	80059f8 <OD_getSDOabCode+0x28>
 80059ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f2:	4a05      	ldr	r2, [pc, #20]	; (8005a08 <OD_getSDOabCode+0x38>)
 80059f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	06040047 	.word	0x06040047
 8005a08:	0800a850 	.word	0x0800a850

08005a0c <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b08f      	sub	sp, #60	; 0x3c
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <OD_get_value+0x1a>
 8005a22:	2309      	movs	r3, #9
 8005a24:	e026      	b.n	8005a74 <OD_get_value+0x68>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8005a26:	f107 0314 	add.w	r3, r7, #20
 8005a2a:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8005a30:	7afa      	ldrb	r2, [r7, #11]
 8005a32:	f107 0314 	add.w	r3, r7, #20
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	4611      	mov	r1, r2
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3e:	f7ff fed7 	bl	80057f0 <OD_getSub>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8005a48:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <OD_get_value+0x4a>
 8005a50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a54:	e00e      	b.n	8005a74 <OD_get_value+0x68>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <OD_get_value+0x58>
 8005a60:	230b      	movs	r3, #11
 8005a62:	e007      	b.n	8005a74 <OD_get_value+0x68>

    return io.read(stream, val, len, &countRd);
 8005a64:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005a66:	f107 0310 	add.w	r3, r7, #16
 8005a6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	47a0      	blx	r4
 8005a72:	4603      	mov	r3, r0
 8005a74:	b25b      	sxtb	r3, r3
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	373c      	adds	r7, #60	; 0x3c
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd90      	pop	{r4, r7, pc}
 8005a7e:	bf00      	nop

08005a80 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b08f      	sub	sp, #60	; 0x3c
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8005a9a:	7afa      	ldrb	r2, [r7, #11]
 8005a9c:	f107 0314 	add.w	r3, r7, #20
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa8:	f7ff fea2 	bl	80057f0 <OD_getSub>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8005ab2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <OD_set_value+0x40>
 8005aba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005abe:	e00e      	b.n	8005ade <OD_set_value+0x5e>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d001      	beq.n	8005ace <OD_set_value+0x4e>
 8005aca:	230b      	movs	r3, #11
 8005acc:	e007      	b.n	8005ade <OD_set_value+0x5e>

    return io.write(stream, val, len, &countWritten);
 8005ace:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8005ad0:	f107 0310 	add.w	r3, r7, #16
 8005ad4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	47a0      	blx	r4
 8005adc:	4603      	mov	r3, r0
 8005ade:	b25b      	sxtb	r3, r3
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	373c      	adds	r7, #60	; 0x3c
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd90      	pop	{r4, r7, pc}

08005ae8 <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08e      	sub	sp, #56	; 0x38
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	607a      	str	r2, [r7, #4]
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	460b      	mov	r3, r1
 8005af6:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8005af8:	f107 0314 	add.w	r3, r7, #20
 8005afc:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8005afe:	7afa      	ldrb	r2, [r7, #11]
 8005b00:	f107 0314 	add.w	r3, r7, #20
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	4611      	mov	r1, r2
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f7ff fe70 	bl	80057f0 <OD_getSub>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8005b16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d116      	bne.n	8005b4c <OD_getPtr+0x64>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <OD_getPtr+0x46>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d103      	bne.n	8005b36 <OD_getPtr+0x4e>
            errCopy = ODR_DEV_INCOMPAT;
 8005b2e:	2309      	movs	r3, #9
 8005b30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005b34:	e00a      	b.n	8005b4c <OD_getPtr+0x64>
        }
        else if (len != 0 && len != stream->dataLength) {
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <OD_getPtr+0x64>
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d002      	beq.n	8005b4c <OD_getPtr+0x64>
            errCopy = ODR_TYPE_MISMATCH;
 8005b46:	230b      	movs	r3, #11
 8005b48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <OD_getPtr+0x72>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005b58:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8005b5a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <OD_getPtr+0x80>
 8005b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	e000      	b.n	8005b6a <OD_getPtr+0x82>
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3738      	adds	r7, #56	; 0x38
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop

08005b74 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
#if (C2000_PORT != 0)
    uint8_t value = 0;
    value = (*((uint8_t *)buf) & 0x00FF);
    return value;
#else
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	73fb      	strb	r3, [r7, #15]
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <CO_getUint16>:
/** Get uint16_t value from memory buffer, see @ref CO_getUint8 */
static inline uint16_t CO_getUint16(const void *buf) {
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 2; i++) {
        value += ((uint16_t)(pBuf8[i])) << (8 * i);
    }
    return value;
#else
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8005b98:	f107 030e 	add.w	r3, r7, #14
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	f004 fc6a 	bl	800a47a <memmove>
 8005ba6:	89fb      	ldrh	r3, [r7, #14]
#endif
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <CO_getUint32>:
/** Get uint32_t value from memory buffer, see @ref CO_getUint8 */
static inline uint32_t CO_getUint32(const void *buf) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 4; i++) {
        value += ((uint32_t)(pBuf8[i])) << (8 * i);
    }
    return value;
#else
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8005bb8:	f107 030c 	add.w	r3, r7, #12
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	f004 fc5a 	bl	800a47a <memmove>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <CO_setUint32>:
#else
    memmove(buf, &value, sizeof(value)); return sizeof(value);
#endif
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
    for(int i = 0; i < 4; i++) {
        pBuf8[i] = (uint8_t)((value >> (8 * i)) & 0x00FF);
    }
    return 4;
#else
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8005bda:	463b      	mov	r3, r7
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4619      	mov	r1, r3
 8005be0:	2204      	movs	r2, #4
 8005be2:	f004 fc4a 	bl	800a47a <memmove>
 8005be6:	2304      	movs	r3, #4
#endif
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <OD_getIndex+0x14>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	e000      	b.n	8005c06 <OD_getIndex+0x16>
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop

08005c14 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <OD_extension_init+0x14>
 8005c24:	2305      	movs	r3, #5
 8005c26:	e003      	b.n	8005c30 <OD_extension_init+0x1c>
    entry->extension = extension;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	b25b      	sxtb	r3, r3
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop

08005c40 <OD_get_u8>:
}

/** Get uint8_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u8(const OD_entry_t *entry, uint8_t subIndex,
                              uint8_t *val, bool_t odOrig)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 1, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005c50:	7afa      	ldrb	r2, [r7, #11]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	4611      	mov	r1, r2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f7ff fed5 	bl	8005a0c <OD_get_value>
 8005c62:	4603      	mov	r3, r0
#endif
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <OD_get_u16>:

/** Get uint16_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u16(const OD_entry_t *entry, uint8_t subIndex,
                               uint16_t *val, bool_t odOrig)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	607a      	str	r2, [r7, #4]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 2, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005c7c:	7afa      	ldrb	r2, [r7, #11]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	4611      	mov	r1, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	2302      	movs	r3, #2
 8005c8a:	f7ff febf 	bl	8005a0c <OD_get_value>
 8005c8e:	4603      	mov	r3, r0
#endif
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <OD_get_u32>:

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 4, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005ca8:	7afa      	ldrb	r2, [r7, #11]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	f7ff fea9 	bl	8005a0c <OD_get_value>
 8005cba:	4603      	mov	r3, r0
#endif
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <OD_write_dummy+0x1a>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	b25b      	sxtb	r3, r3
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop

08005cf0 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d005      	beq.n	8005d10 <OD_read_dummy+0x20>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <OD_read_dummy+0x20>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8005d10:	2309      	movs	r3, #9
 8005d12:	e010      	b.n	8005d36 <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d202      	bcs.n	8005d24 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8005d24:	68b8      	ldr	r0, [r7, #8]
 8005d26:	2100      	movs	r1, #0
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	f004 fbc1 	bl	800a4b0 <memset>

    *countRead = count;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	b25b      	sxtb	r3, r3
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8005d40:	b5b0      	push	{r4, r5, r7, lr}
 8005d42:	b092      	sub	sp, #72	; 0x48
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	603b      	str	r3, [r7, #0]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	0c1b      	lsrs	r3, r3, #16
 8005d54:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if (C2000_PORT != 0)
    /* Note: C2000 uint8_t is 16-bit wide */
    uint8_t subIndex = (uint8_t) ((map >> 8) & 0x00FF);
    uint8_t mappedLengthBits = (uint8_t)(map & 0x00FF);
#else
    uint8_t subIndex = (uint8_t) (map >> 8);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
#endif
    uint8_t mappedLength = mappedLengthBits >> 3;
 8005d66:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005d6a:	08db      	lsrs	r3, r3, #3
 8005d6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8005d70:	79fa      	ldrb	r2, [r7, #7]
 8005d72:	4613      	mov	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	3310      	adds	r3, #16
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8005d82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d901      	bls.n	8005d8e <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8005d8a:	2307      	movs	r3, #7
 8005d8c:	e093      	b.n	8005eb6 <PDOconfigMap+0x176>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8005d8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005d92:	2b1f      	cmp	r3, #31
 8005d94:	d81a      	bhi.n	8005dcc <PDOconfigMap+0x8c>
 8005d96:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d116      	bne.n	8005dcc <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 8005d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da0:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 8005da2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005da4:	2100      	movs	r1, #0
 8005da6:	2214      	movs	r2, #20
 8005da8:	f004 fb82 	bl	800a4b0 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8005dac:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8005db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db2:	60da      	str	r2, [r3, #12]
 8005db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	4a40      	ldr	r2, [pc, #256]	; (8005ec0 <PDOconfigMap+0x180>)
 8005dc0:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 8005dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc4:	4a3f      	ldr	r2, [pc, #252]	; (8005ec4 <PDOconfigMap+0x184>)
 8005dc6:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e074      	b.n	8005eb6 <PDOconfigMap+0x176>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 8005dcc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005dd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	f7ff fcb0 	bl	8005738 <OD_find>
 8005dd8:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8005dda:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005dde:	f107 0314 	add.w	r3, r7, #20
 8005de2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005de4:	4611      	mov	r1, r2
 8005de6:	461a      	mov	r2, r3
 8005de8:	2300      	movs	r3, #0
 8005dea:	f7ff fd01 	bl	80057f0 <OD_getSub>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8005df4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <PDOconfigMap+0xc2>
        return odRet;
 8005dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e00:	e059      	b.n	8005eb6 <PDOconfigMap+0x176>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <PDOconfigMap+0xcc>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	e000      	b.n	8005e0e <PDOconfigMap+0xce>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8005e12:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005e16:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <PDOconfigMap+0xf8>
        || (mappedLengthBits & 0x07) != 0
 8005e22:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <PDOconfigMap+0xf8>
        || OD_IOcopy.stream.dataLength < mappedLength
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d201      	bcs.n	8005e3c <PDOconfigMap+0xfc>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8005e38:	2306      	movs	r3, #6
 8005e3a:	e03c      	b.n	8005eb6 <PDOconfigMap+0x176>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e3e:	461d      	mov	r5, r3
 8005e40:	f107 0414 	add.w	r4, r7, #20
 8005e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e48:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005e4c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8005e50:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d12a      	bne.n	8005eb4 <PDOconfigMap+0x174>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 8005e5e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005e62:	2b1f      	cmp	r3, #31
 8005e64:	d820      	bhi.n	8005ea8 <PDOconfigMap+0x168>
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01c      	beq.n	8005ea8 <PDOconfigMap+0x168>
            PDO->flagPDObyte[mapIndex] =
 8005e6e:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	6899      	ldr	r1, [r3, #8]
 8005e74:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005e78:	08db      	lsrs	r3, r3, #3
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	440b      	add	r3, r1
 8005e80:	1d19      	adds	r1, r3, #4

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
            PDO->flagPDObyte[mapIndex] =
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	323c      	adds	r2, #60	; 0x3c
 8005e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    &entry->extension->flagsPDO[subIndex >> 3];
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8005e90:	f002 0207 	and.w	r2, r2, #7
 8005e94:	2101      	movs	r1, #1
 8005e96:	fa01 f202 	lsl.w	r2, r1, r2
 8005e9a:	b2d1      	uxtb	r1, r2
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	460a      	mov	r2, r1
 8005ea2:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8005ea6:	e005      	b.n	8005eb4 <PDOconfigMap+0x174>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8005ea8:	79fa      	ldrb	r2, [r7, #7]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	323c      	adds	r2, #60	; 0x3c
 8005eae:	2100      	movs	r1, #0
 8005eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	b25b      	sxtb	r3, r3
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3748      	adds	r7, #72	; 0x48
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec0:	08005cf1 	.word	0x08005cf1
 8005ec4:	08005cc5 	.word	0x08005cc5

08005ec8 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08c      	sub	sp, #48	; 0x30
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8005ede:	f107 031b 	add.w	r3, r7, #27
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f7ff fea9 	bl	8005c40 <OD_get_u8>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8005ef4:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00b      	beq.n	8005f14 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d006      	beq.n	8005f10 <PDO_initMapping+0x48>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff fe74 	bl	8005bf0 <OD_getIndex>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	021a      	lsls	r2, r3, #8
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8005f10:	23f4      	movs	r3, #244	; 0xf4
 8005f12:	e081      	b.n	8006018 <PDO_initMapping+0x150>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1a:	e05d      	b.n	8005fd8 <PDO_initMapping+0x110>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8005f1c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005f20:	4613      	mov	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	1a9b      	subs	r3, r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	3310      	adds	r3, #16
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 8005f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f38:	3301      	adds	r3, #1
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	f107 0314 	add.w	r3, r7, #20
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4611      	mov	r1, r2
 8005f44:	461a      	mov	r2, r3
 8005f46:	2301      	movs	r3, #1
 8005f48:	f7ff fea6 	bl	8005c98 <OD_get_u32>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8005f52:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005f56:	2b0e      	cmp	r3, #14
 8005f58:	d039      	beq.n	8005fce <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 8005f5a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00e      	beq.n	8005f80 <PDO_initMapping+0xb8>
            if (errInfo != NULL) {
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d009      	beq.n	8005f7c <PDO_initMapping+0xb4>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fe41 	bl	8005bf0 <OD_getIndex>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	021a      	lsls	r2, r3, #8
 8005f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f76:	431a      	orrs	r2, r3
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8005f7c:	23f4      	movs	r3, #244	; 0xf4
 8005f7e:	e04b      	b.n	8006018 <PDO_initMapping+0x150>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 8005f80:	6979      	ldr	r1, [r7, #20]
 8005f82:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	f7ff fed7 	bl	8005d40 <PDOconfigMap>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8005f98:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00c      	beq.n	8005fba <PDO_initMapping+0xf2>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	22ff      	movs	r2, #255	; 0xff
 8005faa:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 8005fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <PDO_initMapping+0xf2>
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb8:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 8005fba:	7efb      	ldrb	r3, [r7, #27]
 8005fbc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d204      	bcs.n	8005fce <PDO_initMapping+0x106>
            pdoDataLength += OD_IO->stream.dataOffset;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fca:	4413      	add	r3, r2
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
        }
        return CO_ERROR_OD_PARAMETERS;
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8005fce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fdc:	2b07      	cmp	r3, #7
 8005fde:	d99d      	bls.n	8005f1c <PDO_initMapping+0x54>

        if (i < mappedObjectsCount) {
            pdoDataLength += OD_IO->stream.dataOffset;
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d805      	bhi.n	8005ff2 <PDO_initMapping+0x12a>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d109      	bne.n	8006000 <PDO_initMapping+0x138>
 8005fec:	7efb      	ldrb	r3, [r7, #27]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d006      	beq.n	8006000 <PDO_initMapping+0x138>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d102      	bne.n	8006000 <PDO_initMapping+0x138>
 8005ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 8006000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <PDO_initMapping+0x14e>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8006010:	7efa      	ldrb	r2, [r7, #27]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8006016:	2300      	movs	r3, #0
 8006018:	b25b      	sxtb	r3, r3
}
 800601a:	4618      	mov	r0, r3
 800601c:	3728      	adds	r7, #40	; 0x28
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop

08006024 <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	b08f      	sub	sp, #60	; 0x3c
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
    void * pBufTemp = NULL;
    uint32_t tempU32 = 0;
    uint8_t tempU8 = 0;
#endif
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d009      	beq.n	800604c <OD_write_PDO_mapping+0x28>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d006      	beq.n	800604c <OD_write_PDO_mapping+0x28>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	7c5b      	ldrb	r3, [r3, #17]
 8006048:	2b08      	cmp	r3, #8
 800604a:	d901      	bls.n	8006050 <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 800604c:	2309      	movs	r3, #9
 800604e:	e084      	b.n	800615a <OD_write_PDO_mapping+0x136>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8006056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d107      	bne.n	800606e <OD_write_PDO_mapping+0x4a>
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	7b5b      	ldrb	r3, [r3, #13]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <OD_write_PDO_mapping+0x4e>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	7c5b      	ldrb	r3, [r3, #17]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 800606e:	2302      	movs	r3, #2
 8006070:	e073      	b.n	800615a <OD_write_PDO_mapping+0x136>
    }

    if (stream->subIndex == 0) {
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	7c5b      	ldrb	r3, [r3, #17]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d14d      	bne.n	8006116 <OD_write_PDO_mapping+0xf2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 800607a:	68b8      	ldr	r0, [r7, #8]
 800607c:	f7ff fd7a 	bl	8005b74 <CO_getUint8>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        size_t pdoDataLength = 0;
 8006086:	2300      	movs	r3, #0
 8006088:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 800608a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800608e:	2b08      	cmp	r3, #8
 8006090:	d901      	bls.n	8006096 <OD_write_PDO_mapping+0x72>
            return ODR_MAP_LEN;
 8006092:	2307      	movs	r3, #7
 8006094:	e061      	b.n	800615a <OD_write_PDO_mapping+0x136>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8006096:	2300      	movs	r3, #0
 8006098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800609c:	e01e      	b.n	80060dc <OD_write_PDO_mapping+0xb8>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 800609e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	3310      	adds	r3, #16
 80060ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ae:	4413      	add	r3, r2
 80060b0:	61fb      	str	r3, [r7, #28]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	61bb      	str	r3, [r7, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	617b      	str	r3, [r7, #20]

            if (mappedLength > dataLength) {
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d901      	bls.n	80060ca <OD_write_PDO_mapping+0xa6>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 80060c6:	2306      	movs	r3, #6
 80060c8:	e047      	b.n	800615a <OD_write_PDO_mapping+0x136>
            }
            pdoDataLength += mappedLength;
 80060ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4413      	add	r3, r2
 80060d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
            return ODR_MAP_LEN;
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80060d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060d6:	3301      	adds	r3, #1
 80060d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060dc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80060e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d3da      	bcc.n	800609e <OD_write_PDO_mapping+0x7a>
                return ODR_NO_MAP;
            }
            pdoDataLength += mappedLength;
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d901      	bls.n	80060f2 <OD_write_PDO_mapping+0xce>
            return ODR_MAP_LEN;
 80060ee:	2307      	movs	r3, #7
 80060f0:	e033      	b.n	800615a <OD_write_PDO_mapping+0x136>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d105      	bne.n	8006104 <OD_write_PDO_mapping+0xe0>
 80060f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <OD_write_PDO_mapping+0xe0>
            return ODR_INVALID_VALUE;
 8006100:	230f      	movs	r3, #15
 8006102:	e02a      	b.n	800615a <OD_write_PDO_mapping+0x136>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	b2da      	uxtb	r2, r3
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006112:	735a      	strb	r2, [r3, #13]
 8006114:	e01a      	b.n	800614c <OD_write_PDO_mapping+0x128>
        tempU8 = CO_getUint8(buf);
        pBufTemp = (void *)&tempU8;
#endif
    }
    else {
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 8006116:	68b8      	ldr	r0, [r7, #8]
 8006118:	f7ff fd4a 	bl	8005bb0 <CO_getUint32>
 800611c:	4601      	mov	r1, r0
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	7c5b      	ldrb	r3, [r3, #17]
 8006122:	3b01      	subs	r3, #1
 8006124:	b2da      	uxtb	r2, r3
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006136:	4623      	mov	r3, r4
 8006138:	f7ff fe02 	bl	8005d40 <PDOconfigMap>
 800613c:	4603      	mov	r3, r0
 800613e:	74fb      	strb	r3, [r7, #19]
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 8006140:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <OD_write_PDO_mapping+0x128>
            return odRet;
 8006148:	7cfb      	ldrb	r3, [r7, #19]
 800614a:	e006      	b.n	800615a <OD_write_PDO_mapping+0x136>

    /* write value to the original location in the Object Dictionary */
#if (C2000_PORT != 0)
    return OD_writeOriginal(stream, pBufTemp, count, countWritten);
#else
    return OD_writeOriginal(stream, buf, count, countWritten);
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f7ff fa72 	bl	800563c <OD_writeOriginal>
 8006158:	4603      	mov	r3, r0
 800615a:	b25b      	sxtb	r3, r3
#endif
}
 800615c:	4618      	mov	r0, r3
 800615e:	3734      	adds	r7, #52	; 0x34
 8006160:	46bd      	mov	sp, r7
 8006162:	bd90      	pop	{r4, r7, pc}

08006164 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	68b9      	ldr	r1, [r7, #8]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f7ff fa07 	bl	800558c <OD_readOriginal>
 800617e:	4603      	mov	r3, r0
 8006180:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8006182:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d134      	bne.n	80061f4 <OD_read_PDO_commParam+0x90>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	7c5b      	ldrb	r3, [r3, #17]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d130      	bne.n	80061f4 <OD_read_PDO_commParam+0x90>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b04      	cmp	r3, #4
 8006198:	d12c      	bne.n	80061f4 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	617b      	str	r3, [r7, #20]
#if (C2000_PORT != 0)
        uint32_t COB_ID = *((uint32_t *)buf);
#else
        uint32_t COB_ID = CO_getUint32(buf);
 80061a0:	68b8      	ldr	r0, [r7, #8]
 80061a2:	f7ff fd05 	bl	8005bb0 <CO_getUint32>
 80061a6:	61f8      	str	r0, [r7, #28]
#endif
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061b0:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 80061b2:	8a7b      	ldrh	r3, [r7, #18]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d011      	beq.n	80061dc <OD_read_PDO_commParam+0x78>
 80061b8:	8a7a      	ldrh	r2, [r7, #18]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 80061c0:	4619      	mov	r1, r3
 80061c2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80061c6:	400b      	ands	r3, r1
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d107      	bne.n	80061dc <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	0c1b      	lsrs	r3, r3, #16
 80061d0:	041b      	lsls	r3, r3, #16
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	f8b2 2122 	ldrh.w	r2, [r2, #290]	; 0x122
 80061d8:	4313      	orrs	r3, r2
 80061da:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d103      	bne.n	80061ec <OD_read_PDO_commParam+0x88>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ea:	61fb      	str	r3, [r7, #28]
#if (C2000_PORT != 0)
        *((uint32_t *)buf) = COB_ID;
#else
        CO_setUint32(buf, COB_ID);
 80061ec:	68b8      	ldr	r0, [r7, #8]
 80061ee:	69f9      	ldr	r1, [r7, #28]
 80061f0:	f7ff fcee 	bl	8005bd0 <CO_setUint32>
#endif
    }

    return returnCode;
 80061f4:	7efb      	ldrb	r3, [r7, #27]
 80061f6:	b25b      	sxtb	r3, r3
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8006200:	b590      	push	{r4, r7, lr}
 8006202:	b097      	sub	sp, #92	; 0x5c
 8006204:	af02      	add	r7, sp, #8
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	637b      	str	r3, [r7, #52]	; 0x34

    if (PDO->valid && NMTisOperational
 8006212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 8112 	beq.w	8006440 <CO_RPDO_process+0x240>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 810e 	beq.w	8006440 <CO_RPDO_process+0x240>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8006224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006226:	2b00      	cmp	r3, #0
 8006228:	d105      	bne.n	8006236 <CO_RPDO_process+0x36>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 8105 	bne.w	8006440 <CO_RPDO_process+0x240>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800623c:	2b0a      	cmp	r3, #10
 800623e:	d929      	bls.n	8006294 <CO_RPDO_process+0x94>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8006246:	2b0b      	cmp	r3, #11
 8006248:	bf14      	ite	ne
 800624a:	2301      	movne	r3, #1
 800624c:	2300      	moveq	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	633b      	str	r3, [r7, #48]	; 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8006258:	2b0c      	cmp	r3, #12
 800625a:	d102      	bne.n	8006262 <CO_RPDO_process+0x62>
 800625c:	f248 2310 	movw	r3, #33296	; 0x8210
 8006260:	e001      	b.n	8006266 <CO_RPDO_process+0x66>
 8006262:	f248 2320 	movw	r3, #33312	; 0x8220
 8006266:	85fb      	strh	r3, [r7, #46]	; 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8006268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626a:	681a      	ldr	r2, [r3, #0]
                     code, PDO->dataLength);
 800626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800626e:	7b1b      	ldrb	r3, [r3, #12]
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8006270:	4619      	mov	r1, r3
 8006272:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006274:	9100      	str	r1, [sp, #0]
 8006276:	4610      	mov	r0, r2
 8006278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800627a:	2204      	movs	r2, #4
 800627c:	f7fe fb86 	bl	800498c <CO_error>
                     code, PDO->dataLength);
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	2b00      	cmp	r3, #0
 8006284:	bf14      	ite	ne
 8006286:	2301      	movne	r3, #1
 8006288:	2300      	moveq	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
                     code, PDO->dataLength);
            RPDO->receiveError = setError
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00d      	beq.n	80062c0 <CO_RPDO_process+0xc0>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <CO_RPDO_process+0xc0>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <CO_RPDO_process+0xc0>
            bufNo = 1;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 80062c0:	2300      	movs	r3, #0
 80062c2:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 80062c4:	e067      	b.n	8006396 <CO_RPDO_process+0x196>
            rpdoReceived = true;
 80062c6:	2301      	movs	r3, #1
 80062c8:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 80062ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80062ce:	332a      	adds	r3, #42	; 0x2a
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	647b      	str	r3, [r7, #68]	; 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 80062d8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3252      	adds	r2, #82	; 0x52
 80062e0:	2100      	movs	r1, #0
 80062e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80062e6:	2300      	movs	r3, #0
 80062e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ec:	e04d      	b.n	800638a <CO_RPDO_process+0x18a>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80062ee:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80062f2:	4613      	mov	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	3310      	adds	r3, #16
 80062fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062fe:	4413      	add	r3, r2
 8006300:	62bb      	str	r3, [r7, #40]	; 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	330c      	adds	r3, #12
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 8006316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006318:	2b08      	cmp	r3, #8
 800631a:	d901      	bls.n	8006320 <CO_RPDO_process+0x120>
                    ODdataLength = CO_PDO_MAX_SIZE;
 800631c:	2308      	movs	r3, #8
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 8006320:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006326:	429a      	cmp	r2, r3
 8006328:	d213      	bcs.n	8006352 <CO_RPDO_process+0x152>
                    memset(buf, 0, sizeof(buf));
 800632a:	f107 0318 	add.w	r3, r7, #24
 800632e:	4618      	mov	r0, r3
 8006330:	2100      	movs	r1, #0
 8006332:	2208      	movs	r2, #8
 8006334:	f004 f8bc 	bl	800a4b0 <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 8006338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800633c:	f107 0218 	add.w	r2, r7, #24
 8006340:	4610      	mov	r0, r2
 8006342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006344:	461a      	mov	r2, r3
 8006346:	f004 f88d 	bl	800a464 <memcpy>
                    dataOD = buf;
 800634a:	f107 0318 	add.w	r3, r7, #24
 800634e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006350:	e001      	b.n	8006356 <CO_RPDO_process+0x156>
                }
                else {
                    dataOD = dataRPDO;
 8006352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006354:	63bb      	str	r3, [r7, #56]	; 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]
                    /// TODO: handle string
                }
                OD_IO->write(&OD_IO->stream, pBufTemp,
                             ODdataLength, &countWritten);
#else
                OD_IO->write(&OD_IO->stream, dataOD,
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	699c      	ldr	r4, [r3, #24]
 8006360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006362:	f107 0314 	add.w	r3, r7, #20
 8006366:	4610      	mov	r0, r2
 8006368:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800636a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800636c:	47a0      	blx	r4
                             ODdataLength, &countWritten);
#endif
                *dataOffset = mappedLength;
 800636e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8006376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800637a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800637c:	4413      	add	r3, r2
 800637e:	647b      	str	r3, [r7, #68]	; 0x44
            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8006380:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006384:	3301      	adds	r3, #1
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638c:	7b5b      	ldrb	r3, [r3, #13]
 800638e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8006392:	429a      	cmp	r2, r3
 8006394:	d3ab      	bcc.n	80062ee <CO_RPDO_process+0xee>
            bufNo = 1;
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8006396:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3252      	adds	r2, #82	; 0x52
 800639e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d18f      	bne.n	80062c6 <CO_RPDO_process+0xc6>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d046      	beq.n	800643e <CO_RPDO_process+0x23e>
            if (rpdoReceived) {
 80063b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d018      	beq.n	80063e8 <CO_RPDO_process+0x1e8>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d90b      	bls.n	80063de <CO_RPDO_process+0x1de>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 80063c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	4610      	mov	r0, r2
 80063d4:	2100      	movs	r1, #0
 80063d6:	2217      	movs	r2, #23
 80063d8:	2300      	movs	r3, #0
 80063da:	f7fe fad7 	bl	800498c <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 80063e6:	e02a      	b.n	800643e <CO_RPDO_process+0x23e>
            }
            else if (RPDO->timeoutTimer > 0
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d025      	beq.n	800643e <CO_RPDO_process+0x23e>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80063fe:	429a      	cmp	r2, r3
 8006400:	d21d      	bcs.n	800643e <CO_RPDO_process+0x23e>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	441a      	add	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800641e:	429a      	cmp	r2, r3
 8006420:	d90d      	bls.n	800643e <CO_RPDO_process+0x23e>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 8006422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	4610      	mov	r0, r2
 8006430:	2101      	movs	r1, #1
 8006432:	2217      	movs	r2, #23
 8006434:	f248 2350 	movw	r3, #33360	; 0x8250
 8006438:	f7fe faa8 	bl	800498c <CO_error>

    if (PDO->valid && NMTisOperational
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
#endif
    ) {
 800643c:	e013      	b.n	8006466 <CO_RPDO_process+0x266>
 800643e:	e012      	b.n	8006466 <CO_RPDO_process+0x266>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 8006440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <CO_RPDO_process+0x24e>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <CO_RPDO_process+0x266>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 8006466:	3754      	adds	r7, #84	; 0x54
 8006468:	46bd      	mov	sp, r7
 800646a:	bd90      	pop	{r4, r7, pc}

0800646c <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b093      	sub	sp, #76	; 0x4c
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <OD_write_18xx+0x26>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <OD_write_18xx+0x26>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <OD_write_18xx+0x26>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b04      	cmp	r3, #4
 8006490:	d901      	bls.n	8006496 <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8006492:	2309      	movs	r3, #9
 8006494:	e133      	b.n	80066fe <OD_write_18xx+0x292>
    }

    CO_TPDO_t *TPDO = stream->object;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 800649c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 80064a0:	f107 0314 	add.w	r3, r7, #20
 80064a4:	4618      	mov	r0, r3
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	f003 ffdb 	bl	800a464 <memcpy>

    switch (stream->subIndex) {
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	7c5b      	ldrb	r3, [r3, #17]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	2b05      	cmp	r3, #5
 80064b6:	f200 8119 	bhi.w	80066ec <OD_write_18xx+0x280>
 80064ba:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <OD_write_18xx+0x54>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064d9 	.word	0x080064d9
 80064c4:	0800660f 	.word	0x0800660f
 80064c8:	08006675 	.word	0x08006675
 80064cc:	080066ed 	.word	0x080066ed
 80064d0:	080066a3 	.word	0x080066a3
 80064d4:	080066c7 	.word	0x080066c7
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 80064d8:	68b8      	ldr	r0, [r7, #8]
 80064da:	f7ff fb69 	bl	8005bb0 <CO_getUint32>
 80064de:	6338      	str	r0, [r7, #48]	; 0x30
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80064e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	43db      	mvns	r3, r3
 80064ee:	0fdb      	lsrs	r3, r3, #31
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 80064f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f6:	4b84      	ldr	r3, [pc, #528]	; (8006708 <OD_write_18xx+0x29c>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d13d      	bne.n	800657a <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <OD_write_18xx+0xac>
 8006504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <OD_write_18xx+0xac>
 800650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8006512:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006514:	429a      	cmp	r2, r3
 8006516:	d130      	bne.n	800657a <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d026      	beq.n	800656c <OD_write_18xx+0x100>
 800651e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006520:	2b7f      	cmp	r3, #127	; 0x7f
 8006522:	d92a      	bls.n	800657a <OD_write_18xx+0x10e>
 8006524:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652a:	d903      	bls.n	8006534 <OD_write_18xx+0xc8>
 800652c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800652e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8006532:	d922      	bls.n	800657a <OD_write_18xx+0x10e>
 8006534:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006536:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800653a:	d903      	bls.n	8006544 <OD_write_18xx+0xd8>
 800653c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800653e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006542:	d31a      	bcc.n	800657a <OD_write_18xx+0x10e>
 8006544:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006546:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800654a:	d903      	bls.n	8006554 <OD_write_18xx+0xe8>
 800654c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800654e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8006552:	d312      	bcc.n	800657a <OD_write_18xx+0x10e>
 8006554:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006556:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800655a:	d303      	bcc.n	8006564 <OD_write_18xx+0xf8>
 800655c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800655e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006562:	d30a      	bcc.n	800657a <OD_write_18xx+0x10e>
 8006564:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006566:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800656a:	d806      	bhi.n	800657a <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 800656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <OD_write_18xx+0x112>
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006574:	7b5b      	ldrb	r3, [r3, #13]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 800657a:	230f      	movs	r3, #15
 800657c:	e0bf      	b.n	80066fe <OD_write_18xx+0x292>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	429a      	cmp	r2, r3
 8006586:	d105      	bne.n	8006594 <OD_write_18xx+0x128>
 8006588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658a:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 800658e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006590:	429a      	cmp	r2, r3
 8006592:	d03b      	beq.n	800660c <OD_write_18xx+0x1a0>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8006594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006596:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 800659a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800659c:	429a      	cmp	r2, r3
 800659e:	d108      	bne.n	80065b2 <OD_write_18xx+0x146>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065a6:	f107 0214 	add.w	r2, r7, #20
 80065aa:	4610      	mov	r0, r2
 80065ac:	4619      	mov	r1, r3
 80065ae:	f7ff fb0f 	bl	8005bd0 <CO_setUint32>
            }
            if (!valid) {
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <OD_write_18xx+0x150>
                CAN_ID = 0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 80065bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065be:	6858      	ldr	r0, [r3, #4]
 80065c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c2:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 80065c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c8:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 80065ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065cc:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
            }
            if (!valid) {
                CAN_ID = 0;
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 80065d0:	2af0      	cmp	r2, #240	; 0xf0
 80065d2:	bf94      	ite	ls
 80065d4:	2201      	movls	r2, #1
 80065d6:	2200      	movhi	r2, #0
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	4614      	mov	r4, r2
 80065dc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	9401      	str	r4, [sp, #4]
 80065e2:	2300      	movs	r3, #0
 80065e4:	f003 fb28 	bl	8009c38 <CO_CANtxBufferInit>
 80065e8:	62b8      	str	r0, [r7, #40]	; 0x28
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <OD_write_18xx+0x188>
                return ODR_DEV_INCOMPAT;
 80065f0:	2309      	movs	r3, #9
 80065f2:	e084      	b.n	80066fe <OD_write_18xx+0x292>
            }

            TPDO->CANtxBuff = CANtxBuff;
 80065f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            PDO->valid = valid;
 80065fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006600:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8006602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006604:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006606:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        }
        break;
 800660a:	e06f      	b.n	80066ec <OD_write_18xx+0x280>
 800660c:	e06e      	b.n	80066ec <OD_write_18xx+0x280>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 800660e:	68b8      	ldr	r0, [r7, #8]
 8006610:	f7ff fab0 	bl	8005b74 <CO_getUint8>
 8006614:	4603      	mov	r3, r0
 8006616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 800661a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800661e:	2bf0      	cmp	r3, #240	; 0xf0
 8006620:	d905      	bls.n	800662e <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8006622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006626:	2bfd      	cmp	r3, #253	; 0xfd
 8006628:	d801      	bhi.n	800662e <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 800662a:	230f      	movs	r3, #15
 800662c:	e067      	b.n	80066fe <OD_write_18xx+0x292>
        }
        TPDO->CANtxBuff->syncFlag =
 800662e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006630:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8006634:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006638:	2af0      	cmp	r2, #240	; 0xf0
 800663a:	bf94      	ite	ls
 800663c:	2201      	movls	r2, #1
 800663e:	2200      	movhi	r2, #0
 8006640:	b2d2      	uxtb	r2, r2
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
        ) {
            return ODR_INVALID_VALUE;
        }
        TPDO->CANtxBuff->syncFlag =
 8006642:	615a      	str	r2, [r3, #20]
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
        TPDO->syncCounter = 255;
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	22ff      	movs	r2, #255	; 0xff
 8006648:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006652:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
        TPDO->sendRequest = true;
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	2201      	movs	r2, #1
 800665a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	2200      	movs	r2, #0
 8006662:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
        break;
 8006672:	e03b      	b.n	80066ec <OD_write_18xx+0x280>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 800667c:	230f      	movs	r3, #15
 800667e:	e03e      	b.n	80066fe <OD_write_18xx+0x292>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8006680:	68b8      	ldr	r0, [r7, #8]
 8006682:	f7ff fa85 	bl	8005b90 <CO_getUint16>
 8006686:	4603      	mov	r3, r0
 8006688:	623b      	str	r3, [r7, #32]
        TPDO->inhibitTime_us = inhibitTime * 100;
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	2264      	movs	r2, #100	; 0x64
 800668e:	fb02 f203 	mul.w	r2, r2, r3
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        break;
 80066a0:	e024      	b.n	80066ec <OD_write_18xx+0x280>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 80066a2:	68b8      	ldr	r0, [r7, #8]
 80066a4:	f7ff fa74 	bl	8005b90 <CO_getUint16>
 80066a8:	4603      	mov	r3, r0
 80066aa:	61bb      	str	r3, [r7, #24]
        TPDO->eventTime_us = eventTime * 1000;
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066b2:	fb02 f203 	mul.w	r2, r2, r3
 80066b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        TPDO->eventTimer = 0;
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        break;
 80066c4:	e012      	b.n	80066ec <OD_write_18xx+0x280>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 80066c6:	68b8      	ldr	r0, [r7, #8]
 80066c8:	f7ff fa54 	bl	8005b74 <CO_getUint8>
 80066cc:	4603      	mov	r3, r0
 80066ce:	77fb      	strb	r3, [r7, #31]

        if (PDO->valid || syncStartValue > 240) {
 80066d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d102      	bne.n	80066de <OD_write_18xx+0x272>
 80066d8:	7ffb      	ldrb	r3, [r7, #31]
 80066da:	2bf0      	cmp	r3, #240	; 0xf0
 80066dc:	d901      	bls.n	80066e2 <OD_write_18xx+0x276>
            return ODR_INVALID_VALUE;
 80066de:	230f      	movs	r3, #15
 80066e0:	e00d      	b.n	80066fe <OD_write_18xx+0x292>
        }
        TPDO->syncStartValue = syncStartValue;
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	7ffa      	ldrb	r2, [r7, #31]
 80066e6:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        break;
 80066ea:	bf00      	nop
    }
    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, pBufTemp, count, countWritten);
#else
    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80066ec:	f107 0314 	add.w	r3, r7, #20
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	4619      	mov	r1, r3
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f7fe ffa0 	bl	800563c <OD_writeOriginal>
 80066fc:	4603      	mov	r3, r0
 80066fe:	b25b      	sxtb	r3, r3
#endif
}
 8006700:	4618      	mov	r0, r3
 8006702:	3744      	adds	r7, #68	; 0x44
 8006704:	46bd      	mov	sp, r7
 8006706:	bd90      	pop	{r4, r7, pc}
 8006708:	3ffff800 	.word	0x3ffff800

0800670c <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08e      	sub	sp, #56	; 0x38
 8006710:	af02      	add	r7, sp, #8
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00e      	beq.n	8006742 <CO_TPDO_init+0x36>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <CO_TPDO_init+0x36>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d008      	beq.n	8006742 <CO_TPDO_init+0x36>
 8006730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 8006736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <CO_TPDO_init+0x36>
 800673c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <CO_TPDO_init+0x3a>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006742:	23ff      	movs	r3, #255	; 0xff
 8006744:	e152      	b.n	80069ec <CO_TPDO_init+0x2e0>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	2100      	movs	r1, #0
 800674a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800674e:	f003 feaf 	bl	800a4b0 <memset>

    /* Configure object variables */
    PDO->em = em;
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800675c:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 8006762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	f107 031c 	add.w	r3, r7, #28
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006772:	2300      	movs	r3, #0
 8006774:	f7ff fba8 	bl	8005ec8 <PDO_initMapping>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 800677e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <CO_TPDO_init+0x80>
        return ret;
 8006786:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800678a:	e12f      	b.n	80069ec <CO_TPDO_init+0x2e0>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 800678c:	23fe      	movs	r3, #254	; 0xfe
 800678e:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8006790:	f107 031b 	add.w	r3, r7, #27
 8006794:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006796:	2102      	movs	r1, #2
 8006798:	461a      	mov	r2, r3
 800679a:	2301      	movs	r3, #1
 800679c:	f7ff fa50 	bl	8005c40 <OD_get_u8>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80067a6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00d      	beq.n	80067ca <CO_TPDO_init+0xbe>
        if (errInfo != NULL) {
 80067ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 80067b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067b6:	f7ff fa1b 	bl	8005bf0 <OD_getIndex>
 80067ba:	4603      	mov	r3, r0
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	f043 0202 	orr.w	r2, r3, #2
 80067c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80067c6:	23f4      	movs	r3, #244	; 0xf4
 80067c8:	e110      	b.n	80069ec <CO_TPDO_init+0x2e0>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80067ca:	7efb      	ldrb	r3, [r7, #27]
 80067cc:	2bfd      	cmp	r3, #253	; 0xfd
 80067ce:	d804      	bhi.n	80067da <CO_TPDO_init+0xce>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 80067d0:	7efb      	ldrb	r3, [r7, #27]
 80067d2:	2bf0      	cmp	r3, #240	; 0xf0
 80067d4:	d901      	bls.n	80067da <CO_TPDO_init+0xce>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80067d6:	23fe      	movs	r3, #254	; 0xfe
 80067d8:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 80067da:	7efa      	ldrb	r2, [r7, #27]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    TPDO->sendRequest = true;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 80067ee:	f107 0314 	add.w	r3, r7, #20
 80067f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80067f4:	2101      	movs	r1, #1
 80067f6:	461a      	mov	r2, r3
 80067f8:	2301      	movs	r3, #1
 80067fa:	f7ff fa4d 	bl	8005c98 <OD_get_u32>
 80067fe:	4603      	mov	r3, r0
 8006800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8006804:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00d      	beq.n	8006828 <CO_TPDO_init+0x11c>
        if (errInfo != NULL) {
 800680c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8006812:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006814:	f7ff f9ec 	bl	8005bf0 <OD_getIndex>
 8006818:	4603      	mov	r3, r0
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	f043 0201 	orr.w	r2, r3, #1
 8006820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006822:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8006824:	23f4      	movs	r3, #244	; 0xf4
 8006826:	e0e1      	b.n	80069ec <CO_TPDO_init+0x2e0>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	43db      	mvns	r3, r3
 800682c:	0fdb      	lsrs	r3, r3, #31
 800682e:	b2db      	uxtb	r3, r3
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	b29b      	uxth	r3, r3
 8006836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800683a:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00d      	beq.n	800685e <CO_TPDO_init+0x152>
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	7b5b      	ldrb	r3, [r3, #13]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <CO_TPDO_init+0x144>
 800684a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <CO_TPDO_init+0x152>
        valid = false;
 8006850:	2300      	movs	r3, #0
 8006852:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <CO_TPDO_init+0x152>
 800685a:	2301      	movs	r3, #1
 800685c:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00f      	beq.n	8006884 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d001      	beq.n	8006872 <CO_TPDO_init+0x166>
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	e000      	b.n	8006874 <CO_TPDO_init+0x168>
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	4610      	mov	r0, r2
 8006878:	2101      	movs	r1, #1
 800687a:	221a      	movs	r2, #26
 800687c:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8006880:	f7fe f884 	bl	800498c <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <CO_TPDO_init+0x182>
        CAN_ID = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 800688e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <CO_TPDO_init+0x19a>
 8006894:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006896:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8006898:	f64f 7380 	movw	r3, #65408	; 0xff80
 800689c:	400b      	ands	r3, r1
 800689e:	429a      	cmp	r2, r3
 80068a0:	d101      	bne.n	80068a6 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 80068a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068a4:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
        CAN_ID = preDefinedCanId;
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 80068b0:	2af0      	cmp	r2, #240	; 0xf0
 80068b2:	bf94      	ite	ls
 80068b4:	2201      	movls	r2, #1
 80068b6:	2200      	movhi	r2, #0
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	4610      	mov	r0, r2
 80068bc:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80068c0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	9001      	str	r0, [sp, #4]
 80068c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80068c8:	2300      	movs	r3, #0
 80068ca:	f003 f9b5 	bl	8009c38 <CO_CANtxBufferInit>
 80068ce:	4602      	mov	r2, r0
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <CO_TPDO_init+0x1d8>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80068e0:	23ff      	movs	r3, #255	; 0xff
 80068e2:	e083      	b.n	80069ec <CO_TPDO_init+0x2e0>
    }

    PDO->valid = valid;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e8:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 80068ee:	2300      	movs	r3, #0
 80068f0:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 80068f2:	f107 0312 	add.w	r3, r7, #18
 80068f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80068f8:	2103      	movs	r1, #3
 80068fa:	461a      	mov	r2, r3
 80068fc:	2301      	movs	r3, #1
 80068fe:	f7ff f9b5 	bl	8005c6c <OD_get_u16>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8006908:	f107 0310 	add.w	r3, r7, #16
 800690c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800690e:	2105      	movs	r1, #5
 8006910:	461a      	mov	r2, r3
 8006912:	2301      	movs	r3, #1
 8006914:	f7ff f9aa 	bl	8005c6c <OD_get_u16>
 8006918:	4603      	mov	r3, r0
 800691a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->inhibitTime_us = inhibitTime * 100;
 800691e:	8a7b      	ldrh	r3, [r7, #18]
 8006920:	461a      	mov	r2, r3
 8006922:	2364      	movs	r3, #100	; 0x64
 8006924:	fb03 f302 	mul.w	r3, r3, r2
 8006928:	461a      	mov	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    TPDO->eventTime_us = eventTime * 1000;
 8006930:	8a3b      	ldrh	r3, [r7, #16]
 8006932:	461a      	mov	r2, r3
 8006934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006938:	fb03 f302 	mul.w	r3, r3, r2
 800693c:	461a      	mov	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006952:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006954:	2106      	movs	r1, #6
 8006956:	461a      	mov	r2, r3
 8006958:	2301      	movs	r3, #1
 800695a:	f7ff f971 	bl	8005c40 <OD_get_u8>
 800695e:	4603      	mov	r3, r0
 8006960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->SYNC = SYNC;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    TPDO->syncCounter = 255;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	22ff      	movs	r2, #255	; 0xff
 8006970:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	2200      	movs	r2, #0
 8006978:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800698a:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006992:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800699a:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <CO_TPDO_init+0x2ec>)
 80069aa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	4a12      	ldr	r2, [pc, #72]	; (80069fc <CO_TPDO_init+0x2f0>)
 80069b2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	4a0f      	ldr	r2, [pc, #60]	; (8006a00 <CO_TPDO_init+0x2f4>)
 80069c2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	4a0e      	ldr	r2, [pc, #56]	; (8006a04 <CO_TPDO_init+0x2f8>)
 80069ca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80069d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80069d6:	4619      	mov	r1, r3
 80069d8:	f7ff f91c 	bl	8005c14 <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80069e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80069e4:	4619      	mov	r1, r3
 80069e6:	f7ff f915 	bl	8005c14 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80069ea:	2300      	movs	r3, #0
 80069ec:	b25b      	sxtb	r3, r3
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3730      	adds	r7, #48	; 0x30
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	08006165 	.word	0x08006165
 80069fc:	0800646d 	.word	0x0800646d
 8006a00:	0800558d 	.word	0x0800558d
 8006a04:	08006025 	.word	0x08006025

08006a08 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 8006a08:	b590      	push	{r4, r7, lr}
 8006a0a:	b091      	sub	sp, #68	; 0x44
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8006a1a:	3305      	adds	r3, #5
 8006a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d004      	beq.n	8006a32 <CO_TPDOsend+0x2a>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006a2e:	2bfd      	cmp	r3, #253	; 0xfd
 8006a30:	d901      	bls.n	8006a36 <CO_TPDOsend+0x2e>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <CO_TPDOsend+0x30>
 8006a36:	2300      	movs	r3, #0
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
 8006a38:	62bb      	str	r3, [r7, #40]	; 0x28
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a40:	e063      	b.n	8006b0a <CO_TPDOsend+0x102>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8006a42:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006a46:	4613      	mov	r3, r2
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	3310      	adds	r3, #16
 8006a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a52:	4413      	add	r3, r2
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
        OD_stream_t *stream = &OD_IO->stream;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d901      	bls.n	8006a70 <CO_TPDOsend+0x68>
            ODdataLength = CO_PDO_MAX_SIZE;
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	637b      	str	r3, [r7, #52]	; 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8006a70:	7ffa      	ldrb	r2, [r7, #31]
 8006a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d20a      	bcs.n	8006a8e <CO_TPDOsend+0x86>
            memset(buf, 0, sizeof(buf));
 8006a78:	f107 0310 	add.w	r3, r7, #16
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	2100      	movs	r1, #0
 8006a80:	2208      	movs	r2, #8
 8006a82:	f003 fd15 	bl	800a4b0 <memset>
            dataTPDOCopy = buf;
 8006a86:	f107 0310 	add.w	r3, r7, #16
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a8c:	e001      	b.n	8006a92 <CO_TPDOsend+0x8a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a90:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	2200      	movs	r2, #0
 8006a96:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	695c      	ldr	r4, [r3, #20]
 8006a9c:	f107 030c 	add.w	r3, r7, #12
 8006aa0:	6a38      	ldr	r0, [r7, #32]
 8006aa2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aa6:	47a0      	blx	r4
            for (int i = 0; i < countRd; i++) {
                dataTPDOCopy[i] = tempBuff[i];
            }
        }
#endif
        stream->dataOffset = mappedLength;
 8006aa8:	7ffa      	ldrb	r2, [r7, #31]
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8006aae:	7ffa      	ldrb	r2, [r7, #31]
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d207      	bcs.n	8006ac6 <CO_TPDOsend+0xbe>
            memcpy(dataTPDO, buf, mappedLength);
 8006ab6:	7ffb      	ldrb	r3, [r7, #31]
 8006ab8:	f107 0210 	add.w	r2, r7, #16
 8006abc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006abe:	4611      	mov	r1, r2
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	f003 fccf 	bl	800a464 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8006ac6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	323c      	adds	r2, #60	; 0x3c
 8006ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad2:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00e      	beq.n	8006af8 <CO_TPDOsend+0xf0>
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00b      	beq.n	8006af8 <CO_TPDOsend+0xf0>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	781a      	ldrb	r2, [r3, #0]
 8006ae4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006ae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aea:	440b      	add	r3, r1
 8006aec:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 8006af8:	7ffb      	ldrb	r3, [r7, #31]
 8006afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006afc:	4413      	add	r3, r2
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8006b00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b04:	3301      	adds	r3, #1
 8006b06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0c:	7b5b      	ldrb	r3, [r3, #13]
 8006b0e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d395      	bcc.n	8006a42 <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8006b40:	4610      	mov	r0, r2
 8006b42:	4619      	mov	r1, r3
 8006b44:	f003 f8ae 	bl	8009ca4 <CO_CANsend>
 8006b48:	4603      	mov	r3, r0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3744      	adds	r7, #68	; 0x44
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd90      	pop	{r4, r7, pc}
 8006b52:	bf00      	nop

08006b54 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 80dd 	beq.w	8006d2a <CO_TPDO_process+0x1d6>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80d9 	beq.w	8006d2a <CO_TPDO_process+0x1d6>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d004      	beq.n	8006b8c <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006b88:	2bfd      	cmp	r3, #253	; 0xfd
 8006b8a:	d946      	bls.n	8006c1a <CO_TPDO_process+0xc6>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d018      	beq.n	8006bc8 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d905      	bls.n	8006bae <CO_TPDO_process+0x5a>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	e000      	b.n	8006bb0 <CO_TPDO_process+0x5c>
 8006bae:	2300      	movs	r3, #0
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
                if (TPDO->eventTimer == 0) {
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d103      	bne.n	8006bc8 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d123      	bne.n	8006c1a <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e01b      	b.n	8006c10 <CO_TPDO_process+0xbc>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8006bd8:	7ffa      	ldrb	r2, [r7, #31]
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	323c      	adds	r2, #60	; 0x3c
 8006bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be2:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00f      	beq.n	8006c0a <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	7ffb      	ldrb	r3, [r7, #31]
 8006bf0:	69b9      	ldr	r1, [r7, #24]
 8006bf2:	440b      	add	r3, r1
 8006bf4:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d104      	bne.n	8006c0a <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
                            break;
 8006c08:	e007      	b.n	8006c1a <CO_TPDO_process+0xc6>
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8006c0a:	7ffb      	ldrb	r3, [r7, #31]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	7b5b      	ldrb	r3, [r3, #13]
 8006c14:	7ffa      	ldrb	r2, [r7, #31]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d3de      	bcc.n	8006bd8 <CO_TPDO_process+0x84>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006c20:	2bfd      	cmp	r3, #253	; 0xfd
 8006c22:	d91d      	bls.n	8006c60 <CO_TPDO_process+0x10c>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d905      	bls.n	8006c3c <CO_TPDO_process+0xe8>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	e000      	b.n	8006c3e <CO_TPDO_process+0xea>
 8006c3c:	2300      	movs	r3, #0


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d06c      	beq.n	8006d28 <CO_TPDO_process+0x1d4>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d167      	bne.n	8006d28 <CO_TPDO_process+0x1d4>
                CO_TPDOsend(TPDO);
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f7ff fed5 	bl	8006a08 <CO_TPDOsend>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8006c5e:	e076      	b.n	8006d4e <CO_TPDO_process+0x1fa>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d05e      	beq.n	8006d28 <CO_TPDO_process+0x1d4>
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d05b      	beq.n	8006d28 <CO_TPDO_process+0x1d4>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d108      	bne.n	8006c8c <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d051      	beq.n	8006d28 <CO_TPDO_process+0x1d4>
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff febf 	bl	8006a08 <CO_TPDOsend>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8006c8a:	e060      	b.n	8006d4e <CO_TPDO_process+0x1fa>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006c92:	2bff      	cmp	r3, #255	; 0xff
 8006c94:	d119      	bne.n	8006cca <CO_TPDO_process+0x176>
                    if (TPDO->SYNC->counterOverflowValue != 0
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006c9c:	7c5b      	ldrb	r3, [r3, #17]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <CO_TPDO_process+0x162>
                        && TPDO->syncStartValue != 0
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d004      	beq.n	8006cb6 <CO_TPDO_process+0x162>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	22fe      	movs	r2, #254	; 0xfe
 8006cb0:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8006cb4:	e009      	b.n	8006cca <CO_TPDO_process+0x176>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8006cbc:	085b      	lsrs	r3, r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006cd0:	2bfe      	cmp	r3, #254	; 0xfe
 8006cd2:	d112      	bne.n	8006cfa <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006cda:	7c9a      	ldrb	r2, [r3, #18]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d120      	bne.n	8006d28 <CO_TPDO_process+0x1d4>
                        TPDO->syncCounter = TPDO->transmissionType;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                        CO_TPDOsend(TPDO);
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f7ff fe88 	bl	8006a08 <CO_TPDOsend>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8006cf8:	e029      	b.n	8006d4e <CO_TPDO_process+0x1fa>
                        TPDO->syncCounter = TPDO->transmissionType;
                        CO_TPDOsend(TPDO);
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b2da      	uxtb	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d109      	bne.n	8006d28 <CO_TPDO_process+0x1d4>
                    TPDO->syncCounter = TPDO->transmissionType;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    CO_TPDOsend(TPDO);
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7ff fe71 	bl	8006a08 <CO_TPDOsend>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8006d26:	e012      	b.n	8006d4e <CO_TPDO_process+0x1fa>
 8006d28:	e011      	b.n	8006d4e <CO_TPDO_process+0x1fa>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	22ff      	movs	r2, #255	; 0xff
 8006d4a:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif
    }
}
 8006d4e:	3720      	adds	r7, #32
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
#if (C2000_PORT != 0)
    uint8_t value = 0;
    value = (*((uint8_t *)buf) & 0x00FF);
    return value;
#else
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	73fb      	strb	r3, [r7, #15]
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <CO_getUint32>:
#else
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
#endif
}
/** Get uint32_t value from memory buffer, see @ref CO_getUint8 */
static inline uint32_t CO_getUint32(const void *buf) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 4; i++) {
        value += ((uint32_t)(pBuf8[i])) << (8 * i);
    }
    return value;
#else
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8006d78:	f107 030c 	add.w	r3, r7, #12
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	2204      	movs	r2, #4
 8006d82:	f003 fb7a 	bl	800a47a <memmove>
 8006d86:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <OD_getIndex+0x14>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	e000      	b.n	8006da6 <OD_getIndex+0x16>
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop

08006db4 <OD_mappable>:
 *
 * @param stream Object Dictionary stream object.
 *
 * @return true, if OD variable is mappable.
 */
static inline bool_t OD_mappable(OD_stream_t *stream) {
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
    return (stream != NULL)
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d007      	beq.n	8006dd2 <OD_mappable+0x1e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	7c1b      	ldrb	r3, [r3, #16]
 8006dc6:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <OD_mappable+0x1e>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <OD_mappable+0x20>
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <OD_extension_init+0x14>
 8006df0:	2305      	movs	r3, #5
 8006df2:	e003      	b.n	8006dfc <OD_extension_init+0x1c>
    entry->extension = extension;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	b25b      	sxtb	r3, r3
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop

08006e0c <OD_get_u8>:
}

/** Get uint8_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u8(const OD_entry_t *entry, uint8_t subIndex,
                              uint8_t *val, bool_t odOrig)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	607a      	str	r2, [r7, #4]
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 1, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8006e1c:	7afa      	ldrb	r2, [r7, #11]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	4611      	mov	r1, r2
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f7fe fdef 	bl	8005a0c <OD_get_value>
 8006e2e:	4603      	mov	r3, r0
#endif
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	460b      	mov	r3, r1
 8006e46:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 4, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8006e48:	7afa      	ldrb	r2, [r7, #11]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	4611      	mov	r1, r2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	2304      	movs	r3, #4
 8006e56:	f7fe fdd9 	bl	8005a0c <OD_get_value>
 8006e5a:	4603      	mov	r3, r0
#endif
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	607a      	str	r2, [r7, #4]
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	460b      	mov	r3, r1
 8006e72:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_set_value(entry, subIndex, &val, 4, odOrig);
#else
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8006e74:	7af9      	ldrb	r1, [r7, #11]
 8006e76:	1d3a      	adds	r2, r7, #4
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	2304      	movs	r3, #4
 8006e80:	f7fe fdfe 	bl	8005a80 <OD_set_value>
 8006e84:	4603      	mov	r3, r0
#endif
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop

08006e90 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	791b      	ldrb	r3, [r3, #4]
 8006ea2:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	3305      	adds	r3, #5
 8006ea8:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 8006eaa:	7cfb      	ldrb	r3, [r7, #19]
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d117      	bne.n	8006ee0 <CO_SDO_receive+0x50>
        if (data[0] == 0x80) {
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	2b80      	cmp	r3, #128	; 0x80
 8006eb6:	d103      	bne.n	8006ec0 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	751a      	strb	r2, [r3, #20]
 8006ebe:	e00f      	b.n	8006ee0 <CO_SDO_receive+0x50>
        }
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10b      	bne.n	8006ee0 <CO_SDO_receive+0x50>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
        else {
            /* copy data and set 'new message' flag, data will be processed in
             * CO_SDOserver_process() */
            memcpy(SDO->CANrxData, data, DLC);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006ece:	7cfb      	ldrb	r3, [r7, #19]
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f003 fac5 	bl	800a464 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2201      	movs	r2, #1
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop

08006ee8 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08a      	sub	sp, #40	; 0x28
 8006eec:	af04      	add	r7, sp, #16
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	80fb      	strh	r3, [r7, #6]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d106      	bne.n	8006f16 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d101      	bne.n	8006f16 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8006f12:	2300      	movs	r3, #0
 8006f14:	e04d      	b.n	8006fb2 <CO_SDOserver_init_canRxTx+0xca>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a3a      	ldr	r2, [r7, #32]
 8006f1a:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f20:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	db02      	blt.n	8006f2e <CO_SDOserver_init_canRxTx+0x46>
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	e000      	b.n	8006f30 <CO_SDOserver_init_canRxTx+0x48>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	db02      	blt.n	8006f3e <CO_SDOserver_init_canRxTx+0x56>
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	e000      	b.n	8006f40 <CO_SDOserver_init_canRxTx+0x58>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8006f42:	8afb      	ldrh	r3, [r7, #22]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d006      	beq.n	8006f56 <CO_SDOserver_init_canRxTx+0x6e>
 8006f48:	8abb      	ldrh	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	611a      	str	r2, [r3, #16]
 8006f54:	e006      	b.n	8006f64 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8006f64:	88f9      	ldrh	r1, [r7, #6]
 8006f66:	8afa      	ldrh	r2, [r7, #22]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <CO_SDOserver_init_canRxTx+0xd4>)
 8006f72:	9302      	str	r3, [sp, #8]
 8006f74:	68b8      	ldr	r0, [r7, #8]
 8006f76:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006f7a:	f002 fe0b 	bl	8009b94 <CO_CANrxBufferInit>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	88b9      	ldrh	r1, [r7, #4]
 8006f88:	8aba      	ldrh	r2, [r7, #20]
 8006f8a:	2308      	movs	r3, #8
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	2300      	movs	r3, #0
 8006f94:	f002 fe50 	bl	8009c38 <CO_CANtxBufferInit>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d104      	bne.n	8006fb0 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8006fa6:	23ff      	movs	r3, #255	; 0xff
 8006fa8:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8006fb0:	7cfb      	ldrb	r3, [r7, #19]
 8006fb2:	b25b      	sxtb	r3, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	08006e91 	.word	0x08006e91

08006fc0 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 8006fc0:	b5b0      	push	{r4, r5, r7, lr}
 8006fc2:	b08e      	sub	sp, #56	; 0x38
 8006fc4:	af02      	add	r7, sp, #8
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <OD_write_1201_additional+0x20>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <OD_write_1201_additional+0x20>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8006fe0:	2309      	movs	r3, #9
 8006fe2:	e0f7      	b.n	80071d4 <OD_write_1201_additional+0x214>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	7c5b      	ldrb	r3, [r3, #17]
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	f200 80e7 	bhi.w	80071c2 <OD_write_1201_additional+0x202>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <OD_write_1201_additional+0x3c>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	0800700d 	.word	0x0800700d
 8007000:	08007011 	.word	0x08007011
 8007004:	080070d7 	.word	0x080070d7
 8007008:	0800719b 	.word	0x0800719b
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 800700c:	2304      	movs	r3, #4
 800700e:	e0e1      	b.n	80071d4 <OD_write_1201_additional+0x214>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8007010:	68b8      	ldr	r0, [r7, #8]
 8007012:	f7ff fead 	bl	8006d70 <CO_getUint32>
 8007016:	62b8      	str	r0, [r7, #40]	; 0x28
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	b29b      	uxth	r3, r3
 800701c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007020:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007026:	b29b      	uxth	r3, r3
 8007028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800702c:	84bb      	strh	r3, [r7, #36]	; 0x24
            bool_t valid = (COB_ID & 0x80000000) == 0;
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	43db      	mvns	r3, r3
 8007032:	0fdb      	lsrs	r3, r3, #31
 8007034:	b2db      	uxtb	r3, r3
 8007036:	623b      	str	r3, [r7, #32]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8007038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800703a:	4b69      	ldr	r3, [pc, #420]	; (80071e0 <OD_write_1201_additional+0x220>)
 800703c:	4013      	ands	r3, r2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d134      	bne.n	80070ac <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d007      	beq.n	8007058 <OD_write_1201_additional+0x98>
 8007048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <OD_write_1201_additional+0x98>
 8007050:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007054:	429a      	cmp	r2, r3
 8007056:	d129      	bne.n	80070ac <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d028      	beq.n	80070b0 <OD_write_1201_additional+0xf0>
 800705e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007060:	2b7f      	cmp	r3, #127	; 0x7f
 8007062:	d923      	bls.n	80070ac <OD_write_1201_additional+0xec>
 8007064:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800706a:	d903      	bls.n	8007074 <OD_write_1201_additional+0xb4>
 800706c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800706e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007072:	d91b      	bls.n	80070ac <OD_write_1201_additional+0xec>
 8007074:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007076:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800707a:	d903      	bls.n	8007084 <OD_write_1201_additional+0xc4>
 800707c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800707e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007082:	d313      	bcc.n	80070ac <OD_write_1201_additional+0xec>
 8007084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007086:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800708a:	d903      	bls.n	8007094 <OD_write_1201_additional+0xd4>
 800708c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800708e:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8007092:	d30b      	bcc.n	80070ac <OD_write_1201_additional+0xec>
 8007094:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007096:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800709a:	d303      	bcc.n	80070a4 <OD_write_1201_additional+0xe4>
 800709c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800709e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070a2:	d303      	bcc.n	80070ac <OD_write_1201_additional+0xec>
 80070a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070aa:	d901      	bls.n	80070b0 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 80070ac:	230f      	movs	r3, #15
 80070ae:	e091      	b.n	80071d4 <OD_write_1201_additional+0x214>
            }
            CO_SDOserver_init_canRxTx(SDO,
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80070b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b6:	f8b3 5048 	ldrh.w	r5, [r3, #72]	; 0x48
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 80070c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070c6:	9200      	str	r2, [sp, #0]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070cc:	462a      	mov	r2, r5
 80070ce:	4623      	mov	r3, r4
 80070d0:	f7ff ff0a 	bl	8006ee8 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 80070d4:	e077      	b.n	80071c6 <OD_write_1201_additional+0x206>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 80070d6:	68b8      	ldr	r0, [r7, #8]
 80070d8:	f7ff fe4a 	bl	8006d70 <CO_getUint32>
 80070dc:	61f8      	str	r0, [r7, #28]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070e6:	837b      	strh	r3, [r7, #26]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070f2:	833b      	strh	r3, [r7, #24]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	43db      	mvns	r3, r3
 80070f8:	0fdb      	lsrs	r3, r3, #31
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	617b      	str	r3, [r7, #20]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 80070fe:	69fa      	ldr	r2, [r7, #28]
 8007100:	4b37      	ldr	r3, [pc, #220]	; (80071e0 <OD_write_1201_additional+0x220>)
 8007102:	4013      	ands	r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d134      	bne.n	8007172 <OD_write_1201_additional+0x1b2>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d007      	beq.n	800711e <OD_write_1201_additional+0x15e>
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d003      	beq.n	800711e <OD_write_1201_additional+0x15e>
 8007116:	8b7a      	ldrh	r2, [r7, #26]
 8007118:	8b3b      	ldrh	r3, [r7, #24]
 800711a:	429a      	cmp	r2, r3
 800711c:	d129      	bne.n	8007172 <OD_write_1201_additional+0x1b2>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d028      	beq.n	8007176 <OD_write_1201_additional+0x1b6>
 8007124:	8b7b      	ldrh	r3, [r7, #26]
 8007126:	2b7f      	cmp	r3, #127	; 0x7f
 8007128:	d923      	bls.n	8007172 <OD_write_1201_additional+0x1b2>
 800712a:	8b7b      	ldrh	r3, [r7, #26]
 800712c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007130:	d903      	bls.n	800713a <OD_write_1201_additional+0x17a>
 8007132:	8b7b      	ldrh	r3, [r7, #26]
 8007134:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8007138:	d91b      	bls.n	8007172 <OD_write_1201_additional+0x1b2>
 800713a:	8b7b      	ldrh	r3, [r7, #26]
 800713c:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8007140:	d903      	bls.n	800714a <OD_write_1201_additional+0x18a>
 8007142:	8b7b      	ldrh	r3, [r7, #26]
 8007144:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007148:	d313      	bcc.n	8007172 <OD_write_1201_additional+0x1b2>
 800714a:	8b7b      	ldrh	r3, [r7, #26]
 800714c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007150:	d903      	bls.n	800715a <OD_write_1201_additional+0x19a>
 8007152:	8b7b      	ldrh	r3, [r7, #26]
 8007154:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8007158:	d30b      	bcc.n	8007172 <OD_write_1201_additional+0x1b2>
 800715a:	8b7b      	ldrh	r3, [r7, #26]
 800715c:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8007160:	d303      	bcc.n	800716a <OD_write_1201_additional+0x1aa>
 8007162:	8b7b      	ldrh	r3, [r7, #26]
 8007164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007168:	d303      	bcc.n	8007172 <OD_write_1201_additional+0x1b2>
 800716a:	8b7b      	ldrh	r3, [r7, #26]
 800716c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007170:	d901      	bls.n	8007176 <OD_write_1201_additional+0x1b6>
            ) {
                return ODR_INVALID_VALUE;
 8007172:	230f      	movs	r3, #15
 8007174:	e02e      	b.n	80071d4 <OD_write_1201_additional+0x214>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007182:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007192:	4623      	mov	r3, r4
 8007194:	f7ff fea8 	bl	8006ee8 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8007198:	e015      	b.n	80071c6 <OD_write_1201_additional+0x206>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d001      	beq.n	80071a4 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 80071a0:	230b      	movs	r3, #11
 80071a2:	e017      	b.n	80071d4 <OD_write_1201_additional+0x214>
            }
            uint8_t nodeId = CO_getUint8(buf);
 80071a4:	68b8      	ldr	r0, [r7, #8]
 80071a6:	f7ff fdd5 	bl	8006d54 <CO_getUint8>
 80071aa:	4603      	mov	r3, r0
 80071ac:	74fb      	strb	r3, [r7, #19]
            if (nodeId < 1 || nodeId > 127) {
 80071ae:	7cfb      	ldrb	r3, [r7, #19]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <OD_write_1201_additional+0x1fc>
 80071b4:	7cfb      	ldrb	r3, [r7, #19]
 80071b6:	b25b      	sxtb	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	da01      	bge.n	80071c0 <OD_write_1201_additional+0x200>
                return ODR_INVALID_VALUE;
 80071bc:	230f      	movs	r3, #15
 80071be:	e009      	b.n	80071d4 <OD_write_1201_additional+0x214>
            }
            break;
 80071c0:	e001      	b.n	80071c6 <OD_write_1201_additional+0x206>
        }

        default:
            return ODR_SUB_NOT_EXIST;
 80071c2:	230e      	movs	r3, #14
 80071c4:	e006      	b.n	80071d4 <OD_write_1201_additional+0x214>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	f7fe fa35 	bl	800563c <OD_writeOriginal>
 80071d2:	4603      	mov	r3, r0
 80071d4:	b25b      	sxtb	r3, r3
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3730      	adds	r7, #48	; 0x30
 80071da:	46bd      	mov	sp, r7
 80071dc:	bdb0      	pop	{r4, r5, r7, pc}
 80071de:	bf00      	nop
 80071e0:	3ffff800 	.word	0x3ffff800

080071e4 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 80071e4:	b5b0      	push	{r4, r5, r7, lr}
 80071e6:	b08c      	sub	sp, #48	; 0x30
 80071e8:	af02      	add	r7, sp, #8
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <CO_SDOserver_init+0x26>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <CO_SDOserver_init+0x26>
 80071fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <CO_SDOserver_init+0x26>
 8007204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <CO_SDOserver_init+0x2a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800720a:	23ff      	movs	r3, #255	; 0xff
 800720c:	e0f7      	b.n	80073fe <CO_SDOserver_init+0x21a>
    }

    /* Configure object variables */
    SDO->OD = OD;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 800721a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800721c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007220:	fb02 f203 	mul.w	r2, r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d116      	bne.n	8007262 <CO_SDOserver_init+0x7e>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <CO_SDOserver_init+0x5e>
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	b25b      	sxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	da01      	bge.n	8007246 <CO_SDOserver_init+0x62>
 8007242:	23ff      	movs	r3, #255	; 0xff
 8007244:	e0db      	b.n	80073fe <CO_SDOserver_init+0x21a>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8007246:	78fb      	ldrb	r3, [r7, #3]
 8007248:	b29b      	uxth	r3, r3
 800724a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800724e:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8007258:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	611a      	str	r2, [r3, #16]
 8007260:	e0a5      	b.n	80073ae <CO_SDOserver_init+0x1ca>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7ff fd94 	bl	8006d90 <OD_getIndex>
 8007268:	4603      	mov	r3, r0
 800726a:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 800726c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800726e:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8007272:	d124      	bne.n	80072be <CO_SDOserver_init+0xda>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <CO_SDOserver_init+0x9e>
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	b25b      	sxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	da01      	bge.n	8007286 <CO_SDOserver_init+0xa2>
 8007282:	23ff      	movs	r3, #255	; 0xff
 8007284:	e0bb      	b.n	80073fe <CO_SDOserver_init+0x21a>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	b29b      	uxth	r3, r3
 800728a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800728e:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	b29b      	uxth	r3, r3
 8007294:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8007298:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 80072a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	2101      	movs	r1, #1
 80072a6:	461a      	mov	r2, r3
 80072a8:	2301      	movs	r3, #1
 80072aa:	f7ff fddb 	bl	8006e64 <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 80072ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	2102      	movs	r1, #2
 80072b4:	461a      	mov	r2, r3
 80072b6:	2301      	movs	r3, #1
 80072b8:	f7ff fdd4 	bl	8006e64 <OD_set_u32>
 80072bc:	e077      	b.n	80073ae <CO_SDOserver_init+0x1ca>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 80072be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072c0:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80072c4:	d971      	bls.n	80073aa <CO_SDOserver_init+0x1c6>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 80072c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80072c8:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80072cc:	d26d      	bcs.n	80073aa <CO_SDOserver_init+0x1c6>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 80072ce:	f107 031d 	add.w	r3, r7, #29
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	2100      	movs	r1, #0
 80072d6:	461a      	mov	r2, r3
 80072d8:	2301      	movs	r3, #1
 80072da:	f7ff fd97 	bl	8006e0c <OD_get_u8>
 80072de:	4603      	mov	r3, r0
 80072e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 80072e4:	f107 0318 	add.w	r3, r7, #24
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	2101      	movs	r1, #1
 80072ec:	461a      	mov	r2, r3
 80072ee:	2301      	movs	r3, #1
 80072f0:	f7ff fda2 	bl	8006e38 <OD_get_u32>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 80072fa:	f107 0314 	add.w	r3, r7, #20
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	2102      	movs	r1, #2
 8007302:	461a      	mov	r2, r3
 8007304:	2301      	movs	r3, #1
 8007306:	f7ff fd97 	bl	8006e38 <OD_get_u32>
 800730a:	4603      	mov	r3, r0
 800730c:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 800730e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10d      	bne.n	8007332 <CO_SDOserver_init+0x14e>
 8007316:	7f7b      	ldrb	r3, [r7, #29]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d002      	beq.n	8007322 <CO_SDOserver_init+0x13e>
 800731c:	7f7b      	ldrb	r3, [r7, #29]
 800731e:	2b03      	cmp	r3, #3
 8007320:	d107      	bne.n	8007332 <CO_SDOserver_init+0x14e>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 8007322:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <CO_SDOserver_init+0x14e>
 800732a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <CO_SDOserver_init+0x15e>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8007332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <CO_SDOserver_init+0x15a>
 8007338:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800733a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733c:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 800733e:	23f4      	movs	r3, #244	; 0xf4
 8007340:	e05d      	b.n	80073fe <CO_SDOserver_init+0x21a>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b00      	cmp	r3, #0
 8007346:	db05      	blt.n	8007354 <CO_SDOserver_init+0x170>
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	b29b      	uxth	r3, r3
 800734c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007350:	b29b      	uxth	r3, r3
 8007352:	e000      	b.n	8007356 <CO_SDOserver_init+0x172>
 8007354:	2300      	movs	r3, #0
 8007356:	84fb      	strh	r3, [r7, #38]	; 0x26
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b00      	cmp	r3, #0
 800735c:	db05      	blt.n	800736a <CO_SDOserver_init+0x186>
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	b29b      	uxth	r3, r3
 8007362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007366:	b29b      	uxth	r3, r3
 8007368:	e000      	b.n	800736c <CO_SDOserver_init+0x188>
 800736a:	2300      	movs	r3, #0
 800736c:	84bb      	strh	r3, [r7, #36]	; 0x24
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4a24      	ldr	r2, [pc, #144]	; (8007408 <CO_SDOserver_init+0x224>)
 8007378:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4a23      	ldr	r2, [pc, #140]	; (800740c <CO_SDOserver_init+0x228>)
 800737e:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3354      	adds	r3, #84	; 0x54
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4619      	mov	r1, r3
 8007388:	f7ff fd2a 	bl	8006de0 <OD_extension_init>
 800738c:	4603      	mov	r3, r0
 800738e:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 8007390:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d007      	beq.n	80073a8 <CO_SDOserver_init+0x1c4>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8007398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <CO_SDOserver_init+0x1c0>
 800739e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80073a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a2:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 80073a4:	23f4      	movs	r3, #244	; 0xf4
 80073a6:	e02a      	b.n	80073fe <CO_SDOserver_init+0x21a>
            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
        ) {
 80073a8:	e001      	b.n	80073ae <CO_SDOserver_init+0x1ca>
                return CO_ERROR_OD_PARAMETERS;
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80073aa:	23ff      	movs	r3, #255	; 0xff
 80073ac:	e027      	b.n	80073fe <CO_SDOserver_init+0x21a>
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073b8:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80073c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80073ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073de:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 80073e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80073e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e4:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 80073e8:	f8b7 4048 	ldrh.w	r4, [r7, #72]	; 0x48
 80073ec:	9200      	str	r2, [sp, #0]
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073f4:	462a      	mov	r2, r5
 80073f6:	4623      	mov	r3, r4
 80073f8:	f7ff fd76 	bl	8006ee8 <CO_SDOserver_init_canRxTx>
 80073fc:	4603      	mov	r3, r0
 80073fe:	b25b      	sxtb	r3, r3
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 8007400:	4618      	mov	r0, r3
 8007402:	3728      	adds	r7, #40	; 0x28
 8007404:	46bd      	mov	sp, r7
 8007406:	bdb0      	pop	{r4, r5, r7, pc}
 8007408:	0800558d 	.word	0x0800558d
 800740c:	08006fc1 	.word	0x08006fc1

08007410 <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 8007410:	b590      	push	{r4, r7, lr}
 8007412:	b08b      	sub	sp, #44	; 0x2c
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	4611      	mov	r1, r2
 800741c:	461a      	mov	r2, r3
 800741e:	460b      	mov	r3, r1
 8007420:	71fb      	strb	r3, [r7, #7]
 8007422:	4613      	mov	r3, r2
 8007424:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800742c:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007432:	2b00      	cmp	r3, #0
 8007434:	d07d      	beq.n	8007532 <validateAndWriteToOD+0x122>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800743a:	2b00      	cmp	r3, #0
 800743c:	d015      	beq.n	800746a <validateAndWriteToOD+0x5a>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007446:	429a      	cmp	r2, r3
 8007448:	d00f      	beq.n	800746a <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007452:	429a      	cmp	r2, r3
 8007454:	d901      	bls.n	800745a <validateAndWriteToOD+0x4a>
 8007456:	4a6c      	ldr	r2, [pc, #432]	; (8007608 <validateAndWriteToOD+0x1f8>)
 8007458:	e000      	b.n	800745c <validateAndWriteToOD+0x4c>
 800745a:	4a6c      	ldr	r2, [pc, #432]	; (800760c <validateAndWriteToOD+0x1fc>)
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	601a      	str	r2, [r3, #0]
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
            SDO->state = CO_SDO_ST_ABORT;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2201      	movs	r2, #1
 8007464:	751a      	strb	r2, [r3, #20]
            return false;
 8007466:	2300      	movs	r3, #0
 8007468:	e0c9      	b.n	80075fe <validateAndWriteToOD+0x1ee>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007476:	b2db      	uxtb	r3, r3
 8007478:	b25b      	sxtb	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	da3c      	bge.n	80074f8 <validateAndWriteToOD+0xe8>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <validateAndWriteToOD+0x7e>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	429a      	cmp	r2, r3
 800748c:	d234      	bcs.n	80074f8 <validateAndWriteToOD+0xe8>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007494:	3302      	adds	r3, #2
 8007496:	2b20      	cmp	r3, #32
 8007498:	d82e      	bhi.n	80074f8 <validateAndWriteToOD+0xe8>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074a0:	1c59      	adds	r1, r3, #1
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            SDO->sizeTran++;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	669a      	str	r2, [r3, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 80074bc:	6a3b      	ldr	r3, [r7, #32]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d004      	beq.n	80074cc <validateAndWriteToOD+0xbc>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d210      	bcs.n	80074ee <validateAndWriteToOD+0xde>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074d2:	1c59      	adds	r1, r3, #1
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                SDO->sizeTran++;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	669a      	str	r2, [r3, #104]	; 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	621a      	str	r2, [r3, #32]
 80074f6:	e01b      	b.n	8007530 <validateAndWriteToOD+0x120>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <validateAndWriteToOD+0xf8>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	621a      	str	r2, [r3, #32]
 8007506:	e013      	b.n	8007530 <validateAndWriteToOD+0x120>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	429a      	cmp	r2, r3
 8007510:	d00e      	beq.n	8007530 <validateAndWriteToOD+0x120>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	429a      	cmp	r2, r3
 800751a:	d901      	bls.n	8007520 <validateAndWriteToOD+0x110>
 800751c:	4a3a      	ldr	r2, [pc, #232]	; (8007608 <validateAndWriteToOD+0x1f8>)
 800751e:	e000      	b.n	8007522 <validateAndWriteToOD+0x112>
 8007520:	4a3a      	ldr	r2, [pc, #232]	; (800760c <validateAndWriteToOD+0x1fc>)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	601a      	str	r2, [r3, #0]
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
            SDO->state = CO_SDO_ST_ABORT;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	751a      	strb	r2, [r3, #20]
            return false;
 800752c:	2300      	movs	r3, #0
 800752e:	e066      	b.n	80075fe <validateAndWriteToOD+0x1ee>
 8007530:	e011      	b.n	8007556 <validateAndWriteToOD+0x146>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00d      	beq.n	8007556 <validateAndWriteToOD+0x146>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007542:	429a      	cmp	r2, r3
 8007544:	d907      	bls.n	8007556 <validateAndWriteToOD+0x146>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	4a2f      	ldr	r2, [pc, #188]	; (8007608 <validateAndWriteToOD+0x1f8>)
 800754a:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	751a      	strb	r2, [r3, #20]
            return false;
 8007552:	2300      	movs	r3, #0
 8007554:	e053      	b.n	80075fe <validateAndWriteToOD+0x1ee>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3318      	adds	r3, #24
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff fc28 	bl	8006db4 <OD_mappable>
 8007564:	61f8      	str	r0, [r7, #28]

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f103 0018 	add.w	r0, r3, #24
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	47a0      	blx	r4
 8007582:	4603      	mov	r3, r0
 8007584:	76fb      	strb	r3, [r7, #27]
                                   SDO->bufOffsetWr, &countWritten);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }

    SDO->bufOffsetWr = 0;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 800758e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d011      	beq.n	80075ba <validateAndWriteToOD+0x1aa>
 8007596:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d00c      	beq.n	80075ba <validateAndWriteToOD+0x1aa>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80075a0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe fa13 	bl	80059d0 <OD_getSDOabCode>
 80075aa:	4602      	mov	r2, r0
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	751a      	strb	r2, [r3, #20]
        return false;
 80075b6:	2300      	movs	r3, #0
 80075b8:	e021      	b.n	80075fe <validateAndWriteToOD+0x1ee>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00c      	beq.n	80075dc <validateAndWriteToOD+0x1cc>
 80075c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80075c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ca:	d107      	bne.n	80075dc <validateAndWriteToOD+0x1cc>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4a0f      	ldr	r2, [pc, #60]	; (800760c <validateAndWriteToOD+0x1fc>)
 80075d0:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	751a      	strb	r2, [r3, #20]
        return false;
 80075d8:	2300      	movs	r3, #0
 80075da:	e010      	b.n	80075fe <validateAndWriteToOD+0x1ee>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10b      	bne.n	80075fc <validateAndWriteToOD+0x1ec>
 80075e4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d107      	bne.n	80075fc <validateAndWriteToOD+0x1ec>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	4a06      	ldr	r2, [pc, #24]	; (8007608 <validateAndWriteToOD+0x1f8>)
 80075f0:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2201      	movs	r2, #1
 80075f6:	751a      	strb	r2, [r3, #20]
        return false;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e000      	b.n	80075fe <validateAndWriteToOD+0x1ee>
    }

    return true;
 80075fc:	2301      	movs	r3, #1
}
 80075fe:	4618      	mov	r0, r3
 8007600:	372c      	adds	r7, #44	; 0x2c
 8007602:	46bd      	mov	sp, r7
 8007604:	bd90      	pop	{r4, r7, pc}
 8007606:	bf00      	nop
 8007608:	06070012 	.word	0x06070012
 800760c:	06070013 	.word	0x06070013

08007610 <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 8007610:	b590      	push	{r4, r7, lr}
 8007612:	b08d      	sub	sp, #52	; 0x34
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && countRemain < countMinimum) {
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007632:	2b00      	cmp	r3, #0
 8007634:	f040 809f 	bne.w	8007776 <readFromOd+0x166>
 8007638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	f080 809a 	bcs.w	8007776 <readFromOd+0x166>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800764e:	3378      	adds	r3, #120	; 0x78
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	3304      	adds	r3, #4
 8007656:	4608      	mov	r0, r1
 8007658:	4619      	mov	r1, r3
 800765a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800765c:	f002 ff0d 	bl	800a47a <memmove>
        SDO->bufOffsetRd = 0;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        SDO->bufOffsetWr = countRemain;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	f1c3 0320 	rsb	r3, r3, #32
 8007676:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]
        uint8_t *bufShifted = SDO->buf + countRemain;
 800767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767e:	3378      	adds	r3, #120	; 0x78
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	3304      	adds	r3, #4
 8007686:	61fb      	str	r3, [r7, #28]
        bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3318      	adds	r3, #24
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff fb91 	bl	8006db4 <OD_mappable>
 8007692:	61b8      	str	r0, [r7, #24]

        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f103 0218 	add.w	r2, r3, #24
 800769e:	f107 0314 	add.w	r3, r7, #20
 80076a2:	4610      	mov	r0, r2
 80076a4:	69f9      	ldr	r1, [r7, #28]
 80076a6:	6a3a      	ldr	r2, [r7, #32]
 80076a8:	47a0      	blx	r4
 80076aa:	4603      	mov	r3, r0
 80076ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
#endif

        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 80076b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d011      	beq.n	80076dc <readFromOd+0xcc>
 80076b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80076bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c0:	d00c      	beq.n	80076dc <readFromOd+0xcc>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80076c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe f982 	bl	80059d0 <OD_getSDOabCode>
 80076cc:	4602      	mov	r2, r0
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	751a      	strb	r2, [r3, #20]
            return false;
 80076d8:	2300      	movs	r3, #0
 80076da:	e04d      	b.n	8007778 <readFromOd+0x168>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d023      	beq.n	800772a <readFromOd+0x11a>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	b25b      	sxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	da1c      	bge.n	800772a <readFromOd+0x11a>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	4413      	add	r3, r2
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 80076fa:	69f8      	ldr	r0, [r7, #28]
 80076fc:	f002 ff98 	bl	800a630 <strlen>
 8007700:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 8007702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <readFromOd+0xfc>
 8007708:	2301      	movs	r3, #1
 800770a:	62bb      	str	r3, [r7, #40]	; 0x28
            if (countStr < countRd) {
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007710:	429a      	cmp	r2, r3
 8007712:	d20a      	bcs.n	800772a <readFromOd+0x11a>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	617b      	str	r3, [r7, #20]
                odRet = ODR_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	441a      	add	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	441a      	add	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d004      	beq.n	800774a <readFromOd+0x13a>
 8007740:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007748:	d112      	bne.n	8007770 <readFromOd+0x160>
            SDO->finished = false;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	671a      	str	r2, [r3, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	429a      	cmp	r2, r3
 800775a:	d207      	bcs.n	800776c <readFromOd+0x15c>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4a08      	ldr	r2, [pc, #32]	; (8007780 <readFromOd+0x170>)
 8007760:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	751a      	strb	r2, [r3, #20]
                return false;
 8007768:	2300      	movs	r3, #0
 800776a:	e005      	b.n	8007778 <readFromOd+0x168>

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
            SDO->finished = false;
            if (SDO->bufOffsetWr < countMinimum) {
 800776c:	bf00      	nop
 800776e:	e002      	b.n	8007776 <readFromOd+0x166>
                SDO->state = CO_SDO_ST_ABORT;
                return false;
            }
        }
        else {
            SDO->finished = true;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	671a      	str	r2, [r3, #112]	; 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 8007776:	2301      	movs	r3, #1
}
 8007778:	4618      	mov	r0, r3
 800777a:	3734      	adds	r7, #52	; 0x34
 800777c:	46bd      	mov	sp, r7
 800777e:	bd90      	pop	{r4, r7, pc}
 8007780:	06040047 	.word	0x06040047

08007784 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8007784:	b590      	push	{r4, r7, lr}
 8007786:	b09b      	sub	sp, #108	; 0x6c
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <CO_SDOserver_process+0x1a>
        return CO_SDO_RT_wrongArguments;
 8007798:	23fe      	movs	r3, #254	; 0xfe
 800779a:	f000 bd05 	b.w	80081a8 <CO_SDOserver_process+0xa24>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 800779e:	2301      	movs	r3, #1
 80077a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	62bb      	str	r3, [r7, #40]	; 0x28
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bf14      	ite	ne
 80077b0:	2301      	movne	r3, #1
 80077b2:	2300      	moveq	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	657b      	str	r3, [r7, #84]	; 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00b      	beq.n	80077d8 <CO_SDOserver_process+0x54>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	7d1b      	ldrb	r3, [r3, #20]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <CO_SDOserver_process+0x54>
 80077ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d103      	bne.n	80077d8 <CO_SDOserver_process+0x54>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80077d6:	e2cc      	b.n	8007d72 <CO_SDOserver_process+0x5ee>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <CO_SDOserver_process+0x62>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d109      	bne.n	80077fa <CO_SDOserver_process+0x76>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 80077f2:	2300      	movs	r3, #0
 80077f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80077f8:	e2bb      	b.n	8007d72 <CO_SDOserver_process+0x5ee>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 80077fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 82b8 	beq.w	8007d72 <CO_SDOserver_process+0x5ee>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	7d1b      	ldrb	r3, [r3, #20]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	f040 80d3 	bne.w	80079b4 <CO_SDOserver_process+0x230>
            bool_t upload = false;
 800780e:	2300      	movs	r3, #0
 8007810:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800781c:	2b20      	cmp	r3, #32
 800781e:	d103      	bne.n	8007828 <CO_SDOserver_process+0xa4>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2211      	movs	r2, #17
 8007824:	751a      	strb	r2, [r3, #20]
 8007826:	e00f      	b.n	8007848 <CO_SDOserver_process+0xc4>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d105      	bne.n	800783e <CO_SDOserver_process+0xba>
                upload = true;
 8007832:	2301      	movs	r3, #1
 8007834:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2221      	movs	r2, #33	; 0x21
 800783a:	751a      	strb	r2, [r3, #20]
 800783c:	e004      	b.n	8007848 <CO_SDOserver_process+0xc4>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 800783e:	4bad      	ldr	r3, [pc, #692]	; (8007af4 <CO_SDOserver_process+0x370>)
 8007840:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	2b00      	cmp	r3, #0
 800784c:	d165      	bne.n	800791a <CO_SDOserver_process+0x196>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	b29a      	uxth	r2, r3
                             | SDO->CANrxData[1];
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 800785e:	b29b      	uxth	r3, r3
 8007860:	4313      	orrs	r3, r2
 8007862:	b29b      	uxth	r3, r3
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	869a      	strh	r2, [r3, #52]	; 0x34
                             | SDO->CANrxData[1];
                SDO->subIndex = SDO->CANrxData[3];
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800787e:	4610      	mov	r0, r2
 8007880:	4619      	mov	r1, r3
 8007882:	f7fd ff59 	bl	8005738 <OD_find>
 8007886:	4601      	mov	r1, r0
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3318      	adds	r3, #24
 8007892:	4608      	mov	r0, r1
 8007894:	4611      	mov	r1, r2
 8007896:	461a      	mov	r2, r3
 8007898:	2300      	movs	r3, #0
 800789a:	f7fd ffa9 	bl	80057f0 <OD_getSub>
 800789e:	4603      	mov	r3, r0
 80078a0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 80078a4:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <CO_SDOserver_process+0x13e>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80078ac:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe f88d 	bl	80059d0 <OD_getSDOabCode>
 80078b6:	4603      	mov	r3, r0
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	751a      	strb	r2, [r3, #20]
 80078c0:	e02b      	b.n	800791a <CO_SDOserver_process+0x196>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d105      	bne.n	80078dc <CO_SDOserver_process+0x158>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 80078d0:	4b89      	ldr	r3, [pc, #548]	; (8007af8 <CO_SDOserver_process+0x374>)
 80078d2:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	751a      	strb	r2, [r3, #20]
 80078da:	e01e      	b.n	800791a <CO_SDOserver_process+0x196>
                    }
                    else if (upload
 80078dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00c      	beq.n	80078fc <CO_SDOserver_process+0x178>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d105      	bne.n	80078fc <CO_SDOserver_process+0x178>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 80078f0:	4b82      	ldr	r3, [pc, #520]	; (8007afc <CO_SDOserver_process+0x378>)
 80078f2:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	751a      	strb	r2, [r3, #20]
 80078fa:	e00e      	b.n	800791a <CO_SDOserver_process+0x196>
                    }
                    else if (!upload
 80078fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10b      	bne.n	800791a <CO_SDOserver_process+0x196>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <CO_SDOserver_process+0x196>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8007910:	4b7b      	ldr	r3, [pc, #492]	; (8007b00 <CO_SDOserver_process+0x37c>)
 8007912:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2201      	movs	r2, #1
 8007918:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 800791a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800791c:	2b00      	cmp	r3, #0
 800791e:	d049      	beq.n	80079b4 <CO_SDOserver_process+0x230>
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	2b00      	cmp	r3, #0
 8007924:	d146      	bne.n	80079b4 <CO_SDOserver_process+0x230>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->finished = false;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	671a      	str	r2, [r3, #112]	; 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8007946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	4619      	mov	r1, r3
 800794e:	2207      	movs	r2, #7
 8007950:	2300      	movs	r3, #0
 8007952:	f7ff fe5d 	bl	8007610 <readFromOd>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d02b      	beq.n	80079b4 <CO_SDOserver_process+0x230>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007960:	2b00      	cmp	r3, #0
 8007962:	d01a      	beq.n	800799a <CO_SDOserver_process+0x216>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a1a      	ldr	r2, [r3, #32]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	665a      	str	r2, [r3, #100]	; 0x64

                        if (SDO->sizeInd == 0) {
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007970:	2b00      	cmp	r3, #0
 8007972:	d105      	bne.n	8007980 <CO_SDOserver_process+0x1fc>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	665a      	str	r2, [r3, #100]	; 0x64
 800797e:	e019      	b.n	80079b4 <CO_SDOserver_process+0x230>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800798a:	429a      	cmp	r2, r3
 800798c:	d012      	beq.n	80079b4 <CO_SDOserver_process+0x230>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800798e:	4b5d      	ldr	r3, [pc, #372]	; (8007b04 <CO_SDOserver_process+0x380>)
 8007990:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	751a      	strb	r2, [r3, #20]
 8007998:	e00c      	b.n	80079b4 <CO_SDOserver_process+0x230>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079a0:	b2db      	uxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	db02      	blt.n	80079ae <CO_SDOserver_process+0x22a>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	e000      	b.n	80079b0 <CO_SDOserver_process+0x22c>
 80079ae:	2300      	movs	r3, #0
                            SDO->state = CO_SDO_ST_ABORT;
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	6653      	str	r3, [r2, #100]	; 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	7d1b      	ldrb	r3, [r3, #20]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 81d1 	beq.w	8007d62 <CO_SDOserver_process+0x5de>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	7d1b      	ldrb	r3, [r3, #20]
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	f000 81cb 	beq.w	8007d62 <CO_SDOserver_process+0x5de>
        switch (SDO->state) {
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	7d1b      	ldrb	r3, [r3, #20]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	3b11      	subs	r3, #17
 80079d4:	2b12      	cmp	r3, #18
 80079d6:	f200 81bf 	bhi.w	8007d58 <CO_SDOserver_process+0x5d4>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <CO_SDOserver_process+0x25c>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	08007a2d 	.word	0x08007a2d
 80079e4:	08007d59 	.word	0x08007d59
 80079e8:	08007bfb 	.word	0x08007bfb
 80079ec:	08007d59 	.word	0x08007d59
 80079f0:	08007d59 	.word	0x08007d59
 80079f4:	08007d59 	.word	0x08007d59
 80079f8:	08007d59 	.word	0x08007d59
 80079fc:	08007d59 	.word	0x08007d59
 8007a00:	08007d59 	.word	0x08007d59
 8007a04:	08007d59 	.word	0x08007d59
 8007a08:	08007d59 	.word	0x08007d59
 8007a0c:	08007d59 	.word	0x08007d59
 8007a10:	08007d59 	.word	0x08007d59
 8007a14:	08007d59 	.word	0x08007d59
 8007a18:	08007d59 	.word	0x08007d59
 8007a1c:	08007d59 	.word	0x08007d59
 8007a20:	08007cf7 	.word	0x08007cf7
 8007a24:	08007d59 	.word	0x08007d59
 8007a28:	08007cff 	.word	0x08007cff
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 809d 	beq.w	8007b76 <CO_SDOserver_process+0x3f2>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 8007a42:	2304      	movs	r3, #4
 8007a44:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (SDO->CANrxData[0] & 0x01)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <CO_SDOserver_process+0x2e6>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a5a:	089b      	lsrs	r3, r3, #2
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a68:	e007      	b.n	8007a7a <CO_SDOserver_process+0x2f6>
                else if (sizeInOd > 0 && sizeInOd < 4)
 8007a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d004      	beq.n	8007a7a <CO_SDOserver_process+0x2f6>
 8007a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d801      	bhi.n	8007a7a <CO_SDOserver_process+0x2f6>
                    dataSizeToWrite = sizeInOd;
 8007a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a78:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	623b      	str	r3, [r7, #32]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	84bb      	strh	r3, [r7, #36]	; 0x24
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3340      	adds	r3, #64	; 0x40
 8007a86:	f107 0220 	add.w	r2, r7, #32
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a90:	f002 fce8 	bl	800a464 <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	b25b      	sxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	da17      	bge.n	8007ad2 <CO_SDOserver_process+0x34e>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 8007aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <CO_SDOserver_process+0x32c>
 8007aa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d210      	bcs.n	8007ad2 <CO_SDOserver_process+0x34e>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8007ab0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	64bb      	str	r3, [r7, #72]	; 0x48
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 8007ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <CO_SDOserver_process+0x33e>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e000      	b.n	8007ac4 <CO_SDOserver_process+0x340>
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ac6:	4413      	add	r3, r2
 8007ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ace:	621a      	str	r2, [r3, #32]
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
                ) {
 8007ad0:	e022      	b.n	8007b18 <CO_SDOserver_process+0x394>
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
                    dataSizeToWrite += delta == 1 ? 1 : 2;
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
                }
                else if (sizeInOd == 0) {
 8007ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d103      	bne.n	8007ae0 <CO_SDOserver_process+0x35c>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007adc:	621a      	str	r2, [r3, #32]
 8007ade:	e01b      	b.n	8007b18 <CO_SDOserver_process+0x394>
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8007ae0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d017      	beq.n	8007b18 <CO_SDOserver_process+0x394>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 8007ae8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d90d      	bls.n	8007b0c <CO_SDOserver_process+0x388>
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <CO_SDOserver_process+0x384>)
 8007af2:	e00c      	b.n	8007b0e <CO_SDOserver_process+0x38a>
 8007af4:	05040001 	.word	0x05040001
 8007af8:	06010000 	.word	0x06010000
 8007afc:	06010001 	.word	0x06010001
 8007b00:	06010002 	.word	0x06010002
 8007b04:	06040047 	.word	0x06040047
 8007b08:	06070012 	.word	0x06070012
 8007b0c:	4b8e      	ldr	r3, [pc, #568]	; (8007d48 <CO_SDOserver_process+0x5c4>)
 8007b0e:	62bb      	str	r3, [r7, #40]	; 0x28
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
                    SDO->state = CO_SDO_ST_ABORT;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2201      	movs	r2, #1
 8007b14:	751a      	strb	r2, [r3, #20]
                    break;
 8007b16:	e124      	b.n	8007d62 <CO_SDOserver_process+0x5de>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61fb      	str	r3, [r7, #28]
                bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3318      	adds	r3, #24
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff f947 	bl	8006db4 <OD_mappable>
 8007b26:	6478      	str	r0, [r7, #68]	; 0x44
                    }
                }
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, bufTemp,
                                               dataSizeToWrite, &countWritten);
#else
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f103 0118 	add.w	r1, r3, #24
 8007b32:	f107 0220 	add.w	r2, r7, #32
 8007b36:	f107 031c 	add.w	r3, r7, #28
 8007b3a:	4608      	mov	r0, r1
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b40:	47a0      	blx	r4
 8007b42:	4603      	mov	r3, r0
 8007b44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                                               dataSizeToWrite, &countWritten);
#endif
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }

                if (odRet != ODR_OK) {
 8007b48:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <CO_SDOserver_process+0x3e4>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8007b50:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fd ff3b 	bl	80059d0 <OD_getSDOabCode>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2201      	movs	r2, #1
 8007b62:	751a      	strb	r2, [r3, #20]
                    break;
 8007b64:	bf00      	nop
 8007b66:	e0fc      	b.n	8007d62 <CO_SDOserver_process+0x5de>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2212      	movs	r2, #18
 8007b6c:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 8007b74:	e0f5      	b.n	8007d62 <CO_SDOserver_process+0x5de>
                }
            }
            else {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                /* segmented transfer, is size indicated? */
                if (SDO->CANrxData[0] & 0x01) {
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d030      	beq.n	8007be6 <CO_SDOserver_process+0x462>
                    uint32_t size;
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	63fb      	str	r3, [r7, #60]	; 0x3c
                    size = SDO->CANrxData[4] & 0x00FF;
                    size += ((uint32_t)(SDO->CANrxData[5] & 0x00FF)) << 8;
                    size += ((uint32_t)(SDO->CANrxData[6] & 0x00FF)) << 16;
                    size += ((uint32_t)(SDO->CANrxData[7] & 0x00FF)) << 24;
#else
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3340      	adds	r3, #64	; 0x40
 8007b8e:	f107 0218 	add.w	r2, r7, #24
 8007b92:	4610      	mov	r0, r2
 8007b94:	4619      	mov	r1, r3
 8007b96:	2204      	movs	r2, #4
 8007b98:	f002 fc64 	bl	800a464 <memcpy>
#endif
                    SDO->sizeInd = CO_SWAP_32(size);
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	665a      	str	r2, [r3, #100]	; 0x64

                    /* Indicated size of SDO matches sizeof OD variable? */
                    if (sizeInOd > 0) {
 8007ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01d      	beq.n	8007be4 <CO_SDOserver_process+0x460>
                        if (SDO->sizeInd > sizeInOd) {
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d905      	bls.n	8007bbe <CO_SDOserver_process+0x43a>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8007bb2:	4b66      	ldr	r3, [pc, #408]	; (8007d4c <CO_SDOserver_process+0x5c8>)
 8007bb4:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	751a      	strb	r2, [r3, #20]
                            break;
 8007bbc:	e0d1      	b.n	8007d62 <CO_SDOserver_process+0x5de>
                        }
                        /* strings are allowed to be shorter */
                        else if (SDO->sizeInd < sizeInOd
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d20d      	bcs.n	8007be4 <CO_SDOserver_process+0x460>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	b25b      	sxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	db06      	blt.n	8007be4 <CO_SDOserver_process+0x460>
                        ) {
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8007bd6:	4b5c      	ldr	r3, [pc, #368]	; (8007d48 <CO_SDOserver_process+0x5c4>)
 8007bd8:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	751a      	strb	r2, [r3, #20]
                            break;
 8007be0:	bf00      	nop
 8007be2:	e0be      	b.n	8007d62 <CO_SDOserver_process+0x5de>
 8007be4:	e002      	b.n	8007bec <CO_SDOserver_process+0x468>
                        }
                     }
                }
                else {
                    SDO->sizeInd = 0;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	665a      	str	r2, [r3, #100]	; 0x64
                }
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2212      	movs	r2, #18
 8007bf0:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 8007bf8:	e0b3      	b.n	8007d62 <CO_SDOserver_process+0x5de>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c00:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d170      	bne.n	8007cea <CO_SDOserver_process+0x566>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf14      	ite	ne
 8007c16:	2301      	movne	r3, #1
 8007c18:	2300      	moveq	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	671a      	str	r2, [r3, #112]	; 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                if (toggle != SDO->toggle) {
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007c36:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d005      	beq.n	8007c4a <CO_SDOserver_process+0x4c6>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8007c3e:	4b44      	ldr	r3, [pc, #272]	; (8007d50 <CO_SDOserver_process+0x5cc>)
 8007c40:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	751a      	strb	r2, [r3, #20]
                    break;
 8007c48:	e08b      	b.n	8007d62 <CO_SDOserver_process+0x5de>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c50:	085b      	lsrs	r3, r3, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	43db      	mvns	r3, r3
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	637b      	str	r3, [r7, #52]	; 0x34
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c62:	3378      	adds	r3, #120	; 0x78
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	1d1a      	adds	r2, r3, #4
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	333d      	adds	r3, #61	; 0x3d
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4619      	mov	r1, r3
 8007c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c74:	f002 fbf6 	bl	800a464 <memcpy>
                SDO->bufOffsetWr += count;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c80:	441a      	add	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->sizeTran += count;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8e:	441a      	add	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	669a      	str	r2, [r3, #104]	; 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <CO_SDOserver_process+0x530>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d905      	bls.n	8007cb4 <CO_SDOserver_process+0x530>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8007ca8:	4b28      	ldr	r3, [pc, #160]	; (8007d4c <CO_SDOserver_process+0x5c8>)
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	751a      	strb	r2, [r3, #20]
                    break;
 8007cb2:	e056      	b.n	8007d62 <CO_SDOserver_process+0x5de>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d106      	bne.n	8007cca <CO_SDOserver_process+0x546>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cc2:	f1c3 0320 	rsb	r3, r3, #32
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d80b      	bhi.n	8007ce2 <CO_SDOserver_process+0x55e>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 8007cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f7ff fb9b 	bl	8007410 <validateAndWriteToOD>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d100      	bne.n	8007ce2 <CO_SDOserver_process+0x55e>
                        break;
 8007ce0:	e03f      	b.n	8007d62 <CO_SDOserver_process+0x5de>
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2214      	movs	r2, #20
 8007ce6:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8007ce8:	e03b      	b.n	8007d62 <CO_SDOserver_process+0x5de>
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
            }
            else {
                abortCode = CO_SDO_AB_CMD;
 8007cea:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <CO_SDOserver_process+0x5d0>)
 8007cec:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	751a      	strb	r2, [r3, #20]
            }
            break;
 8007cf4:	e035      	b.n	8007d62 <CO_SDOserver_process+0x5de>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2222      	movs	r2, #34	; 0x22
 8007cfa:	751a      	strb	r2, [r3, #20]
            break;
 8007cfc:	e031      	b.n	8007d62 <CO_SDOserver_process+0x5de>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d04:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8007d08:	2b60      	cmp	r3, #96	; 0x60
 8007d0a:	d117      	bne.n	8007d3c <CO_SDOserver_process+0x5b8>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d12:	f003 0310 	and.w	r3, r3, #16
 8007d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                if (toggle != SDO->toggle) {
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007d20:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d005      	beq.n	8007d34 <CO_SDOserver_process+0x5b0>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8007d28:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <CO_SDOserver_process+0x5cc>)
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	751a      	strb	r2, [r3, #20]
                    break;
 8007d32:	e016      	b.n	8007d62 <CO_SDOserver_process+0x5de>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2224      	movs	r2, #36	; 0x24
 8007d38:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8007d3a:	e012      	b.n	8007d62 <CO_SDOserver_process+0x5de>
                    break;
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
            }
            else {
                abortCode = CO_SDO_AB_CMD;
 8007d3c:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <CO_SDOserver_process+0x5d0>)
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	751a      	strb	r2, [r3, #20]
            }
            break;
 8007d46:	e00c      	b.n	8007d62 <CO_SDOserver_process+0x5de>
 8007d48:	06070013 	.word	0x06070013
 8007d4c:	06070012 	.word	0x06070012
 8007d50:	05030000 	.word	0x05030000
 8007d54:	05040001 	.word	0x05040001
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 8007d58:	4bab      	ldr	r3, [pc, #684]	; (8008008 <CO_SDOserver_process+0x884>)
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	751a      	strb	r2, [r3, #20]
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        timeDifference_us = 0;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 8007d72:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d11e      	bne.n	8007db8 <CO_SDOserver_process+0x634>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d205      	bcs.n	8007d92 <CO_SDOserver_process+0x60e>
            SDO->timeoutTimer += timeDifference_us;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	441a      	add	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	679a      	str	r2, [r3, #120]	; 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d304      	bcc.n	8007da8 <CO_SDOserver_process+0x624>
            abortCode = CO_SDO_AB_TIMEOUT;
 8007d9e:	4b9b      	ldr	r3, [pc, #620]	; (800800c <CO_SDOserver_process+0x888>)
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2201      	movs	r2, #1
 8007da6:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <CO_SDOserver_process+0x634>
            ret = CO_SDO_RT_transmittBufferFull;
 8007db2:	2304      	movs	r3, #4
 8007db4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8007db8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	f040 81b5 	bne.w	800812c <CO_SDOserver_process+0x9a8>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	3305      	adds	r3, #5
 8007dc8:	4618      	mov	r0, r3
 8007dca:	2100      	movs	r1, #0
 8007dcc:	2208      	movs	r2, #8
 8007dce:	f002 fb6f 	bl	800a4b0 <memset>

        switch (SDO->state) {
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	7d1b      	ldrb	r3, [r3, #20]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	3b12      	subs	r3, #18
 8007dda:	2b12      	cmp	r3, #18
 8007ddc:	f200 81a5 	bhi.w	800812a <CO_SDOserver_process+0x9a6>
 8007de0:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <CO_SDOserver_process+0x664>)
 8007de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de6:	bf00      	nop
 8007de8:	08007e35 	.word	0x08007e35
 8007dec:	0800812b 	.word	0x0800812b
 8007df0:	08007eb7 	.word	0x08007eb7
 8007df4:	0800812b 	.word	0x0800812b
 8007df8:	0800812b 	.word	0x0800812b
 8007dfc:	0800812b 	.word	0x0800812b
 8007e00:	0800812b 	.word	0x0800812b
 8007e04:	0800812b 	.word	0x0800812b
 8007e08:	0800812b 	.word	0x0800812b
 8007e0c:	0800812b 	.word	0x0800812b
 8007e10:	0800812b 	.word	0x0800812b
 8007e14:	0800812b 	.word	0x0800812b
 8007e18:	0800812b 	.word	0x0800812b
 8007e1c:	0800812b 	.word	0x0800812b
 8007e20:	0800812b 	.word	0x0800812b
 8007e24:	0800812b 	.word	0x0800812b
 8007e28:	08007f13 	.word	0x08007f13
 8007e2c:	0800812b 	.word	0x0800812b
 8007e30:	08007ff1 	.word	0x08007ff1
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2260      	movs	r2, #96	; 0x60
 8007e3a:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8007e50:	0a12      	lsrs	r2, r2, #8
 8007e52:	b292      	uxth	r2, r2
 8007e54:	b2d2      	uxtb	r2, r2
 8007e56:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007e62:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	679a      	str	r2, [r3, #120]	; 0x78
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	4610      	mov	r0, r2
 8007e74:	4619      	mov	r1, r3
 8007e76:	f001 ff15 	bl	8009ca4 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d006      	beq.n	8007e90 <CO_SDOserver_process+0x70c>
                SDO->state = CO_SDO_ST_IDLE;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 8007e8e:	e14d      	b.n	800812c <CO_SDOserver_process+0x9a8>
            if (SDO->finished) {
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
            }
            else {
                SDO->toggle = 0x00;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->sizeTran = 0;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->bufOffsetRd = 0;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2213      	movs	r2, #19
 8007eb2:	751a      	strb	r2, [r3, #20]
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 8007eb4:	e13a      	b.n	800812c <CO_SDOserver_process+0x9a8>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8007ec0:	f042 0220 	orr.w	r2, r2, #32
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <CO_SDOserver_process+0x752>
 8007ed2:	2210      	movs	r2, #16
 8007ed4:	e000      	b.n	8007ed8 <CO_SDOserver_process+0x754>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	4610      	mov	r0, r2
 8007eee:	4619      	mov	r1, r3
 8007ef0:	f001 fed8 	bl	8009ca4 <CO_CANsend>
            if (SDO->finished) {
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d006      	beq.n	8007f0a <CO_SDOserver_process+0x786>
                SDO->state = CO_SDO_ST_IDLE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8007f02:	2300      	movs	r3, #0
 8007f04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 8007f08:	e110      	b.n	800812c <CO_SDOserver_process+0x9a8>
            if (SDO->finished) {
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2213      	movs	r2, #19
 8007f0e:	751a      	strb	r2, [r3, #20]
            }
            break;
 8007f10:	e10c      	b.n	800812c <CO_SDOserver_process+0x9a8>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d026      	beq.n	8007f68 <CO_SDOserver_process+0x7e4>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f1e:	2b04      	cmp	r3, #4
 8007f20:	d822      	bhi.n	8007f68 <CO_SDOserver_process+0x7e4>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	f1c2 0204 	rsb	r2, r2, #4
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	0092      	lsls	r2, r2, #2
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8007f3a:	b2d2      	uxtb	r2, r2
 8007f3c:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f103 0109 	add.w	r1, r3, #9
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f50:	4608      	mov	r0, r1
 8007f52:	4611      	mov	r1, r2
 8007f54:	461a      	mov	r2, r3
 8007f56:	f002 fa85 	bl	800a464 <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8007f60:	2300      	movs	r3, #0
 8007f62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007f66:	e026      	b.n	8007fb6 <CO_SDOserver_process+0x832>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d014      	beq.n	8007f9a <CO_SDOserver_process+0x816>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	617b      	str	r3, [r7, #20]
                    SDO->CANtxBuff->data[0] = 0x41;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2241      	movs	r2, #65	; 0x41
 8007f80:	715a      	strb	r2, [r3, #5]
#if (C2000_PORT != 0)
                    for (int i = 0; i < 4; i++) {
                        SDO->CANtxBuff->data[i + 4] = (uint8_t)((sizeIndSw >> (8 * i)) & 0x00FF);
                    }
#else
                    memcpy(&SDO->CANtxBuff->data[4],
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f103 0209 	add.w	r2, r3, #9
 8007f8a:	f107 0314 	add.w	r3, r7, #20
 8007f8e:	4610      	mov	r0, r2
 8007f90:	4619      	mov	r1, r3
 8007f92:	2204      	movs	r2, #4
 8007f94:	f002 fa66 	bl	800a464 <memcpy>
 8007f98:	e003      	b.n	8007fa2 <CO_SDOserver_process+0x81e>
                           &sizeIndSw, sizeof(sizeIndSw));
#endif
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2240      	movs	r2, #64	; 0x40
 8007fa0:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->timeoutTimer = 0;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2223      	movs	r2, #35	; 0x23
 8007fb4:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8007fca:	0a12      	lsrs	r2, r2, #8
 8007fcc:	b292      	uxth	r2, r2
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8007fdc:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f001 fe5b 	bl	8009ca4 <CO_CANsend>
            break;
 8007fee:	e09d      	b.n	800812c <CO_SDOserver_process+0x9a8>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false))
 8007ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	2207      	movs	r2, #7
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f7ff fb08 	bl	8007610 <readFromOd>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d104      	bne.n	8008010 <CO_SDOserver_process+0x88c>
                break;
 8008006:	e091      	b.n	800812c <CO_SDOserver_process+0x9a8>
 8008008:	05040001 	.word	0x05040001
 800800c:	05040000 	.word	0x05040000

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 800801a:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <CO_SDOserver_process+0x8a6>
 8008026:	2210      	movs	r2, #16
 8008028:	e000      	b.n	800802c <CO_SDOserver_process+0x8a8>
 800802a:	2200      	movs	r2, #0
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	65bb      	str	r3, [r7, #88]	; 0x58
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 8008042:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008044:	2b06      	cmp	r3, #6
 8008046:	d906      	bls.n	8008056 <CO_SDOserver_process+0x8d2>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01b      	beq.n	8008088 <CO_SDOserver_process+0x904>
 8008050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008052:	2b07      	cmp	r3, #7
 8008054:	d118      	bne.n	8008088 <CO_SDOserver_process+0x904>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	6852      	ldr	r2, [r2, #4]
 800805e:	7951      	ldrb	r1, [r2, #5]
 8008060:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	f1c2 0207 	rsb	r2, r2, #7
 8008068:	b2d2      	uxtb	r2, r2
 800806a:	0052      	lsls	r2, r2, #1
 800806c:	b2d2      	uxtb	r2, r2
 800806e:	430a      	orrs	r2, r1
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	f042 0201 	orr.w	r2, r2, #1
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8008080:	2300      	movs	r3, #0
 8008082:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008086:	e007      	b.n	8008098 <CO_SDOserver_process+0x914>
            }
            else {
                SDO->timeoutTimer = 0;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2223      	movs	r2, #35	; 0x23
 8008092:	751a      	strb	r2, [r3, #20]
                count = 7;
 8008094:	2307      	movs	r3, #7
 8008096:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	1d99      	adds	r1, r3, #6
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080a4:	3378      	adds	r3, #120	; 0x78
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4413      	add	r3, r2
 80080aa:	3304      	adds	r3, #4
 80080ac:	4608      	mov	r0, r1
 80080ae:	4619      	mov	r1, r3
 80080b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080b2:	f002 f9d7 	bl	800a464 <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80080bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080be:	441a      	add	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran += count;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80080ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080cc:	441a      	add	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	669a      	str	r2, [r3, #104]	; 0x68

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01e      	beq.n	8008118 <CO_SDOserver_process+0x994>
                if (SDO->sizeTran > SDO->sizeInd) {
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d905      	bls.n	80080f2 <CO_SDOserver_process+0x96e>
                    abortCode = CO_SDO_AB_DATA_LONG;
 80080e6:	4b33      	ldr	r3, [pc, #204]	; (80081b4 <CO_SDOserver_process+0xa30>)
 80080e8:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	751a      	strb	r2, [r3, #20]
                    break;
 80080f0:	e01c      	b.n	800812c <CO_SDOserver_process+0x9a8>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 80080f2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10e      	bne.n	8008118 <CO_SDOserver_process+0x994>
                         && SDO->sizeTran < SDO->sizeInd
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008102:	429a      	cmp	r2, r3
 8008104:	d208      	bcs.n	8008118 <CO_SDOserver_process+0x994>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 8008106:	4b2c      	ldr	r3, [pc, #176]	; (80081b8 <CO_SDOserver_process+0xa34>)
 8008108:	62bb      	str	r3, [r7, #40]	; 0x28
                    ret = CO_SDO_RT_waitingResponse;
 800810a:	2301      	movs	r3, #1
 800810c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                    SDO->state = CO_SDO_ST_ABORT;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2201      	movs	r2, #1
 8008114:	751a      	strb	r2, [r3, #20]
                    break;
 8008116:	e009      	b.n	800812c <CO_SDOserver_process+0x9a8>
                }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	4610      	mov	r0, r2
 8008122:	4619      	mov	r1, r3
 8008124:	f001 fdbe 	bl	8009ca4 <CO_CANsend>
            break;
 8008128:	e000      	b.n	800812c <CO_SDOserver_process+0x9a8>
            break;
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            break;
 800812a:	bf00      	nop
        }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 800812c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8008130:	2b01      	cmp	r3, #1
 8008132:	d137      	bne.n	80081a4 <CO_SDOserver_process+0xa20>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	7d1b      	ldrb	r3, [r3, #20]
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b01      	cmp	r3, #1
 800813c:	d132      	bne.n	80081a4 <CO_SDOserver_process+0xa20>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2280      	movs	r2, #128	; 0x80
 8008148:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 800815e:	0a12      	lsrs	r2, r2, #8
 8008160:	b292      	uxth	r2, r2
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008170:	721a      	strb	r2, [r3, #8]
#if (C2000_PORT != 0)
            for(int i = 0; i < 4; i++) {
                SDO->CANtxBuff->data[i + 4] = (uint8_t)((code >> (i * 8)) & 0x00FF);
            }
#else
            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f103 0209 	add.w	r2, r3, #9
 800817a:	f107 0310 	add.w	r3, r7, #16
 800817e:	4610      	mov	r0, r2
 8008180:	4619      	mov	r1, r3
 8008182:	2204      	movs	r2, #4
 8008184:	f002 f96e 	bl	800a464 <memcpy>
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	4610      	mov	r0, r2
 8008192:	4619      	mov	r1, r3
 8008194:	f001 fd86 	bl	8009ca4 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 800819e:	23f6      	movs	r3, #246	; 0xf6
 80081a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 80081a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081a8:	b25b      	sxtb	r3, r3
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	376c      	adds	r7, #108	; 0x6c
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd90      	pop	{r4, r7, pc}
 80081b2:	bf00      	nop
 80081b4:	06070012 	.word	0x06070012
 80081b8:	06070013 	.word	0x06070013

080081bc <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
#if (C2000_PORT != 0)
    uint8_t value = 0;
    value = (*((uint8_t *)buf) & 0x00FF);
    return value;
#else
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	73fb      	strb	r3, [r7, #15]
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <CO_getUint32>:
#else
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
#endif
}
/** Get uint32_t value from memory buffer, see @ref CO_getUint8 */
static inline uint32_t CO_getUint32(const void *buf) {
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 4; i++) {
        value += ((uint32_t)(pBuf8[i])) << (8 * i);
    }
    return value;
#else
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80081e0:	f107 030c 	add.w	r3, r7, #12
 80081e4:	4618      	mov	r0, r3
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	2204      	movs	r2, #4
 80081ea:	f002 f946 	bl	800a47a <memmove>
 80081ee:	68fb      	ldr	r3, [r7, #12]
#endif
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <OD_getIndex+0x14>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	e000      	b.n	800820e <OD_getIndex+0x16>
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop

0800821c <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d101      	bne.n	8008230 <OD_extension_init+0x14>
 800822c:	2305      	movs	r3, #5
 800822e:	e003      	b.n	8008238 <OD_extension_init+0x1c>
    entry->extension = extension;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	b25b      	sxtb	r3, r3
}
 800823a:	4618      	mov	r0, r3
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop

08008248 <OD_get_u8>:
}

/** Get uint8_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u8(const OD_entry_t *entry, uint8_t subIndex,
                              uint8_t *val, bool_t odOrig)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af02      	add	r7, sp, #8
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	607a      	str	r2, [r7, #4]
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	460b      	mov	r3, r1
 8008256:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 1, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8008258:	7afa      	ldrb	r2, [r7, #11]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	4611      	mov	r1, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	2301      	movs	r3, #1
 8008266:	f7fd fbd1 	bl	8005a0c <OD_get_value>
 800826a:	4603      	mov	r3, r0
#endif
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af02      	add	r7, sp, #8
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	460b      	mov	r3, r1
 8008282:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 4, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8008284:	7afa      	ldrb	r2, [r7, #11]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	4611      	mov	r1, r2
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	2304      	movs	r3, #4
 8008292:	f7fd fbbb 	bl	8005a0c <OD_get_value>
 8008296:	4603      	mov	r3, r0
#endif
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7c9b      	ldrb	r3, [r3, #18]
 80082ac:	3301      	adds	r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	749a      	strb	r2, [r3, #18]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	7c9a      	ldrb	r2, [r3, #18]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7c5b      	ldrb	r3, [r3, #17]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d902      	bls.n	80082c6 <CO_SYNCsend+0x26>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	bf0c      	ite	eq
 80082d4:	2301      	moveq	r3, #1
 80082d6:	2300      	movne	r3, #0
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	7c92      	ldrb	r2, [r2, #18]
 80082e8:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	4610      	mov	r0, r2
 80082f4:	4619      	mov	r1, r3
 80082f6:	f001 fcd5 	bl	8009ca4 <CO_CANsend>
 80082fa:	4603      	mov	r3, r0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	791b      	ldrb	r3, [r3, #4]
 8008316:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8008318:	2300      	movs	r3, #0
 800831a:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	7c5b      	ldrb	r3, [r3, #17]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10c      	bne.n	800833e <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d102      	bne.n	8008330 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 800832a:	2301      	movs	r3, #1
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	e019      	b.n	8008364 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008336:	b2da      	uxtb	r2, r3
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	721a      	strb	r2, [r3, #8]
 800833c:	e012      	b.n	8008364 <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d109      	bne.n	8008358 <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	3305      	adds	r3, #5
 8008348:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	781a      	ldrb	r2, [r3, #0]
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8008352:	2301      	movs	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	e005      	b.n	8008364 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800835e:	b2da      	uxtb	r2, r3
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00c      	beq.n	8008384 <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	bf0c      	ite	eq
 8008372:	2301      	moveq	r3, #1
 8008374:	2300      	movne	r3, #0
 8008376:	b2db      	uxtb	r3, r3
 8008378:	461a      	mov	r2, r3
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2201      	movs	r2, #1
 8008382:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8008384:	371c      	adds	r7, #28
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop

08008390 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08e      	sub	sp, #56	; 0x38
 8008394:	af04      	add	r7, sp, #16
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00c      	beq.n	80083be <OD_write_1005+0x2e>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	7c5b      	ldrb	r3, [r3, #17]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d108      	bne.n	80083be <OD_write_1005+0x2e>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d005      	beq.n	80083be <OD_write_1005+0x2e>
#if (C2000_PORT != 0)
        || count != 4 || countWritten == NULL
#else
        || count != sizeof(uint32_t) || countWritten == NULL
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d102      	bne.n	80083be <OD_write_1005+0x2e>
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <OD_write_1005+0x32>
#endif
    ) {
        return ODR_DEV_INCOMPAT;
 80083be:	2309      	movs	r3, #9
 80083c0:	e0a2      	b.n	8008508 <OD_write_1005+0x178>
    }

    CO_SYNC_t *SYNC = stream->object;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 80083c8:	68b8      	ldr	r0, [r7, #8]
 80083ca:	f7ff ff05 	bl	80081d8 <CO_getUint32>
 80083ce:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083d8:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	bf14      	ite	ne
 80083e4:	2301      	movne	r3, #1
 80083e6:	2300      	moveq	r3, #0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 80083ec:	6a3a      	ldr	r2, [r7, #32]
 80083ee:	4b49      	ldr	r3, [pc, #292]	; (8008514 <OD_write_1005+0x184>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d133      	bne.n	800845e <OD_write_1005+0xce>
 80083f6:	8bfb      	ldrh	r3, [r7, #30]
 80083f8:	2b7f      	cmp	r3, #127	; 0x7f
 80083fa:	d930      	bls.n	800845e <OD_write_1005+0xce>
 80083fc:	8bfb      	ldrh	r3, [r7, #30]
 80083fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008402:	d903      	bls.n	800840c <OD_write_1005+0x7c>
 8008404:	8bfb      	ldrh	r3, [r7, #30]
 8008406:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800840a:	d928      	bls.n	800845e <OD_write_1005+0xce>
 800840c:	8bfb      	ldrh	r3, [r7, #30]
 800840e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8008412:	d903      	bls.n	800841c <OD_write_1005+0x8c>
 8008414:	8bfb      	ldrh	r3, [r7, #30]
 8008416:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800841a:	d320      	bcc.n	800845e <OD_write_1005+0xce>
 800841c:	8bfb      	ldrh	r3, [r7, #30]
 800841e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008422:	d903      	bls.n	800842c <OD_write_1005+0x9c>
 8008424:	8bfb      	ldrh	r3, [r7, #30]
 8008426:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800842a:	d318      	bcc.n	800845e <OD_write_1005+0xce>
 800842c:	8bfb      	ldrh	r3, [r7, #30]
 800842e:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8008432:	d303      	bcc.n	800843c <OD_write_1005+0xac>
 8008434:	8bfb      	ldrh	r3, [r7, #30]
 8008436:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800843a:	d310      	bcc.n	800845e <OD_write_1005+0xce>
 800843c:	8bfb      	ldrh	r3, [r7, #30]
 800843e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008442:	d80c      	bhi.n	800845e <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <OD_write_1005+0xd2>
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <OD_write_1005+0xd2>
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008458:	8bfa      	ldrh	r2, [r7, #30]
 800845a:	429a      	cmp	r2, r3
 800845c:	d001      	beq.n	8008462 <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 800845e:	230f      	movs	r3, #15
 8008460:	e052      	b.n	8008508 <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008468:	8bfa      	ldrh	r2, [r7, #30]
 800846a:	429a      	cmp	r2, r3
 800846c:	d039      	beq.n	80084e2 <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 8008476:	8bfa      	ldrh	r2, [r7, #30]
 8008478:	2300      	movs	r3, #0
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	4b25      	ldr	r3, [pc, #148]	; (8008518 <OD_write_1005+0x188>)
 8008482:	9302      	str	r3, [sp, #8]
 8008484:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008488:	f001 fb84 	bl	8009b94 <CO_CANrxBufferInit>
 800848c:	4603      	mov	r3, r0
 800848e:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8008490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8008498:	2309      	movs	r3, #9
 800849a:	e035      	b.n	8008508 <OD_write_1005+0x178>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	7c5b      	ldrb	r3, [r3, #17]
        if (CANret != CO_ERROR_NO) {
            return ODR_DEV_INCOMPAT;
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bf14      	ite	ne
 80084ae:	2301      	movne	r3, #1
 80084b0:	2300      	moveq	r3, #0
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	8bfa      	ldrh	r2, [r7, #30]
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	2300      	movs	r3, #0
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	2300      	movs	r3, #0
 80084be:	f001 fbbb 	bl	8009c38 <CO_CANtxBufferInit>
 80084c2:	4602      	mov	r2, r0
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	629a      	str	r2, [r3, #40]	; 0x28
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d104      	bne.n	80084da <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	2200      	movs	r2, #0
 80084d4:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 80084d6:	2309      	movs	r3, #9
 80084d8:	e016      	b.n	8008508 <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	8bfa      	ldrh	r2, [r7, #30]
 80084de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d005      	beq.n	80084fa <OD_write_1005+0x16a>
        SYNC->counter = 0;
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	2200      	movs	r2, #0
 80084f2:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	2200      	movs	r2, #0
 80084f8:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	68b9      	ldr	r1, [r7, #8]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	f7fd f89b 	bl	800563c <OD_writeOriginal>
 8008506:	4603      	mov	r3, r0
 8008508:	b25b      	sxtb	r3, r3
}
 800850a:	4618      	mov	r0, r3
 800850c:	3728      	adds	r7, #40	; 0x28
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	bffff800 	.word	0xbffff800
 8008518:	08008305 	.word	0x08008305

0800851c <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b088      	sub	sp, #32
 8008520:	af02      	add	r7, sp, #8
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00c      	beq.n	800854a <OD_write_1019+0x2e>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	7c5b      	ldrb	r3, [r3, #17]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d108      	bne.n	800854a <OD_write_1019+0x2e>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <OD_write_1019+0x2e>
#if (C2000_PORT != 0)
        || count != 4 || countWritten == NULL
#else
        || count != sizeof(uint8_t) || countWritten == NULL
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d102      	bne.n	800854a <OD_write_1019+0x2e>
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <OD_write_1019+0x32>
#endif
    ) {
        return ODR_DEV_INCOMPAT;
 800854a:	2309      	movs	r3, #9
 800854c:	e040      	b.n	80085d0 <OD_write_1019+0xb4>
    }

    CO_SYNC_t *SYNC = stream->object;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8008554:	68b8      	ldr	r0, [r7, #8]
 8008556:	f7ff fe31 	bl	80081bc <CO_getUint8>
 800855a:	4603      	mov	r3, r0
 800855c:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 800855e:	7cfb      	ldrb	r3, [r7, #19]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d002      	beq.n	800856a <OD_write_1019+0x4e>
 8008564:	7cfb      	ldrb	r3, [r7, #19]
 8008566:	2bf0      	cmp	r3, #240	; 0xf0
 8008568:	d901      	bls.n	800856e <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 800856a:	230f      	movs	r3, #15
 800856c:	e030      	b.n	80085d0 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0) {
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8008578:	2317      	movs	r3, #23
 800857a:	e029      	b.n	80085d0 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800858c:	7cfb      	ldrb	r3, [r7, #19]
 800858e:	2b00      	cmp	r3, #0
 8008590:	bf14      	ite	ne
 8008592:	2301      	movne	r3, #1
 8008594:	2300      	moveq	r3, #0
 8008596:	b2db      	uxtb	r3, r3
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	2300      	movs	r3, #0
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	2300      	movs	r3, #0
 80085a0:	f001 fb4a 	bl	8009c38 <CO_CANtxBufferInit>
 80085a4:	4602      	mov	r2, r0
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d104      	bne.n	80085bc <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2200      	movs	r2, #0
 80085b6:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 80085b8:	2309      	movs	r3, #9
 80085ba:	e009      	b.n	80085d0 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	7cfa      	ldrb	r2, [r7, #19]
 80085c0:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	f7fd f837 	bl	800563c <OD_writeOriginal>
 80085ce:	4603      	mov	r3, r0
 80085d0:	b25b      	sxtb	r3, r3
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop

080085dc <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b08c      	sub	sp, #48	; 0x30
 80085e0:	af04      	add	r7, sp, #16
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00e      	beq.n	800860e <CO_SYNC_init+0x32>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00b      	beq.n	800860e <CO_SYNC_init+0x32>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d008      	beq.n	800860e <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d005      	beq.n	800860e <CO_SYNC_init+0x32>
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <CO_SYNC_init+0x36>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800860e:	23ff      	movs	r3, #255	; 0xff
 8008610:	e0f9      	b.n	8008806 <CO_SYNC_init+0x22a>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	2100      	movs	r1, #0
 8008616:	2260      	movs	r2, #96	; 0x60
 8008618:	f001 ff4a 	bl	800a4b0 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 800861c:	2380      	movs	r3, #128	; 0x80
 800861e:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8008620:	f107 0318 	add.w	r3, r7, #24
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	2100      	movs	r1, #0
 8008628:	461a      	mov	r2, r3
 800862a:	2301      	movs	r3, #1
 800862c:	f7ff fe22 	bl	8008274 <OD_get_u32>
 8008630:	4603      	mov	r3, r0
 8008632:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8008634:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <CO_SYNC_init+0x78>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 800863c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863e:	2b00      	cmp	r3, #0
 8008640:	d006      	beq.n	8008650 <CO_SYNC_init+0x74>
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff fdd8 	bl	80081f8 <OD_getIndex>
 8008648:	4603      	mov	r3, r0
 800864a:	461a      	mov	r2, r3
 800864c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800864e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8008650:	23f4      	movs	r3, #244	; 0xf4
 8008652:	e0d8      	b.n	8008806 <CO_SYNC_init+0x22a>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	4a6c      	ldr	r2, [pc, #432]	; (8008810 <CO_SYNC_init+0x234>)
 800865e:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a6c      	ldr	r2, [pc, #432]	; (8008814 <CO_SYNC_init+0x238>)
 8008664:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3334      	adds	r3, #52	; 0x34
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4619      	mov	r1, r3
 800866e:	f7ff fdd5 	bl	800821c <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8008672:	6838      	ldr	r0, [r7, #0]
 8008674:	2100      	movs	r1, #0
 8008676:	2204      	movs	r2, #4
 8008678:	2300      	movs	r3, #0
 800867a:	f7fd fa35 	bl	8005ae8 <OD_getPtr>
 800867e:	4602      	mov	r2, r0
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	61da      	str	r2, [r3, #28]
                                     4, NULL);
#else
                                     sizeof(uint32_t), NULL);
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10b      	bne.n	80086a4 <CO_SYNC_init+0xc8>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 800868c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800868e:	2b00      	cmp	r3, #0
 8008690:	d006      	beq.n	80086a0 <CO_SYNC_init+0xc4>
 8008692:	6838      	ldr	r0, [r7, #0]
 8008694:	f7ff fdb0 	bl	80081f8 <OD_getIndex>
 8008698:	4603      	mov	r3, r0
 800869a:	461a      	mov	r2, r3
 800869c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800869e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80086a0:	23f4      	movs	r3, #244	; 0xf4
 80086a2:	e0b0      	b.n	8008806 <CO_SYNC_init+0x22a>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 80086a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a6:	2100      	movs	r1, #0
 80086a8:	2204      	movs	r2, #4
 80086aa:	2300      	movs	r3, #0
 80086ac:	f7fd fa1c 	bl	8005ae8 <OD_getPtr>
 80086b0:	4602      	mov	r2, r0
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	621a      	str	r2, [r3, #32]
#if (C2000_PORT != 0)
                                     4, NULL);
#else
                                     sizeof(uint32_t), NULL);
#endif
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00f      	beq.n	80086dc <CO_SYNC_init+0x100>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10b      	bne.n	80086dc <CO_SYNC_init+0x100>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 80086c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d006      	beq.n	80086d8 <CO_SYNC_init+0xfc>
 80086ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086cc:	f7ff fd94 	bl	80081f8 <OD_getIndex>
 80086d0:	4603      	mov	r3, r0
 80086d2:	461a      	mov	r2, r3
 80086d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086d6:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80086d8:	23f4      	movs	r3, #244	; 0xf4
 80086da:	e094      	b.n	8008806 <CO_SYNC_init+0x22a>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 80086dc:	2300      	movs	r3, #0
 80086de:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 80086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d033      	beq.n	800874e <CO_SYNC_init+0x172>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 80086e6:	f107 0317 	add.w	r3, r7, #23
 80086ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086ec:	2100      	movs	r1, #0
 80086ee:	461a      	mov	r2, r3
 80086f0:	2301      	movs	r3, #1
 80086f2:	f7ff fda9 	bl	8008248 <OD_get_u8>
 80086f6:	4603      	mov	r3, r0
 80086f8:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 80086fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00b      	beq.n	800871a <CO_SYNC_init+0x13e>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8008702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008704:	2b00      	cmp	r3, #0
 8008706:	d006      	beq.n	8008716 <CO_SYNC_init+0x13a>
 8008708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800870a:	f7ff fd75 	bl	80081f8 <OD_getIndex>
 800870e:	4603      	mov	r3, r0
 8008710:	461a      	mov	r2, r3
 8008712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008714:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8008716:	23f4      	movs	r3, #244	; 0xf4
 8008718:	e075      	b.n	8008806 <CO_SYNC_init+0x22a>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d102      	bne.n	8008726 <CO_SYNC_init+0x14a>
 8008720:	2302      	movs	r3, #2
 8008722:	75fb      	strb	r3, [r7, #23]
 8008724:	e004      	b.n	8008730 <CO_SYNC_init+0x154>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8008726:	7dfb      	ldrb	r3, [r7, #23]
 8008728:	2bf0      	cmp	r3, #240	; 0xf0
 800872a:	d901      	bls.n	8008730 <CO_SYNC_init+0x154>
 800872c:	23f0      	movs	r3, #240	; 0xf0
 800872e:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4a35      	ldr	r2, [pc, #212]	; (8008810 <CO_SYNC_init+0x234>)
 800873a:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4a36      	ldr	r2, [pc, #216]	; (8008818 <CO_SYNC_init+0x23c>)
 8008740:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3350      	adds	r3, #80	; 0x50
 8008746:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008748:	4619      	mov	r1, r3
 800874a:	f7ff fd67 	bl	800821c <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 800874e:	7dfa      	ldrb	r2, [r7, #23]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	bf14      	ite	ne
 8008764:	2301      	movne	r3, #1
 8008766:	2300      	moveq	r3, #0
 8008768:	b2db      	uxtb	r3, r3
 800876a:	461a      	mov	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	b29b      	uxth	r3, r3
 8008774:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008778:	b29a      	uxth	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008784:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800878a:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008790:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008796:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	b29b      	uxth	r3, r3
 800879e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80087a6:	2300      	movs	r3, #0
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	4b1b      	ldr	r3, [pc, #108]	; (800881c <CO_SYNC_init+0x240>)
 80087b0:	9302      	str	r3, [sp, #8]
 80087b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80087b8:	f001 f9ec 	bl	8009b94 <CO_CANrxBufferInit>
 80087bc:	4603      	mov	r3, r0
 80087be:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 80087c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <CO_SYNC_init+0x1f0>
        return ret;
 80087c8:	7fbb      	ldrb	r3, [r7, #30]
 80087ca:	e01c      	b.n	8008806 <CO_SYNC_init+0x22a>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bf14      	ite	ne
 80087dc:	2301      	movne	r3, #1
 80087de:	2300      	moveq	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	2300      	movs	r3, #0
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087ec:	2300      	movs	r3, #0
 80087ee:	f001 fa23 	bl	8009c38 <CO_CANtxBufferInit>
 80087f2:	4602      	mov	r2, r0
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <CO_SYNC_init+0x228>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8008800:	23ff      	movs	r3, #255	; 0xff
 8008802:	e000      	b.n	8008806 <CO_SYNC_init+0x22a>
#endif

    return CO_ERROR_NO;
 8008804:	2300      	movs	r3, #0
 8008806:	b25b      	sxtb	r3, r3
}
 8008808:	4618      	mov	r0, r3
 800880a:	3720      	adds	r7, #32
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	0800558d 	.word	0x0800558d
 8008814:	08008391 	.word	0x08008391
 8008818:	0800851d 	.word	0x0800851d
 800881c:	08008305 	.word	0x08008305

08008820 <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b08a      	sub	sp, #40	; 0x28
 8008824:	af02      	add	r7, sp, #8
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 800882e:	2300      	movs	r3, #0
 8008830:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 808b 	beq.w	8008950 <CO_SYNC_process+0x130>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	699a      	ldr	r2, [r3, #24]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4413      	add	r3, r2
 8008842:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	699a      	ldr	r2, [r3, #24]
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	429a      	cmp	r2, r3
 800884c:	d202      	bcs.n	8008854 <CO_SYNC_process+0x34>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d007      	beq.n	800886c <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8008862:	2301      	movs	r3, #1
 8008864:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <CO_SYNC_process+0x5c>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	e000      	b.n	800887e <CO_SYNC_process+0x5e>
 800887c:	2300      	movs	r3, #0
            SYNC->timer = 0;
            syncStatus = CO_SYNC_RX_TX;
            CO_FLAG_CLEAR(SYNC->CANrxNew);
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 800887e:	613b      	str	r3, [r7, #16]
                                ? *SYNC->OD_1006_period : 0;

        if (OD_1006_period > 0) {
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d032      	beq.n	80088ec <CO_SYNC_process+0xcc>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	429a      	cmp	r2, r3
 8008896:	d329      	bcc.n	80088ec <CO_SYNC_process+0xcc>
                    syncStatus = CO_SYNC_RX_TX;
 8008898:	2301      	movs	r3, #1
 800889a:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f7ff fcff 	bl	80082a0 <CO_SYNCsend>
 80088a2:	e023      	b.n	80088ec <CO_SYNC_process+0xcc>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	7c1b      	ldrb	r3, [r3, #16]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d11f      	bne.n	80088ec <CO_SYNC_process+0xcc>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	085a      	lsrs	r2, r3, #1
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	4413      	add	r3, r2
 80088b4:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d202      	bcs.n	80088c4 <CO_SYNC_process+0xa4>
 80088be:	f04f 33ff 	mov.w	r3, #4294967295
 80088c2:	61bb      	str	r3, [r7, #24]

                if (SYNC->timer > periodTimeout) {
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d90e      	bls.n	80088ec <CO_SYNC_process+0xcc>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	4610      	mov	r0, r2
 80088da:	2101      	movs	r1, #1
 80088dc:	2218      	movs	r2, #24
 80088de:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80088e2:	f7fc f853 	bl	800498c <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2202      	movs	r2, #2
 80088ea:	741a      	strb	r2, [r3, #16]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d015      	beq.n	8008920 <CO_SYNC_process+0x100>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d010      	beq.n	8008920 <CO_SYNC_process+0x100>
            && SYNC->timer > *SYNC->OD_1007_window
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	699a      	ldr	r2, [r3, #24]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	429a      	cmp	r2, r3
 800890a:	d909      	bls.n	8008920 <CO_SYNC_process+0x100>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <CO_SYNC_process+0xf8>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8008914:	2302      	movs	r3, #2
 8008916:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2201      	movs	r2, #1
 800891c:	615a      	str	r2, [r3, #20]
 800891e:	e002      	b.n	8008926 <CO_SYNC_process+0x106>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	7a1b      	ldrb	r3, [r3, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00f      	beq.n	800894e <CO_SYNC_process+0x12e>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	7a1b      	ldrb	r3, [r3, #8]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	4610      	mov	r0, r2
 800893a:	2101      	movs	r1, #1
 800893c:	2219      	movs	r2, #25
 800893e:	f248 2340 	movw	r3, #33344	; 0x8240
 8008942:	f7fc f823 	bl	800498c <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	721a      	strb	r2, [r3, #8]
 800894c:	e00c      	b.n	8008968 <CO_SYNC_process+0x148>
 800894e:	e00b      	b.n	8008968 <CO_SYNC_process+0x148>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8008968:	7ffb      	ldrb	r3, [r7, #31]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d110      	bne.n	8008990 <CO_SYNC_process+0x170>
        if (SYNC->timeoutError == 2) {
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	7c1b      	ldrb	r3, [r3, #16]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d109      	bne.n	800898a <CO_SYNC_process+0x16a>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	4610      	mov	r0, r2
 8008980:	2100      	movs	r1, #0
 8008982:	2218      	movs	r2, #24
 8008984:	2300      	movs	r3, #0
 8008986:	f7fc f801 	bl	800498c <CO_error>
        }
        SYNC->timeoutError = 1;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2201      	movs	r2, #1
 800898e:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8008990:	7ffb      	ldrb	r3, [r7, #31]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3720      	adds	r7, #32
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop

0800899c <CO_getUint16>:
#else
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
#endif
}
/** Get uint16_t value from memory buffer, see @ref CO_getUint8 */
static inline uint16_t CO_getUint16(const void *buf) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 2; i++) {
        value += ((uint16_t)(pBuf8[i])) << (8 * i);
    }
    return value;
#else
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80089a4:	f107 030e 	add.w	r3, r7, #14
 80089a8:	4618      	mov	r0, r3
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	f001 fd64 	bl	800a47a <memmove>
 80089b2:	89fb      	ldrh	r3, [r7, #14]
#endif
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3710      	adds	r7, #16
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <CO_getUint32>:
/** Get uint32_t value from memory buffer, see @ref CO_getUint8 */
static inline uint32_t CO_getUint32(const void *buf) {
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
    for(int i = 0; i < 4; i++) {
        value += ((uint32_t)(pBuf8[i])) << (8 * i);
    }
    return value;
#else
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80089c4:	f107 030c 	add.w	r3, r7, #12
 80089c8:	4618      	mov	r0, r3
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	2204      	movs	r2, #4
 80089ce:	f001 fd54 	bl	800a47a <memmove>
 80089d2:	68fb      	ldr	r3, [r7, #12]
#endif
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <OD_getIndex+0x14>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	e000      	b.n	80089f2 <OD_getIndex+0x16>
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop

08008a00 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <OD_extension_init+0x14>
 8008a10:	2305      	movs	r3, #5
 8008a12:	e003      	b.n	8008a1c <OD_extension_init+0x1c>
    entry->extension = extension;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	b25b      	sxtb	r3, r3
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop

08008a2c <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af02      	add	r7, sp, #8
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	607a      	str	r2, [r7, #4]
 8008a36:	603b      	str	r3, [r7, #0]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	72fb      	strb	r3, [r7, #11]
#if C2000_PORT != 0
    return OD_get_value(entry, subIndex, val, 4, odOrig);
#else
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8008a3c:	7afa      	ldrb	r2, [r7, #11]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	4611      	mov	r1, r2
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	2304      	movs	r3, #4
 8008a4a:	f7fc ffdf 	bl	8005a0c <OD_get_value>
 8008a4e:	4603      	mov	r3, r0
#endif
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	791b      	ldrb	r3, [r3, #4]
 8008a6a:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	3305      	adds	r3, #5
 8008a70:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8008a72:	7cfb      	ldrb	r3, [r7, #19]
 8008a74:	2b06      	cmp	r3, #6
 8008a76:	d108      	bne.n	8008a8a <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	68f9      	ldr	r1, [r7, #12]
 8008a7e:	2206      	movs	r2, #6
 8008a80:	f001 fcf0 	bl	800a464 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2201      	movs	r2, #1
 8008a88:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b088      	sub	sp, #32
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00c      	beq.n	8008abe <OD_write_1012+0x2e>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	7c5b      	ldrb	r3, [r3, #17]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d108      	bne.n	8008abe <OD_write_1012+0x2e>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d005      	beq.n	8008abe <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b04      	cmp	r3, #4
 8008ab6:	d102      	bne.n	8008abe <OD_write_1012+0x2e>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8008abe:	2309      	movs	r3, #9
 8008ac0:	e051      	b.n	8008b66 <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8008ac8:	68b8      	ldr	r0, [r7, #8]
 8008aca:	f7ff ff77 	bl	80089bc <CO_getUint32>
 8008ace:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ad8:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	4b24      	ldr	r3, [pc, #144]	; (8008b70 <OD_write_1012+0xe0>)
 8008ade:	4013      	ands	r3, r2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d126      	bne.n	8008b32 <OD_write_1012+0xa2>
 8008ae4:	8afb      	ldrh	r3, [r7, #22]
 8008ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ae8:	d923      	bls.n	8008b32 <OD_write_1012+0xa2>
 8008aea:	8afb      	ldrh	r3, [r7, #22]
 8008aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af0:	d903      	bls.n	8008afa <OD_write_1012+0x6a>
 8008af2:	8afb      	ldrh	r3, [r7, #22]
 8008af4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8008af8:	d91b      	bls.n	8008b32 <OD_write_1012+0xa2>
 8008afa:	8afb      	ldrh	r3, [r7, #22]
 8008afc:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8008b00:	d903      	bls.n	8008b0a <OD_write_1012+0x7a>
 8008b02:	8afb      	ldrh	r3, [r7, #22]
 8008b04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b08:	d313      	bcc.n	8008b32 <OD_write_1012+0xa2>
 8008b0a:	8afb      	ldrh	r3, [r7, #22]
 8008b0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b10:	d903      	bls.n	8008b1a <OD_write_1012+0x8a>
 8008b12:	8afb      	ldrh	r3, [r7, #22]
 8008b14:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8008b18:	d30b      	bcc.n	8008b32 <OD_write_1012+0xa2>
 8008b1a:	8afb      	ldrh	r3, [r7, #22]
 8008b1c:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8008b20:	d303      	bcc.n	8008b2a <OD_write_1012+0x9a>
 8008b22:	8afb      	ldrh	r3, [r7, #22]
 8008b24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b28:	d303      	bcc.n	8008b32 <OD_write_1012+0xa2>
 8008b2a:	8afb      	ldrh	r3, [r7, #22]
 8008b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b30:	d901      	bls.n	8008b36 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8008b32:	230f      	movs	r3, #15
 8008b34:	e017      	b.n	8008b66 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	0fdb      	lsrs	r3, r3, #31
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	bf14      	ite	ne
 8008b4c:	2301      	movne	r3, #1
 8008b4e:	2300      	moveq	r3, #0
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	f7fc fd6c 	bl	800563c <OD_writeOriginal>
 8008b64:	4603      	mov	r3, r0
 8008b66:	b25b      	sxtb	r3, r3
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3720      	adds	r7, #32
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	3ffff800 	.word	0x3ffff800

08008b74 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08c      	sub	sp, #48	; 0x30
 8008b78:	af04      	add	r7, sp, #16
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d005      	beq.n	8008b94 <CO_TIME_init+0x20>
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <CO_TIME_init+0x20>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <CO_TIME_init+0x24>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8008b94:	23ff      	movs	r3, #255	; 0xff
 8008b96:	e060      	b.n	8008c5a <CO_TIME_init+0xe6>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	222c      	movs	r2, #44	; 0x2c
 8008b9e:	f001 fc87 	bl	800a4b0 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8008ba2:	f107 0314 	add.w	r3, r7, #20
 8008ba6:	68b8      	ldr	r0, [r7, #8]
 8008ba8:	2100      	movs	r1, #0
 8008baa:	461a      	mov	r2, r3
 8008bac:	2301      	movs	r3, #1
 8008bae:	f7ff ff3d 	bl	8008a2c <OD_get_u32>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8008bb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00b      	beq.n	8008bd6 <CO_TIME_init+0x62>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d006      	beq.n	8008bd2 <CO_TIME_init+0x5e>
 8008bc4:	68b8      	ldr	r0, [r7, #8]
 8008bc6:	f7ff ff09 	bl	80089dc <OD_getIndex>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8008bd2:	23f4      	movs	r3, #244	; 0xf4
 8008bd4:	e041      	b.n	8008c5a <CO_TIME_init+0xe6>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4a21      	ldr	r2, [pc, #132]	; (8008c64 <CO_TIME_init+0xf0>)
 8008be0:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	4a20      	ldr	r2, [pc, #128]	; (8008c68 <CO_TIME_init+0xf4>)
 8008be6:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	331c      	adds	r3, #28
 8008bec:	68b8      	ldr	r0, [r7, #8]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	f7ff ff06 	bl	8008a00 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bfc:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	0fdb      	lsrs	r3, r3, #31
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	461a      	mov	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	bf14      	ite	ne
 8008c14:	2301      	movne	r3, #1
 8008c16:	2300      	moveq	r3, #0
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d014      	beq.n	8008c58 <CO_TIME_init+0xe4>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8008c2e:	8879      	ldrh	r1, [r7, #2]
 8008c30:	8bba      	ldrh	r2, [r7, #28]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <CO_TIME_init+0xf8>)
 8008c3c:	9302      	str	r3, [sp, #8]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008c44:	f000 ffa6 	bl	8009b94 <CO_CANrxBufferInit>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8008c4c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <CO_TIME_init+0xe4>
            return ret;
 8008c54:	7efb      	ldrb	r3, [r7, #27]
 8008c56:	e000      	b.n	8008c5a <CO_TIME_init+0xe6>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	b25b      	sxtb	r3, r3
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3720      	adds	r7, #32
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	0800558d 	.word	0x0800558d
 8008c68:	08008a91 	.word	0x08008a91
 8008c6c:	08008a59 	.word	0x08008a59

08008c70 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08a      	sub	sp, #40	; 0x28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d025      	beq.n	8008cd2 <CO_TIME_process+0x62>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d021      	beq.n	8008cd2 <CO_TIME_process+0x62>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d01c      	beq.n	8008cd0 <CO_TIME_process+0x60>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff fe8f 	bl	80089bc <CO_getUint32>
 8008c9e:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7ff fe79 	bl	800899c <CO_getUint16>
 8008caa:	4603      	mov	r3, r0
 8008cac:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8bfa      	ldrh	r2, [r7, #30]
 8008cbc:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	619a      	str	r2, [r3, #24]
{
    bool_t timestampReceived = false;

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8008cce:	e003      	b.n	8008cd8 <CO_TIME_process+0x68>
 8008cd0:	e002      	b.n	8008cd8 <CO_TIME_process+0x68>

            CO_FLAG_CLEAR(TIME->CANrxNew);
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d132      	bne.n	8008d48 <CO_TIME_process+0xd8>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d02f      	beq.n	8008d48 <CO_TIME_process+0xd8>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	89db      	ldrh	r3, [r3, #14]
 8008cec:	461a      	mov	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	4a17      	ldr	r2, [pc, #92]	; (8008d54 <CO_TIME_process+0xe4>)
 8008cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cfc:	099b      	lsrs	r3, r3, #6
 8008cfe:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	4b14      	ldr	r3, [pc, #80]	; (8008d54 <CO_TIME_process+0xe4>)
 8008d04:	fba3 1302 	umull	r1, r3, r3, r2
 8008d08:	099b      	lsrs	r3, r3, #6
 8008d0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d0e:	fb01 f303 	mul.w	r3, r1, r3
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	441a      	add	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <CO_TIME_process+0xe8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d90b      	bls.n	8008d48 <CO_TIME_process+0xd8>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <CO_TIME_process+0xec>)
 8008d36:	4413      	add	r3, r2
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	899b      	ldrh	r3, [r3, #12]
 8008d40:	3301      	adds	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3728      	adds	r7, #40	; 0x28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	10624dd3 	.word	0x10624dd3
 8008d58:	05265bff 	.word	0x05265bff
 8008d5c:	fad9a400 	.word	0xfad9a400

08008d60 <crc16_ccitt>:

/******************************************************************************/
uint16_t crc16_ccitt(const uint8_t block[],
                     size_t blockLength,
                     uint16_t crc)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
    size_t i;

    for (i = 0U; i < blockLength; i++) {
 8008d6e:	2300      	movs	r3, #0
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	e018      	b.n	8008da6 <crc16_ccitt+0x46>
        uint8_t tmp = (uint8_t)(crc >> 8U) ^ block[i];
 8008d74:	88fb      	ldrh	r3, [r7, #6]
 8008d76:	0a1b      	lsrs	r3, r3, #8
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	68f9      	ldr	r1, [r7, #12]
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	440b      	add	r3, r1
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	4053      	eors	r3, r2
 8008d86:	74fb      	strb	r3, [r7, #19]
        crc = (crc << 8U) ^ crc16_ccitt_table[tmp];
 8008d88:	88fb      	ldrh	r3, [r7, #6]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	b299      	uxth	r1, r3
 8008d8e:	7cfb      	ldrb	r3, [r7, #19]
 8008d90:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <crc16_ccitt+0x5c>)
 8008d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	460a      	mov	r2, r1
 8008d9a:	4053      	eors	r3, r2
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	80fb      	strh	r3, [r7, #6]
                     size_t blockLength,
                     uint16_t crc)
{
    size_t i;

    for (i = 0U; i < blockLength; i++) {
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	3301      	adds	r3, #1
 8008da4:	617b      	str	r3, [r7, #20]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d3e2      	bcc.n	8008d74 <crc16_ccitt+0x14>
        uint8_t tmp = (uint8_t)(crc >> 8U) ^ block[i];
        crc = (crc << 8U) ^ crc16_ccitt_table[tmp];
    }
    return crc;
 8008dae:	88fb      	ldrh	r3, [r7, #6]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	0800a8b8 	.word	0x0800a8b8

08008dc0 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8008dcc:	78fb      	ldrb	r3, [r7, #3]
 8008dce:	08db      	lsrs	r3, r3, #3
 8008dd0:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8008dd2:	78fb      	ldrb	r3, [r7, #3]
 8008dd4:	f003 0307 	and.w	r3, r3, #7
 8008dd8:	2201      	movs	r2, #1
 8008dda:	fa02 f303 	lsl.w	r3, r2, r3
 8008dde:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <CO_isError+0x3c>
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
    uint8_t index = errorBit >> 3;
    uint8_t bitmask = 1 << (errorBit & 0x7);

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	d807      	bhi.n	8008dfc <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	5cd2      	ldrb	r2, [r2, r3]
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	4013      	ands	r3, r2
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <CO_isError+0x40>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e000      	b.n	8008e02 <CO_isError+0x42>
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop

08008e10 <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d007      	beq.n	8008e2e <CO_getErrorRegister+0x1e>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <CO_getErrorRegister+0x1e>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	e000      	b.n	8008e30 <CO_getErrorRegister+0x20>
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <CO_NMT_getInternalState+0x14>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	e000      	b.n	8008e52 <CO_NMT_getInternalState+0x16>
 8008e50:	2300      	movs	r3, #0
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	b25b      	sxtb	r3, r3
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop

08008e64 <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <CO_LSSslave_getState+0x14>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	7c1b      	ldrb	r3, [r3, #16]
 8008e76:	e000      	b.n	8008e7a <CO_LSSslave_getState+0x16>
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop

08008e88 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	2140      	movs	r1, #64	; 0x40
 8008ea2:	f001 fa99 	bl	800a3d8 <calloc>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	60fb      	str	r3, [r7, #12]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00f      	beq.n	8008ed0 <CO_new+0x48>
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	3340      	adds	r3, #64	; 0x40
 8008eb4:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	212c      	movs	r1, #44	; 0x2c
 8008eba:	f001 fa8d 	bl	800a3d8 <calloc>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	611a      	str	r2, [r3, #16]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d013      	beq.n	8008ef6 <CO_new+0x6e>
 8008ece:	e000      	b.n	8008ed2 <CO_new+0x4a>
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8008ed0:	e0f5      	b.n	80090be <CO_new+0x236>
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	332c      	adds	r3, #44	; 0x2c
 8008ed6:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8008ed8:	2301      	movs	r3, #1
 8008eda:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8008edc:	2001      	movs	r0, #1
 8008ede:	2130      	movs	r1, #48	; 0x30
 8008ee0:	f001 fa7a 	bl	800a3d8 <calloc>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	615a      	str	r2, [r3, #20]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d012      	beq.n	8008f1a <CO_new+0x92>
 8008ef4:	e000      	b.n	8008ef8 <CO_new+0x70>
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8008ef6:	e0e2      	b.n	80090be <CO_new+0x236>

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	3330      	adds	r3, #48	; 0x30
 8008efc:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8008efe:	7afb      	ldrb	r3, [r7, #11]
 8008f00:	4618      	mov	r0, r3
 8008f02:	2110      	movs	r1, #16
 8008f04:	f001 fa68 	bl	800a3d8 <calloc>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	619a      	str	r2, [r3, #24]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d013      	beq.n	8008f40 <CO_new+0xb8>
 8008f18:	e000      	b.n	8008f1c <CO_new+0x94>

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8008f1a:	e0d0      	b.n	80090be <CO_new+0x236>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8008f1c:	7afb      	ldrb	r3, [r7, #11]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	4413      	add	r3, r2
 8008f24:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8008f26:	2001      	movs	r0, #1
 8008f28:	2150      	movs	r1, #80	; 0x50
 8008f2a:	f001 fa55 	bl	800a3d8 <calloc>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	461a      	mov	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	61da      	str	r2, [r3, #28]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <CO_new+0xcc>
 8008f3e:	e000      	b.n	8008f42 <CO_new+0xba>
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8008f40:	e0bd      	b.n	80090be <CO_new+0x236>

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3350      	adds	r3, #80	; 0x50
 8008f46:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8008f48:	2311      	movs	r3, #17
 8008f4a:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 8008f4c:	7abb      	ldrb	r3, [r7, #10]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d915      	bls.n	8008f7e <CO_new+0xf6>
 8008f52:	e000      	b.n	8008f56 <CO_new+0xce>

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8008f54:	e0b3      	b.n	80090be <CO_new+0x236>
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
            if (fifoSize >= 2) {
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8008f56:	7abb      	ldrb	r3, [r7, #10]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	2108      	movs	r1, #8
 8008f5c:	f001 fa3c 	bl	800a3d8 <calloc>
 8008f60:	4603      	mov	r3, r0
 8008f62:	461a      	mov	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	621a      	str	r2, [r3, #32]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6a1b      	ldr	r3, [r3, #32]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <CO_new+0xf4>
 8008f70:	7abb      	ldrb	r3, [r7, #10]
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4413      	add	r3, r2
 8008f78:	613b      	str	r3, [r7, #16]
 8008f7a:	e000      	b.n	8008f7e <CO_new+0xf6>
 8008f7c:	e09f      	b.n	80090be <CO_new+0x236>

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8008f7e:	2001      	movs	r0, #1
 8008f80:	21a8      	movs	r1, #168	; 0xa8
 8008f82:	f001 fa29 	bl	800a3d8 <calloc>
 8008f86:	4603      	mov	r3, r0
 8008f88:	461a      	mov	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00f      	beq.n	8008fb6 <CO_new+0x12e>
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	33a8      	adds	r3, #168	; 0xa8
 8008f9a:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	212c      	movs	r1, #44	; 0x2c
 8008fa0:	f001 fa1a 	bl	800a3d8 <calloc>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	629a      	str	r2, [r3, #40]	; 0x28
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d011      	beq.n	8008fd8 <CO_new+0x150>
 8008fb4:	e000      	b.n	8008fb8 <CO_new+0x130>

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8008fb6:	e082      	b.n	80090be <CO_new+0x236>

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	332c      	adds	r3, #44	; 0x2c
 8008fbc:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	2160      	movs	r1, #96	; 0x60
 8008fc2:	f001 fa09 	bl	800a3d8 <calloc>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	461a      	mov	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d012      	beq.n	8008ffc <CO_new+0x174>
 8008fd6:	e000      	b.n	8008fda <CO_new+0x152>

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8008fd8:	e071      	b.n	80090be <CO_new+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	3360      	adds	r3, #96	; 0x60
 8008fde:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8008fe0:	2001      	movs	r0, #1
 8008fe2:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8008fe6:	f001 f9f7 	bl	800a3d8 <calloc>
 8008fea:	4603      	mov	r3, r0
 8008fec:	461a      	mov	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d012      	beq.n	8009020 <CO_new+0x198>
 8008ffa:	e000      	b.n	8008ffe <CO_new+0x176>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8008ffc:	e05f      	b.n	80090be <CO_new+0x236>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009004:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8009006:	2001      	movs	r0, #1
 8009008:	210c      	movs	r1, #12
 800900a:	f001 f9e5 	bl	800a3d8 <calloc>
 800900e:	4603      	mov	r3, r0
 8009010:	461a      	mov	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	639a      	str	r2, [r3, #56]	; 0x38
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	2b00      	cmp	r3, #0
 800901c:	d011      	beq.n	8009042 <CO_new+0x1ba>
 800901e:	e000      	b.n	8009022 <CO_new+0x19a>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8009020:	e04d      	b.n	80090be <CO_new+0x236>
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	330c      	adds	r3, #12
 8009026:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8009028:	2001      	movs	r0, #1
 800902a:	2174      	movs	r1, #116	; 0x74
 800902c:	f001 f9d4 	bl	800a3d8 <calloc>
 8009030:	4603      	mov	r3, r0
 8009032:	461a      	mov	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	63da      	str	r2, [r3, #60]	; 0x3c
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d011      	beq.n	8009064 <CO_new+0x1dc>
 8009040:	e000      	b.n	8009044 <CO_new+0x1bc>
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8009042:	e03c      	b.n	80090be <CO_new+0x236>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	3374      	adds	r3, #116	; 0x74
 8009048:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 800904a:	2001      	movs	r0, #1
 800904c:	212c      	movs	r1, #44	; 0x2c
 800904e:	f001 f9c3 	bl	800a3d8 <calloc>
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	605a      	str	r2, [r3, #4]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d011      	beq.n	8009086 <CO_new+0x1fe>
 8009062:	e000      	b.n	8009066 <CO_new+0x1de>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8009064:	e02b      	b.n	80090be <CO_new+0x236>
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	332c      	adds	r3, #44	; 0x2c
 800906a:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 800906c:	2006      	movs	r0, #6
 800906e:	210c      	movs	r1, #12
 8009070:	f001 f9b2 	bl	800a3d8 <calloc>
 8009074:	4603      	mov	r3, r0
 8009076:	461a      	mov	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	609a      	str	r2, [r3, #8]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d011      	beq.n	80090a8 <CO_new+0x220>
 8009084:	e000      	b.n	8009088 <CO_new+0x200>
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8009086:	e01a      	b.n	80090be <CO_new+0x236>

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	3348      	adds	r3, #72	; 0x48
 800908c:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 800908e:	2006      	movs	r0, #6
 8009090:	2118      	movs	r1, #24
 8009092:	f001 f9a1 	bl	800a3d8 <calloc>
 8009096:	4603      	mov	r3, r0
 8009098:	461a      	mov	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	60da      	str	r2, [r3, #12]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00a      	beq.n	80090bc <CO_new+0x234>
 80090a6:	e000      	b.n	80090aa <CO_new+0x222>

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 80090a8:	e009      	b.n	80090be <CO_new+0x236>

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	3390      	adds	r3, #144	; 0x90
 80090ae:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	601a      	str	r2, [r3, #0]
        coFinal = co;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	617b      	str	r3, [r7, #20]
 80090ba:	e000      	b.n	80090be <CO_new+0x236>

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80090bc:	bf00      	nop
        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
        coFinal = co;
    } while (false);

    if (coFinal == NULL) {
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d102      	bne.n	80090ca <CO_new+0x242>
        CO_delete(co);
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 f80b 	bl	80090e0 <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <CO_new+0x24e>
        *heapMemoryUsed = mem;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 80090d6:	697b      	ldr	r3, [r7, #20]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <CO_delete>:

void CO_delete(CO_t *co) {
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d100      	bne.n	80090f0 <CO_delete+0x10>
        return;
 80090ee:	e052      	b.n	8009196 <CO_delete+0xb6>
    }

    CO_CANmodule_disable(co->CANmodule);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fd43 	bl	8009b80 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	4618      	mov	r0, r3
 8009100:	f001 f9a8 	bl	800a454 <free>
    CO_free(co->CANrx);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	4618      	mov	r0, r3
 800910a:	f001 f9a3 	bl	800a454 <free>
    CO_free(co->CANmodule);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	4618      	mov	r0, r3
 8009114:	f001 f99e 	bl	800a454 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800911c:	4618      	mov	r0, r3
 800911e:	f001 f999 	bl	800a454 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009126:	4618      	mov	r0, r3
 8009128:	f001 f994 	bl	800a454 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009130:	4618      	mov	r0, r3
 8009132:	f001 f98f 	bl	800a454 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913a:	4618      	mov	r0, r3
 800913c:	f001 f98a 	bl	800a454 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	4618      	mov	r0, r3
 8009146:	f001 f985 	bl	800a454 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914e:	4618      	mov	r0, r3
 8009150:	f001 f980 	bl	800a454 <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	4618      	mov	r0, r3
 800915a:	f001 f97b 	bl	800a454 <free>

    /* Emergency */
    CO_free(co->em);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	4618      	mov	r0, r3
 8009164:	f001 f976 	bl	800a454 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	4618      	mov	r0, r3
 800916e:	f001 f971 	bl	800a454 <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	4618      	mov	r0, r3
 8009178:	f001 f96c 	bl	800a454 <free>
    CO_free(co->HBcons);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	4618      	mov	r0, r3
 8009182:	f001 f967 	bl	800a454 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	4618      	mov	r0, r3
 800918c:	f001 f962 	bl	800a454 <free>

    /* CANopen object */
    CO_free(co);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 f95f 	bl	800a454 <free>
}
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 800919c:	b580      	push	{r7, lr}
 800919e:	b08a      	sub	sp, #40	; 0x28
 80091a0:	af04      	add	r7, sp, #16
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	4613      	mov	r3, r2
 80091a8:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <CO_CANinit+0x18>
 80091b0:	23ff      	movs	r3, #255	; 0xff
 80091b2:	e019      	b.n	80091e8 <CO_CANinit+0x4c>

    co->CANmodule->CANnormal = false;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 80091bc:	68b8      	ldr	r0, [r7, #8]
 80091be:	f000 fc41 	bl	8009a44 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6859      	ldr	r1, [r3, #4]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	689a      	ldr	r2, [r3, #8]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	2306      	movs	r3, #6
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	88fb      	ldrh	r3, [r7, #6]
 80091d6:	9302      	str	r3, [sp, #8]
 80091d8:	4608      	mov	r0, r1
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	2306      	movs	r3, #6
 80091de:	f000 fc47 	bl	8009a70 <CO_CANmodule_init>
 80091e2:	4603      	mov	r3, r0
 80091e4:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	b25b      	sxtb	r3, r3
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3718      	adds	r7, #24
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop

080091f4 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08c      	sub	sp, #48	; 0x30
 80091f8:	af06      	add	r7, sp, #24
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <CO_LSSinit+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8009208:	23ff      	movs	r3, #255	; 0xff
 800920a:	e01a      	b.n	8009242 <CO_LSSinit+0x4e>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	9200      	str	r2, [sp, #0]
 800921a:	2205      	movs	r2, #5
 800921c:	9201      	str	r2, [sp, #4]
 800921e:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8009222:	9202      	str	r2, [sp, #8]
 8009224:	9303      	str	r3, [sp, #12]
 8009226:	2305      	movs	r3, #5
 8009228:	9304      	str	r3, [sp, #16]
 800922a:	f240 73e4 	movw	r3, #2020	; 0x7e4
 800922e:	9305      	str	r3, [sp, #20]
 8009230:	4608      	mov	r0, r1
 8009232:	68b9      	ldr	r1, [r7, #8]
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f7fa fbdc 	bl	80039f4 <CO_LSSslave_init>
 800923c:	4603      	mov	r3, r0
 800923e:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	b25b      	sxtb	r3, r3
}
 8009244:	4618      	mov	r0, r3
 8009246:	3718      	adds	r7, #24
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 800924c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800924e:	b091      	sub	sp, #68	; 0x44
 8009250:	af0a      	add	r7, sp, #40	; 0x28
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
 8009258:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <CO_CANopenInit+0x18>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8009260:	23ff      	movs	r3, #255	; 0xff
 8009262:	e133      	b.n	80094cc <CO_CANopenInit+0x280>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d102      	bne.n	8009270 <CO_CANopenInit+0x24>
        em = co->em;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8009276:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800927a:	2bff      	cmp	r3, #255	; 0xff
 800927c:	d103      	bne.n	8009286 <CO_CANopenInit+0x3a>
        co->nodeIdUnconfigured = true;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2201      	movs	r2, #1
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	e00a      	b.n	800929c <CO_CANopenInit+0x50>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8009286:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <CO_CANopenInit+0x4c>
 800928e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009292:	b25b      	sxtb	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	da01      	bge.n	800929c <CO_CANopenInit+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8009298:	23ff      	movs	r3, #255	; 0xff
 800929a:	e117      	b.n	80094cc <CO_CANopenInit+0x280>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fa fe4d 	bl	8003f40 <CO_LEDs_init>
 80092a6:	4603      	mov	r3, r0
 80092a8:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 80092aa:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <CO_CANopenInit+0x6a>
 80092b2:	7c7b      	ldrb	r3, [r7, #17]
 80092b4:	e10a      	b.n	80094cc <CO_CANopenInit+0x280>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <CO_CANopenInit+0x76>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 80092be:	23ed      	movs	r3, #237	; 0xed
 80092c0:	e104      	b.n	80094cc <CO_CANopenInit+0x280>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	69d8      	ldr	r0, [r3, #28]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	685e      	ldr	r6, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 80092ca:	4b83      	ldr	r3, [pc, #524]	; (80094d8 <CO_CANopenInit+0x28c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 80092d0:	f103 050c 	add.w	r5, r3, #12
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6a1c      	ldr	r4, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 80092d8:	4b7f      	ldr	r3, [pc, #508]	; (80094d8 <CO_CANopenInit+0x28c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 80092de:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 80092e2:	4b7d      	ldr	r3, [pc, #500]	; (80094d8 <CO_CANopenInit+0x28c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 80092e8:	3324      	adds	r3, #36	; 0x24
 80092ea:	2111      	movs	r1, #17
 80092ec:	9100      	str	r1, [sp, #0]
 80092ee:	9201      	str	r2, [sp, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	9202      	str	r2, [sp, #8]
 80092f4:	9303      	str	r3, [sp, #12]
 80092f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80092fa:	9304      	str	r3, [sp, #16]
 80092fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fe:	9305      	str	r3, [sp, #20]
 8009300:	4631      	mov	r1, r6
 8009302:	462a      	mov	r2, r5
 8009304:	4623      	mov	r3, r4
 8009306:	f7fb f913 	bl	8004530 <CO_EM_init>
 800930a:	4603      	mov	r3, r0
 800930c:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 800930e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <CO_CANopenInit+0xce>
 8009316:	7c7b      	ldrb	r3, [r7, #17]
 8009318:	e0d8      	b.n	80094cc <CO_CANopenInit+0x280>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	691e      	ldr	r6, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 800931e:	4b6e      	ldr	r3, [pc, #440]	; (80094d8 <CO_CANopenInit+0x28c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
        if (err) return err;
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8009324:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6859      	ldr	r1, [r3, #4]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009334:	b29b      	uxth	r3, r3
 8009336:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800933a:	b29b      	uxth	r3, r3
 800933c:	f897 4048 	ldrb.w	r4, [r7, #72]	; 0x48
 8009340:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 8009342:	9000      	str	r0, [sp, #0]
 8009344:	8f38      	ldrh	r0, [r7, #56]	; 0x38
 8009346:	9001      	str	r0, [sp, #4]
 8009348:	9102      	str	r1, [sp, #8]
 800934a:	2100      	movs	r1, #0
 800934c:	9103      	str	r1, [sp, #12]
 800934e:	2100      	movs	r1, #0
 8009350:	9104      	str	r1, [sp, #16]
 8009352:	9205      	str	r2, [sp, #20]
 8009354:	2204      	movs	r2, #4
 8009356:	9206      	str	r2, [sp, #24]
 8009358:	9307      	str	r3, [sp, #28]
 800935a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935c:	9308      	str	r3, [sp, #32]
 800935e:	4630      	mov	r0, r6
 8009360:	4629      	mov	r1, r5
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	4623      	mov	r3, r4
 8009366:	f7fb ff6b 	bl	8005240 <CO_NMT_init>
 800936a:	4603      	mov	r3, r0
 800936c:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 800936e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <CO_CANopenInit+0x12e>
 8009376:	7c7b      	ldrb	r3, [r7, #17]
 8009378:	e0a8      	b.n	80094cc <CO_CANopenInit+0x280>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6959      	ldr	r1, [r3, #20]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8009382:	4b55      	ldr	r3, [pc, #340]	; (80094d8 <CO_CANopenInit+0x28c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
        if (err) return err;
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 8009388:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	9200      	str	r2, [sp, #0]
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	2304      	movs	r3, #4
 8009396:	9302      	str	r3, [sp, #8]
 8009398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939a:	9303      	str	r3, [sp, #12]
 800939c:	4608      	mov	r0, r1
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4622      	mov	r2, r4
 80093a2:	2301      	movs	r3, #1
 80093a4:	f7fb fc4e 	bl	8004c44 <CO_HBconsumer_init>
 80093a8:	4603      	mov	r3, r0
 80093aa:	747b      	strb	r3, [r7, #17]
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 80093ac:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <CO_CANopenInit+0x16c>
 80093b4:	7c7b      	ldrb	r3, [r7, #17]
 80093b6:	e089      	b.n	80094cc <CO_CANopenInit+0x280>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 80093b8:	4b47      	ldr	r3, [pc, #284]	; (80094d8 <CO_CANopenInit+0x28c>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80093c2:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80093c4:	2300      	movs	r3, #0
 80093c6:	827b      	strh	r3, [r7, #18]
 80093c8:	e033      	b.n	8009432 <CO_CANopenInit+0x1e6>
            err = CO_SDOserver_init(&co->SDOserver[i],
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093d2:	21a8      	movs	r1, #168	; 0xa8
 80093d4:	fb01 f303 	mul.w	r3, r1, r3
 80093d8:	eb02 0e03 	add.w	lr, r2, r3
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f103 020c 	add.w	r2, r3, #12
 80093e2:	617a      	str	r2, [r7, #20]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	6854      	ldr	r4, [r2, #4]
 80093e8:	8a7a      	ldrh	r2, [r7, #18]
 80093ea:	3203      	adds	r2, #3
 80093ec:	b290      	uxth	r0, r2
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	6851      	ldr	r1, [r2, #4]
 80093f2:	8a7a      	ldrh	r2, [r7, #18]
 80093f4:	3203      	adds	r2, #3
 80093f6:	b292      	uxth	r2, r2
 80093f8:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 80093fc:	8fbd      	ldrh	r5, [r7, #60]	; 0x3c
 80093fe:	9500      	str	r5, [sp, #0]
 8009400:	9401      	str	r4, [sp, #4]
 8009402:	9002      	str	r0, [sp, #8]
 8009404:	9103      	str	r1, [sp, #12]
 8009406:	9204      	str	r2, [sp, #16]
 8009408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800940a:	9205      	str	r2, [sp, #20]
 800940c:	4670      	mov	r0, lr
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	461a      	mov	r2, r3
 8009412:	4633      	mov	r3, r6
 8009414:	f7fd fee6 	bl	80071e4 <CO_SDOserver_init>
 8009418:	4603      	mov	r3, r0
 800941a:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 800941c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <CO_CANopenInit+0x1dc>
 8009424:	7c7b      	ldrb	r3, [r7, #17]
 8009426:	e051      	b.n	80094cc <CO_CANopenInit+0x280>
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8009428:	8a7b      	ldrh	r3, [r7, #18]
 800942a:	b29b      	uxth	r3, r3
 800942c:	3301      	adds	r3, #1
 800942e:	b29b      	uxth	r3, r3
 8009430:	827b      	strh	r3, [r7, #18]
 8009432:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009436:	2b00      	cmp	r3, #0
 8009438:	ddc7      	ble.n	80093ca <CO_CANopenInit+0x17e>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6a98      	ldr	r0, [r3, #40]	; 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 800943e:	4b26      	ldr	r3, [pc, #152]	; (80094d8 <CO_CANopenInit+0x28c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 8009444:	f103 019c 	add.w	r1, r3, #156	; 0x9c
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	2302      	movs	r3, #2
 8009452:	f7ff fb8f 	bl	8008b74 <CO_TIME_init>
 8009456:	4603      	mov	r3, r0
 8009458:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 800945a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <CO_CANopenInit+0x21a>
 8009462:	7c7b      	ldrb	r3, [r7, #17]
 8009464:	e032      	b.n	80094cc <CO_CANopenInit+0x280>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6ade      	ldr	r6, [r3, #44]	; 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 800946a:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <CO_CANopenInit+0x28c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8009470:	f103 0530 	add.w	r5, r3, #48	; 0x30
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8009474:	4b18      	ldr	r3, [pc, #96]	; (80094d8 <CO_CANopenInit+0x28c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 800947a:	f103 043c 	add.w	r4, r3, #60	; 0x3c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 800947e:	4b16      	ldr	r3, [pc, #88]	; (80094d8 <CO_CANopenInit+0x28c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8009484:	f103 0048 	add.w	r0, r3, #72	; 0x48
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8009488:	4b13      	ldr	r3, [pc, #76]	; (80094d8 <CO_CANopenInit+0x28c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 800948e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	9000      	str	r0, [sp, #0]
 800949c:	9101      	str	r1, [sp, #4]
 800949e:	9202      	str	r2, [sp, #8]
 80094a0:	2201      	movs	r2, #1
 80094a2:	9203      	str	r2, [sp, #12]
 80094a4:	9304      	str	r3, [sp, #16]
 80094a6:	2300      	movs	r3, #0
 80094a8:	9305      	str	r3, [sp, #20]
 80094aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ac:	9306      	str	r3, [sp, #24]
 80094ae:	4630      	mov	r0, r6
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	462a      	mov	r2, r5
 80094b4:	4623      	mov	r3, r4
 80094b6:	f7ff f891 	bl	80085dc <CO_SYNC_init>
 80094ba:	4603      	mov	r3, r0
 80094bc:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 80094be:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <CO_CANopenInit+0x27e>
 80094c6:	7c7b      	ldrb	r3, [r7, #17]
 80094c8:	e000      	b.n	80094cc <CO_CANopenInit+0x280>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 80094ca:	2300      	movs	r3, #0
 80094cc:	b25b      	sxtb	r3, r3
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	371c      	adds	r7, #28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d6:	bf00      	nop
 80094d8:	1ffe92f0 	.word	0x1ffe92f0

080094dc <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 80094dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094de:	b08f      	sub	sp, #60	; 0x3c
 80094e0:	af06      	add	r7, sp, #24
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <CO_CANopenInitPDO+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80094f0:	23ff      	movs	r3, #255	; 0xff
 80094f2:	e06a      	b.n	80095ca <CO_CANopenInitPDO+0xee>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 80094f4:	78fb      	ldrb	r3, [r7, #3]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d007      	beq.n	800950a <CO_CANopenInitPDO+0x2e>
 80094fa:	78fb      	ldrb	r3, [r7, #3]
 80094fc:	b25b      	sxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	db03      	blt.n	800950a <CO_CANopenInitPDO+0x2e>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d008      	beq.n	800951c <CO_CANopenInitPDO+0x40>
        return (co->nodeIdUnconfigured)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <CO_CANopenInitPDO+0x3a>
 8009512:	23ed      	movs	r3, #237	; 0xed
 8009514:	e000      	b.n	8009518 <CO_CANopenInitPDO+0x3c>
 8009516:	23ff      	movs	r3, #255	; 0xff
 8009518:	b2db      	uxtb	r3, r3
 800951a:	e056      	b.n	80095ca <CO_CANopenInitPDO+0xee>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 800951c:	4b2d      	ldr	r3, [pc, #180]	; (80095d4 <CO_CANopenInitPDO+0xf8>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009526:	61fb      	str	r3, [r7, #28]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8009528:	4b2a      	ldr	r3, [pc, #168]	; (80095d4 <CO_CANopenInitPDO+0xf8>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8009532:	61bb      	str	r3, [r7, #24]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8009534:	2300      	movs	r3, #0
 8009536:	82fb      	strh	r3, [r7, #22]
 8009538:	e042      	b.n	80095c0 <CO_CANopenInitPDO+0xe4>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	82bb      	strh	r3, [r7, #20]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 800953e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009542:	2b03      	cmp	r3, #3
 8009544:	dc09      	bgt.n	800955a <CO_CANopenInitPDO+0x7e>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8009546:	8afb      	ldrh	r3, [r7, #22]
 8009548:	021b      	lsls	r3, r3, #8
 800954a:	b29a      	uxth	r2, r3
 800954c:	78fb      	ldrb	r3, [r7, #3]
 800954e:	b29b      	uxth	r3, r3
 8009550:	4413      	add	r3, r2
 8009552:	b29b      	uxth	r3, r3
 8009554:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8009558:	82bb      	strh	r3, [r7, #20]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800955e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009562:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8009566:	fb01 f303 	mul.w	r3, r1, r3
 800956a:	18d6      	adds	r6, r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8009570:	69fa      	ldr	r2, [r7, #28]
 8009572:	f102 030c 	add.w	r3, r2, #12
 8009576:	61fb      	str	r3, [r7, #28]
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	f103 010c 	add.w	r1, r3, #12
 800957e:	61b9      	str	r1, [r7, #24]
 8009580:	68f9      	ldr	r1, [r7, #12]
 8009582:	6848      	ldr	r0, [r1, #4]
 8009584:	8af9      	ldrh	r1, [r7, #22]
 8009586:	3102      	adds	r1, #2
 8009588:	b289      	uxth	r1, r1
 800958a:	8abc      	ldrh	r4, [r7, #20]
 800958c:	9400      	str	r4, [sp, #0]
 800958e:	9201      	str	r2, [sp, #4]
 8009590:	9302      	str	r3, [sp, #8]
 8009592:	9003      	str	r0, [sp, #12]
 8009594:	9104      	str	r1, [sp, #16]
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	9305      	str	r3, [sp, #20]
 800959a:	4630      	mov	r0, r6
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	462b      	mov	r3, r5
 80095a2:	f7fd f8b3 	bl	800670c <CO_TPDO_init>
 80095a6:	4603      	mov	r3, r0
 80095a8:	74fb      	strb	r3, [r7, #19]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 80095aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <CO_CANopenInitPDO+0xda>
 80095b2:	7cfb      	ldrb	r3, [r7, #19]
 80095b4:	e009      	b.n	80095ca <CO_CANopenInitPDO+0xee>

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80095b6:	8afb      	ldrh	r3, [r7, #22]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	3301      	adds	r3, #1
 80095bc:	b29b      	uxth	r3, r3
 80095be:	82fb      	strh	r3, [r7, #22]
 80095c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	ddb8      	ble.n	800953a <CO_CANopenInitPDO+0x5e>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 80095c8:	2300      	movs	r3, #0
 80095ca:	b25b      	sxtb	r3, r3
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3724      	adds	r7, #36	; 0x24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d4:	1ffe92f0 	.word	0x1ffe92f0

080095d8 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 80095d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095dc:	b092      	sub	sp, #72	; 0x48
 80095de:	af08      	add	r7, sp, #32
 80095e0:	60f8      	str	r0, [r7, #12]
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	607a      	str	r2, [r7, #4]
 80095e6:	603b      	str	r3, [r7, #0]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 80095e8:	2300      	movs	r3, #0
 80095ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff fc22 	bl	8008e3c <CO_NMT_getInternalState>
 80095f8:	4603      	mov	r3, r0
 80095fa:	747b      	strb	r3, [r7, #17]
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80095fc:	7c7b      	ldrb	r3, [r7, #17]
                                    || NMTstate == CO_NMT_OPERATIONAL);
 80095fe:	b25b      	sxtb	r3, r3
 8009600:	2b7f      	cmp	r3, #127	; 0x7f
 8009602:	d003      	beq.n	800960c <CO_process+0x34>
 8009604:	7c7b      	ldrb	r3, [r7, #17]
 8009606:	b25b      	sxtb	r3, r3
 8009608:	2b05      	cmp	r3, #5
 800960a:	d101      	bne.n	8009610 <CO_process+0x38>
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <CO_process+0x3a>
 8009610:	2300      	movs	r3, #0
                              uint32_t *timerNext_us)
{
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8009612:	61bb      	str	r3, [r7, #24]
                                    || NMTstate == CO_NMT_OPERATIONAL);

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 fbc5 	bl	8009da8 <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009622:	4618      	mov	r0, r3
 8009624:	f7fa fa5c 	bl	8003ae0 <CO_LSSslave_process>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 800962e:	2301      	movs	r3, #1
 8009630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	617b      	str	r3, [r7, #20]
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	8a5b      	ldrh	r3, [r3, #18]
 8009640:	827b      	strh	r3, [r7, #18]
    bool_t LSSslave_configuration = false;
 8009642:	2300      	movs	r3, #0
 8009644:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964a:	4618      	mov	r0, r3
 800964c:	f7ff fc0a 	bl	8008e64 <CO_LSSslave_getState>
 8009650:	4603      	mov	r3, r0
#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
    bool_t LSSslave_configuration = false;
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
 8009652:	2b01      	cmp	r3, #1
 8009654:	d101      	bne.n	800965a <CO_process+0x82>
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
    ) {
        LSSslave_configuration = true;
 8009656:	2301      	movs	r3, #1
 8009658:	623b      	str	r3, [r7, #32]
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <CO_process+0x90>
 8009664:	7c7d      	ldrb	r5, [r7, #17]
 8009666:	e000      	b.n	800966a <CO_process+0x92>
 8009668:	2500      	movs	r5, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 800966a:	8a7b      	ldrh	r3, [r7, #18]
 800966c:	f003 0304 	and.w	r3, r3, #4
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 8009670:	2b00      	cmp	r3, #0
 8009672:	bf14      	ite	ne
 8009674:	2301      	movne	r3, #1
 8009676:	2300      	moveq	r3, #0
 8009678:	b2db      	uxtb	r3, r3
 800967a:	469a      	mov	sl, r3
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 800967c:	8a7a      	ldrh	r2, [r7, #18]
 800967e:	f240 3303 	movw	r3, #771	; 0x303
 8009682:	4013      	ands	r3, r2
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 8009684:	2b00      	cmp	r3, #0
 8009686:	bf14      	ite	ne
 8009688:	2301      	movne	r3, #1
 800968a:	2300      	moveq	r3, #0
 800968c:	b2db      	uxtb	r3, r3
 800968e:	4699      	mov	r9, r3
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d107      	bne.n	80096a6 <CO_process+0xce>
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	69db      	ldr	r3, [r3, #28]
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 800969a:	4618      	mov	r0, r3
 800969c:	2118      	movs	r1, #24
 800969e:	f7ff fb8f 	bl	8008dc0 <CO_isError>
 80096a2:	4604      	mov	r4, r0
 80096a4:	e000      	b.n	80096a8 <CO_process+0xd0>
 80096a6:	2400      	movs	r4, #0
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d113      	bne.n	80096d6 <CO_process+0xfe>
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	4618      	mov	r0, r3
 80096b4:	211b      	movs	r1, #27
 80096b6:	f7ff fb83 	bl	8008dc0 <CO_isError>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d108      	bne.n	80096d2 <CO_process+0xfa>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	4618      	mov	r0, r3
 80096c6:	211c      	movs	r1, #28
 80096c8:	f7ff fb7a 	bl	8008dc0 <CO_isError>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <CO_process+0xfe>
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 80096d2:	2301      	movs	r3, #1
 80096d4:	e000      	b.n	80096d8 <CO_process+0x100>
 80096d6:	2300      	movs	r3, #0
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 80096d8:	4698      	mov	r8, r3
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
            CO_getErrorRegister(co->em) != 0,
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	4618      	mov	r0, r3
 80096e0:	f7ff fb96 	bl	8008e10 <CO_getErrorRegister>
 80096e4:	4603      	mov	r3, r0
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bf14      	ite	ne
 80096ea:	2301      	movne	r3, #1
 80096ec:	2300      	moveq	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	4619      	mov	r1, r3
 80096f2:	b26a      	sxtb	r2, r5
 80096f4:	f8cd a000 	str.w	sl, [sp]
 80096f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80096fc:	2300      	movs	r3, #0
 80096fe:	9302      	str	r3, [sp, #8]
 8009700:	9403      	str	r4, [sp, #12]
 8009702:	f8cd 8010 	str.w	r8, [sp, #16]
 8009706:	9105      	str	r1, [sp, #20]
 8009708:	2300      	movs	r3, #0
 800970a:	9306      	str	r3, [sp, #24]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	9307      	str	r3, [sp, #28]
 8009710:	4630      	mov	r0, r6
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	f7fa fc29 	bl	8003f6c <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <CO_process+0x150>
        return reset;
 8009722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009726:	e047      	b.n	80097b8 <CO_process+0x1e0>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	4618      	mov	r0, r3
 800972e:	69b9      	ldr	r1, [r7, #24]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	f7fa ffda 	bl	80046ec <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	f107 0311 	add.w	r3, r7, #17
 8009740:	4610      	mov	r0, r2
 8009742:	4619      	mov	r1, r3
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	f7fb fe34 	bl	80053b4 <CO_NMT_process>
 800974c:	4603      	mov	r3, r0
 800974e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8009752:	7c7b      	ldrb	r3, [r7, #17]
                             || NMTstate == CO_NMT_OPERATIONAL);
 8009754:	b25b      	sxtb	r3, r3
 8009756:	2b7f      	cmp	r3, #127	; 0x7f
 8009758:	d003      	beq.n	8009762 <CO_process+0x18a>
 800975a:	7c7b      	ldrb	r3, [r7, #17]
 800975c:	b25b      	sxtb	r3, r3
 800975e:	2b05      	cmp	r3, #5
 8009760:	d101      	bne.n	8009766 <CO_process+0x18e>
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <CO_process+0x190>
 8009766:	2300      	movs	r3, #0
        reset = CO_NMT_process(co->NMT,
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8009768:	61bb      	str	r3, [r7, #24]
                             || NMTstate == CO_NMT_OPERATIONAL);

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800976a:	2300      	movs	r3, #0
 800976c:	77fb      	strb	r3, [r7, #31]
 800976e:	e00f      	b.n	8009790 <CO_process+0x1b8>
        CO_SDOserver_process(&co->SDOserver[i],
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009774:	7ffb      	ldrb	r3, [r7, #31]
 8009776:	21a8      	movs	r1, #168	; 0xa8
 8009778:	fb01 f303 	mul.w	r3, r1, r3
 800977c:	4413      	add	r3, r2
 800977e:	4618      	mov	r0, r3
 8009780:	69b9      	ldr	r1, [r7, #24]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	f7fd fffd 	bl	8007784 <CO_SDOserver_process>
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                             || NMTstate == CO_NMT_OPERATIONAL);

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800978a:	7ffb      	ldrb	r3, [r7, #31]
 800978c:	3301      	adds	r3, #1
 800978e:	77fb      	strb	r3, [r7, #31]
 8009790:	7ffb      	ldrb	r3, [r7, #31]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0ec      	beq.n	8009770 <CO_process+0x198>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	4618      	mov	r0, r3
 800979c:	69b9      	ldr	r1, [r7, #24]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	f7fb fb8f 	bl	8004ec4 <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097aa:	4618      	mov	r0, r3
 80097ac:	69b9      	ldr	r1, [r7, #24]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	f7ff fa5e 	bl	8008c70 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 80097b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3728      	adds	r7, #40	; 0x28
 80097bc:	46bd      	mov	sp, r7
 80097be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097c2:	bf00      	nop

080097c4 <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80097d0:	2300      	movs	r3, #0
 80097d2:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d12c      	bne.n	8009836 <CO_process_SYNC+0x72>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff fb2b 	bl	8008e3c <CO_NMT_getInternalState>
 80097e6:	4603      	mov	r3, r0
 80097e8:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 80097ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80097ee:	2b7f      	cmp	r3, #127	; 0x7f
 80097f0:	d003      	beq.n	80097fa <CO_process_SYNC+0x36>
 80097f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80097f6:	2b05      	cmp	r3, #5
 80097f8:	d101      	bne.n	80097fe <CO_process_SYNC+0x3a>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e000      	b.n	8009800 <CO_process_SYNC+0x3c>
 80097fe:	2300      	movs	r3, #0
{
    bool_t syncWas = false;

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8009800:	617b      	str	r3, [r7, #20]
                                        || NMTstate == CO_NMT_OPERATIONAL);

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009806:	4618      	mov	r0, r3
 8009808:	6979      	ldr	r1, [r7, #20]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f7ff f807 	bl	8008820 <CO_SYNC_process>
 8009812:	4603      	mov	r3, r0
 8009814:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8009816:	7cfb      	ldrb	r3, [r7, #19]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d003      	beq.n	8009824 <CO_process_SYNC+0x60>
 800981c:	2b02      	cmp	r3, #2
 800981e:	d004      	beq.n	800982a <CO_process_SYNC+0x66>
 8009820:	2b00      	cmp	r3, #0
            case CO_SYNC_NONE:
                break;
 8009822:	e008      	b.n	8009836 <CO_process_SYNC+0x72>
            case CO_SYNC_RX_TX:
                syncWas = true;
 8009824:	2301      	movs	r3, #1
 8009826:	61fb      	str	r3, [r7, #28]
                break;
 8009828:	e005      	b.n	8009836 <CO_process_SYNC+0x72>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fa72 	bl	8009d18 <CO_CANclearPendingSyncPDOs>
                break;
 8009834:	bf00      	nop
        }
    }

    return syncWas;
 8009836:	69fb      	ldr	r3, [r7, #28]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af02      	add	r7, sp, #8
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
 800984c:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d000      	beq.n	8009858 <CO_process_RPDO+0x18>
        return;
 8009856:	e028      	b.n	80098aa <CO_process_RPDO+0x6a>
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	4618      	mov	r0, r3
 800985e:	f7ff faed 	bl	8008e3c <CO_NMT_getInternalState>
 8009862:	4603      	mov	r3, r0
 8009864:	2b05      	cmp	r3, #5
 8009866:	bf0c      	ite	eq
 8009868:	2301      	moveq	r3, #1
 800986a:	2300      	movne	r3, #0
 800986c:	b2db      	uxtb	r3, r3
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
        return;
    }

    bool_t NMTisOperational =
 800986e:	613b      	str	r3, [r7, #16]
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8009870:	2300      	movs	r3, #0
 8009872:	82fb      	strh	r3, [r7, #22]
 8009874:	e015      	b.n	80098a2 <CO_process_RPDO+0x62>
        CO_RPDO_process(&co->RPDO[i],
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800987a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800987e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8009882:	fb01 f303 	mul.w	r3, r1, r3
 8009886:	441a      	add	r2, r3
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	4610      	mov	r0, r2
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	f7fc fcb4 	bl	8006200 <CO_RPDO_process>
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8009898:	8afb      	ldrh	r3, [r7, #22]
 800989a:	b29b      	uxth	r3, r3
 800989c:	3301      	adds	r3, #1
 800989e:	b29b      	uxth	r3, r3
 80098a0:	82fb      	strh	r3, [r7, #22]
 80098a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	dbe5      	blt.n	8009876 <CO_process_RPDO+0x36>
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af02      	add	r7, sp, #8
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d000      	beq.n	80098c8 <CO_process_TPDO+0x18>
        return;
 80098c6:	e028      	b.n	800991a <CO_process_TPDO+0x6a>
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff fab5 	bl	8008e3c <CO_NMT_getInternalState>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b05      	cmp	r3, #5
 80098d6:	bf0c      	ite	eq
 80098d8:	2301      	moveq	r3, #1
 80098da:	2300      	movne	r3, #0
 80098dc:	b2db      	uxtb	r3, r3
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
        return;
    }

    bool_t NMTisOperational =
 80098de:	613b      	str	r3, [r7, #16]
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80098e0:	2300      	movs	r3, #0
 80098e2:	82fb      	strh	r3, [r7, #22]
 80098e4:	e015      	b.n	8009912 <CO_process_TPDO+0x62>
        CO_TPDO_process(&co->TPDO[i],
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80098ee:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80098f2:	fb01 f303 	mul.w	r3, r1, r3
 80098f6:	441a      	add	r2, r3
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	4610      	mov	r0, r2
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	683a      	ldr	r2, [r7, #0]
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f7fd f926 	bl	8006b54 <CO_TPDO_process>
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8009908:	8afb      	ldrh	r3, [r7, #22]
 800990a:	b29b      	uxth	r3, r3
 800990c:	3301      	adds	r3, #1
 800990e:	b29b      	uxth	r3, r3
 8009910:	82fb      	strh	r3, [r7, #22]
 8009912:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009916:	2b00      	cmp	r3, #0
 8009918:	dde5      	ble.n	80098e6 <CO_process_TPDO+0x36>
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009924:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009928:	4905      	ldr	r1, [pc, #20]	; (8009940 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800992a:	4b05      	ldr	r3, [pc, #20]	; (8009940 <__NVIC_SystemReset+0x20>)
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009932:	4b04      	ldr	r3, [pc, #16]	; (8009944 <__NVIC_SystemReset+0x24>)
 8009934:	4313      	orrs	r3, r2
 8009936:	60cb      	str	r3, [r1, #12]
 8009938:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800993c:	bf00      	nop
  }
 800993e:	e7fd      	b.n	800993c <__NVIC_SystemReset+0x1c>
 8009940:	e000ed00 	.word	0xe000ed00
 8009944:	05fa0004 	.word	0x05fa0004

08009948 <CAN_NODE_MO_UpdateID>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_UpdateID(const CAN_NODE_LMO_t * const lmo_ptr, const uint32_t id)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  XMC_CAN_MO_SetIdentifier(lmo_ptr->mo_ptr, id);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4618      	mov	r0, r3
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	f7f7 fc8d 	bl	8001278 <XMC_CAN_MO_SetIdentifier>
 }
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <xCANopenHardwareInit>:
 * @brief CAN Hardware Initialize
 * 
 * @return CANopenHardwareStatusTypeDef_t 
 */
CANopenHardwareStatusTypeDef_t xCANopenHardwareInit (void)
{
 8009964:	b480      	push	{r7}
 8009966:	af00      	add	r7, sp, #0

    /* Mailbox initialize */
    InitCanMailbox();
#endif

    return CAN_OPEN_HARDWARE_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <vResetModule>:
/**
 * @brief Reset MCU
 * 
 */
void vResetModule (void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
#ifdef TEST_ESP32
    esp_restart();
#endif
#ifdef TEST_INFINEON_XMC4800
    __NVIC_SystemReset();
 8009978:	f7ff ffd2 	bl	8009920 <__NVIC_SystemReset>

0800997c <xCANTransmitMessage>:
 * @return CANopenNodeStatusTypeDef_t
 *         CAN_OPEN_NODE_OK: Transmit message successfully
 *         CAN_OPEN_NODE_ERROR: Error transmit message
 */
CANopenNodeStatusTypeDef_t xCANTransmitMessage (CO_CANtx_t *xMessage)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
    } while((ECanaShadow.CANTA.all & usNumberMailbox) == 0 );

#endif
#ifdef TEST_INFINEON_XMC4800
    CAN_NODE_STATUS_t status;
    const CAN_NODE_LMO_t *HandlePtr = CAN_NODE_0.lmobj_ptr[0];
 8009984:	4b0e      	ldr	r3, [pc, #56]	; (80099c0 <xCANTransmitMessage+0x44>)
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	60fb      	str	r3, [r7, #12]

    CAN_NODE_MO_UpdateID(HandlePtr, xMessage->ident);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	4619      	mov	r1, r3
 8009992:	f7ff ffd9 	bl	8009948 <CAN_NODE_MO_UpdateID>
    status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr, xMessage->data);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3305      	adds	r3, #5
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	4619      	mov	r1, r3
 800999e:	f7f9 fa35 	bl	8002e0c <CAN_NODE_MO_UpdateData>
 80099a2:	4603      	mov	r3, r0
 80099a4:	72fb      	strb	r3, [r7, #11]

    if (status == CAN_NODE_STATUS_SUCCESS)
 80099a6:	7afb      	ldrb	r3, [r7, #11]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d104      	bne.n	80099b6 <xCANTransmitMessage+0x3a>
    {
    	CAN_NODE_MO_Transmit(HandlePtr);
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f7f9 fa09 	bl	8002dc4 <CAN_NODE_MO_Transmit>
    	return CAN_OPEN_NODE_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	e000      	b.n	80099b8 <xCANTransmitMessage+0x3c>
    }
#endif
    return CAN_OPEN_NODE_ERROR;
 80099b6:	2301      	movs	r3, #1
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	0800a794 	.word	0x0800a794

080099c4 <xCANReceiveMessage>:
 * @return CANopenNodeStatusTypeDef_t 
 *         CAN_OPEN_NODE_OK: Message received successfully
 *         CAN_OPEN_NODE_ERROR: No received message
 */
CANopenNodeStatusTypeDef_t xCANReceiveMessage (CO_CANrxMsg_t *xMessage)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
   xMessage->data[7] = Mailbox->MDH.byte.BYTE7;

   return CAN_OPEN_NODE_OK;
#endif
#ifdef TEST_INFINEON_XMC4800
    CAN_NODE_LMO_t *HandlePtr = CAN_NODE_0.lmobj_ptr[1];
 80099cc:	4b1c      	ldr	r3, [pc, #112]	; (8009a40 <xCANReceiveMessage+0x7c>)
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	613b      	str	r3, [r7, #16]
	XMC_CAN_MO_t *MessagePtr = HandlePtr->mo_ptr;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	60fb      	str	r3, [r7, #12]

	if(CAN_NODE_MO_GetStatus(HandlePtr) & XMC_CAN_MO_STATUS_RX_PENDING)
 80099d8:	6938      	ldr	r0, [r7, #16]
 80099da:	f7f9 fa37 	bl	8002e4c <CAN_NODE_MO_GetStatus>
 80099de:	4603      	mov	r3, r0
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d026      	beq.n	8009a36 <xCANReceiveMessage+0x72>
	{
       CAN_NODE_MO_ClearStatus(HandlePtr, XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80099e8:	6938      	ldr	r0, [r7, #16]
 80099ea:	2101      	movs	r1, #1
 80099ec:	f7f9 fa3e 	bl	8002e6c <CAN_NODE_MO_ClearStatus>
       CAN_NODE_MO_Receive(HandlePtr);
 80099f0:	6938      	ldr	r0, [r7, #16]
 80099f2:	f7f9 f9f9 	bl	8002de8 <CAN_NODE_MO_Receive>

       xMessage->ident = MessagePtr->can_identifier;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80099fe:	461a      	mov	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	601a      	str	r2, [r3, #0]
       xMessage->DLC = MessagePtr->can_data_length;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	7b1a      	ldrb	r2, [r3, #12]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	711a      	strb	r2, [r3, #4]
       for(int i = 0; i < 8; i++)
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	e00c      	b.n	8009a2c <xCANReceiveMessage+0x68>
    	   xMessage->data[i] = MessagePtr->can_data_byte[i];
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	4413      	add	r3, r2
 8009a18:	3310      	adds	r3, #16
 8009a1a:	7819      	ldrb	r1, [r3, #0]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	460a      	mov	r2, r1
 8009a24:	715a      	strb	r2, [r3, #5]
       CAN_NODE_MO_ClearStatus(HandlePtr, XMC_CAN_MO_RESET_STATUS_RX_PENDING);
       CAN_NODE_MO_Receive(HandlePtr);

       xMessage->ident = MessagePtr->can_identifier;
       xMessage->DLC = MessagePtr->can_data_length;
       for(int i = 0; i < 8; i++)
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2b07      	cmp	r3, #7
 8009a30:	ddef      	ble.n	8009a12 <xCANReceiveMessage+0x4e>
    	   xMessage->data[i] = MessagePtr->can_data_byte[i];

       return CAN_OPEN_NODE_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	e000      	b.n	8009a38 <xCANReceiveMessage+0x74>
	}
	return CAN_OPEN_NODE_ERROR;
 8009a36:	2301      	movs	r3, #1
#endif
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	0800a794 	.word	0x0800a794

08009a44 <CO_CANsetConfigurationMode>:
#include "301/CO_driver.h"
#include "CANopenHardware.h"
#include "CANopenNode.h"

/******************************************************************************/
void CO_CANsetConfigurationMode(void *CANptr){
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
}
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop

08009a58 <CO_CANsetNormalMode>:


/******************************************************************************/
void CO_CANsetNormalMode(CO_CANmodule_t *CANmodule){
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */

    CANmodule->CANnormal = true;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	615a      	str	r2, [r3, #20]
}
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <CO_CANmodule_init>:
        CO_CANrx_t              rxArray[],
        uint16_t                rxSize,
        CO_CANtx_t              txArray[],
        uint16_t                txSize,
        uint16_t                CANbitRate)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	807b      	strh	r3, [r7, #2]
    uint16_t i;

    /* verify arguments */
    if(CANmodule==NULL || rxArray==NULL || txArray==NULL){
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d005      	beq.n	8009a90 <CO_CANmodule_init+0x20>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <CO_CANmodule_init+0x20>
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <CO_CANmodule_init+0x24>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8009a90:	23ff      	movs	r3, #255	; 0xff
 8009a92:	e06d      	b.n	8009b70 <CO_CANmodule_init+0x100>
    }

    /* Configure object variables */
    CANmodule->CANptr = CANptr;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	601a      	str	r2, [r3, #0]
    CANmodule->rxArray = rxArray;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	887a      	ldrh	r2, [r7, #2]
 8009aa4:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6a3a      	ldr	r2, [r7, #32]
 8009aaa:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ab0:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false;     // (rxSize <= 32U) ? true : false;  /* microcontroller dependent */
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	629a      	str	r2, [r3, #40]	; 0x28

    for(i=0U; i<rxSize; i++){
 8009adc:	2300      	movs	r3, #0
 8009ade:	82fb      	strh	r3, [r7, #22]
 8009ae0:	e02b      	b.n	8009b3a <CO_CANmodule_init+0xca>
        rxArray[i].ident = 0U;
 8009ae2:	8afa      	ldrh	r2, [r7, #22]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	4413      	add	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	461a      	mov	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4413      	add	r3, r2
 8009af2:	2200      	movs	r2, #0
 8009af4:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8009af6:	8afa      	ldrh	r2, [r7, #22]
 8009af8:	4613      	mov	r3, r2
 8009afa:	005b      	lsls	r3, r3, #1
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	461a      	mov	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4413      	add	r3, r2
 8009b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b0a:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8009b0c:	8afa      	ldrh	r2, [r7, #22]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	005b      	lsls	r3, r3, #1
 8009b12:	4413      	add	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	461a      	mov	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8009b20:	8afa      	ldrh	r2, [r7, #22]
 8009b22:	4613      	mov	r3, r2
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4413      	add	r3, r2
 8009b30:	2200      	movs	r2, #0
 8009b32:	609a      	str	r2, [r3, #8]
    CANmodule->bufferInhibitFlag = false;
    CANmodule->firstCANtxMessage = true;
    CANmodule->CANtxCount = 0U;
    CANmodule->errOld = 0U;

    for(i=0U; i<rxSize; i++){
 8009b34:	8afb      	ldrh	r3, [r7, #22]
 8009b36:	3301      	adds	r3, #1
 8009b38:	82fb      	strh	r3, [r7, #22]
 8009b3a:	8afa      	ldrh	r2, [r7, #22]
 8009b3c:	887b      	ldrh	r3, [r7, #2]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d3cf      	bcc.n	8009ae2 <CO_CANmodule_init+0x72>
        rxArray[i].ident = 0U;
        rxArray[i].mask = 0xFFFFU;
        rxArray[i].object = NULL;
        rxArray[i].CANrx_callback = NULL;
    }
    for(i=0U; i<txSize; i++){
 8009b42:	2300      	movs	r3, #0
 8009b44:	82fb      	strh	r3, [r7, #22]
 8009b46:	e00c      	b.n	8009b62 <CO_CANmodule_init+0xf2>
        txArray[i].bufferFull = false;
 8009b48:	8afa      	ldrh	r2, [r7, #22]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	4413      	add	r3, r2
 8009b50:	00db      	lsls	r3, r3, #3
 8009b52:	461a      	mov	r2, r3
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	4413      	add	r3, r2
 8009b58:	2200      	movs	r2, #0
 8009b5a:	611a      	str	r2, [r3, #16]
        rxArray[i].ident = 0U;
        rxArray[i].mask = 0xFFFFU;
        rxArray[i].object = NULL;
        rxArray[i].CANrx_callback = NULL;
    }
    for(i=0U; i<txSize; i++){
 8009b5c:	8afb      	ldrh	r3, [r7, #22]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	82fb      	strh	r3, [r7, #22]
 8009b62:	8afa      	ldrh	r2, [r7, #22]
 8009b64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d3ee      	bcc.n	8009b48 <CO_CANmodule_init+0xd8>

    /* Configure CAN timing */


    /* Configure CAN module hardware filters */
    if(CANmodule->useCANrxFilters){
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	699b      	ldr	r3, [r3, #24]


    /* configure CAN interrupt registers */


    return CO_ERROR_NO;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	b25b      	sxtb	r3, r3
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	371c      	adds	r7, #28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop

08009b80 <CO_CANmodule_disable>:


/******************************************************************************/
void CO_CANmodule_disable(CO_CANmodule_t *CANmodule) {
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL) {
        /* turn off the module */
    }
}
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop

08009b94 <CO_CANrxBufferInit>:
        uint16_t                ident,
        uint16_t                mask,
        bool_t                  rtr,
        void                   *object,
        void                  (*CANrx_callback)(void *object, void *message))
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	817b      	strh	r3, [r7, #10]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	813b      	strh	r3, [r7, #8]
 8009baa:	4613      	mov	r3, r2
 8009bac:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	75fb      	strb	r3, [r7, #23]

    if((CANmodule!=NULL) && (object!=NULL) && (CANrx_callback!=NULL) && (index < CANmodule->rxSize)){
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d035      	beq.n	8009c24 <CO_CANrxBufferInit+0x90>
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d032      	beq.n	8009c24 <CO_CANrxBufferInit+0x90>
 8009bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d02f      	beq.n	8009c24 <CO_CANrxBufferInit+0x90>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	891b      	ldrh	r3, [r3, #8]
 8009bc8:	897a      	ldrh	r2, [r7, #10]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d22a      	bcs.n	8009c24 <CO_CANrxBufferInit+0x90>
        /* buffer, which will be configured */
        CO_CANrx_t *buffer = &CANmodule->rxArray[index];
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6859      	ldr	r1, [r3, #4]
 8009bd2:	897a      	ldrh	r2, [r7, #10]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	4413      	add	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	440b      	add	r3, r1
 8009bde:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be4:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009bea:	609a      	str	r2, [r3, #8]

        /* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
        buffer->ident = ident & 0x07FFU;
 8009bec:	893b      	ldrh	r3, [r7, #8]
 8009bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	801a      	strh	r2, [r3, #0]
        if(rtr){
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d006      	beq.n	8009c0c <CO_CANrxBufferInit+0x78>
            buffer->ident |= 0x0800U;
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	801a      	strh	r2, [r3, #0]
        }
        buffer->mask = (mask & 0x07FFU) | 0x0800U;
 8009c0c:	88fb      	ldrh	r3, [r7, #6]
 8009c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if(CANmodule->useCANrxFilters){
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	699b      	ldr	r3, [r3, #24]
        void                   *object,
        void                  (*CANrx_callback)(void *object, void *message))
{
    CO_ReturnError_t ret = CO_ERROR_NO;

    if((CANmodule!=NULL) && (object!=NULL) && (CANrx_callback!=NULL) && (index < CANmodule->rxSize)){
 8009c22:	e001      	b.n	8009c28 <CO_CANrxBufferInit+0x94>
        if(CANmodule->useCANrxFilters){

        }
    }
    else{
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8009c24:	23ff      	movs	r3, #255	; 0xff
 8009c26:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	b25b      	sxtb	r3, r3
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	371c      	adds	r7, #28
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <CO_CANtxBufferInit>:
        uint16_t                index,
        uint16_t                ident,
        bool_t                  rtr,
        uint8_t                 noOfBytes,
        bool_t                  syncFlag)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	607b      	str	r3, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	817b      	strh	r3, [r7, #10]
 8009c46:	4613      	mov	r3, r2
 8009c48:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t *buffer = NULL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]

    if((CANmodule != NULL) && (index < CANmodule->txSize)){
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d01f      	beq.n	8009c94 <CO_CANtxBufferInit+0x5c>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8a1b      	ldrh	r3, [r3, #16]
 8009c58:	897a      	ldrh	r2, [r7, #10]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d21a      	bcs.n	8009c94 <CO_CANtxBufferInit+0x5c>
        /* get specific buffer */
        buffer = &CANmodule->txArray[index];
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	68d9      	ldr	r1, [r3, #12]
 8009c62:	897a      	ldrh	r2, [r7, #10]
 8009c64:	4613      	mov	r3, r2
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	4413      	add	r3, r2
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	440b      	add	r3, r1
 8009c6e:	617b      	str	r3, [r7, #20]
        /*
        buffer->ident = ((uint32_t)ident & 0x07FFU)
                      | ((uint32_t)(((uint32_t)noOfBytes & 0xFU) << 12U))
                      | ((uint32_t)(rtr ? 0x8000U : 0U));
        */
        buffer->ident = ident & 0x07FFU;
 8009c70:	893b      	ldrh	r3, [r7, #8]
 8009c72:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes & 0xFU;
 8009c7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c7e:	f003 030f 	and.w	r3, r3, #15
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	711a      	strb	r2, [r3, #4]

        buffer->bufferFull = false;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c92:	615a      	str	r2, [r3, #20]
    }

    return buffer;
 8009c94:	697b      	ldr	r3, [r7, #20]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	371c      	adds	r7, #28
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop

08009ca4 <CO_CANsend>:


/******************************************************************************/
CO_ReturnError_t CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer){
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
    CANopenNodeStatusTypeDef_t ret;

    /* Verify overflow */
    if(buffer->bufferFull){
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00c      	beq.n	8009cd4 <CO_CANsend+0x30>
        if(!CANmodule->firstCANtxMessage){
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d106      	bne.n	8009cd0 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	8a5b      	ldrh	r3, [r3, #18]
 8009cc6:	f043 0308 	orr.w	r3, r3, #8
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8009cd0:	23f7      	movs	r3, #247	; 0xf7
 8009cd2:	73fb      	strb	r3, [r7, #15]
    }

    CO_LOCK_CAN_SEND(CANmodule);
    /* if CAN TX buffer is free, copy message to it */
    ret = xCANTransmitMessage(buffer);
 8009cd4:	6838      	ldr	r0, [r7, #0]
 8009cd6:	f7ff fe51 	bl	800997c <xCANTransmitMessage>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73bb      	strb	r3, [r7, #14]

    if(ret == CAN_OPEN_NODE_OK && CANmodule->CANtxCount == 0){
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d109      	bne.n	8009cf8 <CO_CANsend+0x54>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <CO_CANsend+0x54>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	695a      	ldr	r2, [r3, #20]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	61da      	str	r2, [r3, #28]
 8009cf6:	e009      	b.n	8009d0c <CO_CANsend+0x68>
        /* copy message and txRequest */
    }
    /* if no buffer is free, message will be sent by interrupt */
    else{
        buffer->bufferFull = true;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	3301      	adds	r3, #1
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);

    return err;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	b25b      	sxtb	r3, r3
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <CO_CANclearPendingSyncPDOs>:


/******************************************************************************/
void CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule){
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	617b      	str	r3, [r7, #20]

    CO_LOCK_CAN_SEND(CANmodule);
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if(/*messageIsOnCanBuffer && */CANmodule->bufferInhibitFlag){
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d004      	beq.n	8009d36 <CO_CANclearPendingSyncPDOs+0x1e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8009d32:	2301      	movs	r3, #1
 8009d34:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if(CANmodule->CANtxCount != 0U){
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d023      	beq.n	8009d88 <CO_CANclearPendingSyncPDOs+0x70>
        uint16_t i;
        CO_CANtx_t *buffer = &CANmodule->txArray[0];
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	60fb      	str	r3, [r7, #12]
        for(i = CANmodule->txSize; i > 0U; i--){
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	8a1b      	ldrh	r3, [r3, #16]
 8009d4a:	827b      	strh	r3, [r7, #18]
 8009d4c:	e019      	b.n	8009d82 <CO_CANclearPendingSyncPDOs+0x6a>
            if(buffer->bufferFull){
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00f      	beq.n	8009d76 <CO_CANclearPendingSyncPDOs+0x5e>
                if(buffer->syncFlag){
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00b      	beq.n	8009d76 <CO_CANclearPendingSyncPDOs+0x5e>
                    buffer->bufferFull = false;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 8009d72:	2302      	movs	r3, #2
 8009d74:	617b      	str	r3, [r7, #20]
                }
            }
            buffer++;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3318      	adds	r3, #24
 8009d7a:	60fb      	str	r3, [r7, #12]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if(CANmodule->CANtxCount != 0U){
        uint16_t i;
        CO_CANtx_t *buffer = &CANmodule->txArray[0];
        for(i = CANmodule->txSize; i > 0U; i--){
 8009d7c:	8a7b      	ldrh	r3, [r7, #18]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	827b      	strh	r3, [r7, #18]
 8009d82:	8a7b      	ldrh	r3, [r7, #18]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1e2      	bne.n	8009d4e <CO_CANclearPendingSyncPDOs+0x36>
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);


    if(tpdoDeleted != 0U){
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d006      	beq.n	8009d9c <CO_CANclearPendingSyncPDOs+0x84>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	8a5b      	ldrh	r3, [r3, #18]
 8009d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	825a      	strh	r2, [r3, #18]
    }
}
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop

08009da8 <CO_CANmodule_process>:
/******************************************************************************/
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors=0, txErrors=0, overflow=0;

void CO_CANmodule_process(CO_CANmodule_t *CANmodule) {
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
    uint32_t err;

    err = ((uint32_t)txErrors << 16) | ((uint32_t)rxErrors << 8) | overflow;
 8009db0:	4b2f      	ldr	r3, [pc, #188]	; (8009e70 <CO_CANmodule_process+0xc8>)
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	041a      	lsls	r2, r3, #16
 8009db6:	4b2f      	ldr	r3, [pc, #188]	; (8009e74 <CO_CANmodule_process+0xcc>)
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	021b      	lsls	r3, r3, #8
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	4a2e      	ldr	r2, [pc, #184]	; (8009e78 <CO_CANmodule_process+0xd0>)
 8009dc0:	8812      	ldrh	r2, [r2, #0]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60bb      	str	r3, [r7, #8]

    if (CANmodule->errOld != err) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d04a      	beq.n	8009e66 <CO_CANmodule_process+0xbe>
        uint16_t status = CANmodule->CANerrorStatus;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	8a5b      	ldrh	r3, [r3, #18]
 8009dd4:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	629a      	str	r2, [r3, #40]	; 0x28

        if (txErrors >= 256U) {
 8009ddc:	4b24      	ldr	r3, [pc, #144]	; (8009e70 <CO_CANmodule_process+0xc8>)
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	2bff      	cmp	r3, #255	; 0xff
 8009de2:	d904      	bls.n	8009dee <CO_CANmodule_process+0x46>
            /* bus off */
            status |= CO_CAN_ERRTX_BUS_OFF;
 8009de4:	89fb      	ldrh	r3, [r7, #14]
 8009de6:	f043 0304 	orr.w	r3, r3, #4
 8009dea:	81fb      	strh	r3, [r7, #14]
 8009dec:	e030      	b.n	8009e50 <CO_CANmodule_process+0xa8>
        }
        else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF ^ (CO_CAN_ERRTX_BUS_OFF |
 8009dee:	89fb      	ldrh	r3, [r7, #14]
 8009df0:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 8009df4:	f023 0303 	bic.w	r3, r3, #3
 8009df8:	81fb      	strh	r3, [r7, #14]
                                CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE |
                                CO_CAN_ERRTX_WARNING | CO_CAN_ERRTX_PASSIVE);

            /* rx bus warning or passive */
            if (rxErrors >= 128) {
 8009dfa:	4b1e      	ldr	r3, [pc, #120]	; (8009e74 <CO_CANmodule_process+0xcc>)
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8009e00:	d904      	bls.n	8009e0c <CO_CANmodule_process+0x64>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE;
 8009e02:	89fb      	ldrh	r3, [r7, #14]
 8009e04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009e08:	81fb      	strh	r3, [r7, #14]
 8009e0a:	e007      	b.n	8009e1c <CO_CANmodule_process+0x74>
            } else if (rxErrors >= 96) {
 8009e0c:	4b19      	ldr	r3, [pc, #100]	; (8009e74 <CO_CANmodule_process+0xcc>)
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	2b5f      	cmp	r3, #95	; 0x5f
 8009e12:	d903      	bls.n	8009e1c <CO_CANmodule_process+0x74>
                status |= CO_CAN_ERRRX_WARNING;
 8009e14:	89fb      	ldrh	r3, [r7, #14]
 8009e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e1a:	81fb      	strh	r3, [r7, #14]
            }

            /* tx bus warning or passive */
            if (txErrors >= 128) {
 8009e1c:	4b14      	ldr	r3, [pc, #80]	; (8009e70 <CO_CANmodule_process+0xc8>)
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	2b7f      	cmp	r3, #127	; 0x7f
 8009e22:	d904      	bls.n	8009e2e <CO_CANmodule_process+0x86>
                status |= CO_CAN_ERRTX_WARNING | CO_CAN_ERRTX_PASSIVE;
 8009e24:	89fb      	ldrh	r3, [r7, #14]
 8009e26:	f043 0303 	orr.w	r3, r3, #3
 8009e2a:	81fb      	strh	r3, [r7, #14]
 8009e2c:	e007      	b.n	8009e3e <CO_CANmodule_process+0x96>
            } else if (rxErrors >= 96) {
 8009e2e:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <CO_CANmodule_process+0xcc>)
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	2b5f      	cmp	r3, #95	; 0x5f
 8009e34:	d903      	bls.n	8009e3e <CO_CANmodule_process+0x96>
                status |= CO_CAN_ERRTX_WARNING;
 8009e36:	89fb      	ldrh	r3, [r7, #14]
 8009e38:	f043 0301 	orr.w	r3, r3, #1
 8009e3c:	81fb      	strh	r3, [r7, #14]
            }

            /* if not tx passive clear also overflow */
            if ((status & CO_CAN_ERRTX_PASSIVE) == 0) {
 8009e3e:	89fb      	ldrh	r3, [r7, #14]
 8009e40:	f003 0302 	and.w	r3, r3, #2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d103      	bne.n	8009e50 <CO_CANmodule_process+0xa8>
                status &= 0xFFFF ^ CO_CAN_ERRTX_OVERFLOW;
 8009e48:	89fb      	ldrh	r3, [r7, #14]
 8009e4a:	f023 0308 	bic.w	r3, r3, #8
 8009e4e:	81fb      	strh	r3, [r7, #14]
            }
        }

        if (overflow != 0) {
 8009e50:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <CO_CANmodule_process+0xd0>)
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d003      	beq.n	8009e60 <CO_CANmodule_process+0xb8>
            /* CAN RX bus overflow */
            status |= CO_CAN_ERRRX_OVERFLOW;
 8009e58:	89fb      	ldrh	r3, [r7, #14]
 8009e5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e5e:	81fb      	strh	r3, [r7, #14]
        }

        CANmodule->CANerrorStatus = status;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	89fa      	ldrh	r2, [r7, #14]
 8009e64:	825a      	strh	r2, [r3, #18]
    }
}
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	1ffe939e 	.word	0x1ffe939e
 8009e74:	1ffe939c 	.word	0x1ffe939c
 8009e78:	1ffe93a0 	.word	0x1ffe93a0

08009e7c <CO_CANinterrupt>:


/******************************************************************************/

void CO_CANinterrupt(CO_CANmodule_t *CANmodule){
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08c      	sub	sp, #48	; 0x30
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
    /* receive interrupt */
    if(1){
        CO_CANrxMsg_t *rcvMsg;      /* pointer to received message in CAN module */
        uint16_t index;             /* index of received message */
        uint32_t rcvMsgIdent;       /* identifier of the received message */
        CO_CANrx_t *buffer = NULL;  /* receive message buffer from CO_CANmodule_t object. */
 8009e84:	2300      	movs	r3, #0
 8009e86:	62bb      	str	r3, [r7, #40]	; 0x28
        bool_t msgMatched = false;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	627b      	str	r3, [r7, #36]	; 0x24

        CO_CANrxMsg_t receivedMessage;
        rcvMsg = &receivedMessage;
 8009e8c:	f107 0308 	add.w	r3, r7, #8
 8009e90:	623b      	str	r3, [r7, #32]
        rcvMsgIdent = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	61fb      	str	r3, [r7, #28]

        CANopenNodeStatusTypeDef_t ret = xCANReceiveMessage(rcvMsg);
 8009e96:	6a38      	ldr	r0, [r7, #32]
 8009e98:	f7ff fd94 	bl	80099c4 <xCANReceiveMessage>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	76fb      	strb	r3, [r7, #27]

        if (ret == CAN_OPEN_NODE_OK)
 8009ea0:	7efb      	ldrb	r3, [r7, #27]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d151      	bne.n	8009f4a <CO_CANinterrupt+0xce>
        {
            rcvMsgIdent = rcvMsg->ident;
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	61fb      	str	r3, [r7, #28]
        
            if(CANmodule->useCANrxFilters){
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d01c      	beq.n	8009eee <CO_CANinterrupt+0x72>
                /* CAN module filters are used. Message with known 11-bit identifier has */
                /* been received */
                index = 0;  /* get index of the received message here. Or something similar */
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
                if(index < CANmodule->rxSize){
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	891b      	ldrh	r3, [r3, #8]
 8009ebc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d232      	bcs.n	8009f28 <CO_CANinterrupt+0xac>
                    buffer = &CANmodule->rxArray[index];
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6859      	ldr	r1, [r3, #4]
 8009ec6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ec8:	4613      	mov	r3, r2
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	62bb      	str	r3, [r7, #40]	; 0x28
                    /* verify also RTR */
                    if(((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U){
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	4053      	eors	r3, r2
 8009ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ee0:	8852      	ldrh	r2, [r2, #2]
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d11f      	bne.n	8009f28 <CO_CANinterrupt+0xac>
                        msgMatched = true;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	627b      	str	r3, [r7, #36]	; 0x24
 8009eec:	e01c      	b.n	8009f28 <CO_CANinterrupt+0xac>
                }
            }
            else{
                /* CAN module filters are not used, message with any standard 11-bit identifier */
                /* has been received. Search rxArray form CANmodule for the same CAN-ID. */
                buffer = &CANmodule->rxArray[0];
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	62bb      	str	r3, [r7, #40]	; 0x28
                for(index = CANmodule->rxSize; index > 0U; index--){
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	891b      	ldrh	r3, [r3, #8]
 8009ef8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009efa:	e012      	b.n	8009f22 <CO_CANinterrupt+0xa6>
                    if(((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U){
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	461a      	mov	r2, r3
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	4053      	eors	r3, r2
 8009f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f08:	8852      	ldrh	r2, [r2, #2]
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d102      	bne.n	8009f16 <CO_CANinterrupt+0x9a>
                        msgMatched = true;
 8009f10:	2301      	movs	r3, #1
 8009f12:	627b      	str	r3, [r7, #36]	; 0x24
                        break;
 8009f14:	e008      	b.n	8009f28 <CO_CANinterrupt+0xac>
                    }
                    buffer++;
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	330c      	adds	r3, #12
 8009f1a:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            else{
                /* CAN module filters are not used, message with any standard 11-bit identifier */
                /* has been received. Search rxArray form CANmodule for the same CAN-ID. */
                buffer = &CANmodule->rxArray[0];
                for(index = CANmodule->rxSize; index > 0U; index--){
 8009f1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009f22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1e9      	bne.n	8009efc <CO_CANinterrupt+0x80>
                    buffer++;
                }
            }

            /* Call specific function, which will process the message */
            if(msgMatched && (buffer != NULL) && (buffer->CANrx_callback != NULL)){
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00d      	beq.n	8009f4a <CO_CANinterrupt+0xce>
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <CO_CANinterrupt+0xce>
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d006      	beq.n	8009f4a <CO_CANinterrupt+0xce>
                buffer->CANrx_callback(buffer->object, (void*) rcvMsg);
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f42:	6852      	ldr	r2, [r2, #4]
 8009f44:	4610      	mov	r0, r2
 8009f46:	6a39      	ldr	r1, [r7, #32]
 8009f48:	4798      	blx	r3
        }
    }
    else{
        /* some other interrupt reason */
    }
}
 8009f4a:	3730      	adds	r7, #48	; 0x30
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <CO_eeprom_init>:
 * @param storageModule Pointer to storage module.
 *
 * @return True on success
 */
bool_t CO_eeprom_init(void *storageModule)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
    if (xEEPROM_Init() == EEPROM_STATUS_SUCCESS)
 8009f58:	f7f7 ffc2 	bl	8001ee0 <xEEPROM_Init>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <CO_eeprom_init+0x16>
        return true;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e000      	b.n	8009f68 <CO_eeprom_init+0x18>

    return false;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <CO_eeprom_getAddr>:
 * @param [out] overflow set to true, if not enough eeprom memory
 *
 * @return Asigned eeprom address
 */
size_t CO_eeprom_getAddr(void *storageModule, bool_t isAuto, size_t len, bool_t *overflow)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	603b      	str	r3, [r7, #0]
    size_t addr;

    if (isAuto) {
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d011      	beq.n	8009fa8 <CO_eeprom_getAddr+0x38>
        /* auto storage is processed byte by byte, no alignment necessary */
        addr = eepromAddrNextAuto;
 8009f84:	4b1b      	ldr	r3, [pc, #108]	; (8009ff4 <CO_eeprom_getAddr+0x84>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	617b      	str	r3, [r7, #20]
        eepromAddrNextAuto += len;
 8009f8a:	4b1a      	ldr	r3, [pc, #104]	; (8009ff4 <CO_eeprom_getAddr+0x84>)
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4413      	add	r3, r2
 8009f92:	4a18      	ldr	r2, [pc, #96]	; (8009ff4 <CO_eeprom_getAddr+0x84>)
 8009f94:	6013      	str	r3, [r2, #0]
        if (eepromAddrNextAuto > (CO_STORAGE_EEPROM_TOTAL_SIZE / 2)) {
 8009f96:	4b17      	ldr	r3, [pc, #92]	; (8009ff4 <CO_eeprom_getAddr+0x84>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f9e:	d921      	bls.n	8009fe4 <CO_eeprom_getAddr+0x74>
            *overflow = true;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	601a      	str	r2, [r3, #0]
 8009fa6:	e01d      	b.n	8009fe4 <CO_eeprom_getAddr+0x74>
        }
    }
    else {
        /* addresses for storage on command must be page aligned */
        addr = eepromAddrNextProt;
 8009fa8:	4b13      	ldr	r3, [pc, #76]	; (8009ff8 <CO_eeprom_getAddr+0x88>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	617b      	str	r3, [r7, #20]
        size_t lenAligned = len & (~(CO_STORAGE_EEPROM_TOTAL_SIZE - 1));
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009fb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009fb8:	613b      	str	r3, [r7, #16]
        if (lenAligned < len) {
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d202      	bcs.n	8009fc8 <CO_eeprom_getAddr+0x58>
            lenAligned += CO_STORAGE_EEPROM_PAGE_SIZE;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	3340      	adds	r3, #64	; 0x40
 8009fc6:	613b      	str	r3, [r7, #16]
        }
        eepromAddrNextProt += lenAligned;
 8009fc8:	4b0b      	ldr	r3, [pc, #44]	; (8009ff8 <CO_eeprom_getAddr+0x88>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	4413      	add	r3, r2
 8009fd0:	4a09      	ldr	r2, [pc, #36]	; (8009ff8 <CO_eeprom_getAddr+0x88>)
 8009fd2:	6013      	str	r3, [r2, #0]
        if (eepromAddrNextProt > CO_STORAGE_EEPROM_TOTAL_SIZE) {
 8009fd4:	4b08      	ldr	r3, [pc, #32]	; (8009ff8 <CO_eeprom_getAddr+0x88>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fdc:	d902      	bls.n	8009fe4 <CO_eeprom_getAddr+0x74>
            *overflow = true;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]
        }
    }

    return addr;
 8009fe4:	697b      	ldr	r3, [r7, #20]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	1ffe93a4 	.word	0x1ffe93a4
 8009ff8:	1ffe88e0 	.word	0x1ffe88e0

08009ffc <CO_eeprom_readBlock>:
 * @param data Pointer to data buffer, where data will be stored.
 * @param eepromAddr Address in eeprom, from where data will be read.
 * @param len Length of the data block to be read.
 */
void CO_eeprom_readBlock(void *storageModule, uint8_t *data, size_t eepromAddr, size_t len)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
	vEEPROM_Read(eepromAddr, data, len);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	4610      	mov	r0, r2
 800a014:	68b9      	ldr	r1, [r7, #8]
 800a016:	461a      	mov	r2, r3
 800a018:	f7f8 f87e 	bl	8002118 <vEEPROM_Read>
}
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop

0800a024 <CO_eeprom_writeBlock>:
 * @param len Length of the data block.
 *
 * @return true on success
 */
bool_t CO_eeprom_writeBlock(void *storageModule, uint8_t *data, size_t eepromAddr, size_t len)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	603b      	str	r3, [r7, #0]
	if ( vEEPROM_Write(eepromAddr, data, (uint16_t)len) == EEPROM_STATUS_SUCCESS )
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	b29a      	uxth	r2, r3
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4610      	mov	r0, r2
 800a03c:	68b9      	ldr	r1, [r7, #8]
 800a03e:	461a      	mov	r2, r3
 800a040:	f7f8 f820 	bl	8002084 <vEEPROM_Write>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <CO_eeprom_writeBlock+0x2a>
		return true;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e000      	b.n	800a050 <CO_eeprom_writeBlock+0x2c>

	return false;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <CO_eeprom_getCrcBlock>:
 * @param len Length of the data.
 *
 * @return CRC checksum
 */
uint16_t CO_eeprom_getCrcBlock(void *storageModule, size_t eepromAddr, size_t len)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0;
 800a064:	2300      	movs	r3, #0
 800a066:	82fb      	strh	r3, [r7, #22]
    uint8_t *buf = malloc(len*sizeof(uint8_t));
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f9eb 	bl	800a444 <malloc>
 800a06e:	4603      	mov	r3, r0
 800a070:	613b      	str	r3, [r7, #16]

    vEEPROM_Read(eepromAddr, buf, len);
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	b29a      	uxth	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	4610      	mov	r0, r2
 800a07c:	6939      	ldr	r1, [r7, #16]
 800a07e:	461a      	mov	r2, r3
 800a080:	f7f8 f84a 	bl	8002118 <vEEPROM_Read>

    crc = crc16_ccitt(buf, len, crc);
 800a084:	8afb      	ldrh	r3, [r7, #22]
 800a086:	6938      	ldr	r0, [r7, #16]
 800a088:	6879      	ldr	r1, [r7, #4]
 800a08a:	461a      	mov	r2, r3
 800a08c:	f7fe fe68 	bl	8008d60 <crc16_ccitt>
 800a090:	4603      	mov	r3, r0
 800a092:	82fb      	strh	r3, [r7, #22]

    free(buf);
 800a094:	6938      	ldr	r0, [r7, #16]
 800a096:	f000 f9dd 	bl	800a454 <free>

    return crc;
 800a09a:	8afb      	ldrh	r3, [r7, #22]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <xCANopenNodeInit>:
 * @brief CAN Open stack initialize
 * 
 * @return CANopenNode_StatusTypeDef 
 */
CANopenNodeStatusTypeDef_t xCANopenNodeInit (void)
{
 800a0a4:	b590      	push	{r4, r7, lr}
 800a0a6:	b095      	sub	sp, #84	; 0x54
 800a0a8:	af08      	add	r7, sp, #32
    CO_ReturnError_t err;
    uint32_t heapMemoryUsed;
    void *CANptr = NULL;                                    /* CAN module address */
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61fb      	str	r3, [r7, #28]
    uint8_t activeNodeId;                                   /* Copied from CO_pendingNodeId in the communication reset section */
    uint8_t pendingNodeId = CAN_OPEN_NODE_ID;               /* read from dip switches or nonvolatile memory, configurable by LSS slave */
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	76fb      	strb	r3, [r7, #27]
    uint16_t pendingBitRate = CAN_OPEN_NODE_BAUDRATE;       /* read from dip switches or nonvolatile memory, configurable by LSS slave */
 800a0b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0b6:	833b      	strh	r3, [r7, #24]


#if (CO_CONFIG_STORAGE) & CO_CONFIG_STORAGE_ENABLE
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t storageInitError = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	617b      	str	r3, [r7, #20]
#endif

    /* Configure CAN hardware */
    if (xCANopenHardwareInit() == CAN_OPEN_HARDWARE_ERROR)
 800a0c2:	f7ff fc4f 	bl	8009964 <xCANopenHardwareInit>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d101      	bne.n	800a0d0 <xCANopenNodeInit+0x2c>
    {
      LOG_INFO("Failed: CANopen hardware initialize\n");
      return CAN_OPEN_NODE_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e0ef      	b.n	800a2b0 <xCANopenNodeInit+0x20c>
    }


    /* Allocate memory */
    CO_config_t *config_ptr = NULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	62bb      	str	r3, [r7, #40]	; 0x28
    OD_INIT_CONFIG(co_config); /* helper macro from OD.h */
    co_config.CNT_LEDS = 1;
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */
    CO = CO_new(config_ptr, &heapMemoryUsed);
 800a0d4:	f107 0320 	add.w	r3, r7, #32
 800a0d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0da:	4619      	mov	r1, r3
 800a0dc:	f7fe fed4 	bl	8008e88 <CO_new>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	4b75      	ldr	r3, [pc, #468]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a0e4:	601a      	str	r2, [r3, #0]
    if (CO == NULL) 
 800a0e6:	4b74      	ldr	r3, [pc, #464]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <xCANopenNodeInit+0x4e>
    {
        LOG_INFO("Error: Can't allocate memory\n");
        return CAN_OPEN_NODE_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e0de      	b.n	800a2b0 <xCANopenNodeInit+0x20c>
    }


#if (CO_CONFIG_STORAGE) & CO_CONFIG_STORAGE_ENABLE
    err = CO_storageEeprom_init(&storage,
                               CO->CANmodule,
 800a0f2:	4b71      	ldr	r3, [pc, #452]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
        LOG_INFO("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
    }


#if (CO_CONFIG_STORAGE) & CO_CONFIG_STORAGE_ENABLE
    err = CO_storageEeprom_init(&storage,
 800a0f6:	685a      	ldr	r2, [r3, #4]
                               CO->CANmodule,
							   NULL,
                               OD_ENTRY_H1010_storeParameters,
 800a0f8:	4b70      	ldr	r3, [pc, #448]	; (800a2bc <xCANopenNodeInit+0x218>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
        LOG_INFO("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
    }


#if (CO_CONFIG_STORAGE) & CO_CONFIG_STORAGE_ENABLE
    err = CO_storageEeprom_init(&storage,
 800a0fe:	f103 0484 	add.w	r4, r3, #132	; 0x84
                               CO->CANmodule,
							   NULL,
                               OD_ENTRY_H1010_storeParameters,
                               OD_ENTRY_H1011_restoreParameters,
 800a102:	4b6e      	ldr	r3, [pc, #440]	; (800a2bc <xCANopenNodeInit+0x218>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
        LOG_INFO("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
    }


#if (CO_CONFIG_STORAGE) & CO_CONFIG_STORAGE_ENABLE
    err = CO_storageEeprom_init(&storage,
 800a108:	3390      	adds	r3, #144	; 0x90
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	4b6c      	ldr	r3, [pc, #432]	; (800a2c0 <xCANopenNodeInit+0x21c>)
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a114:	9302      	str	r3, [sp, #8]
 800a116:	f107 0314 	add.w	r3, r7, #20
 800a11a:	9303      	str	r3, [sp, #12]
 800a11c:	4869      	ldr	r0, [pc, #420]	; (800a2c4 <xCANopenNodeInit+0x220>)
 800a11e:	4611      	mov	r1, r2
 800a120:	2200      	movs	r2, #0
 800a122:	4623      	mov	r3, r4
 800a124:	f7f9 f9c2 	bl	80034ac <CO_storageEeprom_init>
 800a128:	4603      	mov	r3, r0
 800a12a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                               OD_ENTRY_H1011_restoreParameters,
                               storageEntries,
                               storageEntriesCount,
                               &storageInitError);

    if (err != CO_ERROR_NO && err != CO_ERROR_DATA_CORRUPT) {
 800a12e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a132:	2b00      	cmp	r3, #0
 800a134:	d006      	beq.n	800a144 <xCANopenNodeInit+0xa0>
 800a136:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a13a:	f113 0f0d 	cmn.w	r3, #13
 800a13e:	d001      	beq.n	800a144 <xCANopenNodeInit+0xa0>
    	LOG_INFO("Error: Storage %d\n", storageInitError);
        return 0;
 800a140:	2300      	movs	r3, #0
 800a142:	e0b5      	b.n	800a2b0 <xCANopenNodeInit+0x20c>
    }
#endif

    /* CANopen communication reset - initialize CANopen objects */
    if(reset != CO_RESET_APP) {
 800a144:	4b60      	ldr	r3, [pc, #384]	; (800a2c8 <xCANopenNodeInit+0x224>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b02      	cmp	r3, #2
 800a14a:	f000 80ad 	beq.w	800a2a8 <xCANopenNodeInit+0x204>

        LOG_INFO("CANopenNode - Reset communication\n");

        /* Wait rt_thread. */
        CO->CANmodule->CANnormal = false;
 800a14e:	4b5a      	ldr	r3, [pc, #360]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	615a      	str	r2, [r3, #20]

        /* Enter CAN configuration. */
        CO_CANsetConfigurationMode((void *)&CANptr);
 800a158:	f107 031c 	add.w	r3, r7, #28
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7ff fc71 	bl	8009a44 <CO_CANsetConfigurationMode>
        CO_CANmodule_disable(CO->CANmodule);
 800a162:	4b55      	ldr	r3, [pc, #340]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff fd09 	bl	8009b80 <CO_CANmodule_disable>

        /* initialize CANopen */
        err = CO_CANinit(CO, CANptr, pendingBitRate);
 800a16e:	4b52      	ldr	r3, [pc, #328]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a170:	6819      	ldr	r1, [r3, #0]
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	8b3b      	ldrh	r3, [r7, #24]
 800a176:	4608      	mov	r0, r1
 800a178:	4611      	mov	r1, r2
 800a17a:	461a      	mov	r2, r3
 800a17c:	f7ff f80e 	bl	800919c <CO_CANinit>
 800a180:	4603      	mov	r3, r0
 800a182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (err != CO_ERROR_NO) {
 800a186:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <xCANopenNodeInit+0xee>
            LOG_INFO("Error: CAN initialization failed: %d\n", err);
            return CAN_OPEN_NODE_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e08e      	b.n	800a2b0 <xCANopenNodeInit+0x20c>
        }

        CO_LSS_address_t lssAddress = {.identity = {
 800a192:	1d3b      	adds	r3, r7, #4
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	3304      	adds	r3, #4
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	3304      	adds	r3, #4
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	3304      	adds	r3, #4
            .vendorID = OD_RAM.x1018_identityObject.vendorID,
 800a1ac:	4b47      	ldr	r3, [pc, #284]	; (800a2cc <xCANopenNodeInit+0x228>)
 800a1ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        if (err != CO_ERROR_NO) {
            LOG_INFO("Error: CAN initialization failed: %d\n", err);
            return CAN_OPEN_NODE_ERROR;
        }

        CO_LSS_address_t lssAddress = {.identity = {
 800a1b0:	607b      	str	r3, [r7, #4]
            .vendorID = OD_RAM.x1018_identityObject.vendorID,
            .productCode = OD_RAM.x1018_identityObject.productCode,
 800a1b2:	4b46      	ldr	r3, [pc, #280]	; (800a2cc <xCANopenNodeInit+0x228>)
 800a1b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
        if (err != CO_ERROR_NO) {
            LOG_INFO("Error: CAN initialization failed: %d\n", err);
            return CAN_OPEN_NODE_ERROR;
        }

        CO_LSS_address_t lssAddress = {.identity = {
 800a1b6:	60bb      	str	r3, [r7, #8]
            .vendorID = OD_RAM.x1018_identityObject.vendorID,
            .productCode = OD_RAM.x1018_identityObject.productCode,
            .revisionNumber = OD_RAM.x1018_identityObject.revisionNumber
 800a1b8:	4b44      	ldr	r3, [pc, #272]	; (800a2cc <xCANopenNodeInit+0x228>)
 800a1ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
        if (err != CO_ERROR_NO) {
            LOG_INFO("Error: CAN initialization failed: %d\n", err);
            return CAN_OPEN_NODE_ERROR;
        }

        CO_LSS_address_t lssAddress = {.identity = {
 800a1bc:	60fb      	str	r3, [r7, #12]
            .vendorID = OD_RAM.x1018_identityObject.vendorID,
            .productCode = OD_RAM.x1018_identityObject.productCode,
            .revisionNumber = OD_RAM.x1018_identityObject.revisionNumber
        }};

        err = CO_LSSinit(CO, &lssAddress, &pendingNodeId, &pendingBitRate);
 800a1be:	4b3e      	ldr	r3, [pc, #248]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	1d39      	adds	r1, r7, #4
 800a1c4:	f107 021b 	add.w	r2, r7, #27
 800a1c8:	f107 0318 	add.w	r3, r7, #24
 800a1cc:	f7ff f812 	bl	80091f4 <CO_LSSinit>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(err != CO_ERROR_NO) {
 800a1d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <xCANopenNodeInit+0x13e>
            LOG_INFO("Error: LSS slave initialization failed: %d\n", err);
            return CAN_OPEN_NODE_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e066      	b.n	800a2b0 <xCANopenNodeInit+0x20c>
        }

        activeNodeId = pendingNodeId;
 800a1e2:	7efb      	ldrb	r3, [r7, #27]
 800a1e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        uint32_t errInfo = 0;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	603b      	str	r3, [r7, #0]

        err = CO_CANopenInit(CO,                    /* CANopen object */
 800a1ec:	4b32      	ldr	r3, [pc, #200]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	4b32      	ldr	r3, [pc, #200]	; (800a2bc <xCANopenNodeInit+0x218>)
 800a1f2:	681c      	ldr	r4, [r3, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	f242 1311 	movw	r3, #8465	; 0x2111
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a202:	9302      	str	r3, [sp, #8]
 800a204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a208:	9303      	str	r3, [sp, #12]
 800a20a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	2300      	movs	r3, #0
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a218:	9306      	str	r3, [sp, #24]
 800a21a:	463b      	mov	r3, r7
 800a21c:	9307      	str	r3, [sp, #28]
 800a21e:	4610      	mov	r0, r2
 800a220:	2100      	movs	r1, #0
 800a222:	2200      	movs	r2, #0
 800a224:	4623      	mov	r3, r4
 800a226:	f7ff f811 	bl	800924c <CO_CANopenInit>
 800a22a:	4603      	mov	r3, r0
 800a22c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                             SDO_CLI_TIMEOUT_TIME,  /* SDOclientTimeoutTime_ms */
                             SDO_CLI_BLOCK,         /* SDOclientBlockTransfer */
                             activeNodeId,
                             &errInfo);

        if(err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 800a230:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a234:	2b00      	cmp	r3, #0
 800a236:	d006      	beq.n	800a246 <xCANopenNodeInit+0x1a2>
 800a238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a23c:	f113 0f13 	cmn.w	r3, #19
 800a240:	d001      	beq.n	800a246 <xCANopenNodeInit+0x1a2>
            }
            else {
                LOG_INFO("Error: CANopen initialization failed: %d\n", err);
            }

            return CAN_OPEN_NODE_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e034      	b.n	800a2b0 <xCANopenNodeInit+0x20c>
        }

        err = CO_CANopenInitPDO(CO, CO->em, OD, activeNodeId, &errInfo);
 800a246:	4b1c      	ldr	r3, [pc, #112]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	4b1b      	ldr	r3, [pc, #108]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69d9      	ldr	r1, [r3, #28]
 800a250:	4b1a      	ldr	r3, [pc, #104]	; (800a2bc <xCANopenNodeInit+0x218>)
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 800a258:	463b      	mov	r3, r7
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	4623      	mov	r3, r4
 800a25e:	f7ff f93d 	bl	80094dc <CO_CANopenInitPDO>
 800a262:	4603      	mov	r3, r0
 800a264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(err != CO_ERROR_NO) {
 800a268:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <xCANopenNodeInit+0x1d0>
                LOG_INFO("Error: Object Dictionary entry 0x%X\n", errInfo);
            }
            else {
                LOG_INFO("Error: PDO initialization failed: %d\n", err);
            }
            return CAN_OPEN_NODE_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e01d      	b.n	800a2b0 <xCANopenNodeInit+0x20c>
        }

        /* Configure CANopen callbacks, etc */
        if(!CO->nodeIdUnconfigured) 
 800a274:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10e      	bne.n	800a29c <xCANopenNodeInit+0x1f8>
        {

#if (CO_CONFIG_STORAGE) & CO_CONFIG_STORAGE_ENABLE
            if(storageInitError != 0) {
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00b      	beq.n	800a29c <xCANopenNodeInit+0x1f8>
                CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY,
 800a284:	4b0c      	ldr	r3, [pc, #48]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	69da      	ldr	r2, [r3, #28]
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	4610      	mov	r0, r2
 800a290:	2101      	movs	r1, #1
 800a292:	222f      	movs	r2, #47	; 0x2f
 800a294:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800a298:	f7fa fb78 	bl	800498c <CO_error>
        {
            LOG_INFO("CANopenNode - Node-id not initialized\n");
        }

      /* start CAN */
      CO_CANsetNormalMode(CO->CANmodule);
 800a29c:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <xCANopenNodeInit+0x214>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff fbd8 	bl	8009a58 <CO_CANsetNormalMode>

      LOG_INFO("CANopenNode - Running\n");
    }

    reset = CO_RESET_NOT;
 800a2a8:	4b07      	ldr	r3, [pc, #28]	; (800a2c8 <xCANopenNodeInit+0x224>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	701a      	strb	r2, [r3, #0]

    return CAN_OPEN_NODE_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3734      	adds	r7, #52	; 0x34
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd90      	pop	{r4, r7, pc}
 800a2b8:	1ffe93a8 	.word	0x1ffe93a8
 800a2bc:	1ffe92f0 	.word	0x1ffe92f0
 800a2c0:	1ffe92f4 	.word	0x1ffe92f4
 800a2c4:	1ffe93b8 	.word	0x1ffe93b8
 800a2c8:	1ffe93ac 	.word	0x1ffe93ac
 800a2cc:	1ffe88e4 	.word	0x1ffe88e4

0800a2d0 <vCANopenNodeProcess>:
/**
 * @brief CANopen Node pediodic function
 *        This function must be call periodically
 */
void vCANopenNodeProcess (void)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0

    if (reset == CO_RESET_NOT)
 800a2d6:	4b10      	ldr	r3, [pc, #64]	; (800a318 <vCANopenNodeProcess+0x48>)
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10f      	bne.n	800a2fe <vCANopenNodeProcess+0x2e>
    {
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000;
 800a2de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a2e2:	607b      	str	r3, [r7, #4]

        /* CANopen process */
        reset = CO_process(CO, false, timeDifference_us, NULL);
 800a2e4:	4b0d      	ldr	r3, [pc, #52]	; (800a31c <vCANopenNodeProcess+0x4c>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f7ff f972 	bl	80095d8 <CO_process>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	4b07      	ldr	r3, [pc, #28]	; (800a318 <vCANopenNodeProcess+0x48>)
 800a2fa:	701a      	strb	r2, [r3, #0]
 800a2fc:	e009      	b.n	800a312 <vCANopenNodeProcess+0x42>
      CO_storageEeprom_auto_process(&storage, false);
#endif
#endif
    }

    else if (reset == CO_RESET_APP || reset == CO_RESET_COMM)
 800a2fe:	4b06      	ldr	r3, [pc, #24]	; (800a318 <vCANopenNodeProcess+0x48>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b02      	cmp	r3, #2
 800a304:	d003      	beq.n	800a30e <vCANopenNodeProcess+0x3e>
 800a306:	4b04      	ldr	r3, [pc, #16]	; (800a318 <vCANopenNodeProcess+0x48>)
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d101      	bne.n	800a312 <vCANopenNodeProcess+0x42>
    {
    	//CO_storageEeprom_auto_process(&storage, true);
        vResetModule();
 800a30e:	f7ff fb31 	bl	8009974 <vResetModule>
    }
}
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	1ffe93ac 	.word	0x1ffe93ac
 800a31c:	1ffe93a8 	.word	0x1ffe93a8

0800a320 <vCANopenNodeTimerInterrupt>:
/**
 * @brief CANopen function in timer
 *        This function must be call in 1 ms Timer Interrupt
 */
void vCANopenNodeTimerInterrupt (void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0

    CO_LOCK_OD(CO->CANmodule);

    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) 
 800a326:	4b15      	ldr	r3, [pc, #84]	; (800a37c <vCANopenNodeTimerInterrupt+0x5c>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d122      	bne.n	800a376 <vCANopenNodeTimerInterrupt+0x56>
 800a330:	4b12      	ldr	r3, [pc, #72]	; (800a37c <vCANopenNodeTimerInterrupt+0x5c>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d01c      	beq.n	800a376 <vCANopenNodeTimerInterrupt+0x56>
    {
        bool_t syncWas = false;
 800a33c:	2300      	movs	r3, #0
 800a33e:	607b      	str	r3, [r7, #4]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000;
 800a340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a344:	603b      	str	r3, [r7, #0]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 800a346:	4b0d      	ldr	r3, [pc, #52]	; (800a37c <vCANopenNodeTimerInterrupt+0x5c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4618      	mov	r0, r3
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	2200      	movs	r2, #0
 800a350:	f7ff fa38 	bl	80097c4 <CO_process_SYNC>
 800a354:	6078      	str	r0, [r7, #4]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 800a356:	4b09      	ldr	r3, [pc, #36]	; (800a37c <vCANopenNodeTimerInterrupt+0x5c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4618      	mov	r0, r3
 800a35c:	6879      	ldr	r1, [r7, #4]
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	2300      	movs	r3, #0
 800a362:	f7ff fa6d 	bl	8009840 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 800a366:	4b05      	ldr	r3, [pc, #20]	; (800a37c <vCANopenNodeTimerInterrupt+0x5c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4618      	mov	r0, r3
 800a36c:	6879      	ldr	r1, [r7, #4]
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	2300      	movs	r3, #0
 800a372:	f7ff fa9d 	bl	80098b0 <CO_process_TPDO>
#endif

    }
    
    CO_UNLOCK_OD(CO->CANmodule);
}
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	1ffe93a8 	.word	0x1ffe93a8

0800a380 <vCANopenNodeReceiveInterrupt>:

/**
 * @brief CANopen receive interrupt function
 */
void vCANopenNodeReceiveInterrupt (void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
    CO_CANinterrupt(CO->CANmodule);
 800a384:	4b03      	ldr	r3, [pc, #12]	; (800a394 <vCANopenNodeReceiveInterrupt+0x14>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff fd76 	bl	8009e7c <CO_CANinterrupt>
}
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	1ffe93a8 	.word	0x1ffe93a8

0800a398 <main>:
 * This routine is the application entry point. It is invoked by the device startup code. It is responsible for
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */
int main(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800a39e:	f7f8 fe17 	bl	8002fd0 <DAVE_Init>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d000      	beq.n	800a3ae <main+0x16>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
    while(1);
 800a3ac:	e7fe      	b.n	800a3ac <main+0x14>
  }

  xCANopenNodeInit();
 800a3ae:	f7ff fe79 	bl	800a0a4 <xCANopenNodeInit>


  while(1)
  {
	  vCANopenNodeProcess();
 800a3b2:	f7ff ff8d 	bl	800a2d0 <vCANopenNodeProcess>
  }
 800a3b6:	e7fc      	b.n	800a3b2 <main+0x1a>

0800a3b8 <CCU43_1_IRQHandler>:

/**
 *  @brief Timer Handler (1 ms)
 */
void TimerHandler ( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	af00      	add	r7, sp, #0
    vCANopenNodeTimerInterrupt();
 800a3bc:	f7ff ffb0 	bl	800a320 <vCANopenNodeTimerInterrupt>

	/* Acknowledge the period match interrupt*/
    TIMER_ClearEvent(&TIMER_0);
 800a3c0:	4801      	ldr	r0, [pc, #4]	; (800a3c8 <CCU43_1_IRQHandler+0x10>)
 800a3c2:	f7f7 ff67 	bl	8002294 <TIMER_ClearEvent>
}
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	1ffe8808 	.word	0x1ffe8808

0800a3cc <CAN0_1_IRQHandler>:

/**
 *  @brief CAN Receive Handler
 */
void CANReceiveHandler ( void )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
   vCANopenNodeReceiveInterrupt();
 800a3d0:	f7ff ffd6 	bl	800a380 <vCANopenNodeReceiveInterrupt>
}
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop

0800a3d8 <calloc>:
 800a3d8:	460a      	mov	r2, r1
 800a3da:	4903      	ldr	r1, [pc, #12]	; (800a3e8 <calloc+0x10>)
 800a3dc:	4603      	mov	r3, r0
 800a3de:	6808      	ldr	r0, [r1, #0]
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	f000 b86d 	b.w	800a4c0 <_calloc_r>
 800a3e6:	bf00      	nop
 800a3e8:	1ffe937c 	.word	0x1ffe937c

0800a3ec <__errno>:
 800a3ec:	4b01      	ldr	r3, [pc, #4]	; (800a3f4 <__errno+0x8>)
 800a3ee:	6818      	ldr	r0, [r3, #0]
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	1ffe937c 	.word	0x1ffe937c

0800a3f8 <__libc_init_array>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	4b0e      	ldr	r3, [pc, #56]	; (800a434 <__libc_init_array+0x3c>)
 800a3fc:	4c0e      	ldr	r4, [pc, #56]	; (800a438 <__libc_init_array+0x40>)
 800a3fe:	1ae4      	subs	r4, r4, r3
 800a400:	10a4      	asrs	r4, r4, #2
 800a402:	2500      	movs	r5, #0
 800a404:	461e      	mov	r6, r3
 800a406:	42a5      	cmp	r5, r4
 800a408:	d004      	beq.n	800a414 <__libc_init_array+0x1c>
 800a40a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a40e:	4798      	blx	r3
 800a410:	3501      	adds	r5, #1
 800a412:	e7f8      	b.n	800a406 <__libc_init_array+0xe>
 800a414:	f7f7 fd46 	bl	8001ea4 <_init>
 800a418:	4c08      	ldr	r4, [pc, #32]	; (800a43c <__libc_init_array+0x44>)
 800a41a:	4b09      	ldr	r3, [pc, #36]	; (800a440 <__libc_init_array+0x48>)
 800a41c:	1ae4      	subs	r4, r4, r3
 800a41e:	10a4      	asrs	r4, r4, #2
 800a420:	2500      	movs	r5, #0
 800a422:	461e      	mov	r6, r3
 800a424:	42a5      	cmp	r5, r4
 800a426:	d004      	beq.n	800a432 <__libc_init_array+0x3a>
 800a428:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a42c:	4798      	blx	r3
 800a42e:	3501      	adds	r5, #1
 800a430:	e7f8      	b.n	800a424 <__libc_init_array+0x2c>
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	1ffe9380 	.word	0x1ffe9380
 800a438:	1ffe9380 	.word	0x1ffe9380
 800a43c:	1ffe9380 	.word	0x1ffe9380
 800a440:	1ffe9380 	.word	0x1ffe9380

0800a444 <malloc>:
 800a444:	4b02      	ldr	r3, [pc, #8]	; (800a450 <malloc+0xc>)
 800a446:	4601      	mov	r1, r0
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	f000 b88b 	b.w	800a564 <_malloc_r>
 800a44e:	bf00      	nop
 800a450:	1ffe937c 	.word	0x1ffe937c

0800a454 <free>:
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <free+0xc>)
 800a456:	4601      	mov	r1, r0
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f000 b83f 	b.w	800a4dc <_free_r>
 800a45e:	bf00      	nop
 800a460:	1ffe937c 	.word	0x1ffe937c

0800a464 <memcpy>:
 800a464:	b510      	push	{r4, lr}
 800a466:	1e43      	subs	r3, r0, #1
 800a468:	440a      	add	r2, r1
 800a46a:	4291      	cmp	r1, r2
 800a46c:	d004      	beq.n	800a478 <memcpy+0x14>
 800a46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a472:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a476:	e7f8      	b.n	800a46a <memcpy+0x6>
 800a478:	bd10      	pop	{r4, pc}

0800a47a <memmove>:
 800a47a:	4281      	cmp	r1, r0
 800a47c:	b510      	push	{r4, lr}
 800a47e:	eb01 0302 	add.w	r3, r1, r2
 800a482:	d301      	bcc.n	800a488 <memmove+0xe>
 800a484:	1e42      	subs	r2, r0, #1
 800a486:	e00b      	b.n	800a4a0 <memmove+0x26>
 800a488:	4298      	cmp	r0, r3
 800a48a:	d2fb      	bcs.n	800a484 <memmove+0xa>
 800a48c:	1881      	adds	r1, r0, r2
 800a48e:	1ad2      	subs	r2, r2, r3
 800a490:	42d3      	cmn	r3, r2
 800a492:	d004      	beq.n	800a49e <memmove+0x24>
 800a494:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a498:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a49c:	e7f8      	b.n	800a490 <memmove+0x16>
 800a49e:	bd10      	pop	{r4, pc}
 800a4a0:	4299      	cmp	r1, r3
 800a4a2:	d004      	beq.n	800a4ae <memmove+0x34>
 800a4a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a4ac:	e7f8      	b.n	800a4a0 <memmove+0x26>
 800a4ae:	bd10      	pop	{r4, pc}

0800a4b0 <memset>:
 800a4b0:	4402      	add	r2, r0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d002      	beq.n	800a4be <memset+0xe>
 800a4b8:	f803 1b01 	strb.w	r1, [r3], #1
 800a4bc:	e7fa      	b.n	800a4b4 <memset+0x4>
 800a4be:	4770      	bx	lr

0800a4c0 <_calloc_r>:
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	fb02 f401 	mul.w	r4, r2, r1
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	f000 f84c 	bl	800a564 <_malloc_r>
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	b118      	cbz	r0, 800a4d8 <_calloc_r+0x18>
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	f7ff ffec 	bl	800a4b0 <memset>
 800a4d8:	4628      	mov	r0, r5
 800a4da:	bd38      	pop	{r3, r4, r5, pc}

0800a4dc <_free_r>:
 800a4dc:	b530      	push	{r4, r5, lr}
 800a4de:	2900      	cmp	r1, #0
 800a4e0:	d03d      	beq.n	800a55e <_free_r+0x82>
 800a4e2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800a4e6:	1f0b      	subs	r3, r1, #4
 800a4e8:	491d      	ldr	r1, [pc, #116]	; (800a560 <_free_r+0x84>)
 800a4ea:	2a00      	cmp	r2, #0
 800a4ec:	bfb8      	it	lt
 800a4ee:	189b      	addlt	r3, r3, r2
 800a4f0:	680a      	ldr	r2, [r1, #0]
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	b912      	cbnz	r2, 800a4fc <_free_r+0x20>
 800a4f6:	605a      	str	r2, [r3, #4]
 800a4f8:	600b      	str	r3, [r1, #0]
 800a4fa:	bd30      	pop	{r4, r5, pc}
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d20d      	bcs.n	800a51c <_free_r+0x40>
 800a500:	6819      	ldr	r1, [r3, #0]
 800a502:	1858      	adds	r0, r3, r1
 800a504:	4290      	cmp	r0, r2
 800a506:	bf01      	itttt	eq
 800a508:	585a      	ldreq	r2, [r3, r1]
 800a50a:	1852      	addeq	r2, r2, r1
 800a50c:	601a      	streq	r2, [r3, #0]
 800a50e:	6842      	ldreq	r2, [r0, #4]
 800a510:	605a      	str	r2, [r3, #4]
 800a512:	6023      	str	r3, [r4, #0]
 800a514:	bd30      	pop	{r4, r5, pc}
 800a516:	4299      	cmp	r1, r3
 800a518:	d803      	bhi.n	800a522 <_free_r+0x46>
 800a51a:	460a      	mov	r2, r1
 800a51c:	6851      	ldr	r1, [r2, #4]
 800a51e:	2900      	cmp	r1, #0
 800a520:	d1f9      	bne.n	800a516 <_free_r+0x3a>
 800a522:	6814      	ldr	r4, [r2, #0]
 800a524:	1915      	adds	r5, r2, r4
 800a526:	429d      	cmp	r5, r3
 800a528:	d10a      	bne.n	800a540 <_free_r+0x64>
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4423      	add	r3, r4
 800a52e:	18d0      	adds	r0, r2, r3
 800a530:	4288      	cmp	r0, r1
 800a532:	6013      	str	r3, [r2, #0]
 800a534:	d113      	bne.n	800a55e <_free_r+0x82>
 800a536:	6808      	ldr	r0, [r1, #0]
 800a538:	4403      	add	r3, r0
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	684b      	ldr	r3, [r1, #4]
 800a53e:	e00d      	b.n	800a55c <_free_r+0x80>
 800a540:	d902      	bls.n	800a548 <_free_r+0x6c>
 800a542:	230c      	movs	r3, #12
 800a544:	6003      	str	r3, [r0, #0]
 800a546:	bd30      	pop	{r4, r5, pc}
 800a548:	681c      	ldr	r4, [r3, #0]
 800a54a:	1918      	adds	r0, r3, r4
 800a54c:	4288      	cmp	r0, r1
 800a54e:	bf04      	itt	eq
 800a550:	6808      	ldreq	r0, [r1, #0]
 800a552:	6849      	ldreq	r1, [r1, #4]
 800a554:	6059      	str	r1, [r3, #4]
 800a556:	bf04      	itt	eq
 800a558:	1900      	addeq	r0, r0, r4
 800a55a:	6018      	streq	r0, [r3, #0]
 800a55c:	6053      	str	r3, [r2, #4]
 800a55e:	bd30      	pop	{r4, r5, pc}
 800a560:	1ffe93b4 	.word	0x1ffe93b4

0800a564 <_malloc_r>:
 800a564:	b570      	push	{r4, r5, r6, lr}
 800a566:	1ccc      	adds	r4, r1, #3
 800a568:	f024 0403 	bic.w	r4, r4, #3
 800a56c:	3408      	adds	r4, #8
 800a56e:	2c0c      	cmp	r4, #12
 800a570:	bf38      	it	cc
 800a572:	240c      	movcc	r4, #12
 800a574:	2c00      	cmp	r4, #0
 800a576:	4606      	mov	r6, r0
 800a578:	da03      	bge.n	800a582 <_malloc_r+0x1e>
 800a57a:	230c      	movs	r3, #12
 800a57c:	6033      	str	r3, [r6, #0]
 800a57e:	2000      	movs	r0, #0
 800a580:	bd70      	pop	{r4, r5, r6, pc}
 800a582:	428c      	cmp	r4, r1
 800a584:	d3f9      	bcc.n	800a57a <_malloc_r+0x16>
 800a586:	4a20      	ldr	r2, [pc, #128]	; (800a608 <_malloc_r+0xa4>)
 800a588:	6813      	ldr	r3, [r2, #0]
 800a58a:	4610      	mov	r0, r2
 800a58c:	4619      	mov	r1, r3
 800a58e:	b1a1      	cbz	r1, 800a5ba <_malloc_r+0x56>
 800a590:	680a      	ldr	r2, [r1, #0]
 800a592:	1b12      	subs	r2, r2, r4
 800a594:	d40e      	bmi.n	800a5b4 <_malloc_r+0x50>
 800a596:	2a0b      	cmp	r2, #11
 800a598:	d903      	bls.n	800a5a2 <_malloc_r+0x3e>
 800a59a:	600a      	str	r2, [r1, #0]
 800a59c:	188b      	adds	r3, r1, r2
 800a59e:	508c      	str	r4, [r1, r2]
 800a5a0:	e01f      	b.n	800a5e2 <_malloc_r+0x7e>
 800a5a2:	428b      	cmp	r3, r1
 800a5a4:	bf0d      	iteet	eq
 800a5a6:	685a      	ldreq	r2, [r3, #4]
 800a5a8:	684a      	ldrne	r2, [r1, #4]
 800a5aa:	605a      	strne	r2, [r3, #4]
 800a5ac:	6002      	streq	r2, [r0, #0]
 800a5ae:	bf18      	it	ne
 800a5b0:	460b      	movne	r3, r1
 800a5b2:	e016      	b.n	800a5e2 <_malloc_r+0x7e>
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	6849      	ldr	r1, [r1, #4]
 800a5b8:	e7e9      	b.n	800a58e <_malloc_r+0x2a>
 800a5ba:	4d14      	ldr	r5, [pc, #80]	; (800a60c <_malloc_r+0xa8>)
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b91b      	cbnz	r3, 800a5c8 <_malloc_r+0x64>
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f000 f825 	bl	800a610 <_sbrk_r>
 800a5c6:	6028      	str	r0, [r5, #0]
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	f000 f820 	bl	800a610 <_sbrk_r>
 800a5d0:	1c42      	adds	r2, r0, #1
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	d0d1      	beq.n	800a57a <_malloc_r+0x16>
 800a5d6:	1cc5      	adds	r5, r0, #3
 800a5d8:	f025 0503 	bic.w	r5, r5, #3
 800a5dc:	4285      	cmp	r5, r0
 800a5de:	d10a      	bne.n	800a5f6 <_malloc_r+0x92>
 800a5e0:	601c      	str	r4, [r3, #0]
 800a5e2:	f103 000b 	add.w	r0, r3, #11
 800a5e6:	1d1a      	adds	r2, r3, #4
 800a5e8:	f020 0007 	bic.w	r0, r0, #7
 800a5ec:	1a82      	subs	r2, r0, r2
 800a5ee:	d00a      	beq.n	800a606 <_malloc_r+0xa2>
 800a5f0:	4251      	negs	r1, r2
 800a5f2:	5099      	str	r1, [r3, r2]
 800a5f4:	bd70      	pop	{r4, r5, r6, pc}
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	1ae9      	subs	r1, r5, r3
 800a5fa:	f000 f809 	bl	800a610 <_sbrk_r>
 800a5fe:	3001      	adds	r0, #1
 800a600:	d0bb      	beq.n	800a57a <_malloc_r+0x16>
 800a602:	462b      	mov	r3, r5
 800a604:	e7ec      	b.n	800a5e0 <_malloc_r+0x7c>
 800a606:	bd70      	pop	{r4, r5, r6, pc}
 800a608:	1ffe93b4 	.word	0x1ffe93b4
 800a60c:	1ffe93b0 	.word	0x1ffe93b0

0800a610 <_sbrk_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4c06      	ldr	r4, [pc, #24]	; (800a62c <_sbrk_r+0x1c>)
 800a614:	2300      	movs	r3, #0
 800a616:	4605      	mov	r5, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	6023      	str	r3, [r4, #0]
 800a61c:	f7f7 fc0e 	bl	8001e3c <_sbrk>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_sbrk_r+0x1a>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	b103      	cbz	r3, 800a62a <_sbrk_r+0x1a>
 800a628:	602b      	str	r3, [r5, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	1ffe93f0 	.word	0x1ffe93f0

0800a630 <strlen>:
 800a630:	4603      	mov	r3, r0
 800a632:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a636:	2a00      	cmp	r2, #0
 800a638:	d1fb      	bne.n	800a632 <strlen+0x2>
 800a63a:	1a18      	subs	r0, r3, r0
 800a63c:	3801      	subs	r0, #1
 800a63e:	4770      	bx	lr

0800a640 <SPI_MASTER_0_MOSI>:
 800a640:	8500 4802 0001 0000                         ...H....

0800a648 <SPI_MASTER_0_MISO>:
 800a648:	8500 4802 0000 0000                         ...H....

0800a650 <SPI_MASTER_0_SCLKOUT>:
 800a650:	8100 4802 000a 0000                         ...H....

0800a658 <SPI_MASTER_0_SCLKOUT_Config>:
 800a658:	0090 0000 0001 0000 0001 0000 0000 0000     ................
 800a668:	0000 0000                                   ....

0800a66c <SPI_MASTER_0_SS_0>:
 800a66c:	8000 4802 0007 0000                         ...H....

0800a674 <SPI_MASTER_0_SS_0_Config>:
 800a674:	0090 0000 0001 0000 0001 0000 0000 0000     ................
 800a684:	0000 0001                                   ....

0800a688 <SPI_MASTER_0_Config>:
 800a688:	8844 1ffe 25cd 0800 a640 0800 8830 1ffe     D....%..@...0...
 800a698:	a648 0800 9384 1ffe 0000 0000 0000 0000     H...............
	...
 800a6b0:	a650 0800 a658 0800 a66c 0800 0000 0000     P...X...l.......
	...
 800a6d8:	a674 0800 0000 0000 0000 0000 0000 0000     t...............
	...
 800a704:	0505 0000 0000 4000 0202 0100 0002 0000     .......@........

0800a714 <TIMER_INTERRUPT_0>:
 800a714:	3f39 0100                                   9?..

0800a718 <CAN_RECEIVE_INTERRUPT_1>:
 800a718:	3f4d 0100                                   M?..

0800a71c <DIGITAL_IO_0>:
 800a71c:	8100 4802 0080 0000 0001 0000 0000 0000     ...H............
 800a72c:	0000 0000 0230 0101 0000 0001 0000 0000     ....0...........
 800a73c:	0000 0001 0102 0101                         ........

0800a744 <CAN_NODE_0_gpio_out>:
 800a744:	8300 4802 0002 0000                         ...H....

0800a74c <CAN_NODE_0_gpio_out_config>:
 800a74c:	0090 0000 0001 0000 0002 0000               ............

0800a758 <CAN_NODE_0_gpio_in>:
 800a758:	8300 4802 000c 0000                         ...H....

0800a760 <CAN_NODE_0_gpio_in_config>:
	...

0800a76c <CAN_NODE_0_BitTimeConfig>:
 800a76c:	4400 0895 4240 000f 1f40 0001               .D..@B..@...

0800a778 <CAN_NODE_0_sr>:
 800a778:	0000 0000                                   ....

0800a77c <CAN_NODE_0_LMO_01_Config>:
 800a77c:	88a0 1ffe 0022 0000 0000 0000               ....".......

0800a788 <CAN_NODE_0_LMO_02_Config>:
 800a788:	88c0 1ffe 0023 0001 0001 0000               ....#.......

0800a794 <CAN_NODE_0>:
 800a794:	8890 1ffe 4200 4801 a76c 0800 a77c 0800     .....B.Hl...|...
 800a7a4:	a788 0800 0000 0000 0000 0000 0000 0000     ................
	...
 800a820:	a778 0800 a744 0800 a74c 0800 a758 0800     x...D...L...X...
 800a830:	a760 0800 0002 0002 0100 0000               `...........

0800a83c <CO_LSS_bitTimingTableLookup>:
 800a83c:	03e8 0320 01f4 00fa 007d 0000 0032 0014     .. .....}...2...
 800a84c:	000a 0000                                   ....

0800a850 <abortCodes.5020>:
 800a850:	0000 0000 0005 0504 0000 0601 0001 0601     ................
 800a860:	0002 0601 0000 0602 0041 0604 0042 0604     ........A...B...
 800a870:	0043 0604 0047 0604 0000 0606 0010 0607     C...G...........
 800a880:	0012 0607 0013 0607 0011 0609 0030 0609     ............0...
 800a890:	0031 0609 0032 0609 0036 0609 0023 060a     1...2...6...#...
 800a8a0:	0000 0800 0020 0800 0021 0800 0022 0800     .... ...!..."...
 800a8b0:	0023 0800 0024 0800                         #...$...

0800a8b8 <crc16_ccitt_table>:
 800a8b8:	0000 1021 2042 3063 4084 50a5 60c6 70e7     ..!.B c0.@.P.`.p
 800a8c8:	8108 9129 a14a b16b c18c d1ad e1ce f1ef     ..).J.k.........
 800a8d8:	1231 0210 3273 2252 52b5 4294 72f7 62d6     1...s2R".R.B.r.b
 800a8e8:	9339 8318 b37b a35a d3bd c39c f3ff e3de     9...{.Z.........
 800a8f8:	2462 3443 0420 1401 64e6 74c7 44a4 5485     b$C4 ....d.t.D.T
 800a908:	a56a b54b 8528 9509 e5ee f5cf c5ac d58d     j.K.(...........
 800a918:	3653 2672 1611 0630 76d7 66f6 5695 46b4     S6r&..0..v.f.V.F
 800a928:	b75b a77a 9719 8738 f7df e7fe d79d c7bc     [.z...8.........
 800a938:	48c4 58e5 6886 78a7 0840 1861 2802 3823     .H.X.h.x@.a..(#8
 800a948:	c9cc d9ed e98e f9af 8948 9969 a90a b92b     ........H.i...+.
 800a958:	5af5 4ad4 7ab7 6a96 1a71 0a50 3a33 2a12     .Z.J.z.jq.P.3:.*
 800a968:	dbfd cbdc fbbf eb9e 9b79 8b58 bb3b ab1a     ........y.X.;...
 800a978:	6ca6 7c87 4ce4 5cc5 2c22 3c03 0c60 1c41     .l.|.L.\",.<`.A.
 800a988:	edae fd8f cdec ddcd ad2a bd0b 8d68 9d49     ........*...h.I.
 800a998:	7e97 6eb6 5ed5 4ef4 3e13 2e32 1e51 0e70     .~.n.^.N.>2.Q.p.
 800a9a8:	ff9f efbe dfdd cffc bf1b af3a 9f59 8f78     ..........:.Y.x.
 800a9b8:	9188 81a9 b1ca a1eb d10c c12d f14e e16f     ..........-.N.o.
 800a9c8:	1080 00a1 30c2 20e3 5004 4025 7046 6067     .....0. .P%@Fpg`
 800a9d8:	83b9 9398 a3fb b3da c33d d31c e37f f35e     ........=.....^.
 800a9e8:	02b1 1290 22f3 32d2 4235 5214 6277 7256     .....".25B.RwbVr
 800a9f8:	b5ea a5cb 95a8 8589 f56e e54f d52c c50d     ........n.O.,...
 800aa08:	34e2 24c3 14a0 0481 7466 6447 5424 4405     .4.$....ftGd$T.D
 800aa18:	a7db b7fa 8799 97b8 e75f f77e c71d d73c     ........_.~...<.
 800aa28:	26d3 36f2 0691 16b0 6657 7676 4615 5634     .&.6....Wfvv.F4V
 800aa38:	d94c c96d f90e e92f 99c8 89e9 b98a a9ab     L.m.../.........
 800aa48:	5844 4865 7806 6827 18c0 08e1 3882 28a3     DXeH.x'h.....8.(
 800aa58:	cb7d db5c eb3f fb1e 8bf9 9bd8 abbb bb9a     }.\.?...........
 800aa68:	4a75 5a54 6a37 7a16 0af1 1ad0 2ab3 3a92     uJTZ7j.z.....*.:
 800aa78:	fd2e ed0f dd6c cd4d bdaa ad8b 9de8 8dc9     ....l.M.........
 800aa88:	7c26 6c07 5c64 4c45 3ca2 2c83 1ce0 0cc1     &|.ld\EL.<.,....
 800aa98:	ef1f ff3e cf5d df7c af9b bfba 8fd9 9ff8     ..>.].|.........
 800aaa8:	6e17 7e36 4e55 5e74 2e93 3eb2 0ed1 1ef0     .n6~UNt^...>....

0800aab8 <ODObjs>:
 800aab8:	88e4 1ffe 0041 0000 0004 0000 88e8 1ffe     ....A...........
 800aac8:	0001 0000 0001 0000 0000 0000 0045 0000     ............E...
 800aad8:	0004 0000 88e9 1ffe 88ec 1ffe 4143 0000     ............CA..
 800aae8:	0004 0000 0004 0000 892c 1ffe 0041 0000     ........,...A...
 800aaf8:	0004 0000 8930 1ffe 0041 0000 0004 0000     ....0...A.......
 800ab08:	8b8c 1ffe 0043 0000 0004 0000 8934 1ffe     ....C.......4...
 800ab18:	0081 0000 0003 0000 0000 0000 0081 0000     ................
	...
 800ab30:	0081 0000 0000 0000 8938 1ffe 0001 0000     ........8.......
 800ab40:	0001 0000 8939 1ffe 0000 0000 4341 0000     ....9.......AC..
 800ab50:	0004 0000 0004 0000 893a 1ffe 0000 0000     ........:.......
 800ab60:	4341 0000 0004 0000 0004 0000 893c 1ffe     AC..........<...
 800ab70:	0041 0000 0004 0000 8940 1ffe 0041 0000     A.......@...A...
 800ab80:	0004 0000 8944 1ffe 0041 0000 0004 0000     ....D...A.......
 800ab90:	8b90 1ffe 0043 0000 0002 0000 8948 1ffe     ....C.......H...
 800aba0:	894c 1ffe 4141 0000 0004 0000 0004 0000     L...AA..........
 800abb0:	8950 1ffe 0041 0000 0002 0000 8954 1ffe     P...A.......T...
 800abc0:	0100 0000 0001 0000 8958 1ffe 4101 0000     ........X....A..
 800abd0:	0004 0000 895c 1ffe 4102 0000 0004 0000     ....\....A......
 800abe0:	8960 1ffe 4103 0000 0004 0000 0000 0000     `....A..........
 800abf0:	4104 0000 0004 0000 8b92 1ffe 0003 0000     .A..............
 800ac00:	0001 0000 8964 1ffe 0100 0000 0001 0000     ....d...........
 800ac10:	0000 0000 0201 0000 0000 0000 8965 1ffe     ............e...
 800ac20:	0102 0000 0001 0000 0000 0000 0103 0000     ................
 800ac30:	0000 0000 8966 1ffe 0001 0000 0001 0000     ....f...........
 800ac40:	8967 1ffe 8968 1ffe 4141 0000 0004 0000     g...h...AA......
 800ac50:	0004 0000 896c 1ffe 0100 0000 0001 0000     ....l...........
 800ac60:	8970 1ffe 4101 0000 0004 0000 8974 1ffe     p....A......t...
 800ac70:	4102 0000 0004 0000 8b94 1ffe 0100 0000     .A..............
 800ac80:	0001 0000 8b98 1ffe 4f01 0000 0004 0000     .........O......
 800ac90:	8b9c 1ffe 4f02 0000 0004 0000 8ba0 1ffe     .....O..........
 800aca0:	0303 0000 0001 0000 8978 1ffe 4300 0000     ........x....C..
 800acb0:	0001 0000 897c 1ffe 4001 0000 0004 0000     ....|....@......
 800acc0:	8980 1ffe 4302 0000 0001 0000 8984 1ffe     .....C..........
 800acd0:	4300 0000 0001 0000 8988 1ffe 4001 0000     .C...........@..
 800ace0:	0004 0000 898c 1ffe 4302 0000 0001 0000     .........C......
 800acf0:	8990 1ffe 4300 0000 0001 0000 8994 1ffe     .....C..........
 800ad00:	4001 0000 0004 0000 8998 1ffe 4302 0000     .@...........C..
 800ad10:	0001 0000 899c 1ffe 4300 0000 0001 0000     .........C......
 800ad20:	89a0 1ffe 4001 0000 0004 0000 89a4 1ffe     .....@..........
 800ad30:	4302 0000 0001 0000 89a8 1ffe 4300 0000     .C...........C..
 800ad40:	0001 0000 89ac 1ffe 4001 0000 0004 0000     .........@......
 800ad50:	89b0 1ffe 4300 0000 0001 0000 89b4 1ffe     .....C..........
 800ad60:	4001 0000 0004 0000 89b8 1ffe 4300 0000     .@...........C..
 800ad70:	0001 0000 89bc 1ffe 4101 0000 0004 0000     .........A......
 800ad80:	89c0 1ffe 0302 0000 0001 0000 89c2 1ffe     ................
 800ad90:	4303 0000 0002 0000 89c4 1ffe 0304 0000     .C..............
 800ada0:	0001 0000 89c6 1ffe 4305 0000 0002 0000     .........C......
 800adb0:	89c8 1ffe 0306 0000 0001 0000 89cc 1ffe     ................
 800adc0:	4300 0000 0001 0000 89d0 1ffe 4001 0000     .C...........@..
 800add0:	0004 0000 89d4 1ffe 4302 0000 0001 0000     .........C......
 800ade0:	89d6 1ffe 4003 0000 0002 0000 89d8 1ffe     .....@..........
 800adf0:	4304 0000 0001 0000 89da 1ffe 4005 0000     .C...........@..
 800ae00:	0002 0000 89dc 1ffe 4306 0000 0001 0000     .........C......
 800ae10:	89e0 1ffe 4300 0000 0001 0000 89e4 1ffe     .....C..........
 800ae20:	4001 0000 0004 0000 89e8 1ffe 4302 0000     .@...........C..
 800ae30:	0001 0000 89ea 1ffe 4003 0000 0002 0000     .........@......
 800ae40:	89ec 1ffe 4304 0000 0001 0000 89ee 1ffe     .....C..........
 800ae50:	4005 0000 0002 0000 89f0 1ffe 4306 0000     .@...........C..
 800ae60:	0001 0000 89f4 1ffe 4300 0000 0001 0000     .........C......
 800ae70:	89f8 1ffe 4001 0000 0004 0000 89fc 1ffe     .....@..........
 800ae80:	4302 0000 0001 0000 89fe 1ffe 4003 0000     .C...........@..
 800ae90:	0002 0000 8a00 1ffe 4304 0000 0001 0000     .........C......
 800aea0:	8a02 1ffe 4005 0000 0002 0000 8a04 1ffe     .....@..........
 800aeb0:	4306 0000 0001 0000 8a08 1ffe 4300 0000     .C...........C..
 800aec0:	0001 0000 8a0c 1ffe 4001 0000 0004 0000     .........@......
 800aed0:	8a10 1ffe 4300 0000 0001 0000 8a14 1ffe     .....C..........
 800aee0:	4001 0000 0004 0000 0000 0000 0049 0000     .@..........I...
 800aef0:	0008 0000 0000 0000 0049 0000 0008 0000     ........I.......
 800af00:	0000 0000 0049 0000 0008 0000 0000 0000     ....I...........
 800af10:	0049 0000 0008 0000 0000 0000 0049 0000     I...........I...
 800af20:	0008 0000 0000 0000 0045 0000 0008 0000     ........E.......
 800af30:	8a18 1ffe 0001 0000 0001 0000 0000 0000     ................
 800af40:	0045 0000 0004 0000 0000 0000 0045 0000     E...........E...
 800af50:	0004 0000 0000 0000 0041 0000 0004 0000     ........A.......
 800af60:	8a1c 1ffe 0045 0000 0004 0000 0000 0000     ....E...........
 800af70:	0045 0000 0004 0000 0000 0000 0045 0000     E...........E...
 800af80:	0004 0000 0000 0000 0005 0000 0001 0000     ................
 800af90:	8a20 1ffe 0000 0000 4541 0000 0004 0000      .......AE......
 800afa0:	0004 0000 8a21 1ffe 0000 0000 4541 0000     ....!.......AE..
 800afb0:	0004 0000 0004 0000 8a22 1ffe 0000 0000     ........".......
 800afc0:	4941 0000 0004 0000 0004 0000 0000 0000     AI..............
 800afd0:	0045 0000 0002 0000 0000 0000 0045 0000     E...........E...
 800afe0:	0002 0000 8a24 1ffe 0045 0000 0002 0000     ....$...E.......
 800aff0:	8a26 1ffe 8a28 1ffe 4141 0000 0004 0000     &...(...AA......
 800b000:	0004 0000 8a38 1ffe 0041 0000 0002 0000     ....8...A.......
 800b010:	0000 0000 0041 0000 0002 0000 8a3a 1ffe     ....A.......:...
 800b020:	0041 0000 0002 0000 0000 0000 0045 0000     A...........E...
 800b030:	0004 0000 0000 0000 0045 0000 0004 0000     ........E.......
 800b040:	0000 0000 0041 0000 0004 0000 0000 0000     ....A...........
 800b050:	0041 0000 0004 0000 0000 0000 0041 0000     A...........A...
 800b060:	0002 0000 8a3c 1ffe 0000 0000 4141 0000     ....<.......AA..
 800b070:	0004 0000 0004 0000 8a3e 1ffe 0043 0000     ........>...C...
 800b080:	0002 0000 8a40 1ffe 0041 0000 0002 0000     ....@...A.......
 800b090:	0000 0000 004f 0000 0002 0000 0000 0000     ....O...........
 800b0a0:	0045 0000 0002 0000 8a42 1ffe 0043 0000     E.......B...C...
 800b0b0:	0002 0000 8a44 1ffe 0043 0000 0002 0000     ....D...C.......
 800b0c0:	8a46 1ffe 0043 0000 0002 0000 8a48 1ffe     F...C.......H...
 800b0d0:	0043 0000 0002 0000 8a4a 1ffe 0043 0000     C.......J...C...
 800b0e0:	0002 0000 8a4c 1ffe 000b 0000 0001 0000     ....L...........
 800b0f0:	8a4d 1ffe 0001 0000 0001 0000 8a50 1ffe     M...........P...
 800b100:	0045 0000 0004 0000 0000 0000 0045 0000     E...........E...
 800b110:	0004 0000 8a54 1ffe 0045 0000 0004 0000     ....T...E.......
 800b120:	0000 0000 0043 0000 0004 0000 8a58 1ffe     ....C.......X...
 800b130:	0043 0000 0002 0000 8a5c 1ffe 0043 0000     C.......\...C...
 800b140:	0004 0000 8a60 1ffe 0043 0000 0002 0000     ....`...C.......
 800b150:	0000 0000 0047 0000 0004 0000 0000 0000     ....G...........
 800b160:	0043 0000 0002 0000 0000 0000 0045 0000     C...........E...
 800b170:	0004 0000 0000 0000 0045 0000 0004 0000     ........E.......
 800b180:	0000 0000 0043 0000 0002 0000 0000 0000     ....C...........
 800b190:	0043 0000 0002 0000 0000 0000 0043 0000     C...........C...
 800b1a0:	0002 0000 0000 0000 0043 0000 0002 0000     ........C.......
 800b1b0:	8a62 1ffe 004b 0000 0002 0000 8a64 1ffe     b...K.......d...
 800b1c0:	0043 0000 0002 0000 8a66 1ffe 0043 0000     C.......f...C...
 800b1d0:	0002 0000 8a68 1ffe 0045 0000 0002 0000     ....h...E.......
 800b1e0:	8a6c 1ffe 0043 0000 0004 0000 8a70 1ffe     l...C.......p...
 800b1f0:	0043 0000 0004 0000 8a74 1ffe 0045 0000     C.......t...E...
 800b200:	0002 0000 8a76 1ffe 0045 0000 0002 0000     ....v...E.......
 800b210:	8a78 1ffe 0041 0000 0004 0000 8a7c 1ffe     x...A.......|...
 800b220:	004f 0000 0004 0000 8a80 1ffe 8a84 1ffe     O...............
 800b230:	4301 0000 0004 0000 0004 0000 8a8c 1ffe     .C..............
 800b240:	8a90 1ffe 4301 0000 0004 0000 0004 0000     .....C..........
 800b250:	8a98 1ffe 000b 0000 0001 0000 0000 0000     ................
 800b260:	0043 0000 0004 0000 0000 0000 0043 0000     C...........C...
 800b270:	0004 0000 0000 0000 0043 0000 0004 0000     ........C.......
 800b280:	8a9c 1ffe 0043 0000 0004 0000 0000 0000     ....C...........
 800b290:	0043 0000 0004 0000 0000 0000 0043 0000     C...........C...
 800b2a0:	0004 0000 0000 0000 0043 0000 0004 0000     ........C.......
 800b2b0:	8aa0 1ffe 0043 0000 0002 0000 8aa4 1ffe     ....C...........
 800b2c0:	004f 0000 0004 0000 8aa8 1ffe 0043 0000     O...........C...
 800b2d0:	0002 0000 8aaa 1ffe 0007 0000 0001 0000     ................
 800b2e0:	0000 0000 0003 0000 0001 0000 8aab 1ffe     ................
 800b2f0:	0003 0000 0001 0000 0000 0000 0003 0000     ................
 800b300:	0001 0000 0000 0000 0001 0000 0001 0000     ................
 800b310:	0000 0000 0003 0000 0001 0000 8aac 1ffe     ................
 800b320:	8ab0 1ffe 4301 0000 0004 0000 0004 0000     .....C..........
 800b330:	8ab8 1ffe 8abc 1ffe 4301 0000 0004 0000     .........C......
 800b340:	0004 0000 8ac4 1ffe 8ac8 1ffe 4301 0000     .............C..
 800b350:	0004 0000 0004 0000 8ad0 1ffe 8ad4 1ffe     ................
 800b360:	4301 0000 0004 0000 0004 0000 8adc 1ffe     .C..............
 800b370:	8ae0 1ffe 4301 0000 0004 0000 0004 0000     .....C..........
 800b380:	8ae8 1ffe 8aec 1ffe 4301 0000 0004 0000     .........C......
 800b390:	0004 0000 8af4 1ffe 8af8 1ffe 4301 0000     .............C..
 800b3a0:	0004 0000 0004 0000 8b00 1ffe 8b04 1ffe     ................
 800b3b0:	4301 0000 0004 0000 0004 0000 8b0c 1ffe     .C..............
 800b3c0:	8b10 1ffe 4301 0000 0004 0000 0004 0000     .....C..........
 800b3d0:	8b18 1ffe 0043 0000 0002 0000 8b1a 1ffe     ....C...........
 800b3e0:	0000 0000 4b41 0000 0004 0000 0004 0000     ....AK..........
 800b3f0:	8b1b 1ffe 0500 0000 0001 0000 8b1c 1ffe     ................
 800b400:	0b01 0000 0001 0000 8b1d 1ffe 0102 0000     ................
 800b410:	0001 0000 8b1e 1ffe 8b1f 1ffe 0301 0000     ................
 800b420:	0001 0000 0001 0000 8b24 1ffe 0100 0000     ........$.......
 800b430:	0001 0000 8b28 1ffe 4101 0000 0004 0000     ....(....A......
 800b440:	8b2c 1ffe 4302 0000 0004 0000 8b30 1ffe     ,....C......0...
 800b450:	0303 0000 0001 0000 8b32 1ffe 4b04 0000     ........2....K..
 800b460:	0002 0000 8b34 1ffe 0105 0000 0001 0000     ....4...........
 800b470:	8b35 1ffe 0306 0000 0001 0000 8b38 1ffe     5...........8...
 800b480:	0043 0000 0002 0000 8b3c 1ffe 0045 0000     C.......<...E...
 800b490:	0004 0000 8b40 1ffe 0045 0000 0004 0000     ....@...E.......
 800b4a0:	0000 0000 0045 0000 0004 0000 8b44 1ffe     ....E.......D...
 800b4b0:	0045 0000 0004 0000 8b48 1ffe 004b 0000     E.......H...K...
 800b4c0:	0004 0000 0000 0000 004b 0000 0004 0000     ........K.......
 800b4d0:	0000 0000 0041 0000 0002 0000 0000 0000     ....A...........
 800b4e0:	0083 0000 0000 0000 8b4c 1ffe 0083 0000     ........L.......
 800b4f0:	0011 0000 0000 0000 0083 0000 0000 0000     ................
 800b500:	8b5e 1ffe 0003 0000 0006 0000 0000 0000     ^...............
 800b510:	0043 0000 0004 0000 8b64 1ffe 0041 0000     C.......d...A...
 800b520:	0004 0000 0000 0000 0083 0000 0000 0000     ................
 800b530:	8b68 1ffe 0081 0000 0011 0000 8b7a 1ffe     h...........z...
 800b540:	0081 0000 000e 0000 0043 0000               ........C...
