
CanBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af4  0800c74c  0800c74c  0001c74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d240  0800d240  00020a50  2**0
                  CONTENTS
  4 .ARM          00000000  0800d240  0800d240  00020a50  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d240  0800d240  00020a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d240  0800d240  0001d240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d244  0800d244  0001d244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a50  20000000  0800d248  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020a50  2**0
                  CONTENTS
 10 .bss          00000138  20000a50  20000a50  00020a50  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b88  20000b88  00020a50  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020a50  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022689  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bf6  00000000  00000000  00043109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  00047d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001358  00000000  00000000  00049138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002470b  00000000  00000000  0004a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d6dc  00000000  00000000  0006eb9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5e76  00000000  00000000  0008c277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001620ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a84  00000000  00000000  00162140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000a50 	.word	0x20000a50
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c734 	.word	0x0800c734

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000a54 	.word	0x20000a54
 80001dc:	0800c734 	.word	0x0800c734

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <xCANopenNodeInit>:
 * @brief CAN Open stack initialize
 * 
 * @return CANopenNode_StatusTypeDef 
 */
CANopenNodeStatusTypeDef_t xCANopenNodeInit (void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b093      	sub	sp, #76	; 0x4c
 8000294:	af08      	add	r7, sp, #32
    CO_ReturnError_t err;
    uint32_t heapMemoryUsed;
    void *CANptr = NULL;                                    /* CAN module address */
 8000296:	2300      	movs	r3, #0
 8000298:	61bb      	str	r3, [r7, #24]
    uint8_t activeNodeId;                                   /* Copied from CO_pendingNodeId in the communication reset section */
    uint8_t pendingNodeId = CAN_OPEN_NODE_ID;               /* read from dip switches or nonvolatile memory, configurable by LSS slave */
 800029a:	2301      	movs	r3, #1
 800029c:	75fb      	strb	r3, [r7, #23]
    uint16_t pendingBitRate = CAN_OPEN_NODE_BAUDRATE;       /* read from dip switches or nonvolatile memory, configurable by LSS slave */
 800029e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a2:	82bb      	strh	r3, [r7, #20]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Configure CAN hardware */
    if (xCANopenHardwareInit() == CAN_OPEN_HARDWARE_ERROR)
 80002a4:	f000 fbfa 	bl	8000a9c <xCANopenHardwareInit>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d104      	bne.n	80002b8 <xCANopenNodeInit+0x28>
    {
      LOG_INFO("Failed: CANopen hardware initialize\n");
 80002ae:	4879      	ldr	r0, [pc, #484]	; (8000494 <xCANopenNodeInit+0x204>)
 80002b0:	f00b fba2 	bl	800b9f8 <puts>
      return CAN_OPEN_NODE_ERROR;
 80002b4:	2301      	movs	r3, #1
 80002b6:	e0e9      	b.n	800048c <xCANopenNodeInit+0x1fc>
    }
  
    /* Allocate memory */
    CO_config_t *config_ptr = NULL;
 80002b8:	2300      	movs	r3, #0
 80002ba:	627b      	str	r3, [r7, #36]	; 0x24
    OD_INIT_CONFIG(co_config); /* helper macro from OD.h */
    co_config.CNT_LEDS = 1;
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */
    CO = CO_new(config_ptr, &heapMemoryUsed);
 80002bc:	f107 031c 	add.w	r3, r7, #28
 80002c0:	4619      	mov	r1, r3
 80002c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80002c4:	f006 fa62 	bl	800678c <CO_new>
 80002c8:	4603      	mov	r3, r0
 80002ca:	4a73      	ldr	r2, [pc, #460]	; (8000498 <xCANopenNodeInit+0x208>)
 80002cc:	6013      	str	r3, [r2, #0]
    if (CO == NULL) 
 80002ce:	4b72      	ldr	r3, [pc, #456]	; (8000498 <xCANopenNodeInit+0x208>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d104      	bne.n	80002e0 <xCANopenNodeInit+0x50>
    {
        LOG_INFO("Error: Can't allocate memory\n");
 80002d6:	4871      	ldr	r0, [pc, #452]	; (800049c <xCANopenNodeInit+0x20c>)
 80002d8:	f00b fb8e 	bl	800b9f8 <puts>
        return CAN_OPEN_NODE_ERROR;
 80002dc:	2301      	movs	r3, #1
 80002de:	e0d5      	b.n	800048c <xCANopenNodeInit+0x1fc>
    }
    else 
    {
        LOG_INFO("Allocated %lu bytes for CANopen objects\n", heapMemoryUsed);
 80002e0:	69fb      	ldr	r3, [r7, #28]
 80002e2:	4619      	mov	r1, r3
 80002e4:	486e      	ldr	r0, [pc, #440]	; (80004a0 <xCANopenNodeInit+0x210>)
 80002e6:	f00b fb01 	bl	800b8ec <iprintf>
        return 0;
    }
#endif

    /* CANopen communication reset - initialize CANopen objects */
    if(reset != CO_RESET_APP) {
 80002ea:	4b6e      	ldr	r3, [pc, #440]	; (80004a4 <xCANopenNodeInit+0x214>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	f000 80c8 	beq.w	8000484 <xCANopenNodeInit+0x1f4>

        LOG_INFO("CANopenNode - Reset communication\n");
 80002f4:	486c      	ldr	r0, [pc, #432]	; (80004a8 <xCANopenNodeInit+0x218>)
 80002f6:	f00b fb7f 	bl	800b9f8 <puts>

        /* Wait rt_thread. */
        CO->CANmodule->CANnormal = false;
 80002fa:	4b67      	ldr	r3, [pc, #412]	; (8000498 <xCANopenNodeInit+0x208>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]

        /* Enter CAN configuration. */
        CO_CANsetConfigurationMode((void *)&CANptr);
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f93d 	bl	8000588 <CO_CANsetConfigurationMode>
        CO_CANmodule_disable(CO->CANmodule);
 800030e:	4b62      	ldr	r3, [pc, #392]	; (8000498 <xCANopenNodeInit+0x208>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f9d5 	bl	80006c4 <CO_CANmodule_disable>

        /* initialize CANopen */
        err = CO_CANinit(CO, CANptr, pendingBitRate);
 800031a:	4b5f      	ldr	r3, [pc, #380]	; (8000498 <xCANopenNodeInit+0x208>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	69b9      	ldr	r1, [r7, #24]
 8000320:	8aba      	ldrh	r2, [r7, #20]
 8000322:	4618      	mov	r0, r3
 8000324:	f006 fbd9 	bl	8006ada <CO_CANinit>
 8000328:	4603      	mov	r3, r0
 800032a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (err != CO_ERROR_NO) {
 800032e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8000332:	2b00      	cmp	r3, #0
 8000334:	d007      	beq.n	8000346 <xCANopenNodeInit+0xb6>
            LOG_INFO("Error: CAN initialization failed: %d\n", err);
 8000336:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800033a:	4619      	mov	r1, r3
 800033c:	485b      	ldr	r0, [pc, #364]	; (80004ac <xCANopenNodeInit+0x21c>)
 800033e:	f00b fad5 	bl	800b8ec <iprintf>
            return CAN_OPEN_NODE_ERROR;
 8000342:	2301      	movs	r3, #1
 8000344:	e0a2      	b.n	800048c <xCANopenNodeInit+0x1fc>
        }

        CO_LSS_address_t lssAddress = {.identity = {
            .vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8000346:	4b5a      	ldr	r3, [pc, #360]	; (80004b0 <xCANopenNodeInit+0x220>)
 8000348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        CO_LSS_address_t lssAddress = {.identity = {
 800034a:	607b      	str	r3, [r7, #4]
            .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 800034c:	4b58      	ldr	r3, [pc, #352]	; (80004b0 <xCANopenNodeInit+0x220>)
 800034e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        CO_LSS_address_t lssAddress = {.identity = {
 8000350:	60bb      	str	r3, [r7, #8]
            .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8000352:	4b57      	ldr	r3, [pc, #348]	; (80004b0 <xCANopenNodeInit+0x220>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        CO_LSS_address_t lssAddress = {.identity = {
 8000356:	60fb      	str	r3, [r7, #12]
            .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber
 8000358:	4b55      	ldr	r3, [pc, #340]	; (80004b0 <xCANopenNodeInit+0x220>)
 800035a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
        CO_LSS_address_t lssAddress = {.identity = {
 800035c:	613b      	str	r3, [r7, #16]
        }};
        
        err = CO_LSSinit(CO, &lssAddress, &pendingNodeId, &pendingBitRate);
 800035e:	4b4e      	ldr	r3, [pc, #312]	; (8000498 <xCANopenNodeInit+0x208>)
 8000360:	6818      	ldr	r0, [r3, #0]
 8000362:	f107 0314 	add.w	r3, r7, #20
 8000366:	f107 0217 	add.w	r2, r7, #23
 800036a:	1d39      	adds	r1, r7, #4
 800036c:	f006 fbe1 	bl	8006b32 <CO_LSSinit>
 8000370:	4603      	mov	r3, r0
 8000372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(err != CO_ERROR_NO) {
 8000376:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800037a:	2b00      	cmp	r3, #0
 800037c:	d007      	beq.n	800038e <xCANopenNodeInit+0xfe>
            LOG_INFO("Error: LSS slave initialization failed: %d\n", err);
 800037e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8000382:	4619      	mov	r1, r3
 8000384:	484b      	ldr	r0, [pc, #300]	; (80004b4 <xCANopenNodeInit+0x224>)
 8000386:	f00b fab1 	bl	800b8ec <iprintf>
            return CAN_OPEN_NODE_ERROR;
 800038a:	2301      	movs	r3, #1
 800038c:	e07e      	b.n	800048c <xCANopenNodeInit+0x1fc>
        }

        activeNodeId = pendingNodeId;
 800038e:	7dfb      	ldrb	r3, [r7, #23]
 8000390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        uint32_t errInfo = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	603b      	str	r3, [r7, #0]

        err = CO_CANopenInit(CO,                    /* CANopen object */
 8000398:	4b3f      	ldr	r3, [pc, #252]	; (8000498 <xCANopenNodeInit+0x208>)
 800039a:	6818      	ldr	r0, [r3, #0]
 800039c:	4b46      	ldr	r3, [pc, #280]	; (80004b8 <xCANopenNodeInit+0x228>)
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	463b      	mov	r3, r7
 80003a2:	9307      	str	r3, [sp, #28]
 80003a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80003a8:	9306      	str	r3, [sp, #24]
 80003aa:	2300      	movs	r3, #0
 80003ac:	9305      	str	r3, [sp, #20]
 80003ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003b2:	9304      	str	r3, [sp, #16]
 80003b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b8:	9303      	str	r3, [sp, #12]
 80003ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003be:	9302      	str	r3, [sp, #8]
 80003c0:	f242 1311 	movw	r3, #8465	; 0x2111
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	2300      	movs	r3, #0
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	4613      	mov	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	2100      	movs	r1, #0
 80003d0:	f006 fbdc 	bl	8006b8c <CO_CANopenInit>
 80003d4:	4603      	mov	r3, r0
 80003d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                             SDO_CLI_TIMEOUT_TIME,  /* SDOclientTimeoutTime_ms */
                             SDO_CLI_BLOCK,         /* SDOclientBlockTransfer */
                             activeNodeId,
                             &errInfo);

        if(err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 80003da:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d017      	beq.n	8000412 <xCANopenNodeInit+0x182>
 80003e2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80003e6:	f113 0f13 	cmn.w	r3, #19
 80003ea:	d012      	beq.n	8000412 <xCANopenNodeInit+0x182>
            if (err == CO_ERROR_OD_PARAMETERS) {
 80003ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80003f0:	f113 0f0c 	cmn.w	r3, #12
 80003f4:	d105      	bne.n	8000402 <xCANopenNodeInit+0x172>
                LOG_INFO("Error: Object Dictionary entry 0x%lX\n", errInfo);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	4619      	mov	r1, r3
 80003fa:	4830      	ldr	r0, [pc, #192]	; (80004bc <xCANopenNodeInit+0x22c>)
 80003fc:	f00b fa76 	bl	800b8ec <iprintf>
 8000400:	e005      	b.n	800040e <xCANopenNodeInit+0x17e>
            }
            else {
                LOG_INFO("Error: CANopen initialization failed: %d\n", err);
 8000402:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8000406:	4619      	mov	r1, r3
 8000408:	482d      	ldr	r0, [pc, #180]	; (80004c0 <xCANopenNodeInit+0x230>)
 800040a:	f00b fa6f 	bl	800b8ec <iprintf>
            }
            return CAN_OPEN_NODE_ERROR;
 800040e:	2301      	movs	r3, #1
 8000410:	e03c      	b.n	800048c <xCANopenNodeInit+0x1fc>
        }

        err = CO_CANopenInitPDO(CO, CO->em, OD, activeNodeId, &errInfo);
 8000412:	4b21      	ldr	r3, [pc, #132]	; (8000498 <xCANopenNodeInit+0x208>)
 8000414:	6818      	ldr	r0, [r3, #0]
 8000416:	4b20      	ldr	r3, [pc, #128]	; (8000498 <xCANopenNodeInit+0x208>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	69d9      	ldr	r1, [r3, #28]
 800041c:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <xCANopenNodeInit+0x228>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	f897 4022 	ldrb.w	r4, [r7, #34]	; 0x22
 8000424:	463b      	mov	r3, r7
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	4623      	mov	r3, r4
 800042a:	f006 fcf7 	bl	8006e1c <CO_CANopenInitPDO>
 800042e:	4603      	mov	r3, r0
 8000430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if(err != CO_ERROR_NO) {
 8000434:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8000438:	2b00      	cmp	r3, #0
 800043a:	d012      	beq.n	8000462 <xCANopenNodeInit+0x1d2>
            if (err == CO_ERROR_OD_PARAMETERS) {
 800043c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8000440:	f113 0f0c 	cmn.w	r3, #12
 8000444:	d105      	bne.n	8000452 <xCANopenNodeInit+0x1c2>
                LOG_INFO("Error: Object Dictionary entry 0x%lX\n", errInfo);
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	4619      	mov	r1, r3
 800044a:	481c      	ldr	r0, [pc, #112]	; (80004bc <xCANopenNodeInit+0x22c>)
 800044c:	f00b fa4e 	bl	800b8ec <iprintf>
 8000450:	e005      	b.n	800045e <xCANopenNodeInit+0x1ce>
            }
            else {
                LOG_INFO("Error: PDO initialization failed: %d\n", err);
 8000452:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8000456:	4619      	mov	r1, r3
 8000458:	481a      	ldr	r0, [pc, #104]	; (80004c4 <xCANopenNodeInit+0x234>)
 800045a:	f00b fa47 	bl	800b8ec <iprintf>
            }
            return CAN_OPEN_NODE_ERROR;
 800045e:	2301      	movs	r3, #1
 8000460:	e014      	b.n	800048c <xCANopenNodeInit+0x1fc>
        }

        /* Configure CANopen callbacks, etc */
        if(!CO->nodeIdUnconfigured) 
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <xCANopenNodeInit+0x208>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <xCANopenNodeInit+0x1e2>
            }
#endif
        }
        else 
        {
            LOG_INFO("CANopenNode - Node-id not initialized\n");
 800046c:	4816      	ldr	r0, [pc, #88]	; (80004c8 <xCANopenNodeInit+0x238>)
 800046e:	f00b fac3 	bl	800b9f8 <puts>
        }

      /* start CAN */
      CO_CANsetNormalMode(CO->CANmodule);
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <xCANopenNodeInit+0x208>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	4618      	mov	r0, r3
 800047a:	f000 f88f 	bl	800059c <CO_CANsetNormalMode>

      LOG_INFO("CANopenNode - Running\n");
 800047e:	4813      	ldr	r0, [pc, #76]	; (80004cc <xCANopenNodeInit+0x23c>)
 8000480:	f00b faba 	bl	800b9f8 <puts>
    }

    reset = CO_RESET_NOT;
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <xCANopenNodeInit+0x214>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]

    return CAN_OPEN_NODE_OK; 
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	372c      	adds	r7, #44	; 0x2c
 8000490:	46bd      	mov	sp, r7
 8000492:	bd90      	pop	{r4, r7, pc}
 8000494:	0800c74c 	.word	0x0800c74c
 8000498:	20000a6c 	.word	0x20000a6c
 800049c:	0800c770 	.word	0x0800c770
 80004a0:	0800c790 	.word	0x0800c790
 80004a4:	20000a70 	.word	0x20000a70
 80004a8:	0800c7bc 	.word	0x0800c7bc
 80004ac:	0800c7e0 	.word	0x0800c7e0
 80004b0:	20000000 	.word	0x20000000
 80004b4:	0800c808 	.word	0x0800c808
 80004b8:	200009dc 	.word	0x200009dc
 80004bc:	0800c834 	.word	0x0800c834
 80004c0:	0800c85c 	.word	0x0800c85c
 80004c4:	0800c888 	.word	0x0800c888
 80004c8:	0800c8b0 	.word	0x0800c8b0
 80004cc:	0800c8d8 	.word	0x0800c8d8

080004d0 <vCANopenNodeProcess>:
/**
 * @brief CANopen Node pediodic function
 *        This function must be call periodically
 */
void vCANopenNodeProcess (void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

    if (reset == CO_RESET_NOT)
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <vCANopenNodeProcess+0x38>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d10e      	bne.n	80004fc <vCANopenNodeProcess+0x2c>
    {
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000;
 80004de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e2:	607b      	str	r3, [r7, #4]

        /* CANopen process */
        reset = CO_process(CO, false, timeDifference_us, NULL);
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <vCANopenNodeProcess+0x3c>)
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	2300      	movs	r3, #0
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	f006 fd6d 	bl	8006fcc <CO_process>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <vCANopenNodeProcess+0x38>)
 80004f8:	701a      	strb	r2, [r3, #0]
    else
    {
        vResetModule();
    }

}
 80004fa:	e001      	b.n	8000500 <vCANopenNodeProcess+0x30>
        vResetModule();
 80004fc:	f000 fb06 	bl	8000b0c <vResetModule>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000a70 	.word	0x20000a70
 800050c:	20000a6c 	.word	0x20000a6c

08000510 <vCANopenNodeTimerInterrupt>:
/**
 * @brief CANopen function in timer
 *        This function must be call in 1 ms Timer Interrupt
 */
void vCANopenNodeTimerInterrupt (void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0

    CO_LOCK_OD(CO->CANmodule);

    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) 
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <vCANopenNodeTimerInterrupt+0x5c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d120      	bne.n	8000562 <vCANopenNodeTimerInterrupt+0x52>
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <vCANopenNodeTimerInterrupt+0x5c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d01a      	beq.n	8000562 <vCANopenNodeTimerInterrupt+0x52>
    {
        bool_t syncWas = false;
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000;
 8000530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000534:	603b      	str	r3, [r7, #0]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <vCANopenNodeTimerInterrupt+0x5c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2200      	movs	r2, #0
 800053c:	6839      	ldr	r1, [r7, #0]
 800053e:	4618      	mov	r0, r3
 8000540:	f006 fe39 	bl	80071b6 <CO_process_SYNC>
 8000544:	6078      	str	r0, [r7, #4]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <vCANopenNodeTimerInterrupt+0x5c>)
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	f006 fe73 	bl	800723a <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <vCANopenNodeTimerInterrupt+0x5c>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	6879      	ldr	r1, [r7, #4]
 800055e:	f006 fea5 	bl	80072ac <CO_process_TPDO>
#endif

    }
    
    CO_UNLOCK_OD(CO->CANmodule);
}
 8000562:	bf00      	nop
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000a6c 	.word	0x20000a6c

08000570 <vCANopenNodeReceiveInterrupt>:

/**
 * @brief CANopen receive interrupt function
 */
void vCANopenNodeReceiveInterrupt (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    CO_CANinterrupt(CO->CANmodule);
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <vCANopenNodeReceiveInterrupt+0x14>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fa22 	bl	80009c4 <CO_CANinterrupt>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000a6c 	.word	0x20000a6c

08000588 <CO_CANsetConfigurationMode>:
#include "301/CO_driver.h"
#include "CANopenHardware.h"
#include "CANopenNode.h"

/******************************************************************************/
void CO_CANsetConfigurationMode(void *CANptr){
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <CO_CANsetNormalMode>:


/******************************************************************************/
void CO_CANsetNormalMode(CO_CANmodule_t *CANmodule){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */

    CANmodule->CANnormal = true;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2201      	movs	r2, #1
 80005a8:	615a      	str	r2, [r3, #20]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <CO_CANmodule_init>:
        CO_CANrx_t              rxArray[],
        uint16_t                rxSize,
        CO_CANtx_t              txArray[],
        uint16_t                txSize,
        uint16_t                CANbitRate)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b087      	sub	sp, #28
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	807b      	strh	r3, [r7, #2]
    uint16_t i;

    /* verify arguments */
    if(CANmodule==NULL || rxArray==NULL || txArray==NULL){
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d005      	beq.n	80005d6 <CO_CANmodule_init+0x20>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <CO_CANmodule_init+0x20>
 80005d0:	6a3b      	ldr	r3, [r7, #32]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d102      	bne.n	80005dc <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e06d      	b.n	80006b8 <CO_CANmodule_init+0x102>
    }

    /* Configure object variables */
    CANmodule->CANptr = CANptr;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	601a      	str	r2, [r3, #0]
    CANmodule->rxArray = rxArray;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	887a      	ldrh	r2, [r7, #2]
 80005ec:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6a3a      	ldr	r2, [r7, #32]
 80005f2:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80005f8:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2200      	movs	r2, #0
 80005fe:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false;     // (rxSize <= 32U) ? true : false;  /* microcontroller dependent */
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2201      	movs	r2, #1
 8000616:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2200      	movs	r2, #0
 800061c:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2200      	movs	r2, #0
 8000622:	629a      	str	r2, [r3, #40]	; 0x28

    for(i=0U; i<rxSize; i++){
 8000624:	2300      	movs	r3, #0
 8000626:	82fb      	strh	r3, [r7, #22]
 8000628:	e02b      	b.n	8000682 <CO_CANmodule_init+0xcc>
        rxArray[i].ident = 0U;
 800062a:	8afa      	ldrh	r2, [r7, #22]
 800062c:	4613      	mov	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	4413      	add	r3, r2
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	461a      	mov	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4413      	add	r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 800063e:	8afa      	ldrh	r2, [r7, #22]
 8000640:	4613      	mov	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	461a      	mov	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000652:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8000654:	8afa      	ldrh	r2, [r7, #22]
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8000668:	8afa      	ldrh	r2, [r7, #22]
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
    for(i=0U; i<rxSize; i++){
 800067c:	8afb      	ldrh	r3, [r7, #22]
 800067e:	3301      	adds	r3, #1
 8000680:	82fb      	strh	r3, [r7, #22]
 8000682:	8afa      	ldrh	r2, [r7, #22]
 8000684:	887b      	ldrh	r3, [r7, #2]
 8000686:	429a      	cmp	r2, r3
 8000688:	d3cf      	bcc.n	800062a <CO_CANmodule_init+0x74>
    }
    for(i=0U; i<txSize; i++){
 800068a:	2300      	movs	r3, #0
 800068c:	82fb      	strh	r3, [r7, #22]
 800068e:	e00c      	b.n	80006aa <CO_CANmodule_init+0xf4>
        txArray[i].bufferFull = false;
 8000690:	8afa      	ldrh	r2, [r7, #22]
 8000692:	4613      	mov	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	461a      	mov	r2, r3
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	4413      	add	r3, r2
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
    for(i=0U; i<txSize; i++){
 80006a4:	8afb      	ldrh	r3, [r7, #22]
 80006a6:	3301      	adds	r3, #1
 80006a8:	82fb      	strh	r3, [r7, #22]
 80006aa:	8afa      	ldrh	r2, [r7, #22]
 80006ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3ee      	bcc.n	8000690 <CO_CANmodule_init+0xda>

    /* Configure CAN timing */


    /* Configure CAN module hardware filters */
    if(CANmodule->useCANrxFilters){
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	699b      	ldr	r3, [r3, #24]


    /* configure CAN interrupt registers */


    return CO_ERROR_NO;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	371c      	adds	r7, #28
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <CO_CANmodule_disable>:


/******************************************************************************/
void CO_CANmodule_disable(CO_CANmodule_t *CANmodule) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL) {
        /* turn off the module */
    }
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <CO_CANrxBufferInit>:
        uint16_t                ident,
        uint16_t                mask,
        bool_t                  rtr,
        void                   *object,
        void                  (*CANrx_callback)(void *object, void *message))
{
 80006d8:	b480      	push	{r7}
 80006da:	b087      	sub	sp, #28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	4608      	mov	r0, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	461a      	mov	r2, r3
 80006e6:	4603      	mov	r3, r0
 80006e8:	817b      	strh	r3, [r7, #10]
 80006ea:	460b      	mov	r3, r1
 80006ec:	813b      	strh	r3, [r7, #8]
 80006ee:	4613      	mov	r3, r2
 80006f0:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80006f2:	2300      	movs	r3, #0
 80006f4:	75fb      	strb	r3, [r7, #23]

    if((CANmodule!=NULL) && (object!=NULL) && (CANrx_callback!=NULL) && (index < CANmodule->rxSize)){
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d035      	beq.n	8000768 <CO_CANrxBufferInit+0x90>
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d032      	beq.n	8000768 <CO_CANrxBufferInit+0x90>
 8000702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000704:	2b00      	cmp	r3, #0
 8000706:	d02f      	beq.n	8000768 <CO_CANrxBufferInit+0x90>
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	891b      	ldrh	r3, [r3, #8]
 800070c:	897a      	ldrh	r2, [r7, #10]
 800070e:	429a      	cmp	r2, r3
 8000710:	d22a      	bcs.n	8000768 <CO_CANrxBufferInit+0x90>
        /* buffer, which will be configured */
        CO_CANrx_t *buffer = &CANmodule->rxArray[index];
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6859      	ldr	r1, [r3, #4]
 8000716:	897a      	ldrh	r2, [r7, #10]
 8000718:	4613      	mov	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4413      	add	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	440b      	add	r3, r1
 8000722:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000728:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800072e:	609a      	str	r2, [r3, #8]

        /* CAN identifier and CAN mask, bit aligned with CAN module. Different on different microcontrollers. */
        buffer->ident = ident & 0x07FFU;
 8000730:	893b      	ldrh	r3, [r7, #8]
 8000732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000736:	b29a      	uxth	r2, r3
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	801a      	strh	r2, [r3, #0]
        if(rtr){
 800073c:	6a3b      	ldr	r3, [r7, #32]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <CO_CANrxBufferInit+0x78>
            buffer->ident |= 0x0800U;
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800074a:	b29a      	uxth	r2, r3
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	801a      	strh	r2, [r3, #0]
        }
        buffer->mask = (mask & 0x07FFU) | 0x0800U;
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000756:	b29b      	uxth	r3, r3
 8000758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800075c:	b29a      	uxth	r2, r3
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if(CANmodule->useCANrxFilters){
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	699b      	ldr	r3, [r3, #24]
    if((CANmodule!=NULL) && (object!=NULL) && (CANrx_callback!=NULL) && (index < CANmodule->rxSize)){
 8000766:	e001      	b.n	800076c <CO_CANrxBufferInit+0x94>

        }
    }
    else{
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8000768:	23ff      	movs	r3, #255	; 0xff
 800076a:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800076c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000770:	4618      	mov	r0, r3
 8000772:	371c      	adds	r7, #28
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <CO_CANtxBufferInit>:
        uint16_t                index,
        uint16_t                ident,
        bool_t                  rtr,
        uint8_t                 noOfBytes,
        bool_t                  syncFlag)
{
 800077c:	b480      	push	{r7}
 800077e:	b087      	sub	sp, #28
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	817b      	strh	r3, [r7, #10]
 800078a:	4613      	mov	r3, r2
 800078c:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t *buffer = NULL;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]

    if((CANmodule != NULL) && (index < CANmodule->txSize)){
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d01f      	beq.n	80007d8 <CO_CANtxBufferInit+0x5c>
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	8a1b      	ldrh	r3, [r3, #16]
 800079c:	897a      	ldrh	r2, [r7, #10]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d21a      	bcs.n	80007d8 <CO_CANtxBufferInit+0x5c>
        /* get specific buffer */
        buffer = &CANmodule->txArray[index];
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	68d9      	ldr	r1, [r3, #12]
 80007a6:	897a      	ldrh	r2, [r7, #10]
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	440b      	add	r3, r1
 80007b2:	617b      	str	r3, [r7, #20]
        /*
        buffer->ident = ((uint32_t)ident & 0x07FFU)
                      | ((uint32_t)(((uint32_t)noOfBytes & 0xFU) << 12U))
                      | ((uint32_t)(rtr ? 0x8000U : 0U));
        */
        buffer->ident = ident & 0x07FFU;
 80007b4:	893b      	ldrh	r3, [r7, #8]
 80007b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes & 0xFU;
 80007be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	711a      	strb	r2, [r3, #4]

        buffer->bufferFull = false;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007d6:	615a      	str	r2, [r3, #20]
    }

    return buffer;
 80007d8:	697b      	ldr	r3, [r7, #20]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <CO_CANsend>:


/******************************************************************************/
CO_ReturnError_t CO_CANsend(CO_CANmodule_t *CANmodule, CO_CANtx_t *buffer){
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 80007f0:	2300      	movs	r3, #0
 80007f2:	73fb      	strb	r3, [r7, #15]
    CANopenNodeStatusTypeDef_t ret;

    /* Verify overflow */
    if(buffer->bufferFull){
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	691b      	ldr	r3, [r3, #16]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00c      	beq.n	8000816 <CO_CANsend+0x30>
        if(!CANmodule->firstCANtxMessage){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6a1b      	ldr	r3, [r3, #32]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d106      	bne.n	8000812 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	8a5b      	ldrh	r3, [r3, #18]
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8000812:	23f7      	movs	r3, #247	; 0xf7
 8000814:	73fb      	strb	r3, [r7, #15]
    }

    CO_LOCK_CAN_SEND(CANmodule);
    /* if CAN TX buffer is free, copy message to it */
    ret = xCANTransmitMessage(buffer);
 8000816:	6838      	ldr	r0, [r7, #0]
 8000818:	f000 f980 	bl	8000b1c <xCANTransmitMessage>
 800081c:	4603      	mov	r3, r0
 800081e:	73bb      	strb	r3, [r7, #14]

    if(ret == CAN_OPEN_NODE_OK && CANmodule->CANtxCount == 0){
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d109      	bne.n	800083a <CO_CANsend+0x54>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800082a:	b29b      	uxth	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d104      	bne.n	800083a <CO_CANsend+0x54>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	61da      	str	r2, [r3, #28]
 8000838:	e009      	b.n	800084e <CO_CANsend+0x68>
        /* copy message and txRequest */
    }
    /* if no buffer is free, message will be sent by interrupt */
    else{
        buffer->bufferFull = true;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	2201      	movs	r2, #1
 800083e:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000844:	b29b      	uxth	r3, r3
 8000846:	3301      	adds	r3, #1
 8000848:	b29a      	uxth	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);

    return err;
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <CO_CANclearPendingSyncPDOs>:


/******************************************************************************/
void CO_CANclearPendingSyncPDOs(CO_CANmodule_t *CANmodule){
 800085a:	b480      	push	{r7}
 800085c:	b087      	sub	sp, #28
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

    CO_LOCK_CAN_SEND(CANmodule);
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if(/*messageIsOnCanBuffer && */CANmodule->bufferInhibitFlag){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d004      	beq.n	8000878 <CO_CANclearPendingSyncPDOs+0x1e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8000874:	2301      	movs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if(CANmodule->CANtxCount != 0U){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800087c:	b29b      	uxth	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d023      	beq.n	80008ca <CO_CANclearPendingSyncPDOs+0x70>
        uint16_t i;
        CO_CANtx_t *buffer = &CANmodule->txArray[0];
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	60fb      	str	r3, [r7, #12]
        for(i = CANmodule->txSize; i > 0U; i--){
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	8a1b      	ldrh	r3, [r3, #16]
 800088c:	827b      	strh	r3, [r7, #18]
 800088e:	e019      	b.n	80008c4 <CO_CANclearPendingSyncPDOs+0x6a>
            if(buffer->bufferFull){
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00f      	beq.n	80008b8 <CO_CANclearPendingSyncPDOs+0x5e>
                if(buffer->syncFlag){
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d00b      	beq.n	80008b8 <CO_CANclearPendingSyncPDOs+0x5e>
                    buffer->bufferFull = false;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	3b01      	subs	r3, #1
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
                }
            }
            buffer++;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3318      	adds	r3, #24
 80008bc:	60fb      	str	r3, [r7, #12]
        for(i = CANmodule->txSize; i > 0U; i--){
 80008be:	8a7b      	ldrh	r3, [r7, #18]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	827b      	strh	r3, [r7, #18]
 80008c4:	8a7b      	ldrh	r3, [r7, #18]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1e2      	bne.n	8000890 <CO_CANclearPendingSyncPDOs+0x36>
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);


    if(tpdoDeleted != 0U){
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d006      	beq.n	80008de <CO_CANclearPendingSyncPDOs+0x84>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	8a5b      	ldrh	r3, [r3, #18]
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	b29a      	uxth	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	825a      	strh	r2, [r3, #18]
    }
}
 80008de:	bf00      	nop
 80008e0:	371c      	adds	r7, #28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <CO_CANmodule_process>:
/******************************************************************************/
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors=0, txErrors=0, overflow=0;

void CO_CANmodule_process(CO_CANmodule_t *CANmodule) {
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    uint32_t err;

    err = ((uint32_t)txErrors << 16) | ((uint32_t)rxErrors << 8) | overflow;
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <CO_CANmodule_process+0xcc>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	041a      	lsls	r2, r3, #16
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <CO_CANmodule_process+0xd0>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	4313      	orrs	r3, r2
 8000902:	4a2f      	ldr	r2, [pc, #188]	; (80009c0 <CO_CANmodule_process+0xd4>)
 8000904:	8812      	ldrh	r2, [r2, #0]
 8000906:	4313      	orrs	r3, r2
 8000908:	60bb      	str	r3, [r7, #8]

    if (CANmodule->errOld != err) {
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	429a      	cmp	r2, r3
 8000912:	d04a      	beq.n	80009aa <CO_CANmodule_process+0xbe>
        uint16_t status = CANmodule->CANerrorStatus;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	8a5b      	ldrh	r3, [r3, #18]
 8000918:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68ba      	ldr	r2, [r7, #8]
 800091e:	629a      	str	r2, [r3, #40]	; 0x28

        if (txErrors >= 256U) {
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <CO_CANmodule_process+0xcc>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	2bff      	cmp	r3, #255	; 0xff
 8000926:	d904      	bls.n	8000932 <CO_CANmodule_process+0x46>
            /* bus off */
            status |= CO_CAN_ERRTX_BUS_OFF;
 8000928:	89fb      	ldrh	r3, [r7, #14]
 800092a:	f043 0304 	orr.w	r3, r3, #4
 800092e:	81fb      	strh	r3, [r7, #14]
 8000930:	e030      	b.n	8000994 <CO_CANmodule_process+0xa8>
        }
        else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF ^ (CO_CAN_ERRTX_BUS_OFF |
 8000932:	89fb      	ldrh	r3, [r7, #14]
 8000934:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 8000938:	f023 0303 	bic.w	r3, r3, #3
 800093c:	81fb      	strh	r3, [r7, #14]
                                CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE |
                                CO_CAN_ERRTX_WARNING | CO_CAN_ERRTX_PASSIVE);

            /* rx bus warning or passive */
            if (rxErrors >= 128) {
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <CO_CANmodule_process+0xd0>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	2b7f      	cmp	r3, #127	; 0x7f
 8000944:	d904      	bls.n	8000950 <CO_CANmodule_process+0x64>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE;
 8000946:	89fb      	ldrh	r3, [r7, #14]
 8000948:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800094c:	81fb      	strh	r3, [r7, #14]
 800094e:	e007      	b.n	8000960 <CO_CANmodule_process+0x74>
            } else if (rxErrors >= 96) {
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <CO_CANmodule_process+0xd0>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	2b5f      	cmp	r3, #95	; 0x5f
 8000956:	d903      	bls.n	8000960 <CO_CANmodule_process+0x74>
                status |= CO_CAN_ERRRX_WARNING;
 8000958:	89fb      	ldrh	r3, [r7, #14]
 800095a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095e:	81fb      	strh	r3, [r7, #14]
            }

            /* tx bus warning or passive */
            if (txErrors >= 128) {
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <CO_CANmodule_process+0xcc>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2b7f      	cmp	r3, #127	; 0x7f
 8000966:	d904      	bls.n	8000972 <CO_CANmodule_process+0x86>
                status |= CO_CAN_ERRTX_WARNING | CO_CAN_ERRTX_PASSIVE;
 8000968:	89fb      	ldrh	r3, [r7, #14]
 800096a:	f043 0303 	orr.w	r3, r3, #3
 800096e:	81fb      	strh	r3, [r7, #14]
 8000970:	e007      	b.n	8000982 <CO_CANmodule_process+0x96>
            } else if (rxErrors >= 96) {
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <CO_CANmodule_process+0xd0>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	2b5f      	cmp	r3, #95	; 0x5f
 8000978:	d903      	bls.n	8000982 <CO_CANmodule_process+0x96>
                status |= CO_CAN_ERRTX_WARNING;
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	81fb      	strh	r3, [r7, #14]
            }

            /* if not tx passive clear also overflow */
            if ((status & CO_CAN_ERRTX_PASSIVE) == 0) {
 8000982:	89fb      	ldrh	r3, [r7, #14]
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <CO_CANmodule_process+0xa8>
                status &= 0xFFFF ^ CO_CAN_ERRTX_OVERFLOW;
 800098c:	89fb      	ldrh	r3, [r7, #14]
 800098e:	f023 0308 	bic.w	r3, r3, #8
 8000992:	81fb      	strh	r3, [r7, #14]
            }
        }

        if (overflow != 0) {
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <CO_CANmodule_process+0xd4>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d003      	beq.n	80009a4 <CO_CANmodule_process+0xb8>
            /* CAN RX bus overflow */
            status |= CO_CAN_ERRRX_OVERFLOW;
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a2:	81fb      	strh	r3, [r7, #14]
        }

        CANmodule->CANerrorStatus = status;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	89fa      	ldrh	r2, [r7, #14]
 80009a8:	825a      	strh	r2, [r3, #18]
    }
}
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000a74 	.word	0x20000a74
 80009bc:	20000a72 	.word	0x20000a72
 80009c0:	20000a76 	.word	0x20000a76

080009c4 <CO_CANinterrupt>:


/******************************************************************************/

void CO_CANinterrupt(CO_CANmodule_t *CANmodule){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	; 0x30
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
    /* receive interrupt */
    if(1){
        CO_CANrxMsg_t *rcvMsg;      /* pointer to received message in CAN module */
        uint16_t index;             /* index of received message */
        uint32_t rcvMsgIdent;       /* identifier of the received message */
        CO_CANrx_t *buffer = NULL;  /* receive message buffer from CO_CANmodule_t object. */
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
        bool_t msgMatched = false;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c

        CO_CANrxMsg_t receivedMessage;
        rcvMsg = &receivedMessage;
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	623b      	str	r3, [r7, #32]
        rcvMsgIdent = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]

        CANopenNodeStatusTypeDef_t ret = xCANReceiveMessage(rcvMsg);
 80009de:	6a38      	ldr	r0, [r7, #32]
 80009e0:	f000 f8e0 	bl	8000ba4 <xCANReceiveMessage>
 80009e4:	4603      	mov	r3, r0
 80009e6:	76fb      	strb	r3, [r7, #27]

        if (ret == CAN_OPEN_NODE_OK)
 80009e8:	7efb      	ldrb	r3, [r7, #27]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d151      	bne.n	8000a92 <CO_CANinterrupt+0xce>
        {
            rcvMsgIdent = rcvMsg->ident;
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	61fb      	str	r3, [r7, #28]
        
            if(CANmodule->useCANrxFilters){
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d01c      	beq.n	8000a36 <CO_CANinterrupt+0x72>
                /* CAN module filters are used. Message with known 11-bit identifier has */
                /* been received */
                index = 0;  /* get index of the received message here. Or something similar */
 80009fc:	2300      	movs	r3, #0
 80009fe:	84fb      	strh	r3, [r7, #38]	; 0x26
                if(index < CANmodule->rxSize){
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	891b      	ldrh	r3, [r3, #8]
 8000a04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d232      	bcs.n	8000a70 <CO_CANinterrupt+0xac>
                    buffer = &CANmodule->rxArray[index];
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6859      	ldr	r1, [r3, #4]
 8000a0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	440b      	add	r3, r1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
                    /* verify also RTR */
                    if(((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U){
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	4053      	eors	r3, r2
 8000a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a28:	8852      	ldrh	r2, [r2, #2]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d11f      	bne.n	8000a70 <CO_CANinterrupt+0xac>
                        msgMatched = true;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a34:	e01c      	b.n	8000a70 <CO_CANinterrupt+0xac>
                }
            }
            else{
                /* CAN module filters are not used, message with any standard 11-bit identifier */
                /* has been received. Search rxArray form CANmodule for the same CAN-ID. */
                buffer = &CANmodule->rxArray[0];
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
                for(index = CANmodule->rxSize; index > 0U; index--){
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	891b      	ldrh	r3, [r3, #8]
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a42:	e012      	b.n	8000a6a <CO_CANinterrupt+0xa6>
                    if(((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U){
 8000a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	4053      	eors	r3, r2
 8000a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a50:	8852      	ldrh	r2, [r2, #2]
 8000a52:	4013      	ands	r3, r2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <CO_CANinterrupt+0x9a>
                        msgMatched = true;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        break;
 8000a5c:	e008      	b.n	8000a70 <CO_CANinterrupt+0xac>
                    }
                    buffer++;
 8000a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a60:	330c      	adds	r3, #12
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
                for(index = CANmodule->rxSize; index > 0U; index--){
 8000a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a66:	3b01      	subs	r3, #1
 8000a68:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000a6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1e9      	bne.n	8000a44 <CO_CANinterrupt+0x80>
                }
            }

            /* Call specific function, which will process the message */
            if(msgMatched && (buffer != NULL) && (buffer->CANrx_callback != NULL)){
 8000a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00d      	beq.n	8000a92 <CO_CANinterrupt+0xce>
 8000a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00a      	beq.n	8000a92 <CO_CANinterrupt+0xce>
 8000a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d006      	beq.n	8000a92 <CO_CANinterrupt+0xce>
                buffer->CANrx_callback(buffer->object, (void*) rcvMsg);
 8000a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a8a:	6852      	ldr	r2, [r2, #4]
 8000a8c:	6a39      	ldr	r1, [r7, #32]
 8000a8e:	4610      	mov	r0, r2
 8000a90:	4798      	blx	r3
        }
    }
    else{
        /* some other interrupt reason */
    }
}
 8000a92:	bf00      	nop
 8000a94:	3730      	adds	r7, #48	; 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <xCANopenHardwareInit>:
 * @brief CAN Hardware Initialize
 * 
 * @return CANopenHardwareStatusTypeDef_t 
 */
CANopenHardwareStatusTypeDef_t xCANopenHardwareInit (void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
#endif
#ifdef TEST_STM32
    /*##-2- Configure the CAN Filter ###########################################*/
    CAN_FilterTypeDef  sFilterConfig;

    sFilterConfig.FilterBank = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000ac6:	230e      	movs	r3, #14
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	4619      	mov	r1, r3
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <xCANopenHardwareInit+0x6c>)
 8000ad0:	f007 f91b 	bl	8007d0a <HAL_CAN_ConfigFilter>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <xCANopenHardwareInit+0x46>
    {
      /* Filter configuration Error */
      Error_Handler();
 8000ada:	f006 fd9f 	bl	800761c <Error_Handler>
      return CAN_OPEN_HARDWARE_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <xCANopenHardwareInit+0x64>
    }

    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <xCANopenHardwareInit+0x6c>)
 8000ae6:	f007 fc2f 	bl	8008348 <HAL_CAN_ActivateNotification>

    if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <xCANopenHardwareInit+0x6c>)
 8000aec:	f007 f9d7 	bl	8007e9e <HAL_CAN_Start>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <xCANopenHardwareInit+0x62>
    {
        Error_Handler();
 8000af6:	f006 fd91 	bl	800761c <Error_Handler>
        return CAN_OPEN_HARDWARE_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e000      	b.n	8000b00 <xCANopenHardwareInit+0x64>
    }
#endif
    return CAN_OPEN_HARDWARE_OK;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000a78 	.word	0x20000a78

08000b0c <vResetModule>:
/**
 * @brief Reset MCU
 * 
 */
void vResetModule (void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
#ifdef TEST_ESP32
    esp_restart();
#endif

}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <xCANTransmitMessage>:
 * @return CANopenNodeStatusTypeDef_t
 *         CAN_OPEN_NODE_OK: Transmit message successfully
 *         CAN_OPEN_NODE_ERROR: Error transmit message
 */
CANopenNodeStatusTypeDef_t xCANTransmitMessage (CO_CANtx_t *xMessage)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
#ifdef TEST_STM32
    CAN_TxHeaderTypeDef header;
    uint8_t data[8];
    uint32_t mailbox;

    header.DLC = xMessage->DLC;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    header.StdId = xMessage->ident;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	617b      	str	r3, [r7, #20]
    header.IDE = CAN_ID_STD;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
    header.RTR = CAN_RTR_DATA;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
    header.ExtId = 0x00;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
    header.TransmitGlobalTime = DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    for (uint8_t i = 0; i < 8; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b48:	e00f      	b.n	8000b6a <xCANTransmitMessage+0x4e>
    {
    	data[i] = xMessage->data[i];
 8000b4a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	440a      	add	r2, r1
 8000b56:	7952      	ldrb	r2, [r2, #5]
 8000b58:	3330      	adds	r3, #48	; 0x30
 8000b5a:	443b      	add	r3, r7
 8000b5c:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i = 0; i < 8; i++)
 8000b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b64:	3301      	adds	r3, #1
 8000b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b6e:	2b07      	cmp	r3, #7
 8000b70:	d9eb      	bls.n	8000b4a <xCANTransmitMessage+0x2e>
    }

	HAL_CAN_AddTxMessage(&hcan, &header, data, &mailbox);
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	f107 020c 	add.w	r2, r7, #12
 8000b7a:	f107 0114 	add.w	r1, r7, #20
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <xCANTransmitMessage+0x84>)
 8000b80:	f007 f9d1 	bl	8007f26 <HAL_CAN_AddTxMessage>

	while(HAL_CAN_IsTxMessagePending(&hcan, mailbox));
 8000b84:	bf00      	nop
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <xCANTransmitMessage+0x84>)
 8000b8c:	f007 faa6 	bl	80080dc <HAL_CAN_IsTxMessagePending>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f7      	bne.n	8000b86 <xCANTransmitMessage+0x6a>

	return CAN_OPEN_NODE_OK;
 8000b96:	2300      	movs	r3, #0

#endif
    return CAN_OPEN_NODE_ERROR;
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3730      	adds	r7, #48	; 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000a78 	.word	0x20000a78

08000ba4 <xCANReceiveMessage>:
 * @return CANopenNodeStatusTypeDef_t 
 *         CAN_OPEN_NODE_OK: Message received successfully
 *         CAN_OPEN_NODE_ERROR: No received message
 */
CANopenNodeStatusTypeDef_t xCANReceiveMessage (CO_CANrxMsg_t *xMessage)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
#ifdef TEST_STM32
   CAN_RxHeaderTypeDef header;
   uint8_t data[8];

   /* Get RX message */
   if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &header, data) != HAL_OK)
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4817      	ldr	r0, [pc, #92]	; (8000c14 <xCANReceiveMessage+0x70>)
 8000bb8:	f007 fab4 	bl	8008124 <HAL_CAN_GetRxMessage>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <xCANReceiveMessage+0x26>
   {
     /* Reception Error */
     Error_Handler();
 8000bc2:	f006 fd2b 	bl	800761c <Error_Handler>
     return CAN_OPEN_NODE_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e020      	b.n	8000c0c <xCANReceiveMessage+0x68>
   }

   xMessage->ident = header.StdId;
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	601a      	str	r2, [r3, #0]
   xMessage->DLC = header.DLC;
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	711a      	strb	r2, [r3, #4]

   for (uint8_t i = 0; i < 8; i++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bde:	e010      	b.n	8000c02 <xCANReceiveMessage+0x5e>
   {
       xMessage->data[i] = data[i];
 8000be0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000be4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000be8:	3230      	adds	r2, #48	; 0x30
 8000bea:	443a      	add	r2, r7
 8000bec:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	715a      	strb	r2, [r3, #5]
   for (uint8_t i = 0; i < 8; i++)
 8000bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	d9ea      	bls.n	8000be0 <xCANReceiveMessage+0x3c>
   }

   return CAN_OPEN_NODE_OK;
 8000c0a:	2300      	movs	r3, #0
#endif
        
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3730      	adds	r7, #48	; 0x30
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000a78 	.word	0x20000a78

08000c18 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	70fb      	strb	r3, [r7, #3]
 8000c40:	78fa      	ldrb	r2, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	2304      	movs	r3, #4
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <OD_getIndex+0x14>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	e000      	b.n	8000c88 <OD_getIndex+0x16>
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <OD_extension_init+0x14>
 8000ca4:	2305      	movs	r3, #5
 8000ca6:	e003      	b.n	8000cb0 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000ccc:	7af9      	ldrb	r1, [r7, #11]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f001 fb44 	bl	8002364 <OD_get_value>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00c      	beq.n	8000d14 <OD_read_1014_default+0x2e>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	7c5b      	ldrb	r3, [r3, #17]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d108      	bne.n	8000d14 <OD_read_1014_default+0x2e>
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d005      	beq.n	8000d14 <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d902      	bls.n	8000d14 <OD_read_1014_default+0x2e>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8000d14:	2309      	movs	r3, #9
 8000d16:	e01b      	b.n	8000d50 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <OD_read_1014_default+0x44>
 8000d26:	2300      	movs	r3, #0
 8000d28:	e001      	b.n	8000d2e <OD_read_1014_default+0x48>
 8000d2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000d2e:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000d36:	3380      	adds	r3, #128	; 0x80
 8000d38:	461a      	mov	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 8000d40:	6939      	ldr	r1, [r7, #16]
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f7ff ff86 	bl	8000c54 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00f      	beq.n	8000d8c <OD_read_1003+0x34>
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00c      	beq.n	8000d8c <OD_read_1003+0x34>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d009      	beq.n	8000d8c <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d803      	bhi.n	8000d86 <OD_read_1003+0x2e>
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	7c5b      	ldrb	r3, [r3, #17]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <OD_read_1003+0x34>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 8000d8c:	2309      	movs	r3, #9
 8000d8e:	e04d      	b.n	8000e2c <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	7f1b      	ldrb	r3, [r3, #28]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d801      	bhi.n	8000da2 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000d9e:	2309      	movs	r3, #9
 8000da0:	e044      	b.n	8000e2c <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	7c5b      	ldrb	r3, [r3, #17]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10b      	bne.n	8000dc2 <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000db0:	4619      	mov	r1, r3
 8000db2:	68b8      	ldr	r0, [r7, #8]
 8000db4:	f7ff ff3e 	bl	8000c34 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e034      	b.n	8000e2c <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	7c5a      	ldrb	r2, [r3, #17]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d82c      	bhi.n	8000e2a <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	7f5b      	ldrb	r3, [r3, #29]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	7c5b      	ldrb	r3, [r3, #17]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8000de2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da07      	bge.n	8000dfa <OD_read_1003+0xa2>
            index += em->fifoSize;
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	7f1b      	ldrb	r3, [r3, #28]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	8afb      	ldrh	r3, [r7, #22]
 8000df2:	4413      	add	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	82fb      	strh	r3, [r7, #22]
 8000df8:	e007      	b.n	8000e0a <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 8000dfa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	7f12      	ldrb	r2, [r2, #28]
 8000e02:	4293      	cmp	r3, r2
 8000e04:	db01      	blt.n	8000e0a <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 8000e06:	2309      	movs	r3, #9
 8000e08:	e010      	b.n	8000e2c <OD_read_1003+0xd4>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	699a      	ldr	r2, [r3, #24]
 8000e0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4413      	add	r3, r2
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	68b8      	ldr	r0, [r7, #8]
 8000e1c:	f7ff ff1a 	bl	8000c54 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2204      	movs	r2, #4
 8000e24:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 8000e2a:	2319      	movs	r3, #25
    }
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00c      	beq.n	8000e62 <OD_write_1003+0x2e>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	7c5b      	ldrb	r3, [r3, #17]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d108      	bne.n	8000e62 <OD_write_1003+0x2e>
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <OD_write_1003+0x2e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d102      	bne.n	8000e62 <OD_write_1003+0x2e>
        || countWritten == NULL)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 8000e62:	2309      	movs	r3, #9
 8000e64:	e012      	b.n	8000e8c <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 8000e66:	68b8      	ldr	r0, [r7, #8]
 8000e68:	f7ff fed6 	bl	8000c18 <CO_getUint8>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 8000e72:	230f      	movs	r3, #15
 8000e74:	e00a      	b.n	8000e8c <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d01a      	beq.n	8000ee2 <CO_EM_init+0x4e>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d017      	beq.n	8000ee2 <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d103      	bne.n	8000ec0 <CO_EM_init+0x2c>
 8000eb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d810      	bhi.n	8000ee2 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00d      	beq.n	8000ee2 <CO_EM_init+0x4e>
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00a      	beq.n	8000ee2 <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 8000ecc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <CO_EM_init+0x4e>
 8000ed4:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db02      	blt.n	8000ee2 <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 8000edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e0a7      	b.n	8001038 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 8000ee8:	2250      	movs	r2, #80	; 0x50
 8000eea:	2100      	movs	r1, #0
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f00a fbff 	bl	800b6f0 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	2201      	movs	r2, #1
 8000efc:	2100      	movs	r1, #0
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f001 fa97 	bl	8002432 <OD_getPtr>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10c      	bne.n	8000f2c <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 8000f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <CO_EM_init+0x92>
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff feaa 	bl	8000c72 <OD_getIndex>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461a      	mov	r2, r3
 8000f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f24:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000f26:	f06f 030b 	mvn.w	r3, #11
 8000f2a:	e085      	b.n	8001038 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f40:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 8000f42:	f107 0210 	add.w	r2, r7, #16
 8000f46:	2301      	movs	r3, #1
 8000f48:	2100      	movs	r1, #0
 8000f4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f4c:	f7ff feb6 	bl	8000cbc <OD_get_u32>
 8000f50:	4603      	mov	r3, r0
 8000f52:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 8000f54:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d104      	bne.n	8000f66 <CO_EM_init+0xd2>
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <CO_EM_init+0x1ac>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d010      	beq.n	8000f88 <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8000f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <CO_EM_init+0xe6>
 8000f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f6e:	f7ff fe80 	bl	8000c72 <OD_getIndex>
 8000f72:	4603      	mov	r3, r0
 8000f74:	461a      	mov	r2, r3
 8000f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f78:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 8000f7a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 8000f82:	f06f 030b 	mvn.w	r3, #11
 8000f86:	e057      	b.n	8001038 <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 8000f88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	3380      	adds	r3, #128	; 0x80
 8000f90:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	0fdb      	lsrs	r3, r3, #31
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <CO_EM_init+0x1b0>)
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4a26      	ldr	r2, [pc, #152]	; (8001048 <CO_EM_init+0x1b4>)
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3330      	adds	r3, #48	; 0x30
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fba:	f7ff fe6b 	bl	8000c94 <OD_extension_init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8000fc2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00c      	beq.n	8000fe4 <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8000fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <CO_EM_init+0x14a>
 8000fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fd2:	f7ff fe4e 	bl	8000c72 <OD_getIndex>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fdc:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000fde:	f06f 030b 	mvn.w	r3, #11
 8000fe2:	e029      	b.n	8001038 <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 8000fee:	8aba      	ldrh	r2, [r7, #20]
 8000ff0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	f7ff fbbd 	bl	800077c <CO_CANtxBufferInit>
 8001002:	4602      	mov	r2, r0
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	e010      	b.n	8001038 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <CO_EM_init+0x1b8>)
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <CO_EM_init+0x1bc>)
 8001026:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3340      	adds	r3, #64	; 0x40
 800102c:	4619      	mov	r1, r3
 800102e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001030:	f7ff fe30 	bl	8000c94 <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 8001034:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	7ffff800 	.word	0x7ffff800
 8001044:	08000ce7 	.word	0x08000ce7
 8001048:	08001f99 	.word	0x08001f99
 800104c:	08000d59 	.word	0x08000d59
 8001050:	08000e35 	.word	0x08000e35

08001054 <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af02      	add	r7, sp, #8
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	8a5b      	ldrh	r3, [r3, #18]
 8001068:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8a1b      	ldrh	r3, [r3, #16]
 800106e:	8aba      	ldrh	r2, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f000 80a2 	beq.w	80011ba <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8a1a      	ldrh	r2, [r3, #16]
 800107a:	8abb      	ldrh	r3, [r7, #20]
 800107c:	4053      	eors	r3, r2
 800107e:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8aba      	ldrh	r2, [r7, #20]
 8001084:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 8001086:	8a7a      	ldrh	r2, [r7, #18]
 8001088:	f240 1301 	movw	r3, #257	; 0x101
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d010      	beq.n	80010b4 <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 8001092:	8aba      	ldrh	r2, [r7, #20]
 8001094:	f240 1301 	movw	r3, #257	; 0x101
 8001098:	4013      	ands	r3, r2
            CO_error(em,
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf14      	ite	ne
 800109e:	2301      	movne	r3, #1
 80010a0:	2300      	moveq	r3, #0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	2300      	movs	r3, #0
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2300      	movs	r3, #0
 80010ac:	2201      	movs	r2, #1
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 f91a 	bl	80012e8 <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 80010b4:	8a7b      	ldrh	r3, [r7, #18]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d010      	beq.n	80010e0 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 80010be:	8abb      	ldrh	r3, [r7, #20]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	bf14      	ite	ne
 80010c8:	2301      	movne	r3, #1
 80010ca:	2300      	moveq	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	2300      	movs	r3, #0
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	f248 1320 	movw	r3, #33056	; 0x8120
 80010d8:	2207      	movs	r2, #7
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f904 	bl	80012e8 <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 80010e0:	8a7b      	ldrh	r3, [r7, #18]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d010      	beq.n	800110c <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 80010ea:	8abb      	ldrh	r3, [r7, #20]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf14      	ite	ne
 80010f4:	2301      	movne	r3, #1
 80010f6:	2300      	moveq	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	f248 1340 	movw	r3, #33088	; 0x8140
 8001104:	2212      	movs	r2, #18
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 f8ee 	bl	80012e8 <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 800110c:	8a7b      	ldrh	r3, [r7, #18]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d010      	beq.n	8001138 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 8001116:	8abb      	ldrh	r3, [r7, #20]
 8001118:	f003 0308 	and.w	r3, r3, #8
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf14      	ite	ne
 8001120:	2301      	movne	r3, #1
 8001122:	2300      	moveq	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4619      	mov	r1, r3
 8001128:	2300      	movs	r3, #0
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	f248 1310 	movw	r3, #33040	; 0x8110
 8001130:	2214      	movs	r2, #20
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f000 f8d8 	bl	80012e8 <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 8001138:	8a7b      	ldrh	r3, [r7, #18]
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	2b00      	cmp	r3, #0
 8001140:	d010      	beq.n	8001164 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 8001142:	8abb      	ldrh	r3, [r7, #20]
 8001144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf14      	ite	ne
 800114c:	2301      	movne	r3, #1
 800114e:	2300      	moveq	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4619      	mov	r1, r3
 8001154:	2300      	movs	r3, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800115c:	2215      	movs	r2, #21
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 f8c2 	bl	80012e8 <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 8001164:	8a7b      	ldrh	r3, [r7, #18]
 8001166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116a:	2b00      	cmp	r3, #0
 800116c:	d010      	beq.n	8001190 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 800116e:	8abb      	ldrh	r3, [r7, #20]
 8001170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf14      	ite	ne
 8001178:	2301      	movne	r3, #1
 800117a:	2300      	moveq	r3, #0
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4619      	mov	r1, r3
 8001180:	2300      	movs	r3, #0
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	f248 1320 	movw	r3, #33056	; 0x8120
 8001188:	2206      	movs	r2, #6
 800118a:	68f8      	ldr	r0, [r7, #12]
 800118c:	f000 f8ac 	bl	80012e8 <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8001190:	8a7b      	ldrh	r3, [r7, #18]
 8001192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00f      	beq.n	80011ba <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 800119a:	8abb      	ldrh	r3, [r7, #20]
 800119c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	bf14      	ite	ne
 80011a4:	2301      	movne	r3, #1
 80011a6:	2300      	moveq	r3, #0
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	2300      	movs	r3, #0
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2313      	movs	r3, #19
 80011b2:	2213      	movs	r2, #19
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 f897 	bl	80012e8 <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	795b      	ldrb	r3, [r3, #5]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	789b      	ldrb	r3, [r3, #2]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d103      	bne.n	80011de <CO_EM_process+0x18a>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	78db      	ldrb	r3, [r3, #3]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 80011de:	7dfb      	ldrb	r3, [r7, #23]
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	7a1b      	ldrb	r3, [r3, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d103      	bne.n	80011f6 <CO_EM_process+0x1a2>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	7a5b      	ldrb	r3, [r3, #9]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
 80011f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011fc:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	7dfa      	ldrb	r2, [r7, #23]
 8001204:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d067      	beq.n	80012dc <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	7f1b      	ldrb	r3, [r3, #28]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d965      	bls.n	80012e0 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	7f9b      	ldrb	r3, [r3, #30]
 8001218:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	7f5b      	ldrb	r3, [r3, #29]
 800121e:	7c7a      	ldrb	r2, [r7, #17]
 8001220:	429a      	cmp	r2, r3
 8001222:	d05d      	beq.n	80012e0 <CO_EM_process+0x28c>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d158      	bne.n	80012e0 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	699a      	ldr	r2, [r3, #24]
 8001232:	7c7b      	ldrb	r3, [r7, #17]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	6819      	ldr	r1, [r3, #0]
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	041a      	lsls	r2, r3, #16
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6998      	ldr	r0, [r3, #24]
 8001242:	7c7b      	ldrb	r3, [r7, #17]
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4403      	add	r3, r0
 8001248:	430a      	orrs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	1d58      	adds	r0, r3, #5
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	7c7b      	ldrb	r3, [r7, #17]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	2208      	movs	r2, #8
 800125e:	4619      	mov	r1, r3
 8001260:	f00a fa1e 	bl	800b6a0 <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	695a      	ldr	r2, [r3, #20]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126c:	4619      	mov	r1, r3
 800126e:	4610      	mov	r0, r2
 8001270:	f7ff fab9 	bl	80007e6 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8001274:	7c7b      	ldrb	r3, [r7, #17]
 8001276:	3301      	adds	r3, #1
 8001278:	747b      	strb	r3, [r7, #17]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	7f1b      	ldrb	r3, [r3, #28]
 800127e:	7c7a      	ldrb	r2, [r7, #17]
 8001280:	429a      	cmp	r2, r3
 8001282:	d201      	bcs.n	8001288 <CO_EM_process+0x234>
 8001284:	7c7a      	ldrb	r2, [r7, #17]
 8001286:	e000      	b.n	800128a <CO_EM_process+0x236>
 8001288:	2200      	movs	r2, #0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	7fdb      	ldrb	r3, [r3, #31]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d10c      	bne.n	80012b0 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2202      	movs	r2, #2
 800129a:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 800129c:	2300      	movs	r3, #0
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a4:	2220      	movs	r2, #32
 80012a6:	2101      	movs	r1, #1
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f81d 	bl	80012e8 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 80012ae:	e017      	b.n	80012e0 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	7fdb      	ldrb	r3, [r3, #31]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d113      	bne.n	80012e0 <CO_EM_process+0x28c>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	7f9a      	ldrb	r2, [r3, #30]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	7f5b      	ldrb	r3, [r3, #29]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d10d      	bne.n	80012e0 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 80012ca:	2300      	movs	r3, #0
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2300      	movs	r3, #0
 80012d0:	2220      	movs	r2, #32
 80012d2:	2100      	movs	r1, #0
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 f807 	bl	80012e8 <CO_error>
    return;
 80012da:	e001      	b.n	80012e0 <CO_EM_process+0x28c>
        return;
 80012dc:	bf00      	nop
 80012de:	e000      	b.n	80012e2 <CO_EM_process+0x28e>
    return;
 80012e0:	bf00      	nop
}
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b08b      	sub	sp, #44	; 0x2c
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	460b      	mov	r3, r1
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	4613      	mov	r3, r2
 80012fc:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8093 	beq.w	800142c <CO_error+0x144>

    uint8_t index = errorBit >> 3;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	2201      	movs	r2, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 800131e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001322:	2b09      	cmp	r3, #9
 8001324:	d90a      	bls.n	800133c <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8001326:	2305      	movs	r3, #5
 8001328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 800132c:	2301      	movs	r3, #1
 800132e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8001332:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8001336:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 800133c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	623b      	str	r3, [r7, #32]
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	781a      	ldrb	r2, [r3, #0]
 800134a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800134e:	4013      	ands	r3, r2
 8001350:	77fb      	strb	r3, [r7, #31]

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <CO_error+0x78>
        if (errorStatusBitMasked != 0) {
 8001358:	7ffb      	ldrb	r3, [r7, #31]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <CO_error+0x82>
            return;
 800135e:	e068      	b.n	8001432 <CO_error+0x14a>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8001360:	7ffb      	ldrb	r3, [r7, #31]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d064      	beq.n	8001430 <CO_error+0x148>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8001366:	2300      	movs	r3, #0
 8001368:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	061a      	lsls	r2, r3, #24
 800136e:	88bb      	ldrh	r3, [r7, #4]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8001374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001376:	617b      	str	r3, [r7, #20]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
    if (setError) *errorStatusBits |= bitmask;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d008      	beq.n	8001390 <CO_error+0xa8>
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001386:	4313      	orrs	r3, r2
 8001388:	b2da      	uxtb	r2, r3
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e00b      	b.n	80013a8 <CO_error+0xc0>
    else          *errorStatusBits &= ~bitmask;
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b25a      	sxtb	r2, r3
 8001396:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800139a:	43db      	mvns	r3, r3
 800139c:	b25b      	sxtb	r3, r3
 800139e:	4013      	ands	r3, r2
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	7f1b      	ldrb	r3, [r3, #28]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d940      	bls.n	8001432 <CO_error+0x14a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	7f5b      	ldrb	r3, [r3, #29]
 80013b4:	74fb      	strb	r3, [r7, #19]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 80013b6:	7cfb      	ldrb	r3, [r7, #19]
 80013b8:	3301      	adds	r3, #1
 80013ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (fifoWrPtrNext >= em->fifoSize) {
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	7f1b      	ldrb	r3, [r3, #28]
 80013c2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d302      	bcc.n	80013d0 <CO_error+0xe8>
            fifoWrPtrNext = 0;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	7f9b      	ldrb	r3, [r3, #30]
 80013d4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80013d8:	429a      	cmp	r2, r3
 80013da:	d103      	bne.n	80013e4 <CO_error+0xfc>
            em->fifoOverflow = 1;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2201      	movs	r2, #1
 80013e0:	77da      	strb	r2, [r3, #31]
 80013e2:	e026      	b.n	8001432 <CO_error+0x14a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	699a      	ldr	r2, [r3, #24]
 80013e8:	7cfb      	ldrb	r3, [r7, #19]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	699a      	ldr	r2, [r3, #24]
 80013f6:	7cfb      	ldrb	r3, [r7, #19]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4413      	add	r3, r2
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001406:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	7f1b      	ldrb	r3, [r3, #28]
 8001414:	3b01      	subs	r3, #1
 8001416:	429a      	cmp	r2, r3
 8001418:	da0b      	bge.n	8001432 <CO_error+0x14a>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001420:	3301      	adds	r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f883 2020 	strb.w	r2, [r3, #32]
 800142a:	e002      	b.n	8001432 <CO_error+0x14a>
    if (em == NULL) return;
 800142c:	bf00      	nop
 800142e:	e000      	b.n	8001432 <CO_error+0x14a>
            return;
 8001430:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8001432:	372c      	adds	r7, #44	; 0x2c
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <OD_getIndex+0x14>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	e000      	b.n	800146e <OD_getIndex+0x16>
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <OD_extension_init>:
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <OD_extension_init+0x14>
 800148a:	2305      	movs	r3, #5
 800148c:	e003      	b.n	8001496 <OD_extension_init+0x1c>
    entry->extension = extension;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <OD_get_u32>:
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af02      	add	r7, sp, #8
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	460b      	mov	r3, r1
 80014b0:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80014b2:	7af9      	ldrb	r1, [r7, #11]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2304      	movs	r3, #4
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 ff51 	bl	8002364 <OD_get_value>
 80014c2:	4603      	mov	r3, r0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 80014cc:	b480      	push	{r7}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	791b      	ldrb	r3, [r3, #4]
 80014de:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	3305      	adds	r3, #5
 80014e4:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 80014e6:	7cfb      	ldrb	r3, [r7, #19]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d107      	bne.n	80014fc <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b25a      	sxtb	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2201      	movs	r2, #1
 80014fa:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 80014fc:	bf00      	nop
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d012      	beq.n	8001548 <OD_write_1016+0x40>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00f      	beq.n	8001548 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	7c5b      	ldrb	r3, [r3, #17]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	7c5a      	ldrb	r2, [r3, #17]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	7a1b      	ldrb	r3, [r3, #8]
 8001538:	429a      	cmp	r2, r3
 800153a:	d805      	bhi.n	8001548 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b04      	cmp	r3, #4
 8001540:	d102      	bne.n	8001548 <OD_write_1016+0x40>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8001548:	2309      	movs	r3, #9
 800154a:	e020      	b.n	800158e <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 800154c:	68b8      	ldr	r0, [r7, #8]
 800154e:	f7ff ff75 	bl	800143c <CO_getUint32>
 8001552:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	0c1b      	lsrs	r3, r3, #16
 8001558:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	7c5b      	ldrb	r3, [r3, #17]
 8001562:	3b01      	subs	r3, #1
 8001564:	b2d9      	uxtb	r1, r3
 8001566:	8abb      	ldrh	r3, [r7, #20]
 8001568:	7dfa      	ldrb	r2, [r7, #23]
 800156a:	69f8      	ldr	r0, [r7, #28]
 800156c:	f000 f8c0 	bl	80016f0 <CO_HBconsumer_initEntry>
 8001570:	4603      	mov	r3, r0
 8001572:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8001574:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 800157c:	2308      	movs	r3, #8
 800157e:	e006      	b.n	800158e <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fd06 	bl	8001f98 <OD_writeOriginal>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00b      	beq.n	80015c4 <CO_HBconsumer_init+0x2c>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d008      	beq.n	80015c4 <CO_HBconsumer_init+0x2c>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <CO_HBconsumer_init+0x2c>
 80015be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	e08a      	b.n	80016e0 <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 80015ca:	2230      	movs	r2, #48	; 0x30
 80015cc:	2100      	movs	r1, #0
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f00a f88e 	bl	800b6f0 <memset>
    HBcons->em = em;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e4:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80015ea:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 80015ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ee:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d304      	bcc.n	8001600 <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 80015fa:	3b01      	subs	r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	e000      	b.n	8001602 <CO_HBconsumer_init+0x6a>
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001606:	2300      	movs	r3, #0
 8001608:	77fb      	strb	r3, [r7, #31]
 800160a:	e041      	b.n	8001690 <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	3301      	adds	r3, #1
 8001610:	b2d9      	uxtb	r1, r3
 8001612:	f107 0214 	add.w	r2, r7, #20
 8001616:	2301      	movs	r3, #1
 8001618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800161a:	f7ff ff42 	bl	80014a2 <OD_get_u32>
 800161e:	4603      	mov	r3, r0
 8001620:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8001622:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00c      	beq.n	8001644 <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 800162a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <CO_HBconsumer_init+0xa6>
 8001630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001632:	f7ff ff11 	bl	8001458 <OD_getIndex>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163c:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 800163e:	f06f 030b 	mvn.w	r3, #11
 8001642:	e04d      	b.n	80016e0 <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 800164e:	8b7b      	ldrh	r3, [r7, #26]
 8001650:	7f7a      	ldrb	r2, [r7, #29]
 8001652:	7ff9      	ldrb	r1, [r7, #31]
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 f84b 	bl	80016f0 <CO_HBconsumer_initEntry>
 800165a:	4603      	mov	r3, r0
 800165c:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 800165e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d011      	beq.n	800168a <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8001666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <CO_HBconsumer_init+0xe2>
 800166c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800166e:	f7ff fef3 	bl	8001458 <OD_getIndex>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001678:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 800167a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800167e:	f113 0f0c 	cmn.w	r3, #12
 8001682:	d002      	beq.n	800168a <CO_HBconsumer_init+0xf2>
                return ret;
 8001684:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001688:	e02a      	b.n	80016e0 <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	3301      	adds	r3, #1
 800168e:	77fb      	strb	r3, [r7, #31]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	7a1b      	ldrb	r3, [r3, #8]
 8001694:	7ffa      	ldrb	r2, [r7, #31]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3b8      	bcc.n	800160c <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <CO_HBconsumer_init+0x150>)
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <CO_HBconsumer_init+0x154>)
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3320      	adds	r3, #32
 80016b0:	4619      	mov	r1, r3
 80016b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016b4:	f7ff fee1 	bl	800147a <OD_extension_init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 80016bc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00c      	beq.n	80016de <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <CO_HBconsumer_init+0x140>
 80016ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016cc:	f7ff fec4 	bl	8001458 <OD_getIndex>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016d6:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80016d8:	f06f 030b 	mvn.w	r3, #11
 80016dc:	e000      	b.n	80016e0 <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3720      	adds	r7, #32
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	08001ee9 	.word	0x08001ee9
 80016ec:	08001509 	.word	0x08001509

080016f0 <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b08d      	sub	sp, #52	; 0x34
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	70fb      	strb	r3, [r7, #3]
 8001702:	460b      	mov	r3, r1
 8001704:	70bb      	strb	r3, [r7, #2]
 8001706:	4613      	mov	r3, r2
 8001708:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800170a:	2300      	movs	r3, #0
 800170c:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <CO_HBconsumer_initEntry+0x2e>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7a1b      	ldrb	r3, [r3, #8]
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	429a      	cmp	r2, r3
 800171c:	d302      	bcc.n	8001724 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e077      	b.n	8001814 <CO_HBconsumer_initEntry+0x124>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 8001724:	883b      	ldrh	r3, [r7, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d024      	beq.n	8001774 <CO_HBconsumer_initEntry+0x84>
 800172a:	78bb      	ldrb	r3, [r7, #2]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d021      	beq.n	8001774 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001730:	2300      	movs	r3, #0
 8001732:	77bb      	strb	r3, [r7, #30]
 8001734:	e019      	b.n	800176a <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	7fbb      	ldrb	r3, [r7, #30]
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	f107 0408 	add.w	r4, r7, #8
 8001744:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	7fbb      	ldrb	r3, [r7, #30]
 800174e:	429a      	cmp	r2, r3
 8001750:	d008      	beq.n	8001764 <CO_HBconsumer_initEntry+0x74>
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <CO_HBconsumer_initEntry+0x74>
 8001758:	7a3b      	ldrb	r3, [r7, #8]
 800175a:	78ba      	ldrb	r2, [r7, #2]
 800175c:	429a      	cmp	r2, r3
 800175e:	d101      	bne.n	8001764 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8001760:	23f4      	movs	r3, #244	; 0xf4
 8001762:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001764:	7fbb      	ldrb	r3, [r7, #30]
 8001766:	3301      	adds	r3, #1
 8001768:	77bb      	strb	r3, [r7, #30]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7a1b      	ldrb	r3, [r3, #8]
 800176e:	7fba      	ldrb	r2, [r7, #30]
 8001770:	429a      	cmp	r2, r3
 8001772:	d3e0      	bcc.n	8001736 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001774:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d149      	bne.n	8001810 <CO_HBconsumer_initEntry+0x120>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	78ba      	ldrb	r2, [r7, #2]
 800178c:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 800178e:	883b      	ldrh	r3, [r7, #0]
 8001790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	461a      	mov	r2, r3
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	22ff      	movs	r2, #255	; 0xff
 80017a2:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00d      	beq.n	80017ce <CO_HBconsumer_initEntry+0xde>
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <CO_HBconsumer_initEntry+0xde>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80017c4:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2201      	movs	r2, #1
 80017ca:	709a      	strb	r2, [r3, #2]
 80017cc:	e007      	b.n	80017de <CO_HBconsumer_initEntry+0xee>
        }
        else {
            COB_ID = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2200      	movs	r2, #0
 80017dc:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 80017f8:	8bba      	ldrh	r2, [r7, #28]
 80017fa:	4c08      	ldr	r4, [pc, #32]	; (800181c <CO_HBconsumer_initEntry+0x12c>)
 80017fc:	9402      	str	r4, [sp, #8]
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	2300      	movs	r3, #0
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001808:	f7fe ff66 	bl	80006d8 <CO_CANrxBufferInit>
 800180c:	4603      	mov	r3, r0
 800180e:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 8001810:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3724      	adds	r7, #36	; 0x24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	080014cd 	.word	0x080014cd

08001820 <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 800182e:	2301      	movs	r3, #1
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8001832:	2301      	movs	r3, #1
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d077      	beq.n	800192c <CO_HBconsumer_process+0x10c>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d073      	beq.n	800192c <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001844:	2300      	movs	r3, #0
 8001846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800184a:	e068      	b.n	800191e <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	4413      	add	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	789b      	ldrb	r3, [r3, #2]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d055      	beq.n	8001912 <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d022      	beq.n	80018b4 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d112      	bne.n	800189e <CO_HBconsumer_process+0x7e>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	789b      	ldrb	r3, [r3, #2]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d10a      	bne.n	8001896 <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em,
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	f248 1330 	movw	r3, #33072	; 0x8130
 800188e:	221c      	movs	r2, #28
 8001890:	2101      	movs	r1, #1
 8001892:	f7ff fd29 	bl	80012e8 <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2201      	movs	r2, #1
 800189a:	709a      	strb	r2, [r3, #2]
 800189c:	e007      	b.n	80018ae <CO_HBconsumer_process+0x8e>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2202      	movs	r2, #2
 80018a2:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2200      	movs	r2, #0
 80018a8:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	789b      	ldrb	r3, [r3, #2]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d11c      	bne.n	80018f6 <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	441a      	add	r2, r3
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d310      	bcc.n	80018f6 <CO_HBconsumer_process+0xd6>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	f248 1330 	movw	r3, #33072	; 0x8130
 80018e2:	221b      	movs	r2, #27
 80018e4:	2101      	movs	r1, #1
 80018e6:	f7ff fcff 	bl	80012e8 <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	22ff      	movs	r2, #255	; 0xff
 80018ee:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2203      	movs	r2, #3
 80018f4:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	789b      	ldrb	r3, [r3, #2]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d001      	beq.n	8001902 <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d003      	beq.n	8001914 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001910:	e000      	b.n	8001914 <CO_HBconsumer_process+0xf4>
                continue;
 8001912:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001918:	3301      	adds	r3, #1
 800191a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	7a1b      	ldrb	r3, [r3, #8]
 8001922:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001926:	429a      	cmp	r2, r3
 8001928:	d390      	bcc.n	800184c <CO_HBconsumer_process+0x2c>
 800192a:	e028      	b.n	800197e <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <CO_HBconsumer_process+0x11a>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d021      	beq.n	800197e <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 800193a:	2300      	movs	r3, #0
 800193c:	77fb      	strb	r3, [r7, #31]
 800193e:	e015      	b.n	800196c <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	7ffb      	ldrb	r3, [r7, #31]
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	22ff      	movs	r2, #255	; 0xff
 8001950:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	789b      	ldrb	r3, [r3, #2]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2201      	movs	r2, #1
 8001964:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	3301      	adds	r3, #1
 800196a:	77fb      	strb	r3, [r7, #31]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	7a1b      	ldrb	r3, [r3, #8]
 8001970:	7ffa      	ldrb	r2, [r7, #31]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3e4      	bcc.n	8001940 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d114      	bne.n	80019b0 <CO_HBconsumer_process+0x190>
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d011      	beq.n	80019b0 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	221b      	movs	r2, #27
 8001998:	2100      	movs	r1, #0
 800199a:	f7ff fca5 	bl	80012e8 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	221c      	movs	r2, #28
 80019aa:	2100      	movs	r1, #0
 80019ac:	f7ff fc9c 	bl	80012e8 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b4:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ba:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	615a      	str	r2, [r3, #20]
}
 80019c2:	bf00      	nop
 80019c4:	3730      	adds	r7, #48	; 0x30
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80019d8:	81fb      	strh	r3, [r7, #14]
 80019da:	89fb      	ldrh	r3, [r7, #14]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <OD_getIndex+0x14>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	e000      	b.n	80019fe <OD_getIndex+0x16>
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <OD_extension_init>:
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <OD_extension_init+0x14>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	e003      	b.n	8001a26 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <OD_get_u16>:
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af02      	add	r7, sp, #8
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001a42:	7af9      	ldrb	r1, [r7, #11]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2302      	movs	r3, #2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fc89 	bl	8002364 <OD_get_value>
 8001a52:	4603      	mov	r3, r0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	08db      	lsrs	r3, r3, #3
 8001a6c:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	2201      	movs	r2, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00a      	beq.n	8001a98 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	2b09      	cmp	r3, #9
 8001a86:	d807      	bhi.n	8001a98 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	5cd2      	ldrb	r2, [r2, r3]
 8001a8e:	7bbb      	ldrb	r3, [r7, #14]
 8001a90:	4013      	ands	r3, r2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <CO_isError+0x40>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <CO_isError+0x42>
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <CO_getErrorRegister+0x1e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <CO_getErrorRegister+0x1e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	e000      	b.n	8001aca <CO_getErrorRegister+0x20>
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 8001ad6:	b480      	push	{r7}
 8001ad8:	b087      	sub	sp, #28
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	791b      	ldrb	r3, [r3, #4]
 8001ae4:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	3305      	adds	r3, #5
 8001aea:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d10a      	bne.n	8001b18 <CO_NMT_receive+0x42>
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <CO_NMT_receive+0x3c>
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	78db      	ldrb	r3, [r3, #3]
 8001b0c:	7bba      	ldrb	r2, [r7, #14]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d102      	bne.n	8001b18 <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00c      	beq.n	8001b52 <OD_write_1017+0x2e>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	7c5b      	ldrb	r3, [r3, #17]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d108      	bne.n	8001b52 <OD_write_1017+0x2e>
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d102      	bne.n	8001b52 <OD_write_1017+0x2e>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8001b52:	2309      	movs	r3, #9
 8001b54:	e017      	b.n	8001b86 <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 8001b5c:	68b8      	ldr	r0, [r7, #8]
 8001b5e:	f7ff ff34 	bl	80019ca <CO_getUint16>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fb03 f202 	mul.w	r2, r3, r2
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fa0a 	bl	8001f98 <OD_writeOriginal>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <CO_NMT_init+0x30>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d008      	beq.n	8001bc0 <CO_NMT_init+0x30>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <CO_NMT_init+0x30>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <CO_NMT_init+0x30>
 8001bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	e098      	b.n	8001cf8 <CO_NMT_init+0x168>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8001bc6:	222c      	movs	r2, #44	; 0x2c
 8001bc8:	2100      	movs	r1, #0
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f009 fd90 	bl	800b6f0 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8c3a      	ldrh	r2, [r7, #32]
 8001be6:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 8001bee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bf4:	fb02 f303 	mul.w	r3, r2, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001bfe:	f107 0214 	add.w	r2, r7, #20
 8001c02:	2301      	movs	r3, #1
 8001c04:	2100      	movs	r1, #0
 8001c06:	68b8      	ldr	r0, [r7, #8]
 8001c08:	f7ff ff13 	bl	8001a32 <OD_get_u16>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001c10:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00c      	beq.n	8001c32 <CO_NMT_init+0xa2>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <CO_NMT_init+0x9c>
 8001c1e:	68b8      	ldr	r0, [r7, #8]
 8001c20:	f7ff fee2 	bl	80019e8 <OD_getIndex>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c2a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001c2c:	f06f 030b 	mvn.w	r3, #11
 8001c30:	e062      	b.n	8001cf8 <CO_NMT_init+0x168>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 8001c32:	8abb      	ldrh	r3, [r7, #20]
 8001c34:	461a      	mov	r2, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fb03 f202 	mul.w	r2, r3, r2
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4a2d      	ldr	r2, [pc, #180]	; (8001d00 <CO_NMT_init+0x170>)
 8001c4c:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4a2c      	ldr	r2, [pc, #176]	; (8001d04 <CO_NMT_init+0x174>)
 8001c52:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3310      	adds	r3, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	68b8      	ldr	r0, [r7, #8]
 8001c5c:	f7ff fed5 	bl	8001a0a <OD_extension_init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001c64:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00c      	beq.n	8001c86 <CO_NMT_init+0xf6>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <CO_NMT_init+0xf0>
 8001c72:	68b8      	ldr	r0, [r7, #8]
 8001c74:	f7ff feb8 	bl	80019e8 <OD_getIndex>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c7e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001c80:	f06f 030b 	mvn.w	r3, #11
 8001c84:	e038      	b.n	8001cf8 <CO_NMT_init+0x168>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d903      	bls.n	8001c9a <CO_NMT_init+0x10a>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 8001c9a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001c9c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <CO_NMT_init+0x178>)
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cb0:	f7fe fd12 	bl	80006d8 <CO_CANrxBufferInit>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8001cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d002      	beq.n	8001cc6 <CO_NMT_init+0x136>
        return ret;
 8001cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001cc4:	e018      	b.n	8001cf8 <CO_NMT_init+0x168>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 8001ccc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001cce:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001cdc:	f7fe fd4e 	bl	800077c <CO_CANtxBufferInit>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <CO_NMT_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	e001      	b.n	8001cf8 <CO_NMT_init+0x168>
    }

    return ret;
 8001cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	08001ee9 	.word	0x08001ee9
 8001d04:	08001b25 	.word	0x08001b25
 8001d08:	08001ad7 	.word	0x08001ad7

08001d0c <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 8001d24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d204      	bcs.n	8001d48 <CO_NMT_process+0x3c>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	e000      	b.n	8001d4a <CO_NMT_process+0x3e>
 8001d48:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10e      	bne.n	8001d72 <CO_NMT_process+0x66>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d029      	beq.n	8001db0 <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d6a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d01e      	beq.n	8001db0 <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	7ffa      	ldrb	r2, [r7, #31]
 8001d78:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f7fe fd2e 	bl	80007e6 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8001d8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	889b      	ldrh	r3, [r3, #4]
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <CO_NMT_process+0x96>
 8001d9e:	2305      	movs	r3, #5
 8001da0:	e000      	b.n	8001da4 <CO_NMT_process+0x98>
 8001da2:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8001da4:	77fb      	strb	r3, [r7, #31]
 8001da6:	e003      	b.n	8001db0 <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	7ffa      	ldrb	r2, [r7, #31]
 8001db4:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	789b      	ldrb	r3, [r3, #2]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d025      	beq.n	8001e0a <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	789b      	ldrb	r3, [r3, #2]
 8001dc2:	2b82      	cmp	r3, #130	; 0x82
 8001dc4:	d01a      	beq.n	8001dfc <CO_NMT_process+0xf0>
 8001dc6:	2b82      	cmp	r3, #130	; 0x82
 8001dc8:	dc1b      	bgt.n	8001e02 <CO_NMT_process+0xf6>
 8001dca:	2b81      	cmp	r3, #129	; 0x81
 8001dcc:	d013      	beq.n	8001df6 <CO_NMT_process+0xea>
 8001dce:	2b81      	cmp	r3, #129	; 0x81
 8001dd0:	dc17      	bgt.n	8001e02 <CO_NMT_process+0xf6>
 8001dd2:	2b80      	cmp	r3, #128	; 0x80
 8001dd4:	d00c      	beq.n	8001df0 <CO_NMT_process+0xe4>
 8001dd6:	2b80      	cmp	r3, #128	; 0x80
 8001dd8:	dc13      	bgt.n	8001e02 <CO_NMT_process+0xf6>
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d002      	beq.n	8001de4 <CO_NMT_process+0xd8>
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d003      	beq.n	8001dea <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 8001de2:	e00e      	b.n	8001e02 <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 8001de4:	2305      	movs	r3, #5
 8001de6:	77fb      	strb	r3, [r7, #31]
                break;
 8001de8:	e00c      	b.n	8001e04 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 8001dea:	2304      	movs	r3, #4
 8001dec:	77fb      	strb	r3, [r7, #31]
                break;
 8001dee:	e009      	b.n	8001e04 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 8001df0:	237f      	movs	r3, #127	; 0x7f
 8001df2:	77fb      	strb	r3, [r7, #31]
                break;
 8001df4:	e006      	b.n	8001e04 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	77bb      	strb	r3, [r7, #30]
                break;
 8001dfa:	e003      	b.n	8001e04 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	77bb      	strb	r3, [r7, #30]
                break;
 8001e00:	e000      	b.n	8001e04 <CO_NMT_process+0xf8>
                break;
 8001e02:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	889b      	ldrh	r3, [r3, #4]
 8001e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01c      	beq.n	8001e50 <CO_NMT_process+0x144>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	2112      	movs	r1, #18
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fe1d 	bl	8001a5c <CO_isError>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d111      	bne.n	8001e4c <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	211b      	movs	r1, #27
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fe14 	bl	8001a5c <CO_isError>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d108      	bne.n	8001e4c <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	211c      	movs	r1, #28
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fe0b 	bl	8001a5c <CO_isError>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <CO_NMT_process+0x146>
 8001e50:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001e52:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	889b      	ldrh	r3, [r3, #4]
 8001e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00d      	beq.n	8001e7c <CO_NMT_process+0x170>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fe20 	bl	8001aaa <CO_getErrorRegister>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	889b      	ldrh	r3, [r3, #4]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <CO_NMT_process+0x170>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <CO_NMT_process+0x172>
 8001e7c:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001e7e:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 8001e80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d110      	bne.n	8001eaa <CO_NMT_process+0x19e>
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <CO_NMT_process+0x188>
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	889b      	ldrh	r3, [r3, #4]
 8001e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <CO_NMT_process+0x198>
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	e000      	b.n	8001ea6 <CO_NMT_process+0x19a>
 8001ea4:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8001ea6:	77fb      	strb	r3, [r7, #31]
 8001ea8:	e010      	b.n	8001ecc <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	889b      	ldrh	r3, [r3, #4]
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da0b      	bge.n	8001ecc <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 8001eb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eba:	d107      	bne.n	8001ecc <CO_NMT_process+0x1c0>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d104      	bne.n	8001ecc <CO_NMT_process+0x1c0>
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 8001ec8:	2305      	movs	r3, #5
 8001eca:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	7ffa      	ldrb	r2, [r7, #31]
 8001ed0:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <CO_NMT_process+0x1d2>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	7ffa      	ldrb	r2, [r7, #31]
 8001edc:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 8001ede:	7fbb      	ldrb	r3, [r7, #30]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <OD_readOriginal+0x20>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <OD_readOriginal+0x20>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001f08:	2309      	movs	r3, #9
 8001f0a:	e041      	b.n	8001f90 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001f1e:	230e      	movs	r3, #14
 8001f20:	e036      	b.n	8001f90 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d103      	bne.n	8001f36 <OD_readOriginal+0x4e>
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d922      	bls.n	8001f7c <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d801      	bhi.n	8001f44 <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001f40:	2309      	movs	r3, #9
 8001f42:	e025      	b.n	8001f90 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4413      	add	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d90a      	bls.n	8001f76 <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	441a      	add	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001f70:	23ff      	movs	r3, #255	; 0xff
 8001f72:	75fb      	strb	r3, [r7, #23]
 8001f74:	e002      	b.n	8001f7c <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	68b8      	ldr	r0, [r7, #8]
 8001f82:	f009 fb8d 	bl	800b6a0 <memcpy>

    *countRead = dataLenToCopy;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	601a      	str	r2, [r3, #0]
    return returnCode;
 8001f8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <OD_writeOriginal+0x20>
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <OD_writeOriginal+0x20>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001fb8:	2309      	movs	r3, #9
 8001fba:	e047      	b.n	800204c <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001fce:	230e      	movs	r3, #14
 8001fd0:	e03c      	b.n	800204c <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d103      	bne.n	8001fe6 <OD_writeOriginal+0x4e>
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d922      	bls.n	800202c <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d801      	bhi.n	8001ff4 <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001ff0:	2309      	movs	r3, #9
 8001ff2:	e02b      	b.n	800204c <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	69fa      	ldr	r2, [r7, #28]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4413      	add	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d90a      	bls.n	8002026 <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	441a      	add	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8002020:	23ff      	movs	r3, #255	; 0xff
 8002022:	75fb      	strb	r3, [r7, #23]
 8002024:	e002      	b.n	800202c <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d201      	bcs.n	8002038 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8002034:	230c      	movs	r3, #12
 8002036:	e009      	b.n	800204c <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	69b8      	ldr	r0, [r7, #24]
 800203e:	f009 fb2f 	bl	800b6a0 <memcpy>

    *countWritten = dataLenToCopy;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	601a      	str	r2, [r3, #0]
    return returnCode;
 8002048:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 8002062:	2302      	movs	r3, #2
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 800207e:	2302      	movs	r3, #2
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <OD_find+0x1a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <OD_find+0x1e>
        return NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	e046      	b.n	8002138 <OD_find+0xac>
    }

    uint16_t min = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 80020b6:	e026      	b.n	8002106 <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 80020b8:	8afa      	ldrh	r2, [r7, #22]
 80020ba:	8abb      	ldrh	r3, [r7, #20]
 80020bc:	4413      	add	r3, r2
 80020be:	105b      	asrs	r3, r3, #1
 80020c0:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	89fa      	ldrh	r2, [r7, #14]
 80020c8:	4613      	mov	r3, r2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	887a      	ldrh	r2, [r7, #2]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d101      	bne.n	80020e2 <OD_find+0x56>
            return entry;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	e02a      	b.n	8002138 <OD_find+0xac>
        }

        if (index < entry->index) {
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d209      	bcs.n	8002100 <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 80020ec:	89fb      	ldrh	r3, [r7, #14]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <OD_find+0x6e>
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	e000      	b.n	80020fc <OD_find+0x70>
 80020fa:	89fb      	ldrh	r3, [r7, #14]
 80020fc:	82bb      	strh	r3, [r7, #20]
 80020fe:	e002      	b.n	8002106 <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8002100:	89fb      	ldrh	r3, [r7, #14]
 8002102:	3301      	adds	r3, #1
 8002104:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 8002106:	8afa      	ldrh	r2, [r7, #22]
 8002108:	8abb      	ldrh	r3, [r7, #20]
 800210a:	429a      	cmp	r2, r3
 800210c:	d3d4      	bcc.n	80020b8 <OD_find+0x2c>
        }
    }

    if (min == max) {
 800210e:	8afa      	ldrh	r2, [r7, #22]
 8002110:	8abb      	ldrh	r3, [r7, #20]
 8002112:	429a      	cmp	r2, r3
 8002114:	d10f      	bne.n	8002136 <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	8afa      	ldrh	r2, [r7, #22]
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	887a      	ldrh	r2, [r7, #2]
 800212e:	429a      	cmp	r2, r3
 8002130:	d101      	bne.n	8002136 <OD_find+0xaa>
            return entry;
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	e000      	b.n	8002138 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 8002144:	b480      	push	{r7}
 8002146:	b08d      	sub	sp, #52	; 0x34
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	460b      	mov	r3, r1
 8002152:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <OD_getSub+0x1e>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <OD_getSub+0x22>
 8002162:	2305      	movs	r3, #5
 8002164:	e0d2      	b.n	800230c <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <OD_getSub+0x2c>
 800216c:	2309      	movs	r3, #9
 800216e:	e0cd      	b.n	800230c <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	78db      	ldrb	r3, [r3, #3]
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	2b03      	cmp	r3, #3
 800217e:	d050      	beq.n	8002222 <OD_getSub+0xde>
 8002180:	2b03      	cmp	r3, #3
 8002182:	f300 808c 	bgt.w	800229e <OD_getSub+0x15a>
 8002186:	2b01      	cmp	r3, #1
 8002188:	d002      	beq.n	8002190 <OD_getSub+0x4c>
 800218a:	2b02      	cmp	r3, #2
 800218c:	d015      	beq.n	80021ba <OD_getSub+0x76>
 800218e:	e086      	b.n	800229e <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <OD_getSub+0x56>
 8002196:	230e      	movs	r3, #14
 8002198:	e0b8      	b.n	800230c <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	791a      	ldrb	r2, [r3, #4]
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	609a      	str	r2, [r3, #8]
        break;
 80021b8:	e073      	b.n	80022a2 <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	789b      	ldrb	r3, [r3, #2]
 80021be:	7afa      	ldrb	r2, [r7, #11]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d301      	bcc.n	80021c8 <OD_getSub+0x84>
 80021c4:	230e      	movs	r3, #14
 80021c6:	e0a1      	b.n	800230c <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	7a1a      	ldrb	r2, [r3, #8]
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	2201      	movs	r2, #1
 80021e8:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 80021ea:	e05a      	b.n	80022a2 <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	7a5a      	ldrb	r2, [r3, #9]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	7afa      	ldrb	r2, [r7, #11]
 8002206:	3a01      	subs	r2, #1
 8002208:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4413      	add	r3, r2
 8002210:	e000      	b.n	8002214 <OD_getSub+0xd0>
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002216:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	609a      	str	r2, [r3, #8]
        break;
 8002220:	e03f      	b.n	80022a2 <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 800222c:	2300      	movs	r3, #0
 800222e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002232:	e01c      	b.n	800226e <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8002234:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	4413      	add	r3, r2
 8002246:	791b      	ldrb	r3, [r3, #4]
 8002248:	7afa      	ldrb	r2, [r7, #11]
 800224a:	429a      	cmp	r2, r3
 800224c:	d10a      	bne.n	8002264 <OD_getSub+0x120>
                odo = &odoArr[i];
 800224e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	461a      	mov	r2, r3
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	4413      	add	r3, r2
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8002262:	e00a      	b.n	800227a <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8002264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002268:	3301      	adds	r3, #1
 800226a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	789b      	ldrb	r3, [r3, #2]
 8002272:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002276:	429a      	cmp	r2, r3
 8002278:	d3dc      	bcc.n	8002234 <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <OD_getSub+0x140>
 8002280:	230e      	movs	r3, #14
 8002282:	e043      	b.n	800230c <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	795a      	ldrb	r2, [r3, #5]
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	609a      	str	r2, [r3, #8]
        break;
 800229c:	e001      	b.n	80022a2 <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 800229e:	2309      	movs	r3, #9
 80022a0:	e034      	b.n	800230c <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <OD_getSub+0x16c>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <OD_getSub+0x180>
        io->read = OD_readOriginal;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a19      	ldr	r2, [pc, #100]	; (8002318 <OD_getSub+0x1d4>)
 80022b4:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a18      	ldr	r2, [pc, #96]	; (800231c <OD_getSub+0x1d8>)
 80022ba:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	2200      	movs	r2, #0
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	e01c      	b.n	80022fe <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <OD_getSub+0x192>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	e000      	b.n	80022d8 <OD_getSub+0x194>
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <OD_getSub+0x1aa>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	e000      	b.n	80022f0 <OD_getSub+0x1ac>
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	7afa      	ldrb	r2, [r7, #11]
 8002308:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3734      	adds	r7, #52	; 0x34
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	08001ee9 	.word	0x08001ee9
 800231c:	08001f99 	.word	0x08001f99
 8002320:	08002055 	.word	0x08002055
 8002324:	08002071 	.word	0x08002071

08002328 <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	db03      	blt.n	8002342 <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b19      	cmp	r3, #25
 8002340:	dd02      	ble.n	8002348 <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <OD_getSDOabCode+0x38>)
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	e004      	b.n	8002352 <OD_getSDOabCode+0x2a>
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	4a04      	ldr	r2, [pc, #16]	; (8002360 <OD_getSDOabCode+0x38>)
 800234e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	0800d0f4 	.word	0x0800d0f4

08002364 <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b08f      	sub	sp, #60	; 0x3c
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	460b      	mov	r3, r1
 8002372:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <OD_get_value+0x1a>
 800237a:	2309      	movs	r3, #9
 800237c:	e024      	b.n	80023c8 <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8002388:	f107 0214 	add.w	r2, r7, #20
 800238c:	7af9      	ldrb	r1, [r7, #11]
 800238e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff fed7 	bl	8002144 <OD_getSub>
 8002396:	4603      	mov	r3, r0
 8002398:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 800239c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <OD_get_value+0x46>
 80023a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023a8:	e00e      	b.n	80023c8 <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 80023aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <OD_get_value+0x54>
 80023b4:	230b      	movs	r3, #11
 80023b6:	e007      	b.n	80023c8 <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 80023b8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80023ba:	f107 0310 	add.w	r3, r7, #16
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80023c4:	47a0      	blx	r4
 80023c6:	4603      	mov	r3, r0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	373c      	adds	r7, #60	; 0x3c
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd90      	pop	{r4, r7, pc}

080023d0 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b08f      	sub	sp, #60	; 0x3c
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	607a      	str	r2, [r7, #4]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	460b      	mov	r3, r1
 80023de:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 80023ea:	f107 0214 	add.w	r2, r7, #20
 80023ee:	7af9      	ldrb	r1, [r7, #11]
 80023f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f7ff fea6 	bl	8002144 <OD_getSub>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 80023fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <OD_set_value+0x3c>
 8002406:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800240a:	e00e      	b.n	800242a <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 800240c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <OD_set_value+0x4a>
 8002416:	230b      	movs	r3, #11
 8002418:	e007      	b.n	800242a <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 800241a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002426:	47a0      	blx	r4
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	373c      	adds	r7, #60	; 0x3c
 800242e:	46bd      	mov	sp, r7
 8002430:	bd90      	pop	{r4, r7, pc}

08002432 <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b08e      	sub	sp, #56	; 0x38
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	460b      	mov	r3, r1
 8002440:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8002448:	f107 0214 	add.w	r2, r7, #20
 800244c:	7af9      	ldrb	r1, [r7, #11]
 800244e:	2301      	movs	r3, #1
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff fe77 	bl	8002144 <OD_getSub>
 8002456:	4603      	mov	r3, r0
 8002458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 800245c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002460:	2b00      	cmp	r3, #0
 8002462:	d116      	bne.n	8002492 <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <OD_getPtr+0x42>
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8002474:	2309      	movs	r3, #9
 8002476:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800247a:	e00a      	b.n	8002492 <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <OD_getPtr+0x60>
 8002482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	d002      	beq.n	8002492 <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 800248c:	230b      	movs	r3, #11
 800248e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <OD_getPtr+0x6e>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800249e:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 80024a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <OD_getPtr+0x7c>
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	e000      	b.n	80024b0 <OD_getPtr+0x7e>
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3738      	adds	r7, #56	; 0x38
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80024e2:	81fb      	strh	r3, [r7, #14]
 80024e4:	89fb      	ldrh	r3, [r7, #14]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
 8002518:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	2304      	movs	r3, #4
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <OD_getIndex+0x14>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	e000      	b.n	8002542 <OD_getIndex+0x16>
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <OD_extension_init>:
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <OD_extension_init+0x14>
 800255e:	2305      	movs	r3, #5
 8002560:	e003      	b.n	800256a <OD_extension_init+0x1c>
    entry->extension = extension;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <OD_get_u8>:
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af02      	add	r7, sp, #8
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
 8002582:	460b      	mov	r3, r1
 8002584:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002586:	7af9      	ldrb	r1, [r7, #11]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2301      	movs	r3, #1
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff fee7 	bl	8002364 <OD_get_value>
 8002596:	4603      	mov	r3, r0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <OD_get_u16>:
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	460b      	mov	r3, r1
 80025ae:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80025b0:	7af9      	ldrb	r1, [r7, #11]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2302      	movs	r3, #2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f7ff fed2 	bl	8002364 <OD_get_value>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <OD_get_u32>:
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af02      	add	r7, sp, #8
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	460b      	mov	r3, r1
 80025d8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80025da:	7af9      	ldrb	r1, [r7, #11]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2304      	movs	r3, #4
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f7ff febd 	bl	8002364 <OD_get_value>
 80025ea:	4603      	mov	r3, r0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <OD_write_dummy+0x1a>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <OD_read_dummy+0x20>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <OD_read_dummy+0x20>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 800263c:	2309      	movs	r3, #9
 800263e:	e010      	b.n	8002662 <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d902      	bls.n	8002650 <OD_read_dummy+0x34>
        count = stream->dataLength;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	2100      	movs	r1, #0
 8002654:	68b8      	ldr	r0, [r7, #8]
 8002656:	f009 f84b 	bl	800b6f0 <memset>

    *countRead = count;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b092      	sub	sp, #72	; 0x48
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	4613      	mov	r3, r2
 800267a:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	0c1b      	lsrs	r3, r3, #16
 8002680:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8002692:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002696:	08db      	lsrs	r3, r3, #3
 8002698:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 800269c:	79fa      	ldrb	r2, [r7, #7]
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	3310      	adds	r3, #16
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 80026ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d901      	bls.n	80026ba <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 80026b6:	2307      	movs	r3, #7
 80026b8:	e090      	b.n	80027dc <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 80026ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026be:	2b1f      	cmp	r3, #31
 80026c0:	d81a      	bhi.n	80026f8 <PDOconfigMap+0x8c>
 80026c2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 80026ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 80026ce:	2214      	movs	r2, #20
 80026d0:	2100      	movs	r1, #0
 80026d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026d4:	f009 f80c 	bl	800b6f0 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 80026d8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	60da      	str	r2, [r3, #12]
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 80026e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ea:	4a3e      	ldr	r2, [pc, #248]	; (80027e4 <PDOconfigMap+0x178>)
 80026ec:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 80026ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f0:	4a3d      	ldr	r2, [pc, #244]	; (80027e8 <PDOconfigMap+0x17c>)
 80026f2:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e071      	b.n	80027dc <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 80026f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026fc:	4619      	mov	r1, r3
 80026fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002700:	f7ff fcc4 	bl	800208c <OD_find>
 8002704:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8002706:	f107 0214 	add.w	r2, r7, #20
 800270a:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 800270e:	2300      	movs	r3, #0
 8002710:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002712:	f7ff fd17 	bl	8002144 <OD_getSub>
 8002716:	4603      	mov	r3, r0
 8002718:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 800271c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <PDOconfigMap+0xbe>
        return odRet;
 8002724:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002728:	e058      	b.n	80027dc <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <PDOconfigMap+0xc8>
 8002730:	2308      	movs	r3, #8
 8002732:	e000      	b.n	8002736 <PDOconfigMap+0xca>
 8002734:	2304      	movs	r3, #4
 8002736:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 800273a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800273e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002742:	4013      	ands	r3, r2
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 800274a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800275c:	429a      	cmp	r2, r3
 800275e:	d201      	bcs.n	8002764 <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8002760:	2306      	movs	r3, #6
 8002762:	e03b      	b.n	80027dc <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8002764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002766:	461d      	mov	r5, r3
 8002768:	f107 0414 	add.w	r4, r7, #20
 800276c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002770:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002774:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8002778:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800277c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277e:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d129      	bne.n	80027da <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 8002786:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800278a:	2b1f      	cmp	r3, #31
 800278c:	d81f      	bhi.n	80027ce <PDOconfigMap+0x162>
 800278e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01b      	beq.n	80027ce <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002798:	6899      	ldr	r1, [r3, #8]
 800279a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800279e:	08db      	lsrs	r3, r3, #3
 80027a0:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 80027a2:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 80027a4:	3308      	adds	r3, #8
 80027a6:	440b      	add	r3, r1
 80027a8:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	323c      	adds	r2, #60	; 0x3c
 80027ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 80027b2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	2201      	movs	r2, #1
 80027bc:	409a      	lsls	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	b2d1      	uxtb	r1, r2
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	460a      	mov	r2, r1
 80027c8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80027cc:	e005      	b.n	80027da <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 80027ce:	79fa      	ldrb	r2, [r7, #7]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	323c      	adds	r2, #60	; 0x3c
 80027d4:	2100      	movs	r1, #0
 80027d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3748      	adds	r7, #72	; 0x48
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bdb0      	pop	{r4, r5, r7, pc}
 80027e4:	0800261d 	.word	0x0800261d
 80027e8:	080025f5 	.word	0x080025f5

080027ec <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	; 0x30
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8002802:	f107 021b 	add.w	r2, r7, #27
 8002806:	2301      	movs	r3, #1
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff feb3 	bl	8002576 <OD_get_u8>
 8002810:	4603      	mov	r3, r0
 8002812:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002816:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00c      	beq.n	8002838 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff fe81 	bl	800252c <OD_getIndex>
 800282a:	4603      	mov	r3, r0
 800282c:	021a      	lsls	r2, r3, #8
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002832:	f06f 030b 	mvn.w	r3, #11
 8002836:	e082      	b.n	800293e <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800283e:	e05e      	b.n	80028fe <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002840:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	3310      	adds	r3, #16
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4413      	add	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 8002858:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800285c:	3301      	adds	r3, #1
 800285e:	b2d9      	uxtb	r1, r3
 8002860:	f107 0214 	add.w	r2, r7, #20
 8002864:	2301      	movs	r3, #1
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff feaf 	bl	80025ca <OD_get_u32>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8002872:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002876:	2b0e      	cmp	r3, #14
 8002878:	d03b      	beq.n	80028f2 <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 800287a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00f      	beq.n	80028a2 <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff fe4f 	bl	800252c <OD_getIndex>
 800288e:	4603      	mov	r3, r0
 8002890:	021a      	lsls	r2, r3, #8
 8002892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002896:	431a      	orrs	r2, r3
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 800289c:	f06f 030b 	mvn.w	r3, #11
 80028a0:	e04d      	b.n	800293e <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 80028a2:	6979      	ldr	r1, [r7, #20]
 80028a4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f7ff fedc 	bl	800266c <PDOconfigMap>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 80028ba:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	22ff      	movs	r2, #255	; 0xff
 80028cc:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 80028ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <PDO_initMapping+0xf0>
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028da:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 80028dc:	7efb      	ldrb	r3, [r7, #27]
 80028de:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d206      	bcs.n	80028f4 <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	4413      	add	r3, r2
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
 80028f0:	e000      	b.n	80028f4 <PDO_initMapping+0x108>
            continue;
 80028f2:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 80028f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028f8:	3301      	adds	r3, #1
 80028fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002902:	2b07      	cmp	r3, #7
 8002904:	d99c      	bls.n	8002840 <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	2b08      	cmp	r3, #8
 800290a:	d805      	bhi.n	8002918 <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <PDO_initMapping+0x13a>
 8002912:	7efb      	ldrb	r3, [r7, #27]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 8002918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <PDO_initMapping+0x13a>
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 8002926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	b2da      	uxtb	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002936:	7efa      	ldrb	r2, [r7, #27]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3728      	adds	r7, #40	; 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b08e      	sub	sp, #56	; 0x38
 800294a:	af02      	add	r7, sp, #8
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <OD_write_PDO_mapping+0x28>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <OD_write_PDO_mapping+0x28>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	7c5b      	ldrb	r3, [r3, #17]
 800296a:	2b08      	cmp	r3, #8
 800296c:	d901      	bls.n	8002972 <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 800296e:	2309      	movs	r3, #9
 8002970:	e086      	b.n	8002a80 <OD_write_PDO_mapping+0x13a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <OD_write_PDO_mapping+0x4a>
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	7b5b      	ldrb	r3, [r3, #13]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <OD_write_PDO_mapping+0x4e>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	7c5b      	ldrb	r3, [r3, #17]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002990:	2302      	movs	r3, #2
 8002992:	e075      	b.n	8002a80 <OD_write_PDO_mapping+0x13a>
    }

    if (stream->subIndex == 0) {
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	7c5b      	ldrb	r3, [r3, #17]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d14d      	bne.n	8002a38 <OD_write_PDO_mapping+0xf2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 800299c:	68b8      	ldr	r0, [r7, #8]
 800299e:	f7ff fd8b 	bl	80024b8 <CO_getUint8>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        size_t pdoDataLength = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 80029ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d901      	bls.n	80029b8 <OD_write_PDO_mapping+0x72>
            return ODR_MAP_LEN;
 80029b4:	2307      	movs	r3, #7
 80029b6:	e063      	b.n	8002a80 <OD_write_PDO_mapping+0x13a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80029b8:	2300      	movs	r3, #0
 80029ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029be:	e01e      	b.n	80029fe <OD_write_PDO_mapping+0xb8>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80029c0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	3310      	adds	r3, #16
 80029ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d0:	4413      	add	r3, r2
 80029d2:	61fb      	str	r3, [r7, #28]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	61bb      	str	r3, [r7, #24]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	617b      	str	r3, [r7, #20]

            if (mappedLength > dataLength) {
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d901      	bls.n	80029ec <OD_write_PDO_mapping+0xa6>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 80029e8:	2306      	movs	r3, #6
 80029ea:	e049      	b.n	8002a80 <OD_write_PDO_mapping+0x13a>
            }
            pdoDataLength += mappedLength;
 80029ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	4413      	add	r3, r2
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 80029f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029f8:	3301      	adds	r3, #1
 80029fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029fe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002a02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d3da      	bcc.n	80029c0 <OD_write_PDO_mapping+0x7a>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d901      	bls.n	8002a14 <OD_write_PDO_mapping+0xce>
            return ODR_MAP_LEN;
 8002a10:	2307      	movs	r3, #7
 8002a12:	e035      	b.n	8002a80 <OD_write_PDO_mapping+0x13a>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <OD_write_PDO_mapping+0xe0>
 8002a1a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <OD_write_PDO_mapping+0xe0>
            return ODR_INVALID_VALUE;
 8002a22:	230f      	movs	r3, #15
 8002a24:	e02c      	b.n	8002a80 <OD_write_PDO_mapping+0x13a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002a34:	735a      	strb	r2, [r3, #13]
 8002a36:	e01c      	b.n	8002a72 <OD_write_PDO_mapping+0x12c>
    }
    else {
        ODR_t odRet = PDOconfigMap(PDO, CO_getUint32(buf), stream->subIndex-1,
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f7ff fd5a 	bl	80024f2 <CO_getUint32>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	7c5b      	ldrb	r3, [r3, #17]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	460b      	mov	r3, r1
 8002a56:	4601      	mov	r1, r0
 8002a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a5a:	f7ff fe07 	bl	800266c <PDOconfigMap>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 8002a64:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <OD_write_PDO_mapping+0x12c>
            return odRet;
 8002a6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002a70:	e006      	b.n	8002a80 <OD_write_PDO_mapping+0x13a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff fa8d 	bl	8001f98 <OD_writeOriginal>
 8002a7e:	4603      	mov	r3, r0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3730      	adds	r7, #48	; 0x30
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff fa23 	bl	8001ee8 <OD_readOriginal>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 8002aa6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d134      	bne.n	8002b18 <OD_read_PDO_commParam+0x90>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	7c5b      	ldrb	r3, [r3, #17]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d130      	bne.n	8002b18 <OD_read_PDO_commParam+0x90>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d12c      	bne.n	8002b18 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002ac4:	68b8      	ldr	r0, [r7, #8]
 8002ac6:	f7ff fd14 	bl	80024f2 <CO_getUint32>
 8002aca:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad4:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 8002ad6:	8a7b      	ldrh	r3, [r7, #18]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d011      	beq.n	8002b00 <OD_read_PDO_commParam+0x78>
 8002adc:	8a7a      	ldrh	r2, [r7, #18]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002aea:	400b      	ands	r3, r1
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d107      	bne.n	8002b00 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	0c1b      	lsrs	r3, r3, #16
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	f8b2 2122 	ldrh.w	r2, [r2, #290]	; 0x122
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d103      	bne.n	8002b10 <OD_read_PDO_commParam+0x88>
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b0e:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 8002b10:	69f9      	ldr	r1, [r7, #28]
 8002b12:	68b8      	ldr	r0, [r7, #8]
 8002b14:	f7ff fcfb 	bl	800250e <CO_setUint32>
    }

    return returnCode;
 8002b18:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	791b      	ldrb	r3, [r3, #4]
 8002b3a:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	3305      	adds	r3, #5
 8002b40:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002b48:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d03e      	beq.n	8002bd0 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	7b1b      	ldrb	r3, [r3, #12]
 8002b56:	7cfa      	ldrb	r2, [r7, #19]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d334      	bcc.n	8002bc6 <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	7b1b      	ldrb	r3, [r3, #12]
 8002b60:	7cfa      	ldrb	r2, [r7, #19]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d105      	bne.n	8002b72 <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 8002b66:	7ffb      	ldrb	r3, [r7, #31]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d107      	bne.n	8002b7c <CO_PDO_receive+0x58>
 8002b6c:	230b      	movs	r3, #11
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e004      	b.n	8002b7c <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 8002b72:	7ffb      	ldrb	r3, [r7, #31]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <CO_PDO_receive+0x58>
 8002b78:	230d      	movs	r3, #13
 8002b7a:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00c      	beq.n	8002ba4 <CO_PDO_receive+0x80>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d007      	beq.n	8002ba4 <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 8002ba4:	7fbb      	ldrb	r3, [r7, #30]
 8002ba6:	332a      	adds	r3, #42	; 0x2a
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4413      	add	r3, r2
 8002bae:	2208      	movs	r2, #8
 8002bb0:	68f9      	ldr	r1, [r7, #12]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f008 fd74 	bl	800b6a0 <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 8002bb8:	7fba      	ldrb	r2, [r7, #30]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	3252      	adds	r2, #82	; 0x52
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002bc4:	e004      	b.n	8002bd0 <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 8002bc6:	7ffb      	ldrb	r3, [r7, #31]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002bcc:	230c      	movs	r3, #12
 8002bce:	77fb      	strb	r3, [r7, #31]
        }
    }

    RPDO->receiveError = err;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	7ffa      	ldrb	r2, [r7, #31]
 8002bd4:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
}
 8002bd8:	bf00      	nop
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b092      	sub	sp, #72	; 0x48
 8002be4:	af04      	add	r7, sp, #16
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <OD_write_14xx+0x26>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <OD_write_14xx+0x26>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <OD_write_14xx+0x26>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d901      	bls.n	8002c0a <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002c06:	2309      	movs	r3, #9
 8002c08:	e0ff      	b.n	8002e0a <OD_write_14xx+0x22a>
    }

    CO_RPDO_t *RPDO = stream->object;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f008 fd3f 	bl	800b6a0 <memcpy>

    switch (stream->subIndex) {
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	7c5b      	ldrb	r3, [r3, #17]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	f000 80d4 	beq.w	8002dd4 <OD_write_14xx+0x1f4>
 8002c2c:	2b05      	cmp	r3, #5
 8002c2e:	f300 80e4 	bgt.w	8002dfa <OD_write_14xx+0x21a>
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d003      	beq.n	8002c3e <OD_write_14xx+0x5e>
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	f000 80a5 	beq.w	8002d86 <OD_write_14xx+0x1a6>
 8002c3c:	e0dd      	b.n	8002dfa <OD_write_14xx+0x21a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	f7ff fc57 	bl	80024f2 <CO_getUint32>
 8002c44:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	0fdb      	lsrs	r3, r3, #31
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	4b6d      	ldr	r3, [pc, #436]	; (8002e14 <OD_write_14xx+0x234>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d13d      	bne.n	8002ce0 <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <OD_write_14xx+0x9e>
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <OD_write_14xx+0x9e>
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002c78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d130      	bne.n	8002ce0 <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d026      	beq.n	8002cd2 <OD_write_14xx+0xf2>
 8002c84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c86:	2b7f      	cmp	r3, #127	; 0x7f
 8002c88:	d92a      	bls.n	8002ce0 <OD_write_14xx+0x100>
 8002c8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c90:	d903      	bls.n	8002c9a <OD_write_14xx+0xba>
 8002c92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c94:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002c98:	d922      	bls.n	8002ce0 <OD_write_14xx+0x100>
 8002c9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c9c:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002ca0:	d903      	bls.n	8002caa <OD_write_14xx+0xca>
 8002ca2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ca4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ca8:	d31a      	bcc.n	8002ce0 <OD_write_14xx+0x100>
 8002caa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002cb0:	d903      	bls.n	8002cba <OD_write_14xx+0xda>
 8002cb2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cb4:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002cb8:	d312      	bcc.n	8002ce0 <OD_write_14xx+0x100>
 8002cba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cbc:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002cc0:	d303      	bcc.n	8002cca <OD_write_14xx+0xea>
 8002cc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002cc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cc8:	d30a      	bcc.n	8002ce0 <OD_write_14xx+0x100>
 8002cca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cd0:	d806      	bhi.n	8002ce0 <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <OD_write_14xx+0x104>
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	7b5b      	ldrb	r3, [r3, #13]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <OD_write_14xx+0x104>
        ) {
            return ODR_INVALID_VALUE;
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	e092      	b.n	8002e0a <OD_write_14xx+0x22a>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d105      	bne.n	8002cfa <OD_write_14xx+0x11a>
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002cf4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d07e      	beq.n	8002df8 <OD_write_14xx+0x218>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002d00:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d108      	bne.n	8002d18 <OD_write_14xx+0x138>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002d0c:	f107 0310 	add.w	r3, r7, #16
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fbfb 	bl	800250e <CO_setUint32>
            }
            if (!valid) {
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <OD_write_14xx+0x142>
                CAN_ID = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	86fb      	strh	r3, [r7, #54]	; 0x36
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	6858      	ldr	r0, [r3, #4]
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8002d2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002d2e:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <OD_write_14xx+0x238>)
 8002d30:	9302      	str	r3, [sp, #8]
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002d3e:	f7fd fccb 	bl	80006d8 <CO_CANrxBufferInit>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <OD_write_14xx+0x184>
 8002d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d107      	bne.n	8002d64 <OD_write_14xx+0x184>
                PDO->valid = true;
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	2201      	movs	r2, #1
 8002d58:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002d5e:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 8002d62:	e049      	b.n	8002df8 <OD_write_14xx+0x218>
                PDO->valid = false;
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2200      	movs	r2, #0
 8002d76:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
                if (ret != CO_ERROR_NO) {
 8002d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03a      	beq.n	8002df8 <OD_write_14xx+0x218>
                    return ODR_DEV_INCOMPAT;
 8002d82:	2309      	movs	r3, #9
 8002d84:	e041      	b.n	8002e0a <OD_write_14xx+0x22a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002d86:	68b8      	ldr	r0, [r7, #8]
 8002d88:	f7ff fb96 	bl	80024b8 <CO_getUint8>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d96:	2bf0      	cmp	r3, #240	; 0xf0
 8002d98:	d905      	bls.n	8002da6 <OD_write_14xx+0x1c6>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d9e:	2bfd      	cmp	r3, #253	; 0xfd
 8002da0:	d801      	bhi.n	8002da6 <OD_write_14xx+0x1c6>
        ) {
            return ODR_INVALID_VALUE;
 8002da2:	230f      	movs	r3, #15
 8002da4:	e031      	b.n	8002e0a <OD_write_14xx+0x22a>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002daa:	2bf0      	cmp	r3, #240	; 0xf0
 8002dac:	bf94      	ite	ls
 8002dae:	2301      	movls	r3, #1
 8002db0:	2300      	movhi	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002dbc:	6a3a      	ldr	r2, [r7, #32]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d003      	beq.n	8002dca <OD_write_14xx+0x1ea>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        }

        RPDO->synchronous = synchronous;
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	6a3a      	ldr	r2, [r7, #32]
 8002dce:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 8002dd2:	e012      	b.n	8002dfa <OD_write_14xx+0x21a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002dd4:	68b8      	ldr	r0, [r7, #8]
 8002dd6:	f7ff fb7d 	bl	80024d4 <CO_getUint16>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002de4:	fb03 f202 	mul.w	r2, r3, r2
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        RPDO->timeoutTimer = 0;
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        break;
 8002df6:	e000      	b.n	8002dfa <OD_write_14xx+0x21a>
        break;
 8002df8:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002dfa:	f107 0110 	add.w	r1, r7, #16
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7ff f8c8 	bl	8001f98 <OD_writeOriginal>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3738      	adds	r7, #56	; 0x38
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	3ffff800 	.word	0x3ffff800
 8002e18:	08002b25 	.word	0x08002b25

08002e1c <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b090      	sub	sp, #64	; 0x40
 8002e20:	af04      	add	r7, sp, #16
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <CO_RPDO_init+0x36>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00b      	beq.n	8002e52 <CO_RPDO_init+0x36>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <CO_RPDO_init+0x36>
 8002e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 8002e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <CO_RPDO_init+0x36>
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e118      	b.n	800308a <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 8002e58:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f008 fc46 	bl	800b6f0 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e6e:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 8002e74:	f107 031c 	add.w	r3, r7, #28
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2301      	movs	r3, #1
 8002e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e86:	f7ff fcb1 	bl	80027ec <PDO_initMapping>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002e90:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <CO_RPDO_init+0x82>
        return ret;
 8002e98:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002e9c:	e0f5      	b.n	800308a <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 8002ea2:	f107 0218 	add.w	r2, r7, #24
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002eac:	f7ff fb8d 	bl	80025ca <OD_get_u32>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002eb6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00e      	beq.n	8002edc <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 8002ec4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ec6:	f7ff fb31 	bl	800252c <OD_getIndex>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002ed6:	f06f 030b 	mvn.w	r3, #11
 8002eda:	e0d6      	b.n	800308a <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	0fdb      	lsrs	r3, r3, #31
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eee:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <CO_RPDO_init+0xf6>
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	7b5b      	ldrb	r3, [r3, #13]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <CO_RPDO_init+0xe8>
 8002efe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d106      	bne.n	8002f12 <CO_RPDO_init+0xf6>
        valid = false;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <CO_RPDO_init+0xf6>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00e      	beq.n	8002f36 <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	6818      	ldr	r0, [r3, #0]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d001      	beq.n	8002f26 <CO_RPDO_init+0x10a>
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	e000      	b.n	8002f28 <CO_RPDO_init+0x10c>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8002f2e:	221a      	movs	r2, #26
 8002f30:	2101      	movs	r1, #1
 8002f32:	f7fe f9d9 	bl	80012e8 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8002f40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <CO_RPDO_init+0x13c>
 8002f46:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002f48:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002f4a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002f4e:	400b      	ands	r3, r1
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d101      	bne.n	8002f58 <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 8002f54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f56:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    ret = CO_CANrxBufferInit(
 8002f58:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002f5a:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8002f5e:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <CO_RPDO_init+0x278>)
 8002f60:	9302      	str	r3, [sp, #8]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	2300      	movs	r3, #0
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002f6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002f70:	f7fd fbb2 	bl	80006d8 <CO_CANrxBufferInit>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 8002f7a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <CO_RPDO_init+0x16c>
        return ret;
 8002f82:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002f86:	e080      	b.n	800308a <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f8c:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002f8e:	23fe      	movs	r3, #254	; 0xfe
 8002f90:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 8002f92:	f107 0217 	add.w	r2, r7, #23
 8002f96:	2301      	movs	r3, #1
 8002f98:	2102      	movs	r1, #2
 8002f9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f9c:	f7ff faeb 	bl	8002576 <OD_get_u8>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002fa6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00e      	beq.n	8002fcc <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 8002fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 8002fb4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fb6:	f7ff fab9 	bl	800252c <OD_getIndex>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	021b      	lsls	r3, r3, #8
 8002fbe:	f043 0202 	orr.w	r2, r3, #2
 8002fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc4:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002fc6:	f06f 030b 	mvn.w	r3, #11
 8002fca:	e05e      	b.n	800308a <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2bf0      	cmp	r3, #240	; 0xf0
 8002fd8:	bf94      	ite	ls
 8002fda:	2301      	movls	r3, #1
 8002fdc:	2300      	movhi	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002fec:	f107 0214 	add.w	r2, r7, #20
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	2105      	movs	r1, #5
 8002ff4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ff6:	f7ff fad3 	bl	80025a0 <OD_get_u16>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 8003000:	8abb      	ldrh	r3, [r7, #20]
 8003002:	461a      	mov	r2, r3
 8003004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003008:	fb03 f202 	mul.w	r2, r3, r2
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	2201      	movs	r2, #1
 8003016:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003028:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003030:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003038:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	4a14      	ldr	r2, [pc, #80]	; (8003098 <CO_RPDO_init+0x27c>)
 8003048:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	4a13      	ldr	r2, [pc, #76]	; (800309c <CO_RPDO_init+0x280>)
 8003050:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <CO_RPDO_init+0x284>)
 8003060:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	4a0f      	ldr	r2, [pc, #60]	; (80030a4 <CO_RPDO_init+0x288>)
 8003068:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003072:	4619      	mov	r1, r3
 8003074:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003076:	f7ff fa6a 	bl	800254e <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003080:	4619      	mov	r1, r3
 8003082:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003084:	f7ff fa63 	bl	800254e <OD_extension_init>
#endif

    return CO_ERROR_NO;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3730      	adds	r7, #48	; 0x30
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	08002b25 	.word	0x08002b25
 8003098:	08002a89 	.word	0x08002a89
 800309c:	08002be1 	.word	0x08002be1
 80030a0:	08001ee9 	.word	0x08001ee9
 80030a4:	08002947 	.word	0x08002947

080030a8 <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b097      	sub	sp, #92	; 0x5c
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	637b      	str	r3, [r7, #52]	; 0x34

    if (PDO->valid && NMTisOperational
 80030ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 810c 	beq.w	80032dc <CO_RPDO_process+0x234>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8108 	beq.w	80032dc <CO_RPDO_process+0x234>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 80030cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <CO_RPDO_process+0x36>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f040 80ff 	bne.w	80032dc <CO_RPDO_process+0x234>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80030e4:	2b0a      	cmp	r3, #10
 80030e6:	d928      	bls.n	800313a <CO_RPDO_process+0x92>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80030ee:	2b0b      	cmp	r3, #11
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8003100:	2b0c      	cmp	r3, #12
 8003102:	d102      	bne.n	800310a <CO_RPDO_process+0x62>
 8003104:	f248 2310 	movw	r3, #33296	; 0x8210
 8003108:	e001      	b.n	800310e <CO_RPDO_process+0x66>
 800310a:	f248 2320 	movw	r3, #33312	; 0x8220
 800310e:	85fb      	strh	r3, [r7, #46]	; 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8003118:	461a      	mov	r2, r3
 800311a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800311c:	9200      	str	r2, [sp, #0]
 800311e:	2204      	movs	r2, #4
 8003120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003122:	f7fe f8e1 	bl	80012e8 <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf14      	ite	ne
 800312c:	2301      	movne	r3, #1
 800312e:	2300      	moveq	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
            RPDO->receiveError = setError
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <CO_RPDO_process+0xbe>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <CO_RPDO_process+0xbe>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <CO_RPDO_process+0xbe>
            bufNo = 1;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 8003166:	2300      	movs	r3, #0
 8003168:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 800316a:	e065      	b.n	8003238 <CO_RPDO_process+0x190>
            rpdoReceived = true;
 800316c:	2301      	movs	r3, #1
 800316e:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 8003170:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003174:	332a      	adds	r3, #42	; 0x2a
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 800317e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3252      	adds	r2, #82	; 0x52
 8003186:	2100      	movs	r1, #0
 8003188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003192:	e04b      	b.n	800322c <CO_RPDO_process+0x184>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8003194:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	3310      	adds	r3, #16
 80031a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a4:	4413      	add	r3, r2
 80031a6:	62bb      	str	r3, [r7, #40]	; 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	330c      	adds	r3, #12
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 80031bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d901      	bls.n	80031c6 <CO_RPDO_process+0x11e>
                    ODdataLength = CO_PDO_MAX_SIZE;
 80031c2:	2308      	movs	r3, #8
 80031c4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 80031c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d912      	bls.n	80031f6 <CO_RPDO_process+0x14e>
                    memset(buf, 0, sizeof(buf));
 80031d0:	f107 0318 	add.w	r3, r7, #24
 80031d4:	2208      	movs	r2, #8
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f008 fa89 	bl	800b6f0 <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 80031de:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031e2:	f107 0318 	add.w	r3, r7, #24
 80031e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031e8:	4618      	mov	r0, r3
 80031ea:	f008 fa59 	bl	800b6a0 <memcpy>
                    dataOD = buf;
 80031ee:	f107 0318 	add.w	r3, r7, #24
 80031f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f4:	e001      	b.n	80031fa <CO_RPDO_process+0x152>
                }
                else {
                    dataOD = dataRPDO;
 80031f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f8:	63bb      	str	r3, [r7, #56]	; 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	699c      	ldr	r4, [r3, #24]
 8003204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003206:	f107 0314 	add.w	r3, r7, #20
 800320a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800320c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800320e:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 8003210:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8003218:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800321c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800321e:	4413      	add	r3, r2
 8003220:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003222:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003226:	3301      	adds	r3, #1
 8003228:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800322c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322e:	7b5b      	ldrb	r3, [r3, #13]
 8003230:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8003234:	429a      	cmp	r2, r3
 8003236:	d3ad      	bcc.n	8003194 <CO_RPDO_process+0xec>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8003238:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3252      	adds	r2, #82	; 0x52
 8003240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d191      	bne.n	800316c <CO_RPDO_process+0xc4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d058      	beq.n	8003304 <CO_RPDO_process+0x25c>
            if (rpdoReceived) {
 8003252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003254:	2b00      	cmp	r3, #0
 8003256:	d017      	beq.n	8003288 <CO_RPDO_process+0x1e0>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8003264:	429a      	cmp	r2, r3
 8003266:	d90a      	bls.n	800327e <CO_RPDO_process+0x1d6>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	2217      	movs	r2, #23
 8003278:	2100      	movs	r1, #0
 800327a:	f7fe f835 	bl	80012e8 <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    ) {
 8003286:	e03d      	b.n	8003304 <CO_RPDO_process+0x25c>
            }
            else if (RPDO->timeoutTimer > 0
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800328e:	2b00      	cmp	r3, #0
 8003290:	d038      	beq.n	8003304 <CO_RPDO_process+0x25c>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800329e:	429a      	cmp	r2, r3
 80032a0:	d230      	bcs.n	8003304 <CO_RPDO_process+0x25c>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	441a      	add	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80032be:	429a      	cmp	r2, r3
 80032c0:	d920      	bls.n	8003304 <CO_RPDO_process+0x25c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 80032c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f248 2350 	movw	r3, #33360	; 0x8250
 80032d2:	2217      	movs	r2, #23
 80032d4:	2101      	movs	r1, #1
 80032d6:	f7fe f807 	bl	80012e8 <CO_error>
    ) {
 80032da:	e013      	b.n	8003304 <CO_RPDO_process+0x25c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 80032dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <CO_RPDO_process+0x242>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <CO_RPDO_process+0x25e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 8003302:	e000      	b.n	8003306 <CO_RPDO_process+0x25e>
    ) {
 8003304:	bf00      	nop
}
 8003306:	bf00      	nop
 8003308:	3754      	adds	r7, #84	; 0x54
 800330a:	46bd      	mov	sp, r7
 800330c:	bd90      	pop	{r4, r7, pc}
	...

08003310 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b093      	sub	sp, #76	; 0x4c
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <OD_write_18xx+0x26>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <OD_write_18xx+0x26>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <OD_write_18xx+0x26>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b04      	cmp	r3, #4
 8003334:	d901      	bls.n	800333a <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8003336:	2309      	movs	r3, #9
 8003338:	e136      	b.n	80035a8 <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	4618      	mov	r0, r3
 800334e:	f008 f9a7 	bl	800b6a0 <memcpy>

    switch (stream->subIndex) {
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	7c5b      	ldrb	r3, [r3, #17]
 8003356:	3b01      	subs	r3, #1
 8003358:	2b05      	cmp	r3, #5
 800335a:	f200 811d 	bhi.w	8003598 <OD_write_18xx+0x288>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <OD_write_18xx+0x54>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	0800337d 	.word	0x0800337d
 8003368:	080034b3 	.word	0x080034b3
 800336c:	08003519 	.word	0x08003519
 8003370:	08003599 	.word	0x08003599
 8003374:	08003547 	.word	0x08003547
 8003378:	0800356b 	.word	0x0800356b
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	f7ff f8b8 	bl	80024f2 <CO_getUint32>
 8003382:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800338c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	43db      	mvns	r3, r3
 8003392:	0fdb      	lsrs	r3, r3, #31
 8003394:	b2db      	uxtb	r3, r3
 8003396:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	4b85      	ldr	r3, [pc, #532]	; (80035b0 <OD_write_18xx+0x2a0>)
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d13d      	bne.n	800341e <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <OD_write_18xx+0xac>
 80033a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <OD_write_18xx+0xac>
 80033b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b2:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80033b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d130      	bne.n	800341e <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d026      	beq.n	8003410 <OD_write_18xx+0x100>
 80033c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033c4:	2b7f      	cmp	r3, #127	; 0x7f
 80033c6:	d92a      	bls.n	800341e <OD_write_18xx+0x10e>
 80033c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ce:	d903      	bls.n	80033d8 <OD_write_18xx+0xc8>
 80033d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033d2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80033d6:	d922      	bls.n	800341e <OD_write_18xx+0x10e>
 80033d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033da:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80033de:	d903      	bls.n	80033e8 <OD_write_18xx+0xd8>
 80033e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033e2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033e6:	d31a      	bcc.n	800341e <OD_write_18xx+0x10e>
 80033e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033ea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033ee:	d903      	bls.n	80033f8 <OD_write_18xx+0xe8>
 80033f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033f2:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80033f6:	d312      	bcc.n	800341e <OD_write_18xx+0x10e>
 80033f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033fa:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80033fe:	d303      	bcc.n	8003408 <OD_write_18xx+0xf8>
 8003400:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003402:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003406:	d30a      	bcc.n	800341e <OD_write_18xx+0x10e>
 8003408:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800340a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800340e:	d806      	bhi.n	800341e <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <OD_write_18xx+0x112>
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003418:	7b5b      	ldrb	r3, [r3, #13]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 800341e:	230f      	movs	r3, #15
 8003420:	e0c2      	b.n	80035a8 <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8003422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	429a      	cmp	r2, r3
 800342a:	d106      	bne.n	800343a <OD_write_18xx+0x12a>
 800342c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342e:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8003432:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003434:	429a      	cmp	r2, r3
 8003436:	f000 80ae 	beq.w	8003596 <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 800343a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343c:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8003440:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003442:	429a      	cmp	r2, r3
 8003444:	d108      	bne.n	8003458 <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f85b 	bl	800250e <CO_setUint32>
            }
            if (!valid) {
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <OD_write_18xx+0x152>
                CAN_ID = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8003462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003464:	6858      	ldr	r0, [r3, #4]
 8003466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003468:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346e:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8003470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003472:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8003476:	2af0      	cmp	r2, #240	; 0xf0
 8003478:	bf94      	ite	ls
 800347a:	2201      	movls	r2, #1
 800347c:	2200      	movhi	r2, #0
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	4614      	mov	r4, r2
 8003482:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003484:	9401      	str	r4, [sp, #4]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	f7fd f977 	bl	800077c <CO_CANtxBufferInit>
 800348e:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 8003496:	2309      	movs	r3, #9
 8003498:	e086      	b.n	80035a8 <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            PDO->valid = valid;
 80034a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 80034a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80034ac:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        }
        break;
 80034b0:	e071      	b.n	8003596 <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 80034b2:	68b8      	ldr	r0, [r7, #8]
 80034b4:	f7ff f800 	bl	80024b8 <CO_getUint8>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 80034be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c2:	2bf0      	cmp	r3, #240	; 0xf0
 80034c4:	d905      	bls.n	80034d2 <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80034c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ca:	2bfd      	cmp	r3, #253	; 0xfd
 80034cc:	d801      	bhi.n	80034d2 <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 80034ce:	230f      	movs	r3, #15
 80034d0:	e06a      	b.n	80035a8 <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80034d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034d6:	2bf0      	cmp	r3, #240	; 0xf0
 80034d8:	bf94      	ite	ls
 80034da:	2301      	movls	r3, #1
 80034dc:	2300      	movhi	r3, #0
 80034de:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80034e6:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 80034e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ea:	22ff      	movs	r2, #255	; 0xff
 80034ec:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 80034f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80034f6:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
        TPDO->sendRequest = true;
 80034fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fc:	2201      	movs	r2, #1
 80034fe:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	2200      	movs	r2, #0
 8003506:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003512:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
        break;
 8003516:	e03f      	b.n	8003598 <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 8003518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 8003520:	230f      	movs	r3, #15
 8003522:	e041      	b.n	80035a8 <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8003524:	68b8      	ldr	r0, [r7, #8]
 8003526:	f7fe ffd5 	bl	80024d4 <CO_getUint16>
 800352a:	4603      	mov	r3, r0
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	2264      	movs	r2, #100	; 0x64
 8003532:	fb03 f202 	mul.w	r2, r3, r2
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 800353c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353e:	2200      	movs	r2, #0
 8003540:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        break;
 8003544:	e028      	b.n	8003598 <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8003546:	68b8      	ldr	r0, [r7, #8]
 8003548:	f7fe ffc4 	bl	80024d4 <CO_getUint16>
 800354c:	4603      	mov	r3, r0
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003556:	fb03 f202 	mul.w	r2, r3, r2
 800355a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        TPDO->eventTimer = 0;
 8003560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003562:	2200      	movs	r2, #0
 8003564:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        break;
 8003568:	e016      	b.n	8003598 <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 800356a:	68b8      	ldr	r0, [r7, #8]
 800356c:	f7fe ffa4 	bl	80024b8 <CO_getUint8>
 8003570:	4603      	mov	r3, r0
 8003572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (PDO->valid || syncStartValue > 240) {
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <OD_write_18xx+0x276>
 800357e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003582:	2bf0      	cmp	r3, #240	; 0xf0
 8003584:	d901      	bls.n	800358a <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 8003586:	230f      	movs	r3, #15
 8003588:	e00e      	b.n	80035a8 <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003590:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        break;
 8003594:	e000      	b.n	8003598 <OD_write_18xx+0x288>
        break;
 8003596:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8003598:	f107 0114 	add.w	r1, r7, #20
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7fe fcf9 	bl	8001f98 <OD_writeOriginal>
 80035a6:	4603      	mov	r3, r0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3744      	adds	r7, #68	; 0x44
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd90      	pop	{r4, r7, pc}
 80035b0:	3ffff800 	.word	0x3ffff800

080035b4 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08e      	sub	sp, #56	; 0x38
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <CO_TPDO_init+0x36>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <CO_TPDO_init+0x36>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <CO_TPDO_init+0x36>
 80035d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 80035de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <CO_TPDO_init+0x36>
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	e14f      	b.n	8003890 <CO_TPDO_init+0x2dc>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 80035f0:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80035f4:	2100      	movs	r1, #0
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f008 f87a 	bl	800b6f0 <memset>

    /* Configure object variables */
    PDO->em = em;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003606:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	2300      	movs	r3, #0
 8003618:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800361e:	f7ff f8e5 	bl	80027ec <PDO_initMapping>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8003628:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <CO_TPDO_init+0x82>
        return ret;
 8003630:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003634:	e12c      	b.n	8003890 <CO_TPDO_init+0x2dc>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8003636:	23fe      	movs	r3, #254	; 0xfe
 8003638:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 800363a:	f107 021b 	add.w	r2, r7, #27
 800363e:	2301      	movs	r3, #1
 8003640:	2102      	movs	r1, #2
 8003642:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003644:	f7fe ff97 	bl	8002576 <OD_get_u8>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800364e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00e      	beq.n	8003674 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8003656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 800365c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800365e:	f7fe ff65 	bl	800252c <OD_getIndex>
 8003662:	4603      	mov	r3, r0
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800366c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800366e:	f06f 030b 	mvn.w	r3, #11
 8003672:	e10d      	b.n	8003890 <CO_TPDO_init+0x2dc>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003674:	7efb      	ldrb	r3, [r7, #27]
 8003676:	2bfd      	cmp	r3, #253	; 0xfd
 8003678:	d804      	bhi.n	8003684 <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 800367a:	7efb      	ldrb	r3, [r7, #27]
 800367c:	2bf0      	cmp	r3, #240	; 0xf0
 800367e:	d901      	bls.n	8003684 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8003680:	23fe      	movs	r3, #254	; 0xfe
 8003682:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8003684:	7efa      	ldrb	r2, [r7, #27]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    TPDO->sendRequest = true;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8003698:	f107 0214 	add.w	r2, r7, #20
 800369c:	2301      	movs	r3, #1
 800369e:	2101      	movs	r1, #1
 80036a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036a2:	f7fe ff92 	bl	80025ca <OD_get_u32>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80036ac:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00e      	beq.n	80036d2 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 80036b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 80036ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80036bc:	f7fe ff36 	bl	800252c <OD_getIndex>
 80036c0:	4603      	mov	r3, r0
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ca:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80036cc:	f06f 030b 	mvn.w	r3, #11
 80036d0:	e0de      	b.n	8003890 <CO_TPDO_init+0x2dc>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	0fdb      	lsrs	r3, r3, #31
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036e4:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <CO_TPDO_init+0x154>
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	7b5b      	ldrb	r3, [r3, #13]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <CO_TPDO_init+0x146>
 80036f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <CO_TPDO_init+0x154>
        valid = false;
 80036fa:	2300      	movs	r3, #0
 80036fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <CO_TPDO_init+0x154>
 8003704:	2301      	movs	r3, #1
 8003706:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00e      	beq.n	800372c <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d001      	beq.n	800371c <CO_TPDO_init+0x168>
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	e000      	b.n	800371e <CO_TPDO_init+0x16a>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8003724:	221a      	movs	r2, #26
 8003726:	2101      	movs	r1, #1
 8003728:	f7fd fdde 	bl	80012e8 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8003736:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <CO_TPDO_init+0x19a>
 800373c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800373e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003740:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003744:	400b      	ands	r3, r1
 8003746:	429a      	cmp	r2, r3
 8003748:	d101      	bne.n	800374e <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 800374a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800374c:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8003758:	2af0      	cmp	r2, #240	; 0xf0
 800375a:	bf94      	ite	ls
 800375c:	2201      	movls	r2, #1
 800375e:	2200      	movhi	r2, #0
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	4610      	mov	r0, r2
 8003764:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003766:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 800376a:	9001      	str	r0, [sp, #4]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2300      	movs	r3, #0
 8003770:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003772:	f7fd f803 	bl	800077c <CO_CANtxBufferInit>
 8003776:	4602      	mov	r2, r0
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003788:	f04f 33ff 	mov.w	r3, #4294967295
 800378c:	e080      	b.n	8003890 <CO_TPDO_init+0x2dc>
    }

    PDO->valid = valid;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003792:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 800379c:	f107 0212 	add.w	r2, r7, #18
 80037a0:	2301      	movs	r3, #1
 80037a2:	2103      	movs	r1, #3
 80037a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037a6:	f7fe fefb 	bl	80025a0 <OD_get_u16>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 80037b0:	f107 0210 	add.w	r2, r7, #16
 80037b4:	2301      	movs	r3, #1
 80037b6:	2105      	movs	r1, #5
 80037b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037ba:	f7fe fef1 	bl	80025a0 <OD_get_u16>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->inhibitTime_us = inhibitTime * 100;
 80037c4:	8a7b      	ldrh	r3, [r7, #18]
 80037c6:	461a      	mov	r2, r3
 80037c8:	2364      	movs	r3, #100	; 0x64
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    TPDO->eventTime_us = eventTime * 1000;
 80037d6:	8a3b      	ldrh	r3, [r7, #16]
 80037d8:	461a      	mov	r2, r3
 80037da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037de:	fb02 f303 	mul.w	r3, r2, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 80037f8:	2301      	movs	r3, #1
 80037fa:	2106      	movs	r1, #6
 80037fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037fe:	f7fe feba 	bl	8002576 <OD_get_u8>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->SYNC = SYNC;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    TPDO->syncCounter = 255;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	2200      	movs	r2, #0
 800381c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800382e:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003836:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800383e:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	4a12      	ldr	r2, [pc, #72]	; (8003898 <CO_TPDO_init+0x2e4>)
 800384e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	4a11      	ldr	r2, [pc, #68]	; (800389c <CO_TPDO_init+0x2e8>)
 8003856:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <CO_TPDO_init+0x2ec>)
 8003866:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <CO_TPDO_init+0x2f0>)
 800386e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003878:	4619      	mov	r1, r3
 800387a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800387c:	f7fe fe67 	bl	800254e <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003886:	4619      	mov	r1, r3
 8003888:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800388a:	f7fe fe60 	bl	800254e <OD_extension_init>
#endif

    return CO_ERROR_NO;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3730      	adds	r7, #48	; 0x30
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	08002a89 	.word	0x08002a89
 800389c:	08003311 	.word	0x08003311
 80038a0:	08001ee9 	.word	0x08001ee9
 80038a4:	08002947 	.word	0x08002947

080038a8 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b091      	sub	sp, #68	; 0x44
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80038ba:	3305      	adds	r3, #5
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <CO_TPDOsend+0x2a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80038ce:	2bfd      	cmp	r3, #253	; 0xfd
 80038d0:	d901      	bls.n	80038d6 <CO_TPDOsend+0x2e>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <CO_TPDOsend+0x30>
 80038d6:	2300      	movs	r3, #0
    bool_t eventDriven =
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80038e0:	e062      	b.n	80039a8 <CO_TPDOsend+0x100>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80038e2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	3310      	adds	r3, #16
 80038f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f2:	4413      	add	r3, r2
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
        OD_stream_t *stream = &OD_IO->stream;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 8003906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003908:	2b08      	cmp	r3, #8
 800390a:	d901      	bls.n	8003910 <CO_TPDOsend+0x68>
            ODdataLength = CO_PDO_MAX_SIZE;
 800390c:	2308      	movs	r3, #8
 800390e:	637b      	str	r3, [r7, #52]	; 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003910:	7ffb      	ldrb	r3, [r7, #31]
 8003912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003914:	429a      	cmp	r2, r3
 8003916:	d90a      	bls.n	800392e <CO_TPDOsend+0x86>
            memset(buf, 0, sizeof(buf));
 8003918:	f107 0310 	add.w	r3, r7, #16
 800391c:	2208      	movs	r2, #8
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f007 fee5 	bl	800b6f0 <memset>
            dataTPDOCopy = buf;
 8003926:	f107 0310 	add.w	r3, r7, #16
 800392a:	633b      	str	r3, [r7, #48]	; 0x30
 800392c:	e001      	b.n	8003932 <CO_TPDOsend+0x8a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 800392e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2200      	movs	r2, #0
 8003936:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	695c      	ldr	r4, [r3, #20]
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003944:	6a38      	ldr	r0, [r7, #32]
 8003946:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8003948:	7ffa      	ldrb	r2, [r7, #31]
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 800394e:	7ffb      	ldrb	r3, [r7, #31]
 8003950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003952:	429a      	cmp	r2, r3
 8003954:	d906      	bls.n	8003964 <CO_TPDOsend+0xbc>
            memcpy(dataTPDO, buf, mappedLength);
 8003956:	7ffa      	ldrb	r2, [r7, #31]
 8003958:	f107 0310 	add.w	r3, r7, #16
 800395c:	4619      	mov	r1, r3
 800395e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003960:	f007 fe9e 	bl	800b6a0 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003964:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396a:	323c      	adds	r2, #60	; 0x3c
 800396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003970:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00e      	beq.n	8003996 <CO_TPDOsend+0xee>
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <CO_TPDOsend+0xee>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	781a      	ldrb	r2, [r3, #0]
 8003982:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003988:	440b      	add	r3, r1
 800398a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800398e:	4313      	orrs	r3, r2
 8003990:	b2da      	uxtb	r2, r3
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 8003996:	7ffb      	ldrb	r3, [r7, #31]
 8003998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800399a:	4413      	add	r3, r2
 800399c:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800399e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80039a2:	3301      	adds	r3, #1
 80039a4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80039a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039aa:	7b5b      	ldrb	r3, [r3, #13]
 80039ac:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d396      	bcc.n	80038e2 <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7fc ff00 	bl	80007e6 <CO_CANsend>
 80039e6:	4603      	mov	r3, r0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3744      	adds	r7, #68	; 0x44
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd90      	pop	{r4, r7, pc}

080039f0 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80dc 	beq.w	8003bc4 <CO_TPDO_process+0x1d4>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80d8 	beq.w	8003bc4 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d004      	beq.n	8003a28 <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003a24:	2bfd      	cmp	r3, #253	; 0xfd
 8003a26:	d946      	bls.n	8003ab6 <CO_TPDO_process+0xc6>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d018      	beq.n	8003a64 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d205      	bcs.n	8003a4a <CO_TPDO_process+0x5a>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	e000      	b.n	8003a4c <CO_TPDO_process+0x5c>
 8003a4a:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
                if (TPDO->eventTimer == 0) {
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d123      	bne.n	8003ab6 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003a6e:	2300      	movs	r3, #0
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e01b      	b.n	8003aac <CO_TPDO_process+0xbc>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 8003a74:	7ffa      	ldrb	r2, [r7, #31]
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	323c      	adds	r2, #60	; 0x3c
 8003a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7e:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00f      	beq.n	8003aa6 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	781a      	ldrb	r2, [r3, #0]
 8003a8a:	7ffb      	ldrb	r3, [r7, #31]
 8003a8c:	69b9      	ldr	r1, [r7, #24]
 8003a8e:	440b      	add	r3, r1
 8003a90:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8003a94:	4013      	ands	r3, r2
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
                            break;
 8003aa4:	e007      	b.n	8003ab6 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003aa6:	7ffb      	ldrb	r3, [r7, #31]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	7b5b      	ldrb	r3, [r3, #13]
 8003ab0:	7ffa      	ldrb	r2, [r7, #31]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d3de      	bcc.n	8003a74 <CO_TPDO_process+0x84>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003abc:	2bfd      	cmp	r3, #253	; 0xfd
 8003abe:	d91d      	bls.n	8003afc <CO_TPDO_process+0x10c>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d205      	bcs.n	8003ad8 <CO_TPDO_process+0xe8>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	e000      	b.n	8003ada <CO_TPDO_process+0xea>
 8003ad8:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d07f      	beq.n	8003bea <CO_TPDO_process+0x1fa>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d17a      	bne.n	8003bea <CO_TPDO_process+0x1fa>
                CO_TPDOsend(TPDO);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fed7 	bl	80038a8 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003afa:	e076      	b.n	8003bea <CO_TPDO_process+0x1fa>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d071      	beq.n	8003bea <CO_TPDO_process+0x1fa>
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d06e      	beq.n	8003bea <CO_TPDO_process+0x1fa>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d064      	beq.n	8003bea <CO_TPDO_process+0x1fa>
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f7ff fec1 	bl	80038a8 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003b26:	e060      	b.n	8003bea <CO_TPDO_process+0x1fa>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003b2e:	2bff      	cmp	r3, #255	; 0xff
 8003b30:	d119      	bne.n	8003b66 <CO_TPDO_process+0x176>
                    if (TPDO->SYNC->counterOverflowValue != 0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003b38:	7c5b      	ldrb	r3, [r3, #17]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d009      	beq.n	8003b52 <CO_TPDO_process+0x162>
                        && TPDO->syncStartValue != 0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d004      	beq.n	8003b52 <CO_TPDO_process+0x162>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	22fe      	movs	r2, #254	; 0xfe
 8003b4c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8003b50:	e009      	b.n	8003b66 <CO_TPDO_process+0x176>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003b58:	085b      	lsrs	r3, r3, #1
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003b6c:	2bfe      	cmp	r3, #254	; 0xfe
 8003b6e:	d112      	bne.n	8003b96 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003b76:	7c9a      	ldrb	r2, [r3, #18]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d133      	bne.n	8003bea <CO_TPDO_process+0x1fa>
                        TPDO->syncCounter = TPDO->transmissionType;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                        CO_TPDOsend(TPDO);
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f7ff fe8a 	bl	80038a8 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003b94:	e029      	b.n	8003bea <CO_TPDO_process+0x1fa>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11c      	bne.n	8003bea <CO_TPDO_process+0x1fa>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    CO_TPDOsend(TPDO);
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f7ff fe73 	bl	80038a8 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003bc2:	e012      	b.n	8003bea <CO_TPDO_process+0x1fa>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	22ff      	movs	r2, #255	; 0xff
 8003be4:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif
    }
}
 8003be8:	e000      	b.n	8003bec <CO_TPDO_process+0x1fc>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003bea:	bf00      	nop
}
 8003bec:	bf00      	nop
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <OD_getIndex+0x14>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	e000      	b.n	8003c42 <OD_getIndex+0x16>
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <OD_mappable>:
static inline bool_t OD_mappable(OD_stream_t *stream) {
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
         ? (stream->attribute & (ODA_TRPDO | ODA_TRSRDO)) != 0 : false;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <OD_mappable+0x1e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	7c1b      	ldrb	r3, [r3, #16]
 8003c60:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <OD_mappable+0x1e>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <OD_mappable+0x20>
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <OD_extension_init>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <OD_extension_init+0x14>
 8003c8a:	2305      	movs	r3, #5
 8003c8c:	e003      	b.n	8003c96 <OD_extension_init+0x1c>
    entry->extension = extension;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <OD_get_u8>:
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b086      	sub	sp, #24
 8003ca6:	af02      	add	r7, sp, #8
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003cb2:	7af9      	ldrb	r1, [r7, #11]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	2301      	movs	r3, #1
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7fe fb51 	bl	8002364 <OD_get_value>
 8003cc2:	4603      	mov	r3, r0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <OD_get_u32>:
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003cdc:	7af9      	ldrb	r1, [r7, #11]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7fe fb3c 	bl	8002364 <OD_get_value>
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af02      	add	r7, sp, #8
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	460b      	mov	r3, r1
 8003d04:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8003d06:	1d3a      	adds	r2, r7, #4
 8003d08:	7af9      	ldrb	r1, [r7, #11]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	2304      	movs	r3, #4
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f7fe fb5d 	bl	80023d0 <OD_set_value>
 8003d16:	4603      	mov	r3, r0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	791b      	ldrb	r3, [r3, #4]
 8003d32:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	3305      	adds	r3, #5
 8003d38:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 8003d3a:	7cfb      	ldrb	r3, [r7, #19]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d115      	bne.n	8003d6c <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b80      	cmp	r3, #128	; 0x80
 8003d46:	d103      	bne.n	8003d50 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 8003d4e:	e00d      	b.n	8003d6c <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	333c      	adds	r3, #60	; 0x3c
 8003d5c:	7cfa      	ldrb	r2, [r7, #19]
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f007 fc9d 	bl	800b6a0 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d6c:	bf00      	nop
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af04      	add	r7, sp, #16
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	460b      	mov	r3, r1
 8003d84:	80fb      	strh	r3, [r7, #6]
 8003d86:	4613      	mov	r3, r2
 8003d88:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	6a3a      	ldr	r2, [r7, #32]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d106      	bne.n	8003da2 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d101      	bne.n	8003da2 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e04e      	b.n	8003e40 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a3a      	ldr	r2, [r7, #32]
 8003da6:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dac:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	db02      	blt.n	8003dba <CO_SDOserver_init_canRxTx+0x46>
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	e000      	b.n	8003dbc <CO_SDOserver_init_canRxTx+0x48>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db02      	blt.n	8003dca <CO_SDOserver_init_canRxTx+0x56>
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	e000      	b.n	8003dcc <CO_SDOserver_init_canRxTx+0x58>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8003dce:	8afb      	ldrh	r3, [r7, #22]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d006      	beq.n	8003de2 <CO_SDOserver_init_canRxTx+0x6e>
 8003dd4:	8abb      	ldrh	r3, [r7, #20]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	611a      	str	r2, [r3, #16]
 8003de0:	e006      	b.n	8003df0 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003df0:	8afa      	ldrh	r2, [r7, #22]
 8003df2:	88f9      	ldrh	r1, [r7, #6]
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <CO_SDOserver_init_canRxTx+0xd4>)
 8003df6:	9302      	str	r3, [sp, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003e04:	68b8      	ldr	r0, [r7, #8]
 8003e06:	f7fc fc67 	bl	80006d8 <CO_CANrxBufferInit>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	8aba      	ldrh	r2, [r7, #20]
 8003e14:	88b9      	ldrh	r1, [r7, #4]
 8003e16:	2300      	movs	r3, #0
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f7fc fcac 	bl	800077c <CO_CANtxBufferInit>
 8003e24:	4602      	mov	r2, r0
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8003e32:	23ff      	movs	r3, #255	; 0xff
 8003e34:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003e3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	08003d21 	.word	0x08003d21

08003e4c <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b08f      	sub	sp, #60	; 0x3c
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <OD_write_1201_additional+0x20>
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <OD_write_1201_additional+0x20>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8003e6c:	2309      	movs	r3, #9
 8003e6e:	e0f9      	b.n	8004064 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	7c5b      	ldrb	r3, [r3, #17]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	f200 80e8 	bhi.w	8004050 <OD_write_1201_additional+0x204>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <OD_write_1201_additional+0x3c>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003f61 	.word	0x08003f61
 8003e94:	08004027 	.word	0x08004027
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 8003e98:	2304      	movs	r3, #4
 8003e9a:	e0e3      	b.n	8004064 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8003e9c:	68b8      	ldr	r0, [r7, #8]
 8003e9e:	f7ff feb7 	bl	8003c10 <CO_getUint32>
 8003ea2:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eac:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eb8:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	43db      	mvns	r3, r3
 8003ebe:	0fdb      	lsrs	r3, r3, #31
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4b69      	ldr	r3, [pc, #420]	; (800406c <OD_write_1201_additional+0x220>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d134      	bne.n	8003f38 <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <OD_write_1201_additional+0x98>
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <OD_write_1201_additional+0x98>
 8003edc:	8afa      	ldrh	r2, [r7, #22]
 8003ede:	8abb      	ldrh	r3, [r7, #20]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d129      	bne.n	8003f38 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d028      	beq.n	8003f3c <OD_write_1201_additional+0xf0>
 8003eea:	8afb      	ldrh	r3, [r7, #22]
 8003eec:	2b7f      	cmp	r3, #127	; 0x7f
 8003eee:	d923      	bls.n	8003f38 <OD_write_1201_additional+0xec>
 8003ef0:	8afb      	ldrh	r3, [r7, #22]
 8003ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef6:	d903      	bls.n	8003f00 <OD_write_1201_additional+0xb4>
 8003ef8:	8afb      	ldrh	r3, [r7, #22]
 8003efa:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003efe:	d91b      	bls.n	8003f38 <OD_write_1201_additional+0xec>
 8003f00:	8afb      	ldrh	r3, [r7, #22]
 8003f02:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003f06:	d903      	bls.n	8003f10 <OD_write_1201_additional+0xc4>
 8003f08:	8afb      	ldrh	r3, [r7, #22]
 8003f0a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f0e:	d313      	bcc.n	8003f38 <OD_write_1201_additional+0xec>
 8003f10:	8afb      	ldrh	r3, [r7, #22]
 8003f12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f16:	d903      	bls.n	8003f20 <OD_write_1201_additional+0xd4>
 8003f18:	8afb      	ldrh	r3, [r7, #22]
 8003f1a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003f1e:	d30b      	bcc.n	8003f38 <OD_write_1201_additional+0xec>
 8003f20:	8afb      	ldrh	r3, [r7, #22]
 8003f22:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003f26:	d303      	bcc.n	8003f30 <OD_write_1201_additional+0xe4>
 8003f28:	8afb      	ldrh	r3, [r7, #22]
 8003f2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f2e:	d303      	bcc.n	8003f38 <OD_write_1201_additional+0xec>
 8003f30:	8afb      	ldrh	r3, [r7, #22]
 8003f32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f36:	d901      	bls.n	8003f3c <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 8003f38:	230f      	movs	r3, #15
 8003f3a:	e093      	b.n	8004064 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	4603      	mov	r3, r0
 8003f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f5a:	f7ff ff0b 	bl	8003d74 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 8003f5e:	e07a      	b.n	8004056 <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003f60:	68b8      	ldr	r0, [r7, #8]
 8003f62:	f7ff fe55 	bl	8003c10 <CO_getUint32>
 8003f66:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f70:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f7c:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	43db      	mvns	r3, r3
 8003f82:	0fdb      	lsrs	r3, r3, #31
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8003f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8a:	4b38      	ldr	r3, [pc, #224]	; (800406c <OD_write_1201_additional+0x220>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d134      	bne.n	8003ffc <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <OD_write_1201_additional+0x15c>
 8003f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <OD_write_1201_additional+0x15c>
 8003fa0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003fa2:	8c3b      	ldrh	r3, [r7, #32]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d129      	bne.n	8003ffc <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d028      	beq.n	8004000 <OD_write_1201_additional+0x1b4>
 8003fae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fb0:	2b7f      	cmp	r3, #127	; 0x7f
 8003fb2:	d923      	bls.n	8003ffc <OD_write_1201_additional+0x1b0>
 8003fb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fba:	d903      	bls.n	8003fc4 <OD_write_1201_additional+0x178>
 8003fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fbe:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003fc2:	d91b      	bls.n	8003ffc <OD_write_1201_additional+0x1b0>
 8003fc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fc6:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003fca:	d903      	bls.n	8003fd4 <OD_write_1201_additional+0x188>
 8003fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fd2:	d313      	bcc.n	8003ffc <OD_write_1201_additional+0x1b0>
 8003fd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fd6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fda:	d903      	bls.n	8003fe4 <OD_write_1201_additional+0x198>
 8003fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fde:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003fe2:	d30b      	bcc.n	8003ffc <OD_write_1201_additional+0x1b0>
 8003fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fe6:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003fea:	d303      	bcc.n	8003ff4 <OD_write_1201_additional+0x1a8>
 8003fec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003fee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ff2:	d303      	bcc.n	8003ffc <OD_write_1201_additional+0x1b0>
 8003ff4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ff6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ffa:	d901      	bls.n	8004000 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8003ffc:	230f      	movs	r3, #15
 8003ffe:	e031      	b.n	8004064 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004006:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004016:	9201      	str	r2, [sp, #4]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	4623      	mov	r3, r4
 800401c:	4602      	mov	r2, r0
 800401e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004020:	f7ff fea8 	bl	8003d74 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 8004024:	e017      	b.n	8004056 <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d001      	beq.n	8004030 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 800402c:	230b      	movs	r3, #11
 800402e:	e019      	b.n	8004064 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8004030:	68b8      	ldr	r0, [r7, #8]
 8004032:	f7ff fddf 	bl	8003bf4 <CO_getUint8>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId < 1 || nodeId > 127) {
 800403c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <OD_write_1201_additional+0x200>
 8004044:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004048:	2b00      	cmp	r3, #0
 800404a:	da03      	bge.n	8004054 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 800404c:	230f      	movs	r3, #15
 800404e:	e009      	b.n	8004064 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 8004050:	230e      	movs	r3, #14
 8004052:	e007      	b.n	8004064 <OD_write_1201_additional+0x218>
            break;
 8004054:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7fd ff9b 	bl	8001f98 <OD_writeOriginal>
 8004062:	4603      	mov	r3, r0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3734      	adds	r7, #52	; 0x34
 8004068:	46bd      	mov	sp, r7
 800406a:	bd90      	pop	{r4, r7, pc}
 800406c:	3ffff800 	.word	0x3ffff800

08004070 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08c      	sub	sp, #48	; 0x30
 8004074:	af02      	add	r7, sp, #8
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <CO_SDOserver_init+0x26>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <CO_SDOserver_init+0x26>
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <CO_SDOserver_init+0x26>
 8004090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	e0f5      	b.n	8004288 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 80040a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80040aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040ae:	fb03 f202 	mul.w	r2, r3, r2
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d117      	bne.n	80040f2 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <CO_SDOserver_init+0x60>
 80040c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	da02      	bge.n	80040d6 <CO_SDOserver_init+0x66>
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
 80040d4:	e0d8      	b.n	8004288 <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80040d6:	78fb      	ldrb	r3, [r7, #3]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80040de:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80040e8:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	611a      	str	r2, [r3, #16]
 80040f0:	e0a4      	b.n	800423c <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fd9a 	bl	8003c2c <OD_getIndex>
 80040f8:	4603      	mov	r3, r0
 80040fa:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 80040fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040fe:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8004102:	d123      	bne.n	800414c <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <CO_SDOserver_init+0xa2>
 800410a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800410e:	2b00      	cmp	r3, #0
 8004110:	da02      	bge.n	8004118 <CO_SDOserver_init+0xa8>
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	e0b7      	b.n	8004288 <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004120:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	b29b      	uxth	r3, r3
 8004126:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800412a:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8004132:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004134:	2301      	movs	r3, #1
 8004136:	2101      	movs	r1, #1
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff fddc 	bl	8003cf6 <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 800413e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004140:	2301      	movs	r3, #1
 8004142:	2102      	movs	r1, #2
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fdd6 	bl	8003cf6 <OD_set_u32>
 800414a:	e077      	b.n	800423c <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 800414c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800414e:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8004152:	d96f      	bls.n	8004234 <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 8004154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004156:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 800415a:	d26b      	bcs.n	8004234 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 800415c:	f107 021d 	add.w	r2, r7, #29
 8004160:	2301      	movs	r3, #1
 8004162:	2100      	movs	r1, #0
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fd9c 	bl	8003ca2 <OD_get_u8>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8004170:	f107 0218 	add.w	r2, r7, #24
 8004174:	2301      	movs	r3, #1
 8004176:	2101      	movs	r1, #1
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fda7 	bl	8003ccc <OD_get_u32>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8004184:	f107 0214 	add.w	r2, r7, #20
 8004188:	2301      	movs	r3, #1
 800418a:	2102      	movs	r1, #2
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff fd9d 	bl	8003ccc <OD_get_u32>
 8004192:	4603      	mov	r3, r0
 8004194:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 8004196:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10d      	bne.n	80041ba <CO_SDOserver_init+0x14a>
 800419e:	7f7b      	ldrb	r3, [r7, #29]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d002      	beq.n	80041aa <CO_SDOserver_init+0x13a>
 80041a4:	7f7b      	ldrb	r3, [r7, #29]
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d107      	bne.n	80041ba <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 80041aa:	f997 3020 	ldrsb.w	r3, [r7, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d103      	bne.n	80041ba <CO_SDOserver_init+0x14a>
 80041b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 80041ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <CO_SDOserver_init+0x156>
 80041c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80041c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c4:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 80041c6:	f06f 030b 	mvn.w	r3, #11
 80041ca:	e05d      	b.n	8004288 <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db05      	blt.n	80041de <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 80041d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041da:	b29b      	uxth	r3, r3
 80041dc:	e000      	b.n	80041e0 <CO_SDOserver_init+0x170>
 80041de:	2300      	movs	r3, #0
 80041e0:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	db05      	blt.n	80041f4 <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 80041ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	e000      	b.n	80041f6 <CO_SDOserver_init+0x186>
 80041f4:	2300      	movs	r3, #0
 80041f6:	84bb      	strh	r3, [r7, #36]	; 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a23      	ldr	r2, [pc, #140]	; (8004290 <CO_SDOserver_init+0x220>)
 8004202:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <CO_SDOserver_init+0x224>)
 8004208:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3354      	adds	r3, #84	; 0x54
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fd32 	bl	8003c7a <OD_extension_init>
 8004216:	4603      	mov	r3, r0
 8004218:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 800421a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 8004222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <CO_SDOserver_init+0x1be>
 8004228:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800422a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422c:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 800422e:	f06f 030b 	mvn.w	r3, #11
 8004232:	e029      	b.n	8004288 <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8004234:	f04f 33ff 	mov.w	r3, #4294967295
 8004238:	e026      	b.n	8004288 <CO_SDOserver_init+0x218>
        ) {
 800423a:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004246:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800424c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004256:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800426a:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 800426c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800426e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004270:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8004274:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8004276:	9201      	str	r2, [sp, #4]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	4603      	mov	r3, r0
 800427c:	460a      	mov	r2, r1
 800427e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f7ff fd77 	bl	8003d74 <CO_SDOserver_init_canRxTx>
 8004286:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 8004288:	4618      	mov	r0, r3
 800428a:	3728      	adds	r7, #40	; 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	08001ee9 	.word	0x08001ee9
 8004294:	08003e4d 	.word	0x08003e4d

08004298 <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b08b      	sub	sp, #44	; 0x2c
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	4611      	mov	r1, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	460b      	mov	r3, r1
 80042a8:	71fb      	strb	r3, [r7, #7]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d07b      	beq.n	80043b6 <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d015      	beq.n	80042f2 <validateAndWriteToOD+0x5a>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d00f      	beq.n	80042f2 <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 80042da:	429a      	cmp	r2, r3
 80042dc:	d901      	bls.n	80042e2 <validateAndWriteToOD+0x4a>
 80042de:	4a6b      	ldr	r2, [pc, #428]	; (800448c <validateAndWriteToOD+0x1f4>)
 80042e0:	e000      	b.n	80042e4 <validateAndWriteToOD+0x4c>
 80042e2:	4a6b      	ldr	r2, [pc, #428]	; (8004490 <validateAndWriteToOD+0x1f8>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	751a      	strb	r2, [r3, #20]
            return false;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e0c7      	b.n	8004482 <validateAndWriteToOD+0x1ea>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042fe:	b25b      	sxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	da3c      	bge.n	800437e <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <validateAndWriteToOD+0x7c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430e:	6a3a      	ldr	r2, [r7, #32]
 8004310:	429a      	cmp	r2, r3
 8004312:	d934      	bls.n	800437e <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800431a:	3302      	adds	r3, #2
 800431c:	2b20      	cmp	r3, #32
 800431e:	d82e      	bhi.n	800437e <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004326:	1c59      	adds	r1, r3, #1
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	2200      	movs	r2, #0
 8004334:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            SDO->sizeTran++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	669a      	str	r2, [r3, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <validateAndWriteToOD+0xba>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	429a      	cmp	r2, r3
 8004350:	d910      	bls.n	8004374 <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004358:	1c59      	adds	r1, r3, #1
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	2200      	movs	r2, #0
 8004366:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                SDO->sizeTran++;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	669a      	str	r2, [r3, #104]	; 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	621a      	str	r2, [r3, #32]
 800437c:	e02d      	b.n	80043da <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	621a      	str	r2, [r3, #32]
 800438c:	e025      	b.n	80043da <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004392:	6a3a      	ldr	r2, [r7, #32]
 8004394:	429a      	cmp	r2, r3
 8004396:	d020      	beq.n	80043da <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d201      	bcs.n	80043a6 <validateAndWriteToOD+0x10e>
 80043a2:	4a3a      	ldr	r2, [pc, #232]	; (800448c <validateAndWriteToOD+0x1f4>)
 80043a4:	e000      	b.n	80043a8 <validateAndWriteToOD+0x110>
 80043a6:	4a3a      	ldr	r2, [pc, #232]	; (8004490 <validateAndWriteToOD+0x1f8>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	751a      	strb	r2, [r3, #20]
            return false;
 80043b2:	2300      	movs	r3, #0
 80043b4:	e065      	b.n	8004482 <validateAndWriteToOD+0x1ea>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00d      	beq.n	80043da <validateAndWriteToOD+0x142>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d907      	bls.n	80043da <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a2f      	ldr	r2, [pc, #188]	; (800448c <validateAndWriteToOD+0x1f4>)
 80043ce:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	751a      	strb	r2, [r3, #20]
            return false;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e053      	b.n	8004482 <validateAndWriteToOD+0x1ea>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
    bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3318      	adds	r3, #24
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fc33 	bl	8003c4e <OD_mappable>
 80043e8:	61f8      	str	r0, [r7, #28]

    if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f103 0018 	add.w	r0, r3, #24
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004400:	f107 0314 	add.w	r3, r7, #20
 8004404:	47a0      	blx	r4
 8004406:	4603      	mov	r3, r0
 8004408:	76fb      	strb	r3, [r7, #27]
                                   SDO->bufOffsetWr, &countWritten);
    if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }

    SDO->bufOffsetWr = 0;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8004412:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d011      	beq.n	800443e <validateAndWriteToOD+0x1a6>
 800441a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d00c      	beq.n	800443e <validateAndWriteToOD+0x1a6>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004424:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fd ff7d 	bl	8002328 <OD_getSDOabCode>
 800442e:	4602      	mov	r2, r0
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2201      	movs	r2, #1
 8004438:	751a      	strb	r2, [r3, #20]
        return false;
 800443a:	2300      	movs	r3, #0
 800443c:	e021      	b.n	8004482 <validateAndWriteToOD+0x1ea>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <validateAndWriteToOD+0x1c8>
 8004446:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444e:	d107      	bne.n	8004460 <validateAndWriteToOD+0x1c8>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4a0f      	ldr	r2, [pc, #60]	; (8004490 <validateAndWriteToOD+0x1f8>)
 8004454:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	751a      	strb	r2, [r3, #20]
        return false;
 800445c:	2300      	movs	r3, #0
 800445e:	e010      	b.n	8004482 <validateAndWriteToOD+0x1ea>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <validateAndWriteToOD+0x1e8>
 8004468:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d107      	bne.n	8004480 <validateAndWriteToOD+0x1e8>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a06      	ldr	r2, [pc, #24]	; (800448c <validateAndWriteToOD+0x1f4>)
 8004474:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	751a      	strb	r2, [r3, #20]
        return false;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <validateAndWriteToOD+0x1ea>
    }

    return true;
 8004480:	2301      	movs	r3, #1
}
 8004482:	4618      	mov	r0, r3
 8004484:	372c      	adds	r7, #44	; 0x2c
 8004486:	46bd      	mov	sp, r7
 8004488:	bd90      	pop	{r4, r7, pc}
 800448a:	bf00      	nop
 800448c:	06070012 	.word	0x06070012
 8004490:	06070013 	.word	0x06070013

08004494 <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 8004494:	b590      	push	{r4, r7, lr}
 8004496:	b08d      	sub	sp, #52	; 0x34
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && countRemain < countMinimum) {
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f040 809a 	bne.w	80045f0 <readFromOd+0x15c>
 80044bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	f080 8095 	bcs.w	80045f0 <readFromOd+0x15c>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044d8:	4413      	add	r3, r2
 80044da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044dc:	4619      	mov	r1, r3
 80044de:	f007 f8ed 	bl	800b6bc <memmove>
        SDO->bufOffsetRd = 0;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        SDO->bufOffsetWr = countRemain;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	f1c3 0320 	rsb	r3, r3, #32
 80044f8:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
        uint8_t *bufShifted = SDO->buf + countRemain;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	4413      	add	r3, r2
 8004508:	61fb      	str	r3, [r7, #28]
        bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3318      	adds	r3, #24
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fb9d 	bl	8003c4e <OD_mappable>
 8004514:	61b8      	str	r0, [r7, #24]

        if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f103 0018 	add.w	r0, r3, #24
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	6a3a      	ldr	r2, [r7, #32]
 8004526:	69f9      	ldr	r1, [r7, #28]
 8004528:	47a0      	blx	r4
 800452a:	4603      	mov	r3, r0
 800452c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                      countRdRequest, &countRd);
        if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 8004530:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004534:	2b00      	cmp	r3, #0
 8004536:	d011      	beq.n	800455c <readFromOd+0xc8>
 8004538:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d00c      	beq.n	800455c <readFromOd+0xc8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004542:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004546:	4618      	mov	r0, r3
 8004548:	f7fd feee 	bl	8002328 <OD_getSDOabCode>
 800454c:	4602      	mov	r2, r0
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	751a      	strb	r2, [r3, #20]
            return false;
 8004558:	2300      	movs	r3, #0
 800455a:	e04a      	b.n	80045f2 <readFromOd+0x15e>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d022      	beq.n	80045a8 <readFromOd+0x114>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004568:	b25b      	sxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	da1c      	bge.n	80045a8 <readFromOd+0x114>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	4413      	add	r3, r2
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 8004578:	69f8      	ldr	r0, [r7, #28]
 800457a:	f7fb fe31 	bl	80001e0 <strlen>
 800457e:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <readFromOd+0xf6>
 8004586:	2301      	movs	r3, #1
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28
            if (countStr < countRd) {
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800458e:	429a      	cmp	r2, r3
 8004590:	d20a      	bcs.n	80045a8 <readFromOd+0x114>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	617b      	str	r3, [r7, #20]
                odRet = ODR_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	441a      	add	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	441a      	add	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d004      	beq.n	80045c8 <readFromOd+0x134>
 80045be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d110      	bne.n	80045ea <readFromOd+0x156>
            SDO->finished = false;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	671a      	str	r2, [r3, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d90a      	bls.n	80045f0 <readFromOd+0x15c>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	4a07      	ldr	r2, [pc, #28]	; (80045fc <readFromOd+0x168>)
 80045de:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	751a      	strb	r2, [r3, #20]
                return false;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e003      	b.n	80045f2 <readFromOd+0x15e>
            }
        }
        else {
            SDO->finished = true;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	671a      	str	r2, [r3, #112]	; 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 80045f0:	2301      	movs	r3, #1
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3734      	adds	r7, #52	; 0x34
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd90      	pop	{r4, r7, pc}
 80045fa:	bf00      	nop
 80045fc:	06040047 	.word	0x06040047

08004600 <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 8004600:	b590      	push	{r4, r7, lr}
 8004602:	b099      	sub	sp, #100	; 0x64
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d103      	bne.n	800461c <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8004614:	f06f 0301 	mvn.w	r3, #1
 8004618:	f000 bce6 	b.w	8004fe8 <CO_SDOserver_process+0x9e8>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004622:	2300      	movs	r3, #0
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	2b00      	cmp	r3, #0
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	64fb      	str	r3, [r7, #76]	; 0x4c


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <CO_SDOserver_process+0x56>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	7d1b      	ldrb	r3, [r3, #20]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <CO_SDOserver_process+0x56>
 8004648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 800464e:	2300      	movs	r3, #0
 8004650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004654:	e2bb      	b.n	8004bce <CO_SDOserver_process+0x5ce>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <CO_SDOserver_process+0x64>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 8004670:	2300      	movs	r3, #0
 8004672:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004676:	e2aa      	b.n	8004bce <CO_SDOserver_process+0x5ce>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 82a7 	beq.w	8004bce <CO_SDOserver_process+0x5ce>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	7d1b      	ldrb	r3, [r3, #20]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	f040 80ce 	bne.w	8004828 <CO_SDOserver_process+0x228>
            bool_t upload = false;
 800468c:	2300      	movs	r3, #0
 800468e:	65bb      	str	r3, [r7, #88]	; 0x58

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800469a:	2b20      	cmp	r3, #32
 800469c:	d103      	bne.n	80046a6 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2211      	movs	r2, #17
 80046a2:	751a      	strb	r2, [r3, #20]
 80046a4:	e00f      	b.n	80046c6 <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	d105      	bne.n	80046bc <CO_SDOserver_process+0xbc>
                upload = true;
 80046b0:	2301      	movs	r3, #1
 80046b2:	65bb      	str	r3, [r7, #88]	; 0x58
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2221      	movs	r2, #33	; 0x21
 80046b8:	751a      	strb	r2, [r3, #20]
 80046ba:	e004      	b.n	80046c6 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 80046bc:	4ba5      	ldr	r3, [pc, #660]	; (8004954 <CO_SDOserver_process+0x354>)
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d162      	bne.n	8004792 <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d2:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 80046d4:	b21a      	sxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b21b      	sxth	r3, r3
 80046de:	4313      	orrs	r3, r2
 80046e0:	b21b      	sxth	r3, r3
 80046e2:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	869a      	strh	r2, [r3, #52]	; 0x34
                SDO->subIndex = SDO->CANrxData[3];
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fd fcc4 	bl	800208c <OD_find>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f103 0218 	add.w	r2, r3, #24
 8004710:	2300      	movs	r3, #0
 8004712:	f7fd fd17 	bl	8002144 <OD_getSub>
 8004716:	4603      	mov	r3, r0
 8004718:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 800471c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004724:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8004728:	4618      	mov	r0, r3
 800472a:	f7fd fdfd 	bl	8002328 <OD_getSDOabCode>
 800472e:	4603      	mov	r3, r0
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	751a      	strb	r2, [r3, #20]
 8004738:	e02b      	b.n	8004792 <CO_SDOserver_process+0x192>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8004748:	4b83      	ldr	r3, [pc, #524]	; (8004958 <CO_SDOserver_process+0x358>)
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	751a      	strb	r2, [r3, #20]
 8004752:	e01e      	b.n	8004792 <CO_SDOserver_process+0x192>
                    }
                    else if (upload
 8004754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <CO_SDOserver_process+0x174>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <CO_SDOserver_process+0x174>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 8004768:	4b7c      	ldr	r3, [pc, #496]	; (800495c <CO_SDOserver_process+0x35c>)
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	751a      	strb	r2, [r3, #20]
 8004772:	e00e      	b.n	8004792 <CO_SDOserver_process+0x192>
                    }
                    else if (!upload
 8004774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <CO_SDOserver_process+0x192>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <CO_SDOserver_process+0x192>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8004788:	4b75      	ldr	r3, [pc, #468]	; (8004960 <CO_SDOserver_process+0x360>)
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
                        SDO->state = CO_SDO_ST_ABORT;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8004792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004794:	2b00      	cmp	r3, #0
 8004796:	d047      	beq.n	8004828 <CO_SDOserver_process+0x228>
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	d144      	bne.n	8004828 <CO_SDOserver_process+0x228>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->finished = false;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	671a      	str	r2, [r3, #112]	; 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 80047be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80047c2:	2300      	movs	r3, #0
 80047c4:	2207      	movs	r2, #7
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff fe64 	bl	8004494 <readFromOd>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02a      	beq.n	8004828 <CO_SDOserver_process+0x228>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01a      	beq.n	8004810 <CO_SDOserver_process+0x210>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	665a      	str	r2, [r3, #100]	; 0x64

                        if (SDO->sizeInd == 0) {
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d105      	bne.n	80047f6 <CO_SDOserver_process+0x1f6>
                            SDO->sizeInd = SDO->bufOffsetWr;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	665a      	str	r2, [r3, #100]	; 0x64
 80047f4:	e018      	b.n	8004828 <CO_SDOserver_process+0x228>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004800:	429a      	cmp	r2, r3
 8004802:	d011      	beq.n	8004828 <CO_SDOserver_process+0x228>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004804:	4b57      	ldr	r3, [pc, #348]	; (8004964 <CO_SDOserver_process+0x364>)
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	751a      	strb	r2, [r3, #20]
 800480e:	e00b      	b.n	8004828 <CO_SDOserver_process+0x228>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004816:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 8004818:	2b00      	cmp	r3, #0
 800481a:	db02      	blt.n	8004822 <CO_SDOserver_process+0x222>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	e000      	b.n	8004824 <CO_SDOserver_process+0x224>
 8004822:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	6653      	str	r3, [r2, #100]	; 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	7d1b      	ldrb	r3, [r3, #20]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 81ba 	beq.w	8004ba8 <CO_SDOserver_process+0x5a8>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	7d1b      	ldrb	r3, [r3, #20]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	f000 81b4 	beq.w	8004ba8 <CO_SDOserver_process+0x5a8>
        switch (SDO->state) {
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	7d1b      	ldrb	r3, [r3, #20]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	3b11      	subs	r3, #17
 8004848:	2b12      	cmp	r3, #18
 800484a:	f200 81a7 	bhi.w	8004b9c <CO_SDOserver_process+0x59c>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <CO_SDOserver_process+0x254>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	080048a1 	.word	0x080048a1
 8004858:	08004b9d 	.word	0x08004b9d
 800485c:	08004a55 	.word	0x08004a55
 8004860:	08004b9d 	.word	0x08004b9d
 8004864:	08004b9d 	.word	0x08004b9d
 8004868:	08004b9d 	.word	0x08004b9d
 800486c:	08004b9d 	.word	0x08004b9d
 8004870:	08004b9d 	.word	0x08004b9d
 8004874:	08004b9d 	.word	0x08004b9d
 8004878:	08004b9d 	.word	0x08004b9d
 800487c:	08004b9d 	.word	0x08004b9d
 8004880:	08004b9d 	.word	0x08004b9d
 8004884:	08004b9d 	.word	0x08004b9d
 8004888:	08004b9d 	.word	0x08004b9d
 800488c:	08004b9d 	.word	0x08004b9d
 8004890:	08004b9d 	.word	0x08004b9d
 8004894:	08004b4b 	.word	0x08004b4b
 8004898:	08004b9d 	.word	0x08004b9d
 800489c:	08004b53 	.word	0x08004b53
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8098 	beq.w	80049e0 <CO_SDOserver_process+0x3e0>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 80048b6:	2304      	movs	r3, #4
 80048b8:	657b      	str	r3, [r7, #84]	; 0x54
                if (SDO->CANrxData[0] & 0x01)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <CO_SDOserver_process+0x2de>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	657b      	str	r3, [r7, #84]	; 0x54
 80048dc:	e007      	b.n	80048ee <CO_SDOserver_process+0x2ee>
                else if (sizeInOd > 0 && sizeInOd < 4)
 80048de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d004      	beq.n	80048ee <CO_SDOserver_process+0x2ee>
 80048e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d801      	bhi.n	80048ee <CO_SDOserver_process+0x2ee>
                    dataSizeToWrite = sizeInOd;
 80048ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ec:	657b      	str	r3, [r7, #84]	; 0x54

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 80048ee:	2300      	movs	r3, #0
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	2300      	movs	r3, #0
 80048f4:	84bb      	strh	r3, [r7, #36]	; 0x24
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80048fc:	f107 0320 	add.w	r3, r7, #32
 8004900:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004902:	4618      	mov	r0, r3
 8004904:	f006 fecc 	bl	800b6a0 <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800490e:	b25b      	sxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	da17      	bge.n	8004944 <CO_SDOserver_process+0x344>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 8004914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <CO_SDOserver_process+0x322>
 800491a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800491c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491e:	429a      	cmp	r2, r3
 8004920:	d210      	bcs.n	8004944 <CO_SDOserver_process+0x344>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8004922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	63bb      	str	r3, [r7, #56]	; 0x38
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 800492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <CO_SDOserver_process+0x334>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <CO_SDOserver_process+0x336>
 8004934:	2302      	movs	r3, #2
 8004936:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004938:	4413      	add	r3, r2
 800493a:	657b      	str	r3, [r7, #84]	; 0x54
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004940:	621a      	str	r2, [r3, #32]
                ) {
 8004942:	e021      	b.n	8004988 <CO_SDOserver_process+0x388>
                }
                else if (sizeInOd == 0) {
 8004944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10e      	bne.n	8004968 <CO_SDOserver_process+0x368>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800494e:	621a      	str	r2, [r3, #32]
 8004950:	e01a      	b.n	8004988 <CO_SDOserver_process+0x388>
 8004952:	bf00      	nop
 8004954:	05040001 	.word	0x05040001
 8004958:	06010000 	.word	0x06010000
 800495c:	06010001 	.word	0x06010001
 8004960:	06010002 	.word	0x06010002
 8004964:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8004968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496c:	429a      	cmp	r2, r3
 800496e:	d00b      	beq.n	8004988 <CO_SDOserver_process+0x388>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004974:	429a      	cmp	r2, r3
 8004976:	d901      	bls.n	800497c <CO_SDOserver_process+0x37c>
 8004978:	4b8c      	ldr	r3, [pc, #560]	; (8004bac <CO_SDOserver_process+0x5ac>)
 800497a:	e000      	b.n	800497e <CO_SDOserver_process+0x37e>
 800497c:	4b8c      	ldr	r3, [pc, #560]	; (8004bb0 <CO_SDOserver_process+0x5b0>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	751a      	strb	r2, [r3, #20]
                    break;
 8004986:	e11a      	b.n	8004bbe <CO_SDOserver_process+0x5be>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]
                bool_t lock = OD_mappable(&SDO->OD_IO.stream);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3318      	adds	r3, #24
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff f95c 	bl	8003c4e <OD_mappable>
 8004996:	6378      	str	r0, [r7, #52]	; 0x34

                if (lock) { CO_LOCK_OD(SDO->CANdevTx); }
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f103 0018 	add.w	r0, r3, #24
 80049a2:	f107 031c 	add.w	r3, r7, #28
 80049a6:	f107 0120 	add.w	r1, r7, #32
 80049aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049ac:	47a0      	blx	r4
 80049ae:	4603      	mov	r3, r0
 80049b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
                                               dataSizeToWrite, &countWritten);
                if (lock) { CO_UNLOCK_OD(SDO->CANdevTx); }

                if (odRet != ODR_OK) {
 80049b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <CO_SDOserver_process+0x3d2>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80049bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fd fcb1 	bl	8002328 <OD_getSDOabCode>
 80049c6:	4603      	mov	r3, r0
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	751a      	strb	r2, [r3, #20]
                    break;
 80049d0:	e0f5      	b.n	8004bbe <CO_SDOserver_process+0x5be>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2212      	movs	r2, #18
 80049d6:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 80049de:	e0ee      	b.n	8004bbe <CO_SDOserver_process+0x5be>
                if (SDO->CANrxData[0] & 0x01) {
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d028      	beq.n	8004a40 <CO_SDOserver_process+0x440>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	643b      	str	r3, [r7, #64]	; 0x40
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3340      	adds	r3, #64	; 0x40
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	61bb      	str	r3, [r7, #24]
                    SDO->sizeInd = CO_SWAP_32(size);
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	665a      	str	r2, [r3, #100]	; 0x64
                    if (sizeInOd > 0) {
 8004a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01e      	beq.n	8004a46 <CO_SDOserver_process+0x446>
                        if (SDO->sizeInd > sizeInOd) {
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d205      	bcs.n	8004a1e <CO_SDOserver_process+0x41e>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004a12:	4b66      	ldr	r3, [pc, #408]	; (8004bac <CO_SDOserver_process+0x5ac>)
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	751a      	strb	r2, [r3, #20]
                            break;
 8004a1c:	e0cf      	b.n	8004bbe <CO_SDOserver_process+0x5be>
                        else if (SDO->sizeInd < sizeInOd
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d90e      	bls.n	8004a46 <CO_SDOserver_process+0x446>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a2e:	b25b      	sxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	db08      	blt.n	8004a46 <CO_SDOserver_process+0x446>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8004a34:	4b5e      	ldr	r3, [pc, #376]	; (8004bb0 <CO_SDOserver_process+0x5b0>)
 8004a36:	62bb      	str	r3, [r7, #40]	; 0x28
                            SDO->state = CO_SDO_ST_ABORT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	751a      	strb	r2, [r3, #20]
                            break;
 8004a3e:	e0be      	b.n	8004bbe <CO_SDOserver_process+0x5be>
                    SDO->sizeInd = 0;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	665a      	str	r2, [r3, #100]	; 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2212      	movs	r2, #18
 8004a4a:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	671a      	str	r2, [r3, #112]	; 0x70
            break;
 8004a52:	e0b4      	b.n	8004bbe <CO_SDOserver_process+0x5be>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d16d      	bne.n	8004b3e <CO_SDOserver_process+0x53e>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	671a      	str	r2, [r3, #112]	; 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
                if (toggle != SDO->toggle) {
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004a90:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d005      	beq.n	8004aa4 <CO_SDOserver_process+0x4a4>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004a98:	4b46      	ldr	r3, [pc, #280]	; (8004bb4 <CO_SDOserver_process+0x5b4>)
 8004a9a:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	751a      	strb	r2, [r3, #20]
                    break;
 8004aa2:	e08c      	b.n	8004bbe <CO_SDOserver_process+0x5be>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aaa:	085b      	lsrs	r3, r3, #1
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	647b      	str	r3, [r7, #68]	; 0x44
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ac2:	18d0      	adds	r0, r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	333d      	adds	r3, #61	; 0x3d
 8004ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004aca:	4619      	mov	r1, r3
 8004acc:	f006 fde8 	bl	800b6a0 <memcpy>
                SDO->bufOffsetWr += count;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->sizeTran += count;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ae6:	441a      	add	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	669a      	str	r2, [r3, #104]	; 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <CO_SDOserver_process+0x50c>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d905      	bls.n	8004b0c <CO_SDOserver_process+0x50c>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004b00:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <CO_SDOserver_process+0x5ac>)
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	751a      	strb	r2, [r3, #20]
                    break;
 8004b0a:	e058      	b.n	8004bbe <CO_SDOserver_process+0x5be>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d106      	bne.n	8004b22 <CO_SDOserver_process+0x522>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b1a:	f1c3 0320 	rsb	r3, r3, #32
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d809      	bhi.n	8004b36 <CO_SDOserver_process+0x536>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 8004b22:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004b26:	2300      	movs	r3, #0
 8004b28:	2200      	movs	r2, #0
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7ff fbb4 	bl	8004298 <validateAndWriteToOD>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d042      	beq.n	8004bbc <CO_SDOserver_process+0x5bc>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2214      	movs	r2, #20
 8004b3a:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004b3c:	e03f      	b.n	8004bbe <CO_SDOserver_process+0x5be>
                abortCode = CO_SDO_AB_CMD;
 8004b3e:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <CO_SDOserver_process+0x5b8>)
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	751a      	strb	r2, [r3, #20]
            break;
 8004b48:	e039      	b.n	8004bbe <CO_SDOserver_process+0x5be>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2222      	movs	r2, #34	; 0x22
 8004b4e:	751a      	strb	r2, [r3, #20]
            break;
 8004b50:	e035      	b.n	8004bbe <CO_SDOserver_process+0x5be>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b58:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004b5c:	2b60      	cmp	r3, #96	; 0x60
 8004b5e:	d117      	bne.n	8004b90 <CO_SDOserver_process+0x590>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
                if (toggle != SDO->toggle) {
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004b74:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d005      	beq.n	8004b88 <CO_SDOserver_process+0x588>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	; (8004bb4 <CO_SDOserver_process+0x5b4>)
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2201      	movs	r2, #1
 8004b84:	751a      	strb	r2, [r3, #20]
                    break;
 8004b86:	e01a      	b.n	8004bbe <CO_SDOserver_process+0x5be>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2224      	movs	r2, #36	; 0x24
 8004b8c:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004b8e:	e016      	b.n	8004bbe <CO_SDOserver_process+0x5be>
                abortCode = CO_SDO_AB_CMD;
 8004b90:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <CO_SDOserver_process+0x5b8>)
 8004b92:	62bb      	str	r3, [r7, #40]	; 0x28
                SDO->state = CO_SDO_ST_ABORT;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	751a      	strb	r2, [r3, #20]
            break;
 8004b9a:	e010      	b.n	8004bbe <CO_SDOserver_process+0x5be>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <CO_SDOserver_process+0x5b8>)
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	751a      	strb	r2, [r3, #20]
 8004ba6:	e00a      	b.n	8004bbe <CO_SDOserver_process+0x5be>
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 8004ba8:	bf00      	nop
 8004baa:	e008      	b.n	8004bbe <CO_SDOserver_process+0x5be>
 8004bac:	06070012 	.word	0x06070012
 8004bb0:	06070013 	.word	0x06070013
 8004bb4:	05030000 	.word	0x05030000
 8004bb8:	05040001 	.word	0x05040001
                        break;
 8004bbc:	bf00      	nop
        SDO->timeoutTimer = 0;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        timeDifference_us = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 8004bce:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d11e      	bne.n	8004c14 <CO_SDOserver_process+0x614>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d205      	bcs.n	8004bee <CO_SDOserver_process+0x5ee>
            SDO->timeoutTimer += timeDifference_us;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	441a      	add	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	679a      	str	r2, [r3, #120]	; 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d304      	bcc.n	8004c04 <CO_SDOserver_process+0x604>
            abortCode = CO_SDO_AB_TIMEOUT;
 8004bfa:	4b9c      	ldr	r3, [pc, #624]	; (8004e6c <CO_SDOserver_process+0x86c>)
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
            SDO->state = CO_SDO_ST_ABORT;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <CO_SDOserver_process+0x614>
            ret = CO_SDO_RT_transmittBufferFull;
 8004c0e:	2304      	movs	r3, #4
 8004c10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8004c14:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	f040 81a8 	bne.w	8004f6e <CO_SDOserver_process+0x96e>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	3305      	adds	r3, #5
 8004c24:	2208      	movs	r2, #8
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f006 fd61 	bl	800b6f0 <memset>

        switch (SDO->state) {
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	7d1b      	ldrb	r3, [r3, #20]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	3b12      	subs	r3, #18
 8004c36:	2b12      	cmp	r3, #18
 8004c38:	f200 819b 	bhi.w	8004f72 <CO_SDOserver_process+0x972>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <CO_SDOserver_process+0x644>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c91 	.word	0x08004c91
 8004c48:	08004f73 	.word	0x08004f73
 8004c4c:	08004d13 	.word	0x08004d13
 8004c50:	08004f73 	.word	0x08004f73
 8004c54:	08004f73 	.word	0x08004f73
 8004c58:	08004f73 	.word	0x08004f73
 8004c5c:	08004f73 	.word	0x08004f73
 8004c60:	08004f73 	.word	0x08004f73
 8004c64:	08004f73 	.word	0x08004f73
 8004c68:	08004f73 	.word	0x08004f73
 8004c6c:	08004f73 	.word	0x08004f73
 8004c70:	08004f73 	.word	0x08004f73
 8004c74:	08004f73 	.word	0x08004f73
 8004c78:	08004f73 	.word	0x08004f73
 8004c7c:	08004f73 	.word	0x08004f73
 8004c80:	08004f73 	.word	0x08004f73
 8004c84:	08004d6f 	.word	0x08004d6f
 8004c88:	08004f73 	.word	0x08004f73
 8004c8c:	08004e3d 	.word	0x08004e3d
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2260      	movs	r2, #96	; 0x60
 8004c96:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004ca8:	0a1b      	lsrs	r3, r3, #8
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004cbe:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	679a      	str	r2, [r3, #120]	; 0x78
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	f7fb fd88 	bl	80007e6 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d006      	beq.n	8004cec <CO_SDOserver_process+0x6ec>
                SDO->state = CO_SDO_ST_IDLE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 8004cea:	e145      	b.n	8004f78 <CO_SDOserver_process+0x978>
                SDO->toggle = 0x00;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->sizeTran = 0;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->bufOffsetRd = 0;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2213      	movs	r2, #19
 8004d0e:	751a      	strb	r2, [r3, #20]
            break;
 8004d10:	e132      	b.n	8004f78 <CO_SDOserver_process+0x978>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f042 0220 	orr.w	r2, r2, #32
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <CO_SDOserver_process+0x732>
 8004d2e:	2210      	movs	r2, #16
 8004d30:	e000      	b.n	8004d34 <CO_SDOserver_process+0x734>
 8004d32:	2200      	movs	r2, #0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f7fb fd4b 	bl	80007e6 <CO_CANsend>
            if (SDO->finished) {
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d006      	beq.n	8004d66 <CO_SDOserver_process+0x766>
                SDO->state = CO_SDO_ST_IDLE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 8004d64:	e108      	b.n	8004f78 <CO_SDOserver_process+0x978>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2213      	movs	r2, #19
 8004d6a:	751a      	strb	r2, [r3, #20]
            break;
 8004d6c:	e104      	b.n	8004f78 <CO_SDOserver_process+0x978>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d024      	beq.n	8004dc0 <CO_SDOserver_process+0x7c0>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d820      	bhi.n	8004dc0 <CO_SDOserver_process+0x7c0>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f1c3 0304 	rsb	r3, r3, #4
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f103 0009 	add.w	r0, r3, #9
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dac:	461a      	mov	r2, r3
 8004dae:	f006 fc77 	bl	800b6a0 <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004db8:	2300      	movs	r3, #0
 8004dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004dbe:	e020      	b.n	8004e02 <CO_SDOserver_process+0x802>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00e      	beq.n	8004de6 <CO_SDOserver_process+0x7e6>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	617b      	str	r3, [r7, #20]
                    SDO->CANtxBuff->data[0] = 0x41;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2241      	movs	r2, #65	; 0x41
 8004dd8:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	3309      	adds	r3, #9
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e003      	b.n	8004dee <CO_SDOserver_process+0x7ee>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2240      	movs	r2, #64	; 0x40
 8004dec:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->timeoutTimer = 0;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2223      	movs	r2, #35	; 0x23
 8004e00:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	b2d2      	uxtb	r2, r2
 8004e0c:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004e12:	0a1b      	lsrs	r3, r3, #8
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004e28:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f7fb fcd6 	bl	80007e6 <CO_CANsend>
            break;
 8004e3a:	e09d      	b.n	8004f78 <CO_SDOserver_process+0x978>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false))
 8004e3c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004e40:	2300      	movs	r3, #0
 8004e42:	2207      	movs	r2, #7
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff fb25 	bl	8004494 <readFromOd>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8092 	beq.w	8004f76 <CO_SDOserver_process+0x976>
                break;

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8004e5c:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d103      	bne.n	8004e70 <CO_SDOserver_process+0x870>
 8004e68:	2210      	movs	r2, #16
 8004e6a:	e002      	b.n	8004e72 <CO_SDOserver_process+0x872>
 8004e6c:	05040000 	.word	0x05040000
 8004e70:	2200      	movs	r2, #0
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	653b      	str	r3, [r7, #80]	; 0x50
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 8004e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d906      	bls.n	8004e9c <CO_SDOserver_process+0x89c>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01b      	beq.n	8004ece <CO_SDOserver_process+0x8ce>
 8004e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e98:	2b07      	cmp	r3, #7
 8004e9a:	d118      	bne.n	8004ece <CO_SDOserver_process+0x8ce>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	795a      	ldrb	r2, [r3, #5]
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f1c3 0307 	rsb	r3, r3, #7
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004ecc:	e007      	b.n	8004ede <CO_SDOserver_process+0x8de>
            }
            else {
                SDO->timeoutTimer = 0;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2223      	movs	r2, #35	; 0x23
 8004ed8:	751a      	strb	r2, [r3, #20]
                count = 7;
 8004eda:	2307      	movs	r3, #7
 8004edc:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	1d98      	adds	r0, r3, #6
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ef0:	4413      	add	r3, r2
 8004ef2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f006 fbd3 	bl	800b6a0 <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f02:	441a      	add	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran += count;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f10:	441a      	add	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	669a      	str	r2, [r3, #104]	; 0x68

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01e      	beq.n	8004f5c <CO_SDOserver_process+0x95c>
                if (SDO->sizeTran > SDO->sizeInd) {
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d905      	bls.n	8004f36 <CO_SDOserver_process+0x936>
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004f2a:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <CO_SDOserver_process+0x9f0>)
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
                    SDO->state = CO_SDO_ST_ABORT;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	751a      	strb	r2, [r3, #20]
                    break;
 8004f34:	e020      	b.n	8004f78 <CO_SDOserver_process+0x978>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 8004f36:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10e      	bne.n	8004f5c <CO_SDOserver_process+0x95c>
                         && SDO->sizeTran < SDO->sizeInd
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d208      	bcs.n	8004f5c <CO_SDOserver_process+0x95c>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 8004f4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ff4 <CO_SDOserver_process+0x9f4>)
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28
                    ret = CO_SDO_RT_waitingResponse;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                    SDO->state = CO_SDO_ST_ABORT;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	751a      	strb	r2, [r3, #20]
                    break;
 8004f5a:	e00d      	b.n	8004f78 <CO_SDOserver_process+0x978>
                }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f7fb fc3d 	bl	80007e6 <CO_CANsend>
            break;
 8004f6c:	e004      	b.n	8004f78 <CO_SDOserver_process+0x978>

        default: {
            break;
        }
        } /* switch (SDO->state) */
    }
 8004f6e:	bf00      	nop
 8004f70:	e002      	b.n	8004f78 <CO_SDOserver_process+0x978>
            break;
 8004f72:	bf00      	nop
 8004f74:	e000      	b.n	8004f78 <CO_SDOserver_process+0x978>
                break;
 8004f76:	bf00      	nop

    if (ret == CO_SDO_RT_waitingResponse) {
 8004f78:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d131      	bne.n	8004fe4 <CO_SDOserver_process+0x9e4>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	7d1b      	ldrb	r3, [r3, #20]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d12c      	bne.n	8004fe4 <CO_SDOserver_process+0x9e4>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004fa6:	0a1b      	lsrs	r3, r3, #8
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004fbc:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	3309      	adds	r3, #9
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f7fb fc07 	bl	80007e6 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8004fde:	23f6      	movs	r3, #246	; 0xf6
 8004fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8004fe4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3764      	adds	r7, #100	; 0x64
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd90      	pop	{r4, r7, pc}
 8004ff0:	06070012 	.word	0x06070012
 8004ff4:	06070013 	.word	0x06070013

08004ff8 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8005004:	73fb      	strb	r3, [r7, #15]
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <OD_getIndex+0x14>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	e000      	b.n	8005046 <OD_getIndex+0x16>
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <OD_extension_init>:
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <OD_extension_init+0x14>
 8005062:	2305      	movs	r3, #5
 8005064:	e003      	b.n	800506e <OD_extension_init+0x1c>
    entry->extension = extension;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <OD_get_u8>:
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b086      	sub	sp, #24
 800507e:	af02      	add	r7, sp, #8
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	460b      	mov	r3, r1
 8005088:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800508a:	7af9      	ldrb	r1, [r7, #11]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	2301      	movs	r3, #1
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f7fd f965 	bl	8002364 <OD_get_value>
 800509a:	4603      	mov	r3, r0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <OD_get_u32>:
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	607a      	str	r2, [r7, #4]
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	460b      	mov	r3, r1
 80050b2:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80050b4:	7af9      	ldrb	r1, [r7, #11]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	2304      	movs	r3, #4
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f7fd f950 	bl	8002364 <OD_get_value>
 80050c4:	4603      	mov	r3, r0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b082      	sub	sp, #8
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	7c9b      	ldrb	r3, [r3, #18]
 80050da:	3301      	adds	r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	749a      	strb	r2, [r3, #18]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	7c9a      	ldrb	r2, [r3, #18]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	7c5b      	ldrb	r3, [r3, #17]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d902      	bls.n	80050f4 <CO_SYNCsend+0x26>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	bf0c      	ite	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	2300      	movne	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	7c92      	ldrb	r2, [r2, #18]
 8005116:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f7fb fb5f 	bl	80007e6 <CO_CANsend>
 8005128:	4603      	mov	r3, r0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8005132:	b480      	push	{r7}
 8005134:	b087      	sub	sp, #28
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	791b      	ldrb	r3, [r3, #4]
 8005144:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	7c5b      	ldrb	r3, [r3, #17]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10c      	bne.n	800516c <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8005158:	2301      	movs	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	e019      	b.n	8005192 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005164:	b2da      	uxtb	r2, r3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	721a      	strb	r2, [r3, #8]
 800516a:	e012      	b.n	8005192 <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d109      	bne.n	8005186 <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	3305      	adds	r3, #5
 8005176:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	781a      	ldrb	r2, [r3, #0]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8005180:	2301      	movs	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	e005      	b.n	8005192 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800518c:	b2da      	uxtb	r2, r3
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00c      	beq.n	80051b2 <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	bf0c      	ite	eq
 80051a0:	2301      	moveq	r3, #1
 80051a2:	2300      	movne	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2201      	movs	r2, #1
 80051b0:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80051c0:	b590      	push	{r4, r7, lr}
 80051c2:	b08f      	sub	sp, #60	; 0x3c
 80051c4:	af04      	add	r7, sp, #16
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00c      	beq.n	80051ee <OD_write_1005+0x2e>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	7c5b      	ldrb	r3, [r3, #17]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <OD_write_1005+0x2e>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d102      	bne.n	80051ee <OD_write_1005+0x2e>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80051ee:	2309      	movs	r3, #9
 80051f0:	e0a3      	b.n	800533a <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 80051f8:	68b8      	ldr	r0, [r7, #8]
 80051fa:	f7ff ff0b 	bl	8005014 <CO_getUint32>
 80051fe:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005208:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	bf14      	ite	ne
 8005214:	2301      	movne	r3, #1
 8005216:	2300      	moveq	r3, #0
 8005218:	b2db      	uxtb	r3, r3
 800521a:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 800521c:	6a3a      	ldr	r2, [r7, #32]
 800521e:	4b49      	ldr	r3, [pc, #292]	; (8005344 <OD_write_1005+0x184>)
 8005220:	4013      	ands	r3, r2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d133      	bne.n	800528e <OD_write_1005+0xce>
 8005226:	8bfb      	ldrh	r3, [r7, #30]
 8005228:	2b7f      	cmp	r3, #127	; 0x7f
 800522a:	d930      	bls.n	800528e <OD_write_1005+0xce>
 800522c:	8bfb      	ldrh	r3, [r7, #30]
 800522e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005232:	d903      	bls.n	800523c <OD_write_1005+0x7c>
 8005234:	8bfb      	ldrh	r3, [r7, #30]
 8005236:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800523a:	d928      	bls.n	800528e <OD_write_1005+0xce>
 800523c:	8bfb      	ldrh	r3, [r7, #30]
 800523e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8005242:	d903      	bls.n	800524c <OD_write_1005+0x8c>
 8005244:	8bfb      	ldrh	r3, [r7, #30]
 8005246:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800524a:	d320      	bcc.n	800528e <OD_write_1005+0xce>
 800524c:	8bfb      	ldrh	r3, [r7, #30]
 800524e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005252:	d903      	bls.n	800525c <OD_write_1005+0x9c>
 8005254:	8bfb      	ldrh	r3, [r7, #30]
 8005256:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800525a:	d318      	bcc.n	800528e <OD_write_1005+0xce>
 800525c:	8bfb      	ldrh	r3, [r7, #30]
 800525e:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8005262:	d303      	bcc.n	800526c <OD_write_1005+0xac>
 8005264:	8bfb      	ldrh	r3, [r7, #30]
 8005266:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800526a:	d310      	bcc.n	800528e <OD_write_1005+0xce>
 800526c:	8bfb      	ldrh	r3, [r7, #30]
 800526e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005272:	d80c      	bhi.n	800528e <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <OD_write_1005+0xd2>
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <OD_write_1005+0xd2>
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005288:	8bfa      	ldrh	r2, [r7, #30]
 800528a:	429a      	cmp	r2, r3
 800528c:	d001      	beq.n	8005292 <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 800528e:	230f      	movs	r3, #15
 8005290:	e053      	b.n	800533a <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005298:	8bfa      	ldrh	r2, [r7, #30]
 800529a:	429a      	cmp	r2, r3
 800529c:	d03a      	beq.n	8005314 <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 80052a6:	8bfa      	ldrh	r2, [r7, #30]
 80052a8:	4b27      	ldr	r3, [pc, #156]	; (8005348 <OD_write_1005+0x188>)
 80052aa:	9302      	str	r3, [sp, #8]
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	2300      	movs	r3, #0
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80052b8:	f7fb fa0e 	bl	80006d8 <CO_CANrxBufferInit>
 80052bc:	4603      	mov	r3, r0
 80052be:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 80052c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 80052c8:	2309      	movs	r3, #9
 80052ca:	e036      	b.n	800533a <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bf14      	ite	ne
 80052de:	2301      	movne	r3, #1
 80052e0:	2300      	moveq	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	461c      	mov	r4, r3
 80052e6:	8bfa      	ldrh	r2, [r7, #30]
 80052e8:	2300      	movs	r3, #0
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	9400      	str	r4, [sp, #0]
 80052ee:	2300      	movs	r3, #0
 80052f0:	f7fb fa44 	bl	800077c <CO_CANtxBufferInit>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	2200      	movs	r2, #0
 8005306:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8005308:	2309      	movs	r3, #9
 800530a:	e016      	b.n	800533a <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	8bfa      	ldrh	r2, [r7, #30]
 8005310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d005      	beq.n	800532c <OD_write_1005+0x16c>
        SYNC->counter = 0;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	2200      	movs	r2, #0
 8005324:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	2200      	movs	r2, #0
 800532a:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f7fc fe30 	bl	8001f98 <OD_writeOriginal>
 8005338:	4603      	mov	r3, r0
}
 800533a:	4618      	mov	r0, r3
 800533c:	372c      	adds	r7, #44	; 0x2c
 800533e:	46bd      	mov	sp, r7
 8005340:	bd90      	pop	{r4, r7, pc}
 8005342:	bf00      	nop
 8005344:	bffff800 	.word	0xbffff800
 8005348:	08005133 	.word	0x08005133

0800534c <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00c      	beq.n	800537a <OD_write_1019+0x2e>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	7c5b      	ldrb	r3, [r3, #17]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d108      	bne.n	800537a <OD_write_1019+0x2e>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d005      	beq.n	800537a <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d102      	bne.n	800537a <OD_write_1019+0x2e>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 800537a:	2309      	movs	r3, #9
 800537c:	e041      	b.n	8005402 <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8005384:	68b8      	ldr	r0, [r7, #8]
 8005386:	f7ff fe37 	bl	8004ff8 <CO_getUint8>
 800538a:	4603      	mov	r3, r0
 800538c:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 800538e:	7cfb      	ldrb	r3, [r7, #19]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d002      	beq.n	800539a <OD_write_1019+0x4e>
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	2bf0      	cmp	r3, #240	; 0xf0
 8005398:	d901      	bls.n	800539e <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 800539a:	230f      	movs	r3, #15
 800539c:	e031      	b.n	8005402 <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 80053a8:	2317      	movs	r3, #23
 80053aa:	e02a      	b.n	8005402 <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461c      	mov	r4, r3
 80053ca:	2300      	movs	r3, #0
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	9400      	str	r4, [sp, #0]
 80053d0:	2300      	movs	r3, #0
 80053d2:	f7fb f9d3 	bl	800077c <CO_CANtxBufferInit>
 80053d6:	4602      	mov	r2, r0
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2200      	movs	r2, #0
 80053e8:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 80053ea:	2309      	movs	r3, #9
 80053ec:	e009      	b.n	8005402 <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	7cfa      	ldrb	r2, [r7, #19]
 80053f2:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7fc fdcc 	bl	8001f98 <OD_writeOriginal>
 8005400:	4603      	mov	r3, r0
}
 8005402:	4618      	mov	r0, r3
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd90      	pop	{r4, r7, pc}
	...

0800540c <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08c      	sub	sp, #48	; 0x30
 8005410:	af04      	add	r7, sp, #16
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00e      	beq.n	800543e <CO_SYNC_init+0x32>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00b      	beq.n	800543e <CO_SYNC_init+0x32>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <CO_SYNC_init+0x32>
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800543e:	f04f 33ff 	mov.w	r3, #4294967295
 8005442:	e0fe      	b.n	8005642 <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8005444:	2260      	movs	r2, #96	; 0x60
 8005446:	2100      	movs	r1, #0
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f006 f951 	bl	800b6f0 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8005452:	f107 0218 	add.w	r2, r7, #24
 8005456:	2301      	movs	r3, #1
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff fe22 	bl	80050a4 <OD_get_u32>
 8005460:	4603      	mov	r3, r0
 8005462:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8005464:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00c      	beq.n	8005486 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 800546c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d006      	beq.n	8005480 <CO_SYNC_init+0x74>
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fddc 	bl	8005030 <OD_getIndex>
 8005478:	4603      	mov	r3, r0
 800547a:	461a      	mov	r2, r3
 800547c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800547e:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005480:	f06f 030b 	mvn.w	r3, #11
 8005484:	e0dd      	b.n	8005642 <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a6f      	ldr	r2, [pc, #444]	; (800564c <CO_SYNC_init+0x240>)
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a6e      	ldr	r2, [pc, #440]	; (8005650 <CO_SYNC_init+0x244>)
 8005496:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3334      	adds	r3, #52	; 0x34
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff fdd7 	bl	8005052 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 80054a4:	2300      	movs	r3, #0
 80054a6:	2204      	movs	r2, #4
 80054a8:	2100      	movs	r1, #0
 80054aa:	6838      	ldr	r0, [r7, #0]
 80054ac:	f7fc ffc1 	bl	8002432 <OD_getPtr>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10c      	bne.n	80054d8 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 80054be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d006      	beq.n	80054d2 <CO_SYNC_init+0xc6>
 80054c4:	6838      	ldr	r0, [r7, #0]
 80054c6:	f7ff fdb3 	bl	8005030 <OD_getIndex>
 80054ca:	4603      	mov	r3, r0
 80054cc:	461a      	mov	r2, r3
 80054ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d0:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80054d2:	f06f 030b 	mvn.w	r3, #11
 80054d6:	e0b4      	b.n	8005642 <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 80054d8:	2300      	movs	r3, #0
 80054da:	2204      	movs	r2, #4
 80054dc:	2100      	movs	r1, #0
 80054de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e0:	f7fc ffa7 	bl	8002432 <OD_getPtr>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d010      	beq.n	8005512 <CO_SYNC_init+0x106>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10c      	bne.n	8005512 <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 80054f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d006      	beq.n	800550c <CO_SYNC_init+0x100>
 80054fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005500:	f7ff fd96 	bl	8005030 <OD_getIndex>
 8005504:	4603      	mov	r3, r0
 8005506:	461a      	mov	r2, r3
 8005508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800550a:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 800550c:	f06f 030b 	mvn.w	r3, #11
 8005510:	e097      	b.n	8005642 <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 8005516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d033      	beq.n	8005584 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 800551c:	f107 0217 	add.w	r2, r7, #23
 8005520:	2301      	movs	r3, #1
 8005522:	2100      	movs	r1, #0
 8005524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005526:	f7ff fda8 	bl	800507a <OD_get_u8>
 800552a:	4603      	mov	r3, r0
 800552c:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 800552e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 8005536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d006      	beq.n	800554a <CO_SYNC_init+0x13e>
 800553c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800553e:	f7ff fd77 	bl	8005030 <OD_getIndex>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005548:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 800554a:	f06f 030b 	mvn.w	r3, #11
 800554e:	e078      	b.n	8005642 <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d102      	bne.n	800555c <CO_SYNC_init+0x150>
 8005556:	2302      	movs	r3, #2
 8005558:	75fb      	strb	r3, [r7, #23]
 800555a:	e004      	b.n	8005566 <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	2bf0      	cmp	r3, #240	; 0xf0
 8005560:	d901      	bls.n	8005566 <CO_SYNC_init+0x15a>
 8005562:	23f0      	movs	r3, #240	; 0xf0
 8005564:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a37      	ldr	r2, [pc, #220]	; (800564c <CO_SYNC_init+0x240>)
 8005570:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a37      	ldr	r2, [pc, #220]	; (8005654 <CO_SYNC_init+0x248>)
 8005576:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3350      	adds	r3, #80	; 0x50
 800557c:	4619      	mov	r1, r3
 800557e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005580:	f7ff fd67 	bl	8005052 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8005584:	7dfa      	ldrb	r2, [r7, #23]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ba:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055c0:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055c6:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80055cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055d8:	b29a      	uxth	r2, r3
 80055da:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80055dc:	4b1e      	ldr	r3, [pc, #120]	; (8005658 <CO_SYNC_init+0x24c>)
 80055de:	9302      	str	r3, [sp, #8]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	2300      	movs	r3, #0
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80055ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ee:	f7fb f873 	bl	80006d8 <CO_CANrxBufferInit>
 80055f2:	4603      	mov	r3, r0
 80055f4:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 80055f6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <CO_SYNC_init+0x1f8>
        return ret;
 80055fe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005602:	e01e      	b.n	8005642 <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	b29b      	uxth	r3, r3
 8005608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800560c:	b29a      	uxth	r2, r3
 800560e:	7dfb      	ldrb	r3, [r7, #23]
 8005610:	2b00      	cmp	r3, #0
 8005612:	bf14      	ite	ne
 8005614:	2301      	movne	r3, #1
 8005616:	2300      	moveq	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	4618      	mov	r0, r3
 800561c:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800561e:	2300      	movs	r3, #0
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	9000      	str	r0, [sp, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005628:	f7fb f8a8 	bl	800077c <CO_CANtxBufferInit>
 800562c:	4602      	mov	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800563a:	f04f 33ff 	mov.w	r3, #4294967295
 800563e:	e000      	b.n	8005642 <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	08001ee9 	.word	0x08001ee9
 8005650:	080051c1 	.word	0x080051c1
 8005654:	0800534d 	.word	0x0800534d
 8005658:	08005133 	.word	0x08005133

0800565c <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	; 0x28
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 800566a:	2300      	movs	r3, #0
 800566c:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8088 	beq.w	8005786 <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	429a      	cmp	r2, r3
 8005688:	d902      	bls.n	8005690 <CO_SYNC_process+0x34>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 800569e:	2301      	movs	r3, #1
 80056a0:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <CO_SYNC_process+0x5c>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	e000      	b.n	80056ba <CO_SYNC_process+0x5e>
 80056b8:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 80056ba:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d031      	beq.n	8005726 <CO_SYNC_process+0xca>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d828      	bhi.n	8005726 <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 80056d4:	2301      	movs	r3, #1
 80056d6:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7ff fcf8 	bl	80050ce <CO_SYNCsend>
 80056de:	e022      	b.n	8005726 <CO_SYNC_process+0xca>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	7c1b      	ldrb	r3, [r3, #16]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d11e      	bne.n	8005726 <CO_SYNC_process+0xca>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4413      	add	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d202      	bcs.n	8005700 <CO_SYNC_process+0xa4>
 80056fa:	f04f 33ff 	mov.w	r3, #4294967295
 80056fe:	61bb      	str	r3, [r7, #24]

                if (SYNC->timer > periodTimeout) {
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	429a      	cmp	r2, r3
 8005708:	d20d      	bcs.n	8005726 <CO_SYNC_process+0xca>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8005718:	2218      	movs	r2, #24
 800571a:	2101      	movs	r1, #1
 800571c:	f7fb fde4 	bl	80012e8 <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2202      	movs	r2, #2
 8005724:	741a      	strb	r2, [r3, #16]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d015      	beq.n	800575a <CO_SYNC_process+0xfe>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <CO_SYNC_process+0xfe>
            && SYNC->timer > *SYNC->OD_1007_window
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d909      	bls.n	800575a <CO_SYNC_process+0xfe>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 800574e:	2302      	movs	r3, #2
 8005750:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	615a      	str	r2, [r3, #20]
 8005758:	e002      	b.n	8005760 <CO_SYNC_process+0x104>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	7a1b      	ldrb	r3, [r3, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d01a      	beq.n	800579e <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	7a1b      	ldrb	r3, [r3, #8]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	f248 2340 	movw	r3, #33344	; 0x8240
 8005776:	2219      	movs	r2, #25
 8005778:	2101      	movs	r1, #1
 800577a:	f7fb fdb5 	bl	80012e8 <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	721a      	strb	r2, [r3, #8]
 8005784:	e00b      	b.n	800579e <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 800579e:	7ffb      	ldrb	r3, [r7, #31]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d10f      	bne.n	80057c4 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2) {
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	7c1b      	ldrb	r3, [r3, #16]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d108      	bne.n	80057be <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	2300      	movs	r3, #0
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	2300      	movs	r3, #0
 80057b6:	2218      	movs	r2, #24
 80057b8:	2100      	movs	r1, #0
 80057ba:	f7fb fd95 	bl	80012e8 <CO_error>
        }
        SYNC->timeoutError = 1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 80057c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3720      	adds	r7, #32
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 80057ce:	b480      	push	{r7}
 80057d0:	b085      	sub	sp, #20
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 80057dc:	81fb      	strh	r3, [r7, #14]
 80057de:	89fb      	ldrh	r3, [r7, #14]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <OD_getIndex+0x14>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	e000      	b.n	800581e <OD_getIndex+0x16>
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <OD_extension_init>:
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <OD_extension_init+0x14>
 800583a:	2305      	movs	r3, #5
 800583c:	e003      	b.n	8005846 <OD_extension_init+0x1c>
    entry->extension = extension;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <OD_get_u32>:
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af02      	add	r7, sp, #8
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
 800585e:	460b      	mov	r3, r1
 8005860:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005862:	7af9      	ldrb	r1, [r7, #11]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	2304      	movs	r3, #4
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7fc fd79 	bl	8002364 <OD_get_value>
 8005872:	4603      	mov	r3, r0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	791b      	ldrb	r3, [r3, #4]
 800588e:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	3305      	adds	r3, #5
 8005894:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8005896:	7cfb      	ldrb	r3, [r7, #19]
 8005898:	2b06      	cmp	r3, #6
 800589a:	d108      	bne.n	80058ae <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2206      	movs	r2, #6
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f005 fefc 	bl	800b6a0 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2201      	movs	r2, #1
 80058ac:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 80058ae:	bf00      	nop
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00c      	beq.n	80058e6 <OD_write_1012+0x2e>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	7c5b      	ldrb	r3, [r3, #17]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d108      	bne.n	80058e6 <OD_write_1012+0x2e>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d102      	bne.n	80058e6 <OD_write_1012+0x2e>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80058e6:	2309      	movs	r3, #9
 80058e8:	e051      	b.n	800598e <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 80058f0:	68b8      	ldr	r0, [r7, #8]
 80058f2:	f7ff ff7b 	bl	80057ec <CO_getUint32>
 80058f6:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005900:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <OD_write_1012+0xe0>)
 8005906:	4013      	ands	r3, r2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d126      	bne.n	800595a <OD_write_1012+0xa2>
 800590c:	8afb      	ldrh	r3, [r7, #22]
 800590e:	2b7f      	cmp	r3, #127	; 0x7f
 8005910:	d923      	bls.n	800595a <OD_write_1012+0xa2>
 8005912:	8afb      	ldrh	r3, [r7, #22]
 8005914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005918:	d903      	bls.n	8005922 <OD_write_1012+0x6a>
 800591a:	8afb      	ldrh	r3, [r7, #22]
 800591c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8005920:	d91b      	bls.n	800595a <OD_write_1012+0xa2>
 8005922:	8afb      	ldrh	r3, [r7, #22]
 8005924:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8005928:	d903      	bls.n	8005932 <OD_write_1012+0x7a>
 800592a:	8afb      	ldrh	r3, [r7, #22]
 800592c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005930:	d313      	bcc.n	800595a <OD_write_1012+0xa2>
 8005932:	8afb      	ldrh	r3, [r7, #22]
 8005934:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005938:	d903      	bls.n	8005942 <OD_write_1012+0x8a>
 800593a:	8afb      	ldrh	r3, [r7, #22]
 800593c:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8005940:	d30b      	bcc.n	800595a <OD_write_1012+0xa2>
 8005942:	8afb      	ldrh	r3, [r7, #22]
 8005944:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8005948:	d303      	bcc.n	8005952 <OD_write_1012+0x9a>
 800594a:	8afb      	ldrh	r3, [r7, #22]
 800594c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005950:	d303      	bcc.n	800595a <OD_write_1012+0xa2>
 8005952:	8afb      	ldrh	r3, [r7, #22]
 8005954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005958:	d901      	bls.n	800595e <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 800595a:	230f      	movs	r3, #15
 800595c:	e017      	b.n	800598e <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	0fdb      	lsrs	r3, r3, #31
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf14      	ite	ne
 8005974:	2301      	movne	r3, #1
 8005976:	2300      	moveq	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7fc fb06 	bl	8001f98 <OD_writeOriginal>
 800598c:	4603      	mov	r3, r0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3720      	adds	r7, #32
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	3ffff800 	.word	0x3ffff800

0800599c <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08c      	sub	sp, #48	; 0x30
 80059a0:	af04      	add	r7, sp, #16
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <CO_TIME_init+0x20>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <CO_TIME_init+0x20>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295
 80059c0:	e061      	b.n	8005a86 <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 80059c2:	222c      	movs	r2, #44	; 0x2c
 80059c4:	2100      	movs	r1, #0
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f005 fe92 	bl	800b6f0 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 80059cc:	f107 0214 	add.w	r2, r7, #20
 80059d0:	2301      	movs	r3, #1
 80059d2:	2100      	movs	r1, #0
 80059d4:	68b8      	ldr	r0, [r7, #8]
 80059d6:	f7ff ff3c 	bl	8005852 <OD_get_u32>
 80059da:	4603      	mov	r3, r0
 80059dc:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 80059de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00c      	beq.n	8005a00 <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d006      	beq.n	80059fa <CO_TIME_init+0x5e>
 80059ec:	68b8      	ldr	r0, [r7, #8]
 80059ee:	f7ff ff0b 	bl	8005808 <OD_getIndex>
 80059f2:	4603      	mov	r3, r0
 80059f4:	461a      	mov	r2, r3
 80059f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f8:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80059fa:	f06f 030b 	mvn.w	r3, #11
 80059fe:	e042      	b.n	8005a86 <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4a21      	ldr	r2, [pc, #132]	; (8005a90 <CO_TIME_init+0xf4>)
 8005a0a:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a21      	ldr	r2, [pc, #132]	; (8005a94 <CO_TIME_init+0xf8>)
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	331c      	adds	r3, #28
 8005a16:	4619      	mov	r1, r3
 8005a18:	68b8      	ldr	r0, [r7, #8]
 8005a1a:	f7ff ff06 	bl	800582a <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a26:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	0fdb      	lsrs	r3, r3, #31
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	bf14      	ite	ne
 8005a3e:	2301      	movne	r3, #1
 8005a40:	2300      	moveq	r3, #0
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	461a      	mov	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d015      	beq.n	8005a84 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005a58:	8bba      	ldrh	r2, [r7, #28]
 8005a5a:	8879      	ldrh	r1, [r7, #2]
 8005a5c:	4b0e      	ldr	r3, [pc, #56]	; (8005a98 <CO_TIME_init+0xfc>)
 8005a5e:	9302      	str	r3, [sp, #8]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	2300      	movs	r3, #0
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7fa fe33 	bl	80006d8 <CO_CANrxBufferInit>
 8005a72:	4603      	mov	r3, r0
 8005a74:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8005a76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <CO_TIME_init+0xe8>
            return ret;
 8005a7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005a82:	e000      	b.n	8005a86 <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	08001ee9 	.word	0x08001ee9
 8005a94:	080058b9 	.word	0x080058b9
 8005a98:	0800587d 	.word	0x0800587d

08005a9c <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d024      	beq.n	8005afc <CO_TIME_process+0x60>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d020      	beq.n	8005afc <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d01f      	beq.n	8005b02 <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fe91 	bl	80057ec <CO_getUint32>
 8005aca:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fe7c 	bl	80057ce <CO_getUint16>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8bfa      	ldrh	r2, [r7, #30]
 8005ae8:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8005af0:	2301      	movs	r3, #1
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005afa:	e002      	b.n	8005b02 <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d132      	bne.n	8005b72 <CO_TIME_process+0xd6>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d02f      	beq.n	8005b72 <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	89db      	ldrh	r3, [r3, #14]
 8005b16:	461a      	mov	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	4a16      	ldr	r2, [pc, #88]	; (8005b7c <CO_TIME_process+0xe0>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	099b      	lsrs	r3, r3, #6
 8005b28:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <CO_TIME_process+0xe0>)
 8005b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b32:	099b      	lsrs	r3, r3, #6
 8005b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b38:	fb01 f303 	mul.w	r3, r1, r3
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	441a      	add	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <CO_TIME_process+0xe4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d90b      	bls.n	8005b72 <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <CO_TIME_process+0xe8>)
 8005b60:	4413      	add	r3, r2
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	899b      	ldrh	r3, [r3, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3728      	adds	r7, #40	; 0x28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	10624dd3 	.word	0x10624dd3
 8005b80:	05265bff 	.word	0x05265bff
 8005b84:	fad9a400 	.word	0xfad9a400

08005b88 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d102      	bne.n	8005ba0 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9e:	e006      	b.n	8005bae <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 8005ba0:	220c      	movs	r2, #12
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f005 fda3 	bl	800b6f0 <memset>

    return ret;
 8005baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b089      	sub	sp, #36	; 0x24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	441a      	add	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 8005be0:	e100      	b.n	8005de4 <CO_LEDs_process+0x22c>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	7a5b      	ldrb	r3, [r3, #9]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	bf0c      	ite	eq
 8005bee:	2301      	moveq	r3, #1
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	613b      	str	r3, [r7, #16]

        tick = true;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 8005c02:	3b50      	subs	r3, #80	; 0x50
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	791b      	ldrb	r3, [r3, #4]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	711a      	strb	r2, [r3, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	791b      	ldrb	r3, [r3, #4]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	f240 80cb 	bls.w	8005db4 <CO_LEDs_process+0x1fc>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	77bb      	strb	r3, [r7, #30]
 8005c28:	7fbb      	ldrb	r3, [r7, #30]
 8005c2a:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	7a5b      	ldrb	r3, [r3, #9]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <CO_LEDs_process+0x8a>
 8005c38:	7ffb      	ldrb	r3, [r7, #31]
 8005c3a:	f043 0302 	orr.w	r3, r3, #2
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e003      	b.n	8005c4a <CO_LEDs_process+0x92>
            else                                    gr |= CO_LED_blink;
 8005c42:	7fbb      	ldrb	r3, [r7, #30]
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	795b      	ldrb	r3, [r3, #5]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	715a      	strb	r2, [r3, #5]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	795b      	ldrb	r3, [r3, #5]
 8005c5a:	2b06      	cmp	r3, #6
 8005c5c:	d010      	beq.n	8005c80 <CO_LEDs_process+0xc8>
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	dc12      	bgt.n	8005c88 <CO_LEDs_process+0xd0>
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d002      	beq.n	8005c6c <CO_LEDs_process+0xb4>
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d005      	beq.n	8005c76 <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 8005c6a:	e00d      	b.n	8005c88 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8005c6c:	7ffb      	ldrb	r3, [r7, #31]
 8005c6e:	f043 0304 	orr.w	r3, r3, #4
 8005c72:	77fb      	strb	r3, [r7, #31]
 8005c74:	e009      	b.n	8005c8a <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 8005c76:	7fbb      	ldrb	r3, [r7, #30]
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	77bb      	strb	r3, [r7, #30]
 8005c7e:	e004      	b.n	8005c8a <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	715a      	strb	r2, [r3, #5]
 8005c86:	e000      	b.n	8005c8a <CO_LEDs_process+0xd2>
                default: break;
 8005c88:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	799b      	ldrb	r3, [r3, #6]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	719a      	strb	r2, [r3, #6]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	799b      	ldrb	r3, [r3, #6]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	2b07      	cmp	r3, #7
 8005c9e:	d821      	bhi.n	8005ce4 <CO_LEDs_process+0x12c>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <CO_LEDs_process+0xf0>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005cc9 	.word	0x08005cc9
 8005cac:	08005cd3 	.word	0x08005cd3
 8005cb0:	08005cc9 	.word	0x08005cc9
 8005cb4:	08005cd3 	.word	0x08005cd3
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	08005ce5 	.word	0x08005ce5
 8005cc0:	08005ce5 	.word	0x08005ce5
 8005cc4:	08005cdd 	.word	0x08005cdd
                case 1: case 3: rd |= CO_LED_flash_2; break;
 8005cc8:	7ffb      	ldrb	r3, [r7, #31]
 8005cca:	f043 0308 	orr.w	r3, r3, #8
 8005cce:	77fb      	strb	r3, [r7, #31]
 8005cd0:	e009      	b.n	8005ce6 <CO_LEDs_process+0x12e>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 8005cd2:	7fbb      	ldrb	r3, [r7, #30]
 8005cd4:	f043 0308 	orr.w	r3, r3, #8
 8005cd8:	77bb      	strb	r3, [r7, #30]
 8005cda:	e004      	b.n	8005ce6 <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	719a      	strb	r2, [r3, #6]
 8005ce2:	e000      	b.n	8005ce6 <CO_LEDs_process+0x12e>
                default: break;
 8005ce4:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	79db      	ldrb	r3, [r3, #7]
 8005cea:	3301      	adds	r3, #1
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	71da      	strb	r2, [r3, #7]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	79db      	ldrb	r3, [r3, #7]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	2b09      	cmp	r3, #9
 8005cfa:	d825      	bhi.n	8005d48 <CO_LEDs_process+0x190>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <CO_LEDs_process+0x14c>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d37 	.word	0x08005d37
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08005d37 	.word	0x08005d37
 8005d14:	08005d2d 	.word	0x08005d2d
 8005d18:	08005d37 	.word	0x08005d37
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d49 	.word	0x08005d49
 8005d28:	08005d41 	.word	0x08005d41
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 8005d2c:	7ffb      	ldrb	r3, [r7, #31]
 8005d2e:	f043 0310 	orr.w	r3, r3, #16
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e009      	b.n	8005d4a <CO_LEDs_process+0x192>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 8005d36:	7fbb      	ldrb	r3, [r7, #30]
 8005d38:	f043 0310 	orr.w	r3, r3, #16
 8005d3c:	77bb      	strb	r3, [r7, #30]
 8005d3e:	e004      	b.n	8005d4a <CO_LEDs_process+0x192>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	71da      	strb	r2, [r3, #7]
 8005d46:	e000      	b.n	8005d4a <CO_LEDs_process+0x192>
                default: break;
 8005d48:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	7a1b      	ldrb	r3, [r3, #8]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	721a      	strb	r2, [r3, #8]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	7a1b      	ldrb	r3, [r3, #8]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	2b0b      	cmp	r3, #11
 8005d5e:	d834      	bhi.n	8005dca <CO_LEDs_process+0x212>
 8005d60:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <CO_LEDs_process+0x1b0>)
 8005d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d66:	bf00      	nop
 8005d68:	08005d99 	.word	0x08005d99
 8005d6c:	08005da3 	.word	0x08005da3
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005da3 	.word	0x08005da3
 8005d78:	08005d99 	.word	0x08005d99
 8005d7c:	08005da3 	.word	0x08005da3
 8005d80:	08005d99 	.word	0x08005d99
 8005d84:	08005da3 	.word	0x08005da3
 8005d88:	08005dcb 	.word	0x08005dcb
 8005d8c:	08005dcb 	.word	0x08005dcb
 8005d90:	08005dcb 	.word	0x08005dcb
 8005d94:	08005dad 	.word	0x08005dad
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 8005d98:	7ffb      	ldrb	r3, [r7, #31]
 8005d9a:	f043 0320 	orr.w	r3, r3, #32
 8005d9e:	77fb      	strb	r3, [r7, #31]
 8005da0:	e014      	b.n	8005dcc <CO_LEDs_process+0x214>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 8005da2:	7fbb      	ldrb	r3, [r7, #30]
 8005da4:	f043 0320 	orr.w	r3, r3, #32
 8005da8:	77bb      	strb	r3, [r7, #30]
 8005daa:	e00f      	b.n	8005dcc <CO_LEDs_process+0x214>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	721a      	strb	r2, [r3, #8]
 8005db2:	e00b      	b.n	8005dcc <CO_LEDs_process+0x214>
                default: break;
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	7a5b      	ldrb	r3, [r3, #9]
 8005db8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005dbc:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	7a9b      	ldrb	r3, [r3, #10]
 8005dc2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005dc6:	77bb      	strb	r3, [r7, #30]
 8005dc8:	e000      	b.n	8005dcc <CO_LEDs_process+0x214>
                default: break;
 8005dca:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <CO_LEDs_process+0x224>
 8005dd2:	7ffb      	ldrb	r3, [r7, #31]
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	77fb      	strb	r3, [r7, #31]
 8005dda:	e003      	b.n	8005de4 <CO_LEDs_process+0x22c>
        else               gr |= CO_LED_flicker;
 8005ddc:	7fbb      	ldrb	r3, [r7, #30]
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8005dec:	4293      	cmp	r3, r2
 8005dee:	f63f aef8 	bhi.w	8005be2 <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d077      	beq.n	8005ee8 <CO_LEDs_process+0x330>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <CO_LEDs_process+0x24c>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
 8005e02:	e032      	b.n	8005e6a <CO_LEDs_process+0x2b2>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 8005e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <CO_LEDs_process+0x25e>
 8005e0c:	7ffb      	ldrb	r3, [r7, #31]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	75fb      	strb	r3, [r7, #23]
 8005e14:	e029      	b.n	8005e6a <CO_LEDs_process+0x2b2>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d004      	beq.n	8005e26 <CO_LEDs_process+0x26e>
 8005e1c:	7ffb      	ldrb	r3, [r7, #31]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	75fb      	strb	r3, [r7, #23]
 8005e24:	e021      	b.n	8005e6a <CO_LEDs_process+0x2b2>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 8005e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d004      	beq.n	8005e36 <CO_LEDs_process+0x27e>
 8005e2c:	7ffb      	ldrb	r3, [r7, #31]
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	75fb      	strb	r3, [r7, #23]
 8005e34:	e019      	b.n	8005e6a <CO_LEDs_process+0x2b2>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d004      	beq.n	8005e46 <CO_LEDs_process+0x28e>
 8005e3c:	7ffb      	ldrb	r3, [r7, #31]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	75fb      	strb	r3, [r7, #23]
 8005e44:	e011      	b.n	8005e6a <CO_LEDs_process+0x2b2>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <CO_LEDs_process+0x29e>
 8005e4c:	7ffb      	ldrb	r3, [r7, #31]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	75fb      	strb	r3, [r7, #23]
 8005e54:	e009      	b.n	8005e6a <CO_LEDs_process+0x2b2>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 8005e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <CO_LEDs_process+0x2ae>
 8005e5c:	7ffb      	ldrb	r3, [r7, #31]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	75fb      	strb	r3, [r7, #23]
 8005e64:	e001      	b.n	8005e6a <CO_LEDs_process+0x2b2>
        else                                        rd_co = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d004      	beq.n	8005e7a <CO_LEDs_process+0x2c2>
 8005e70:	7fbb      	ldrb	r3, [r7, #30]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	75bb      	strb	r3, [r7, #22]
 8005e78:	e022      	b.n	8005ec0 <CO_LEDs_process+0x308>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 8005e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <CO_LEDs_process+0x2d2>
 8005e80:	7fbb      	ldrb	r3, [r7, #30]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	75bb      	strb	r3, [r7, #22]
 8005e88:	e01a      	b.n	8005ec0 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 8005e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d104      	bne.n	8005e9c <CO_LEDs_process+0x2e4>
 8005e92:	7fbb      	ldrb	r3, [r7, #30]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	75bb      	strb	r3, [r7, #22]
 8005e9a:	e011      	b.n	8005ec0 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 8005e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea2:	d104      	bne.n	8005eae <CO_LEDs_process+0x2f6>
 8005ea4:	7fbb      	ldrb	r3, [r7, #30]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	75bb      	strb	r3, [r7, #22]
 8005eac:	e008      	b.n	8005ec0 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 8005eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb2:	2b05      	cmp	r3, #5
 8005eb4:	d102      	bne.n	8005ebc <CO_LEDs_process+0x304>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	75bb      	strb	r3, [r7, #22]
 8005eba:	e001      	b.n	8005ec0 <CO_LEDs_process+0x308>
        else                                        gr_co = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <CO_LEDs_process+0x316>
 8005ec6:	7ffb      	ldrb	r3, [r7, #31]
 8005ec8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ecc:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 8005ece:	7dbb      	ldrb	r3, [r7, #22]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <CO_LEDs_process+0x324>
 8005ed4:	7fbb      	ldrb	r3, [r7, #30]
 8005ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005eda:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	7ffa      	ldrb	r2, [r7, #31]
 8005ee0:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	7fba      	ldrb	r2, [r7, #30]
 8005ee6:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8005ee8:	bf00      	nop
 8005eea:	3724      	adds	r7, #36	; 0x24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b090      	sub	sp, #64	; 0x40
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	791b      	ldrb	r3, [r3, #4]
 8005f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8005f0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	f040 814c 	bne.w	80061ac <CO_LSSslave_receive+0x2b8>
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f040 8147 	bne.w	80061ac <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	3305      	adds	r3, #5
 8005f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005f30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d12c      	bne.n	8005f92 <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8005f3e:	7ffb      	ldrb	r3, [r7, #31]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <CO_LSSslave_receive+0x56>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d020      	beq.n	8005f8a <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 8005f48:	e12a      	b.n	80061a0 <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	7c1b      	ldrb	r3, [r3, #16]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d110      	bne.n	8005f74 <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 8005f58:	2bff      	cmp	r3, #255	; 0xff
 8005f5a:	d10b      	bne.n	8005f74 <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 8005f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f60:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8005f62:	2bff      	cmp	r3, #255	; 0xff
 8005f64:	d006      	beq.n	8005f74 <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 8005f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f68:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8005f70:	2301      	movs	r3, #1
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f76:	2200      	movs	r2, #0
 8005f78:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	3314      	adds	r3, #20
 8005f7e:	2210      	movs	r2, #16
 8005f80:	2100      	movs	r1, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	f005 fbb4 	bl	800b6f0 <memset>
                    break;
 8005f88:	e10a      	b.n	80061a0 <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	741a      	strb	r2, [r3, #16]
                    break;
 8005f90:	e106      	b.n	80061a0 <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	7c1b      	ldrb	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 80ee 	bne.w	8006178 <CO_LSSslave_receive+0x284>
            switch (cs) {
 8005f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fa0:	3b40      	subs	r3, #64	; 0x40
 8005fa2:	2b11      	cmp	r3, #17
 8005fa4:	f200 80f7 	bhi.w	8006196 <CO_LSSslave_receive+0x2a2>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <CO_LSSslave_receive+0xbc>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005ff9 	.word	0x08005ff9
 8005fb4:	08006009 	.word	0x08006009
 8005fb8:	08006019 	.word	0x08006019
 8005fbc:	08006029 	.word	0x08006029
 8005fc0:	08006197 	.word	0x08006197
 8005fc4:	08006197 	.word	0x08006197
 8005fc8:	08006197 	.word	0x08006197
 8005fcc:	08006197 	.word	0x08006197
 8005fd0:	08006197 	.word	0x08006197
 8005fd4:	08006197 	.word	0x08006197
 8005fd8:	08006197 	.word	0x08006197
 8005fdc:	08006197 	.word	0x08006197
 8005fe0:	08006197 	.word	0x08006197
 8005fe4:	08006197 	.word	0x08006197
 8005fe8:	08006197 	.word	0x08006197
 8005fec:	08006197 	.word	0x08006197
 8005ff0:	08006197 	.word	0x08006197
 8005ff4:	08006085 	.word	0x08006085
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8005ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	615a      	str	r2, [r3, #20]
                break;
 8006006:	e0cb      	b.n	80061a0 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600a:	3301      	adds	r3, #1
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006014:	619a      	str	r2, [r3, #24]
                break;
 8006016:	e0c3      	b.n	80061a0 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	3301      	adds	r3, #1
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	61da      	str	r2, [r3, #28]
                break;
 8006026:	e0bb      	b.n	80061a0 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602a:	3301      	adds	r3, #1
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006034:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 8006036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	429a      	cmp	r2, r3
 8006040:	f040 80ab 	bne.w	800619a <CO_LSSslave_receive+0x2a6>
 8006044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	429a      	cmp	r2, r3
 800604e:	f040 80a4 	bne.w	800619a <CO_LSSslave_receive+0x2a6>
 8006052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006054:	68da      	ldr	r2, [r3, #12]
 8006056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	429a      	cmp	r2, r3
 800605c:	f040 809d 	bne.w	800619a <CO_LSSslave_receive+0x2a6>
 8006060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	429a      	cmp	r2, r3
 800606a:	f040 8096 	bne.w	800619a <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800606e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006070:	2201      	movs	r2, #1
 8006072:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800607a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 800607e:	2301      	movs	r3, #1
 8006080:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 8006082:	e08a      	b.n	800619a <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2bff      	cmp	r3, #255	; 0xff
 800608c:	f040 8087 	bne.w	800619e <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 8006096:	2bff      	cmp	r3, #255	; 0xff
 8006098:	f040 8081 	bne.w	800619e <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 800609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609e:	795b      	ldrb	r3, [r3, #5]
 80060a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    uint8_t lssSub = data[6];
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	799b      	ldrb	r3, [r3, #6]
 80060a8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssNext = data[7];
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	79db      	ldrb	r3, [r3, #7]
 80060b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 80060b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80060b8:	2b1f      	cmp	r3, #31
 80060ba:	d903      	bls.n	80060c4 <CO_LSSslave_receive+0x1d0>
 80060bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80060c0:	2b80      	cmp	r3, #128	; 0x80
 80060c2:	d16d      	bne.n	80061a0 <CO_LSSslave_receive+0x2ac>
 80060c4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d869      	bhi.n	80061a0 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 80060cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d865      	bhi.n	80061a0 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	3301      	adds	r3, #1
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 80060e0:	2300      	movs	r3, #0
 80060e2:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 80060e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80060e8:	2b80      	cmp	r3, #128	; 0x80
 80060ea:	d10d      	bne.n	8006108 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 80060ec:	2301      	movs	r3, #1
 80060ee:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 80060f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060fa:	3324      	adds	r3, #36	; 0x24
 80060fc:	2210      	movs	r2, #16
 80060fe:	2100      	movs	r1, #0
 8006100:	4618      	mov	r0, r3
 8006102:	f005 faf5 	bl	800b6f0 <memset>
 8006106:	e02c      	b.n	8006162 <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8006108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800610e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006112:	429a      	cmp	r2, r3
 8006114:	d125      	bne.n	8006162 <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 8006116:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800611a:	f04f 32ff 	mov.w	r2, #4294967295
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8006124:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8006128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	405a      	eors	r2, r3
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 8006136:	2b00      	cmp	r3, #0
 8006138:	d113      	bne.n	8006162 <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 800613a:	2301      	movs	r3, #1
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 800613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006140:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 8006148:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800614c:	2b00      	cmp	r3, #0
 800614e:	d108      	bne.n	8006162 <CO_LSSslave_receive+0x26e>
 8006150:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006154:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006158:	429a      	cmp	r2, r3
 800615a:	d202      	bcs.n	8006162 <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	2201      	movs	r2, #1
 8006160:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01a      	beq.n	800619e <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 8006168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800616e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8006172:	2301      	movs	r3, #1
 8006174:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 8006176:	e012      	b.n	800619e <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617a:	3349      	adds	r3, #73	; 0x49
 800617c:	2208      	movs	r2, #8
 800617e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006180:	4618      	mov	r0, r3
 8006182:	f005 fa8d 	bl	800b6a0 <memcpy>
            LSSslave->service = cs;
 8006186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006188:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800618c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8006190:	2301      	movs	r3, #1
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006194:	e004      	b.n	80061a0 <CO_LSSslave_receive+0x2ac>
                break;
 8006196:	bf00      	nop
 8006198:	e002      	b.n	80061a0 <CO_LSSslave_receive+0x2ac>
                break;
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <CO_LSSslave_receive+0x2ac>
                break;
 800619e:	bf00      	nop
        }

        if (request_LSSslave_process) {
 80061a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	2201      	movs	r2, #1
 80061aa:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 80061ac:	bf00      	nop
 80061ae:	3740      	adds	r7, #64	; 0x40
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	; 0x28
 80061b8:	af04      	add	r7, sp, #16
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d018      	beq.n	80061fe <CO_LSSslave_init+0x4a>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d015      	beq.n	80061fe <CO_LSSslave_init+0x4a>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d012      	beq.n	80061fe <CO_LSSslave_init+0x4a>
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00f      	beq.n	80061fe <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 80061de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00c      	beq.n	80061fe <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d004      	beq.n	80061f6 <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	b25b      	sxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	da06      	bge.n	8006204 <CO_LSSslave_init+0x50>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2bff      	cmp	r3, #255	; 0xff
 80061fc:	d002      	beq.n	8006204 <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006202:	e046      	b.n	8006292 <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8006204:	2274      	movs	r2, #116	; 0x74
 8006206:	2100      	movs	r1, #0
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f005 fa71 	bl	800b6f0 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2210      	movs	r2, #16
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	4618      	mov	r0, r3
 8006216:	f005 fa43 	bl	800b6a0 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781a      	ldrb	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 8006244:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006246:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8006248:	4b14      	ldr	r3, [pc, #80]	; (800629c <CO_LSSslave_init+0xe8>)
 800624a:	9302      	str	r3, [sp, #8]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	2300      	movs	r3, #0
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006258:	6a38      	ldr	r0, [r7, #32]
 800625a:	f7fa fa3d 	bl	80006d8 <CO_CANrxBufferInit>
 800625e:	4603      	mov	r3, r0
 8006260:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006266:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 8006268:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800626a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 800626c:	2300      	movs	r3, #0
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	2308      	movs	r3, #8
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006278:	f7fa fa80 	bl	800077c <CO_CANtxBufferInit>
 800627c:	4602      	mov	r2, r0
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800628a:	23ff      	movs	r3, #255	; 0xff
 800628c:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 800628e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	08005ef5 	.word	0x08005ef5

080062a0 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08c      	sub	sp, #48	; 0x30
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 80062a8:	2300      	movs	r3, #0
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8203 	beq.w	80066bc <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 80062b6:	2300      	movs	r3, #0
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062be:	3305      	adds	r3, #5
 80062c0:	2208      	movs	r2, #8
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f005 fa13 	bl	800b6f0 <memset>

        switch (LSSslave->service) {
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80062d0:	3b04      	subs	r3, #4
 80062d2:	2b5a      	cmp	r3, #90	; 0x5a
 80062d4:	f200 81dd 	bhi.w	8006692 <CO_LSSslave_process+0x3f2>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <CO_LSSslave_process+0x40>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	0800644d 	.word	0x0800644d
 80062e4:	08006693 	.word	0x08006693
 80062e8:	08006693 	.word	0x08006693
 80062ec:	08006693 	.word	0x08006693
 80062f0:	08006693 	.word	0x08006693
 80062f4:	08006693 	.word	0x08006693
 80062f8:	08006693 	.word	0x08006693
 80062fc:	08006693 	.word	0x08006693
 8006300:	08006693 	.word	0x08006693
 8006304:	08006693 	.word	0x08006693
 8006308:	08006693 	.word	0x08006693
 800630c:	08006693 	.word	0x08006693
 8006310:	08006693 	.word	0x08006693
 8006314:	08006461 	.word	0x08006461
 8006318:	08006693 	.word	0x08006693
 800631c:	080064af 	.word	0x080064af
 8006320:	08006693 	.word	0x08006693
 8006324:	0800654b 	.word	0x0800654b
 8006328:	08006693 	.word	0x08006693
 800632c:	08006589 	.word	0x08006589
 8006330:	08006693 	.word	0x08006693
 8006334:	08006693 	.word	0x08006693
 8006338:	08006693 	.word	0x08006693
 800633c:	08006693 	.word	0x08006693
 8006340:	08006693 	.word	0x08006693
 8006344:	08006693 	.word	0x08006693
 8006348:	08006693 	.word	0x08006693
 800634c:	08006693 	.word	0x08006693
 8006350:	08006693 	.word	0x08006693
 8006354:	08006693 	.word	0x08006693
 8006358:	08006693 	.word	0x08006693
 800635c:	08006693 	.word	0x08006693
 8006360:	08006693 	.word	0x08006693
 8006364:	08006693 	.word	0x08006693
 8006368:	08006693 	.word	0x08006693
 800636c:	08006693 	.word	0x08006693
 8006370:	08006693 	.word	0x08006693
 8006374:	08006693 	.word	0x08006693
 8006378:	08006693 	.word	0x08006693
 800637c:	08006693 	.word	0x08006693
 8006380:	08006693 	.word	0x08006693
 8006384:	08006693 	.word	0x08006693
 8006388:	08006693 	.word	0x08006693
 800638c:	08006693 	.word	0x08006693
 8006390:	08006693 	.word	0x08006693
 8006394:	08006693 	.word	0x08006693
 8006398:	08006693 	.word	0x08006693
 800639c:	08006693 	.word	0x08006693
 80063a0:	08006693 	.word	0x08006693
 80063a4:	08006693 	.word	0x08006693
 80063a8:	08006693 	.word	0x08006693
 80063ac:	08006693 	.word	0x08006693
 80063b0:	08006693 	.word	0x08006693
 80063b4:	08006693 	.word	0x08006693
 80063b8:	08006693 	.word	0x08006693
 80063bc:	08006693 	.word	0x08006693
 80063c0:	08006693 	.word	0x08006693
 80063c4:	08006693 	.word	0x08006693
 80063c8:	08006693 	.word	0x08006693
 80063cc:	08006693 	.word	0x08006693
 80063d0:	08006693 	.word	0x08006693
 80063d4:	08006693 	.word	0x08006693
 80063d8:	08006693 	.word	0x08006693
 80063dc:	08006453 	.word	0x08006453
 80063e0:	08006693 	.word	0x08006693
 80063e4:	08006693 	.word	0x08006693
 80063e8:	08006693 	.word	0x08006693
 80063ec:	08006693 	.word	0x08006693
 80063f0:	08006693 	.word	0x08006693
 80063f4:	08006693 	.word	0x08006693
 80063f8:	08006693 	.word	0x08006693
 80063fc:	08006693 	.word	0x08006693
 8006400:	08006693 	.word	0x08006693
 8006404:	08006693 	.word	0x08006693
 8006408:	08006693 	.word	0x08006693
 800640c:	08006693 	.word	0x08006693
 8006410:	08006693 	.word	0x08006693
 8006414:	08006685 	.word	0x08006685
 8006418:	08006693 	.word	0x08006693
 800641c:	08006693 	.word	0x08006693
 8006420:	08006693 	.word	0x08006693
 8006424:	08006693 	.word	0x08006693
 8006428:	08006693 	.word	0x08006693
 800642c:	08006693 	.word	0x08006693
 8006430:	08006693 	.word	0x08006693
 8006434:	08006693 	.word	0x08006693
 8006438:	080065df 	.word	0x080065df
 800643c:	08006601 	.word	0x08006601
 8006440:	08006623 	.word	0x08006623
 8006444:	08006645 	.word	0x08006645
 8006448:	08006667 	.word	0x08006667
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 800644c:	2301      	movs	r3, #1
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8006450:	e126      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	2244      	movs	r2, #68	; 0x44
 8006458:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 800645a:	2301      	movs	r3, #1
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800645e:	e11f      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006466:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 8006468:	2300      	movs	r3, #0
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 800646e:	7cfb      	ldrb	r3, [r7, #19]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <CO_LSSslave_process+0x1dc>
 8006474:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006478:	2b00      	cmp	r3, #0
 800647a:	da02      	bge.n	8006482 <CO_LSSslave_process+0x1e2>
 800647c:	7cfb      	ldrb	r3, [r7, #19]
 800647e:	2bff      	cmp	r3, #255	; 0xff
 8006480:	d104      	bne.n	800648c <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006486:	7cfa      	ldrb	r2, [r7, #19]
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e002      	b.n	8006492 <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 800648c:	2301      	movs	r3, #1
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800649c:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80064a6:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 80064a8:	2301      	movs	r3, #1
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80064ac:	e0f8      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 80ef 	beq.w	8006696 <CO_LSSslave_process+0x3f6>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80064be:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80064c6:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80064d4:	7f7b      	ldrb	r3, [r7, #29]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d121      	bne.n	800651e <CO_LSSslave_process+0x27e>
 80064da:	7f3b      	ldrb	r3, [r7, #28]
 80064dc:	2b05      	cmp	r3, #5
 80064de:	d01e      	beq.n	800651e <CO_LSSslave_process+0x27e>
 80064e0:	7f3b      	ldrb	r3, [r7, #28]
 80064e2:	2b09      	cmp	r3, #9
 80064e4:	d81b      	bhi.n	800651e <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 80064e6:	7f3b      	ldrb	r3, [r7, #28]
 80064e8:	4a77      	ldr	r2, [pc, #476]	; (80066c8 <CO_LSSslave_process+0x428>)
 80064ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ee:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80064f8:	8b79      	ldrh	r1, [r7, #26]
 80064fa:	4610      	mov	r0, r2
 80064fc:	4798      	blx	r3
 80064fe:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	8b7a      	ldrh	r2, [r7, #26]
 800650c:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800650e:	e009      	b.n	8006524 <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8006510:	23ff      	movs	r3, #255	; 0xff
 8006512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 800651c:	e002      	b.n	8006524 <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800652e:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006538:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8006542:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 8006544:	2301      	movs	r3, #1
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006548:	e0aa      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 80a3 	beq.w	800669a <CO_LSSslave_process+0x3fa>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80a0 	beq.w	800669e <CO_LSSslave_process+0x3fe>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006564:	b29b      	uxth	r3, r3
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006570:	b29a      	uxth	r2, r3
 8006572:	8bfb      	ldrh	r3, [r7, #30]
 8006574:	4313      	orrs	r3, r2
 8006576:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8006580:	8bf9      	ldrh	r1, [r7, #30]
 8006582:	4610      	mov	r0, r2
 8006584:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 8006586:	e08a      	b.n	800669e <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <CO_LSSslave_process+0x2fe>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8006596:	2301      	movs	r3, #1
 8006598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659c:	e011      	b.n	80065c2 <CO_LSSslave_process+0x322>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6e90      	ldr	r0, [r2, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 80065aa:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 80065b0:	8812      	ldrh	r2, [r2, #0]
 80065b2:	4798      	blx	r3
 80065b4:	6238      	str	r0, [r7, #32]
                if (!result) {
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d102      	bne.n	80065c2 <CO_LSSslave_process+0x322>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 80065bc:	2302      	movs	r3, #2
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80065cc:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80065d6:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 80065d8:	2301      	movs	r3, #1
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80065dc:	e060      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80065e8:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f4:	3306      	adds	r3, #6
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	601a      	str	r2, [r3, #0]
            CANsend = true;
 80065fa:	2301      	movs	r3, #1
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80065fe:	e04f      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800660a:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	3306      	adds	r3, #6
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	601a      	str	r2, [r3, #0]
            CANsend = true;
 800661c:	2301      	movs	r3, #1
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006620:	e03e      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800662c:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	3306      	adds	r3, #6
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	601a      	str	r2, [r3, #0]
            CANsend = true;
 800663e:	2301      	movs	r3, #1
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006642:	e02d      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 800664e:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665a:	3306      	adds	r3, #6
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006660:	2301      	movs	r3, #1
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006664:	e01c      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006670:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800667c:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 800667e:	2301      	movs	r3, #1
 8006680:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006682:	e00d      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006688:	224f      	movs	r2, #79	; 0x4f
 800668a:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 800668c:	2301      	movs	r3, #1
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006690:	e006      	b.n	80066a0 <CO_LSSslave_process+0x400>
        }
        default: {
            break;
 8006692:	bf00      	nop
 8006694:	e004      	b.n	80066a0 <CO_LSSslave_process+0x400>
                break;
 8006696:	bf00      	nop
 8006698:	e002      	b.n	80066a0 <CO_LSSslave_process+0x400>
                break;
 800669a:	bf00      	nop
 800669c:	e000      	b.n	80066a0 <CO_LSSslave_process+0x400>
            break;
 800669e:	bf00      	nop
        }
        }

        if(CANsend) {
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <CO_LSSslave_process+0x416>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f7fa f898 	bl	80007e6 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3730      	adds	r7, #48	; 0x30
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	0800d15c 	.word	0x0800d15c

080066cc <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	08db      	lsrs	r3, r3, #3
 80066dc:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	2201      	movs	r2, #1
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b09      	cmp	r3, #9
 80066f6:	d807      	bhi.n	8006708 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	5cd2      	ldrb	r2, [r2, r3]
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	4013      	ands	r3, r2
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <CO_isError+0x40>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <CO_isError+0x42>
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d007      	beq.n	8006738 <CO_getErrorRegister+0x1e>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <CO_getErrorRegister+0x1e>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	e000      	b.n	800673a <CO_getErrorRegister+0x20>
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <CO_NMT_getInternalState+0x16>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f993 3000 	ldrsb.w	r3, [r3]
 800675a:	e000      	b.n	800675e <CO_NMT_getInternalState+0x18>
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <CO_LSSslave_getState+0x14>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	7c1b      	ldrb	r3, [r3, #16]
 800677c:	e000      	b.n	8006780 <CO_LSSslave_getState+0x16>
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80067a2:	2140      	movs	r1, #64	; 0x40
 80067a4:	2001      	movs	r0, #1
 80067a6:	f004 ff41 	bl	800b62c <calloc>
 80067aa:	4603      	mov	r3, r0
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8103 	beq.w	80069bc <CO_new+0x230>
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3340      	adds	r3, #64	; 0x40
 80067ba:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80067bc:	212c      	movs	r1, #44	; 0x2c
 80067be:	2001      	movs	r0, #1
 80067c0:	f004 ff34 	bl	800b62c <calloc>
 80067c4:	4603      	mov	r3, r0
 80067c6:	461a      	mov	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	611a      	str	r2, [r3, #16]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 80f5 	beq.w	80069c0 <CO_new+0x234>
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	332c      	adds	r3, #44	; 0x2c
 80067da:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 80067dc:	2308      	movs	r3, #8
 80067de:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80067e0:	2130      	movs	r1, #48	; 0x30
 80067e2:	2001      	movs	r0, #1
 80067e4:	f004 ff22 	bl	800b62c <calloc>
 80067e8:	4603      	mov	r3, r0
 80067ea:	461a      	mov	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	615a      	str	r2, [r3, #20]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80e5 	beq.w	80069c4 <CO_new+0x238>
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	3330      	adds	r3, #48	; 0x30
 80067fe:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006800:	7afb      	ldrb	r3, [r7, #11]
 8006802:	2110      	movs	r1, #16
 8006804:	4618      	mov	r0, r3
 8006806:	f004 ff11 	bl	800b62c <calloc>
 800680a:	4603      	mov	r3, r0
 800680c:	461a      	mov	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	619a      	str	r2, [r3, #24]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	f000 80d6 	beq.w	80069c8 <CO_new+0x23c>
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8006826:	2150      	movs	r1, #80	; 0x50
 8006828:	2001      	movs	r0, #1
 800682a:	f004 feff 	bl	800b62c <calloc>
 800682e:	4603      	mov	r3, r0
 8006830:	461a      	mov	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	61da      	str	r2, [r3, #28]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80c6 	beq.w	80069cc <CO_new+0x240>
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3350      	adds	r3, #80	; 0x50
 8006844:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8006846:	2311      	movs	r3, #17
 8006848:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 800684a:	7abb      	ldrb	r3, [r7, #10]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d912      	bls.n	8006876 <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006850:	7abb      	ldrb	r3, [r7, #10]
 8006852:	2108      	movs	r1, #8
 8006854:	4618      	mov	r0, r3
 8006856:	f004 fee9 	bl	800b62c <calloc>
 800685a:	4603      	mov	r3, r0
 800685c:	461a      	mov	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	621a      	str	r2, [r3, #32]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80b2 	beq.w	80069d0 <CO_new+0x244>
 800686c:	7abb      	ldrb	r3, [r7, #10]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4413      	add	r3, r2
 8006874:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8006876:	21a8      	movs	r1, #168	; 0xa8
 8006878:	2001      	movs	r0, #1
 800687a:	f004 fed7 	bl	800b62c <calloc>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	625a      	str	r2, [r3, #36]	; 0x24
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 80a2 	beq.w	80069d4 <CO_new+0x248>
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	33a8      	adds	r3, #168	; 0xa8
 8006894:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8006896:	212c      	movs	r1, #44	; 0x2c
 8006898:	2001      	movs	r0, #1
 800689a:	f004 fec7 	bl	800b62c <calloc>
 800689e:	4603      	mov	r3, r0
 80068a0:	461a      	mov	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	629a      	str	r2, [r3, #40]	; 0x28
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8094 	beq.w	80069d8 <CO_new+0x24c>
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	332c      	adds	r3, #44	; 0x2c
 80068b4:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 80068b6:	2160      	movs	r1, #96	; 0x60
 80068b8:	2001      	movs	r0, #1
 80068ba:	f004 feb7 	bl	800b62c <calloc>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8086 	beq.w	80069dc <CO_new+0x250>
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	3360      	adds	r3, #96	; 0x60
 80068d4:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 80068d6:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80068da:	2004      	movs	r0, #4
 80068dc:	f004 fea6 	bl	800b62c <calloc>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d077      	beq.n	80069e0 <CO_new+0x254>
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80068f6:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 80068f8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80068fc:	2004      	movs	r0, #4
 80068fe:	f004 fe95 	bl	800b62c <calloc>
 8006902:	4603      	mov	r3, r0
 8006904:	461a      	mov	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	635a      	str	r2, [r3, #52]	; 0x34
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	2b00      	cmp	r3, #0
 8006910:	d068      	beq.n	80069e4 <CO_new+0x258>
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8006918:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 800691a:	210c      	movs	r1, #12
 800691c:	2001      	movs	r0, #1
 800691e:	f004 fe85 	bl	800b62c <calloc>
 8006922:	4603      	mov	r3, r0
 8006924:	461a      	mov	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	639a      	str	r2, [r3, #56]	; 0x38
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	2b00      	cmp	r3, #0
 8006930:	d05a      	beq.n	80069e8 <CO_new+0x25c>
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	330c      	adds	r3, #12
 8006936:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8006938:	2174      	movs	r1, #116	; 0x74
 800693a:	2001      	movs	r0, #1
 800693c:	f004 fe76 	bl	800b62c <calloc>
 8006940:	4603      	mov	r3, r0
 8006942:	461a      	mov	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	63da      	str	r2, [r3, #60]	; 0x3c
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694c:	2b00      	cmp	r3, #0
 800694e:	d04d      	beq.n	80069ec <CO_new+0x260>
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	3374      	adds	r3, #116	; 0x74
 8006954:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8006956:	212c      	movs	r1, #44	; 0x2c
 8006958:	2001      	movs	r0, #1
 800695a:	f004 fe67 	bl	800b62c <calloc>
 800695e:	4603      	mov	r3, r0
 8006960:	461a      	mov	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	605a      	str	r2, [r3, #4]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d040      	beq.n	80069f0 <CO_new+0x264>
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	332c      	adds	r3, #44	; 0x2c
 8006972:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006974:	210c      	movs	r1, #12
 8006976:	2011      	movs	r0, #17
 8006978:	f004 fe58 	bl	800b62c <calloc>
 800697c:	4603      	mov	r3, r0
 800697e:	461a      	mov	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	609a      	str	r2, [r3, #8]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d033      	beq.n	80069f4 <CO_new+0x268>
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	33cc      	adds	r3, #204	; 0xcc
 8006990:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006992:	2118      	movs	r1, #24
 8006994:	2009      	movs	r0, #9
 8006996:	f004 fe49 	bl	800b62c <calloc>
 800699a:	4603      	mov	r3, r0
 800699c:	461a      	mov	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	60da      	str	r2, [r3, #12]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d026      	beq.n	80069f8 <CO_new+0x26c>
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	33d8      	adds	r3, #216	; 0xd8
 80069ae:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	601a      	str	r2, [r3, #0]
        coFinal = co;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	e01e      	b.n	80069fa <CO_new+0x26e>
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 80069bc:	bf00      	nop
 80069be:	e01c      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 80069c0:	bf00      	nop
 80069c2:	e01a      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80069c4:	bf00      	nop
 80069c6:	e018      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 80069c8:	bf00      	nop
 80069ca:	e016      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80069cc:	bf00      	nop
 80069ce:	e014      	b.n	80069fa <CO_new+0x26e>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 80069d0:	bf00      	nop
 80069d2:	e012      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 80069d4:	bf00      	nop
 80069d6:	e010      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 80069d8:	bf00      	nop
 80069da:	e00e      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 80069dc:	bf00      	nop
 80069de:	e00c      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 80069e0:	bf00      	nop
 80069e2:	e00a      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 80069e4:	bf00      	nop
 80069e6:	e008      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 80069e8:	bf00      	nop
 80069ea:	e006      	b.n	80069fa <CO_new+0x26e>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 80069ec:	bf00      	nop
 80069ee:	e004      	b.n	80069fa <CO_new+0x26e>
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 80069f0:	bf00      	nop
 80069f2:	e002      	b.n	80069fa <CO_new+0x26e>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 80069f4:	bf00      	nop
 80069f6:	e000      	b.n	80069fa <CO_new+0x26e>
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 80069f8:	bf00      	nop
    } while (false);

    if (coFinal == NULL) {
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <CO_new+0x27a>
        CO_delete(co);
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f80b 	bl	8006a1c <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <CO_new+0x286>
        *heapMemoryUsed = mem;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006a12:	697b      	ldr	r3, [r7, #20]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <CO_delete>:

void CO_delete(CO_t *co) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d053      	beq.n	8006ad2 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7f9 fe48 	bl	80006c4 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f004 fe29 	bl	800b690 <free>
    CO_free(co->CANrx);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f004 fe24 	bl	800b690 <free>
    CO_free(co->CANmodule);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f004 fe1f 	bl	800b690 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a56:	4618      	mov	r0, r3
 8006a58:	f004 fe1a 	bl	800b690 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	4618      	mov	r0, r3
 8006a62:	f004 fe15 	bl	800b690 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f004 fe10 	bl	800b690 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	4618      	mov	r0, r3
 8006a76:	f004 fe0b 	bl	800b690 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f004 fe06 	bl	800b690 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f004 fe01 	bl	800b690 <free>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	4618      	mov	r0, r3
 8006a94:	f004 fdfc 	bl	800b690 <free>

    /* Emergency */
    CO_free(co->em);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f004 fdf7 	bl	800b690 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f004 fdf2 	bl	800b690 <free>
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f004 fded 	bl	800b690 <free>
    CO_free(co->HBcons);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f004 fde8 	bl	800b690 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f004 fde3 	bl	800b690 <free>

    /* CANopen object */
    CO_free(co);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f004 fde0 	bl	800b690 <free>
 8006ad0:	e000      	b.n	8006ad4 <CO_delete+0xb8>
        return;
 8006ad2:	bf00      	nop
}
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b08a      	sub	sp, #40	; 0x28
 8006ade:	af04      	add	r7, sp, #16
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d102      	bne.n	8006af4 <CO_CANinit+0x1a>
 8006aee:	f04f 33ff 	mov.w	r3, #4294967295
 8006af2:	e01a      	b.n	8006b2a <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 8006afc:	68b8      	ldr	r0, [r7, #8]
 8006afe:	f7f9 fd43 	bl	8000588 <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6858      	ldr	r0, [r3, #4]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6899      	ldr	r1, [r3, #8]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	88fa      	ldrh	r2, [r7, #6]
 8006b10:	9202      	str	r2, [sp, #8]
 8006b12:	2209      	movs	r2, #9
 8006b14:	9201      	str	r2, [sp, #4]
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	2311      	movs	r3, #17
 8006b1a:	460a      	mov	r2, r1
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	f7f9 fd4a 	bl	80005b6 <CO_CANmodule_init>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 8006b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b08c      	sub	sp, #48	; 0x30
 8006b36:	af06      	add	r7, sp, #24
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	e01a      	b.n	8006b82 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	6852      	ldr	r2, [r2, #4]
 8006b58:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8006b5c:	9105      	str	r1, [sp, #20]
 8006b5e:	2108      	movs	r1, #8
 8006b60:	9104      	str	r1, [sp, #16]
 8006b62:	9203      	str	r2, [sp, #12]
 8006b64:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8006b68:	9202      	str	r2, [sp, #8]
 8006b6a:	2210      	movs	r2, #16
 8006b6c:	9201      	str	r2, [sp, #4]
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	f7ff fb1d 	bl	80061b4 <CO_LSSslave_init>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8006b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3718      	adds	r7, #24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8006b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b8e:	b091      	sub	sp, #68	; 0x44
 8006b90:	af0a      	add	r7, sp, #40	; 0x28
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d102      	bne.n	8006ba6 <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba4:	e134      	b.n	8006e10 <CO_CANopenInit+0x284>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d102      	bne.n	8006bb2 <CO_CANopenInit+0x26>
        em = co->em;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8006bb8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006bbc:	2bff      	cmp	r3, #255	; 0xff
 8006bbe:	d103      	bne.n	8006bc8 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	e00a      	b.n	8006bde <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8006bc8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <CO_CANopenInit+0x4c>
 8006bd0:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	da02      	bge.n	8006bde <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bdc:	e118      	b.n	8006e10 <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe ffd0 	bl	8005b88 <CO_LEDs_init>
 8006be8:	4603      	mov	r3, r0
 8006bea:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 8006bec:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <CO_CANopenInit+0x6e>
 8006bf4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006bf8:	e10a      	b.n	8006e10 <CO_CANopenInit+0x284>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 8006c02:	f06f 0312 	mvn.w	r3, #18
 8006c06:	e103      	b.n	8006e10 <CO_CANopenInit+0x284>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	69d8      	ldr	r0, [r3, #28]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 8006c10:	4b81      	ldr	r3, [pc, #516]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 8006c1e:	4b7e      	ldr	r3, [pc, #504]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 8006c24:	3390      	adds	r3, #144	; 0x90
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8006c26:	4a7c      	ldr	r2, [pc, #496]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006c28:	6812      	ldr	r2, [r2, #0]
 8006c2a:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 8006c2c:	3218      	adds	r2, #24
 8006c2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c30:	9105      	str	r1, [sp, #20]
 8006c32:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8006c36:	9104      	str	r1, [sp, #16]
 8006c38:	9203      	str	r2, [sp, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	9202      	str	r2, [sp, #8]
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	2311      	movs	r3, #17
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	4633      	mov	r3, r6
 8006c46:	462a      	mov	r2, r5
 8006c48:	4621      	mov	r1, r4
 8006c4a:	f7fa f923 	bl	8000e94 <CO_EM_init>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 8006c52:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <CO_CANopenInit+0xd4>
 8006c5a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006c5e:	e0d7      	b.n	8006e10 <CO_CANopenInit+0x284>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	691c      	ldr	r4, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 8006c64:	4b6c      	ldr	r3, [pc, #432]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 8006c6a:	f103 05b4 	add.w	r5, r3, #180	; 0xb4
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	6852      	ldr	r2, [r2, #4]
 8006c76:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8006c7a:	b289      	uxth	r1, r1
 8006c7c:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 8006c80:	b289      	uxth	r1, r1
 8006c82:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 8006c86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006c88:	9008      	str	r0, [sp, #32]
 8006c8a:	9107      	str	r1, [sp, #28]
 8006c8c:	2107      	movs	r1, #7
 8006c8e:	9106      	str	r1, [sp, #24]
 8006c90:	9205      	str	r2, [sp, #20]
 8006c92:	2200      	movs	r2, #0
 8006c94:	9204      	str	r2, [sp, #16]
 8006c96:	2200      	movs	r2, #0
 8006c98:	9203      	str	r2, [sp, #12]
 8006c9a:	9302      	str	r3, [sp, #8]
 8006c9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4633      	mov	r3, r6
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4629      	mov	r1, r5
 8006caa:	4620      	mov	r0, r4
 8006cac:	f7fa ff70 	bl	8001b90 <CO_NMT_init>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 8006cb4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <CO_CANopenInit+0x136>
 8006cbc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006cc0:	e0a6      	b.n	8006e10 <CO_CANopenInit+0x284>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6958      	ldr	r0, [r3, #20]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8006cca:	4b53      	ldr	r3, [pc, #332]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 8006cd0:	33a8      	adds	r3, #168	; 0xa8
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	6852      	ldr	r2, [r2, #4]
 8006cd6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006cd8:	9103      	str	r1, [sp, #12]
 8006cda:	2108      	movs	r1, #8
 8006cdc:	9102      	str	r1, [sp, #8]
 8006cde:	9201      	str	r2, [sp, #4]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	2308      	movs	r3, #8
 8006ce4:	4622      	mov	r2, r4
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	f7fa fc56 	bl	8001598 <CO_HBconsumer_init>
 8006cec:	4603      	mov	r3, r0
 8006cee:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 8006cf0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <CO_CANopenInit+0x172>
 8006cf8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006cfc:	e088      	b.n	8006e10 <CO_CANopenInit+0x284>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 8006cfe:	4b46      	ldr	r3, [pc, #280]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	33d8      	adds	r3, #216	; 0xd8
 8006d06:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006d08:	2300      	movs	r3, #0
 8006d0a:	827b      	strh	r3, [r7, #18]
 8006d0c:	e033      	b.n	8006d76 <CO_CANopenInit+0x1ea>
            err = CO_SDOserver_init(&co->SDOserver[i],
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d16:	21a8      	movs	r1, #168	; 0xa8
 8006d18:	fb01 f303 	mul.w	r3, r1, r3
 8006d1c:	18d6      	adds	r6, r2, r3
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	f102 030c 	add.w	r3, r2, #12
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	8a79      	ldrh	r1, [r7, #18]
 8006d2c:	3107      	adds	r1, #7
 8006d2e:	b289      	uxth	r1, r1
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	6840      	ldr	r0, [r0, #4]
 8006d34:	8a7c      	ldrh	r4, [r7, #18]
 8006d36:	3406      	adds	r4, #6
 8006d38:	b2a4      	uxth	r4, r4
 8006d3a:	f897 c048 	ldrb.w	ip, [r7, #72]	; 0x48
 8006d3e:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8006d40:	9505      	str	r5, [sp, #20]
 8006d42:	9404      	str	r4, [sp, #16]
 8006d44:	9003      	str	r0, [sp, #12]
 8006d46:	9102      	str	r1, [sp, #8]
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4663      	mov	r3, ip
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	4630      	mov	r0, r6
 8006d54:	f7fd f98c 	bl	8004070 <CO_SDOserver_init>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8006d5c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <CO_CANopenInit+0x1de>
 8006d64:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006d68:	e052      	b.n	8006e10 <CO_CANopenInit+0x284>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006d6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3301      	adds	r3, #1
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	827b      	strh	r3, [r7, #18]
 8006d76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	ddc7      	ble.n	8006d0e <CO_CANopenInit+0x182>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a98      	ldr	r0, [r3, #40]	; 0x28
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 8006d82:	4b25      	ldr	r3, [pc, #148]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 8006d88:	f103 0184 	add.w	r1, r3, #132	; 0x84
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	2302      	movs	r3, #2
 8006d96:	f7fe fe01 	bl	800599c <CO_TIME_init>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 8006d9e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <CO_CANopenInit+0x220>
 8006da6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006daa:	e031      	b.n	8006e10 <CO_CANopenInit+0x284>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6add      	ldr	r5, [r3, #44]	; 0x2c
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 8006db0:	4b19      	ldr	r3, [pc, #100]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8006db6:	f103 0624 	add.w	r6, r3, #36	; 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006dba:	4b17      	ldr	r3, [pc, #92]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8006dc0:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 8006dc4:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8006dca:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006dcc:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <CO_CANopenInit+0x28c>)
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 8006dd2:	32cc      	adds	r2, #204	; 0xcc
 8006dd4:	68f9      	ldr	r1, [r7, #12]
 8006dd6:	6849      	ldr	r1, [r1, #4]
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	6840      	ldr	r0, [r0, #4]
 8006ddc:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8006dde:	9406      	str	r4, [sp, #24]
 8006de0:	2400      	movs	r4, #0
 8006de2:	9405      	str	r4, [sp, #20]
 8006de4:	9004      	str	r0, [sp, #16]
 8006de6:	2001      	movs	r0, #1
 8006de8:	9003      	str	r0, [sp, #12]
 8006dea:	9102      	str	r1, [sp, #8]
 8006dec:	9201      	str	r2, [sp, #4]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	4663      	mov	r3, ip
 8006df2:	4632      	mov	r2, r6
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4628      	mov	r0, r5
 8006df8:	f7fe fb08 	bl	800540c <CO_SYNC_init>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 8006e00:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <CO_CANopenInit+0x282>
 8006e08:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006e0c:	e000      	b.n	8006e10 <CO_CANopenInit+0x284>
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e18:	200009dc 	.word	0x200009dc

08006e1c <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 8006e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e1e:	b093      	sub	sp, #76	; 0x4c
 8006e20:	af06      	add	r7, sp, #24
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006e30:	f04f 33ff 	mov.w	r3, #4294967295
 8006e34:	e0c4      	b.n	8006fc0 <CO_CANopenInitPDO+0x1a4>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 8006e36:	78fb      	ldrb	r3, [r7, #3]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d007      	beq.n	8006e4c <CO_CANopenInitPDO+0x30>
 8006e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	db03      	blt.n	8006e4c <CO_CANopenInitPDO+0x30>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d009      	beq.n	8006e60 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <CO_CANopenInitPDO+0x3e>
 8006e54:	f06f 0312 	mvn.w	r3, #18
 8006e58:	e0b2      	b.n	8006fc0 <CO_CANopenInitPDO+0x1a4>
 8006e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e5e:	e0af      	b.n	8006fc0 <CO_CANopenInitPDO+0x1a4>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 8006e60:	4b59      	ldr	r3, [pc, #356]	; (8006fc8 <CO_CANopenInitPDO+0x1ac>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	33f0      	adds	r3, #240	; 0xf0
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 8006e6a:	4b57      	ldr	r3, [pc, #348]	; (8006fc8 <CO_CANopenInitPDO+0x1ac>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8006e74:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006e76:	2300      	movs	r3, #0
 8006e78:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e7a:	e044      	b.n	8006f06 <CO_CANopenInitPDO+0xea>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 8006e80:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	dc09      	bgt.n	8006e9c <CO_CANopenInitPDO+0x80>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 8006e88:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006e8c:	3302      	adds	r3, #2
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	4413      	add	r3, r2
 8006e9a:	84bb      	strh	r3, [r7, #36]	; 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006ea4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	18d5      	adds	r5, r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	f103 020c 	add.w	r2, r3, #12
 8006eb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ebc:	f102 010c 	add.w	r1, r2, #12
 8006ec0:	62b9      	str	r1, [r7, #40]	; 0x28
 8006ec2:	68f9      	ldr	r1, [r7, #12]
 8006ec4:	6849      	ldr	r1, [r1, #4]
 8006ec6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8006ec8:	3003      	adds	r0, #3
 8006eca:	b280      	uxth	r0, r0
 8006ecc:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006ece:	9405      	str	r4, [sp, #20]
 8006ed0:	9004      	str	r0, [sp, #16]
 8006ed2:	9103      	str	r1, [sp, #12]
 8006ed4:	9202      	str	r2, [sp, #8]
 8006ed6:	9301      	str	r3, [sp, #4]
 8006ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	4633      	mov	r3, r6
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f7fb ff9a 	bl	8002e1c <CO_RPDO_init>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 8006eec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <CO_CANopenInitPDO+0xde>
 8006ef4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8006ef8:	e062      	b.n	8006fc0 <CO_CANopenInitPDO+0x1a4>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006efa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3301      	adds	r3, #1
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006f06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	ddb6      	ble.n	8006e7c <CO_CANopenInitPDO+0x60>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8006f0e:	4b2e      	ldr	r3, [pc, #184]	; (8006fc8 <CO_CANopenInitPDO+0x1ac>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f18:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8006f1a:	4b2b      	ldr	r3, [pc, #172]	; (8006fc8 <CO_CANopenInitPDO+0x1ac>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006f24:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006f26:	2300      	movs	r3, #0
 8006f28:	837b      	strh	r3, [r7, #26]
 8006f2a:	e044      	b.n	8006fb6 <CO_CANopenInitPDO+0x19a>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 8006f30:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	dc09      	bgt.n	8006f4c <CO_CANopenInitPDO+0x130>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8006f38:	8b7b      	ldrh	r3, [r7, #26]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	4413      	add	r3, r2
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006f4a:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f50:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006f54:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006f58:	fb01 f303 	mul.w	r3, r1, r3
 8006f5c:	18d5      	adds	r5, r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	f103 020c 	add.w	r2, r3, #12
 8006f68:	623a      	str	r2, [r7, #32]
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	f102 010c 	add.w	r1, r2, #12
 8006f70:	61f9      	str	r1, [r7, #28]
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	6849      	ldr	r1, [r1, #4]
 8006f76:	8b78      	ldrh	r0, [r7, #26]
 8006f78:	3002      	adds	r0, #2
 8006f7a:	b280      	uxth	r0, r0
 8006f7c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006f7e:	9405      	str	r4, [sp, #20]
 8006f80:	9004      	str	r0, [sp, #16]
 8006f82:	9103      	str	r1, [sp, #12]
 8006f84:	9202      	str	r2, [sp, #8]
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	8b3b      	ldrh	r3, [r7, #24]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	4633      	mov	r3, r6
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7fc fb0e 	bl	80035b4 <CO_TPDO_init>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 8006f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <CO_CANopenInitPDO+0x18e>
 8006fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fa8:	e00a      	b.n	8006fc0 <CO_CANopenInitPDO+0x1a4>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006faa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	837b      	strh	r3, [r7, #26]
 8006fb6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	ddb6      	ble.n	8006f2c <CO_CANopenInitPDO+0x110>
        }
    }
#endif

    return CO_ERROR_NO;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3734      	adds	r7, #52	; 0x34
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc8:	200009dc 	.word	0x200009dc

08006fcc <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 8006fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fce:	b097      	sub	sp, #92	; 0x5c
 8006fd0:	af08      	add	r7, sp, #32
 8006fd2:	61f8      	str	r0, [r7, #28]
 8006fd4:	61b9      	str	r1, [r7, #24]
 8006fd6:	617a      	str	r2, [r7, #20]
 8006fd8:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fbae 	bl	8006746 <CO_NMT_getInternalState>
 8006fea:	4603      	mov	r3, r0
 8006fec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8006ff0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8006ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff6:	d003      	beq.n	8007000 <CO_process+0x34>
 8006ff8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d101      	bne.n	8007004 <CO_process+0x38>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <CO_process+0x3a>
 8007004:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	4618      	mov	r0, r3
 800700e:	f7f9 fc6d 	bl	80008ec <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff f942 	bl	80062a0 <CO_LSSslave_process>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	8a5b      	ldrh	r3, [r3, #18]
 8007034:	847b      	strh	r3, [r7, #34]	; 0x22
    bool_t LSSslave_configuration = false;
 8007036:	2300      	movs	r3, #0
 8007038:	633b      	str	r3, [r7, #48]	; 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff fb93 	bl	800676a <CO_LSSslave_getState>
 8007044:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 800704a:	2301      	movs	r3, #1
 800704c:	633b      	str	r3, [r7, #48]	; 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8007052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <CO_process+0x92>
 8007058:	f997 4021 	ldrsb.w	r4, [r7, #33]	; 0x21
 800705c:	e000      	b.n	8007060 <CO_process+0x94>
 800705e:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 8007060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007062:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 8007066:	2b00      	cmp	r3, #0
 8007068:	bf14      	ite	ne
 800706a:	2301      	movne	r3, #1
 800706c:	2300      	moveq	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 8007072:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007074:	f240 3303 	movw	r3, #771	; 0x303
 8007078:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 800707a:	2b00      	cmp	r3, #0
 800707c:	bf14      	ite	ne
 800707e:	2301      	movne	r3, #1
 8007080:	2300      	moveq	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	2b00      	cmp	r3, #0
 800708a:	d107      	bne.n	800709c <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	2118      	movs	r1, #24
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff fb1a 	bl	80066cc <CO_isError>
 8007098:	4605      	mov	r5, r0
 800709a:	e000      	b.n	800709e <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 800709c:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d113      	bne.n	80070cc <CO_process+0x100>
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	211b      	movs	r1, #27
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff fb0e 	bl	80066cc <CO_isError>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d108      	bne.n	80070c8 <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	211c      	movs	r1, #28
 80070bc:	4618      	mov	r0, r3
 80070be:	f7ff fb05 	bl	80066cc <CO_isError>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 80070c8:	2301      	movs	r3, #1
 80070ca:	e000      	b.n	80070ce <CO_process+0x102>
 80070cc:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 80070ce:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff fb20 	bl	800671a <CO_getErrorRegister>
 80070da:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 80070dc:	2b00      	cmp	r3, #0
 80070de:	bf14      	ite	ne
 80070e0:	2301      	movne	r3, #1
 80070e2:	2300      	moveq	r3, #0
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	461a      	mov	r2, r3
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	9307      	str	r3, [sp, #28]
 80070ec:	2300      	movs	r3, #0
 80070ee:	9306      	str	r3, [sp, #24]
 80070f0:	9205      	str	r2, [sp, #20]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	9304      	str	r3, [sp, #16]
 80070f6:	9503      	str	r5, [sp, #12]
 80070f8:	2300      	movs	r3, #0
 80070fa:	9302      	str	r3, [sp, #8]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	4622      	mov	r2, r4
 8007108:	6979      	ldr	r1, [r7, #20]
 800710a:	4630      	mov	r0, r6
 800710c:	f7fe fd54 	bl	8005bb8 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <CO_process+0x152>
        return reset;
 8007118:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800711c:	e047      	b.n	80071ae <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	69d8      	ldr	r0, [r3, #28]
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007128:	f7f9 ff94 	bl	8001054 <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	6918      	ldr	r0, [r3, #16]
 8007130:	f107 0121 	add.w	r1, r7, #33	; 0x21
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	f7fa fde8 	bl	8001d0c <CO_NMT_process>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007142:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 8007146:	2b7f      	cmp	r3, #127	; 0x7f
 8007148:	d003      	beq.n	8007152 <CO_process+0x186>
 800714a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800714e:	2b05      	cmp	r3, #5
 8007150:	d101      	bne.n	8007156 <CO_process+0x18a>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <CO_process+0x18c>
 8007156:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007158:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800715a:	2300      	movs	r3, #0
 800715c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007160:	e011      	b.n	8007186 <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800716a:	21a8      	movs	r1, #168	; 0xa8
 800716c:	fb01 f303 	mul.w	r3, r1, r3
 8007170:	18d0      	adds	r0, r2, r3
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007178:	f7fd fa42 	bl	8004600 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 800717c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007180:	3301      	adds	r3, #1
 8007182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0e9      	beq.n	8007162 <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	6958      	ldr	r0, [r3, #20]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007198:	f7fa fb42 	bl	8001820 <CO_HBconsumer_process>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fe fc79 	bl	8005a9c <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 80071aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	373c      	adds	r7, #60	; 0x3c
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071b6 <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b088      	sub	sp, #32
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d12d      	bne.n	800722a <CO_process_SYNC+0x74>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff fab7 	bl	8006746 <CO_NMT_getInternalState>
 80071d8:	4603      	mov	r3, r0
 80071da:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 80071dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80071e0:	2b7f      	cmp	r3, #127	; 0x7f
 80071e2:	d003      	beq.n	80071ec <CO_process_SYNC+0x36>
 80071e4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80071e8:	2b05      	cmp	r3, #5
 80071ea:	d101      	bne.n	80071f0 <CO_process_SYNC+0x3a>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <CO_process_SYNC+0x3c>
 80071f0:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 80071f2:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	6979      	ldr	r1, [r7, #20]
 80071fe:	f7fe fa2d 	bl	800565c <CO_SYNC_process>
 8007202:	4603      	mov	r3, r0
 8007204:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8007206:	7cfb      	ldrb	r3, [r7, #19]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d008      	beq.n	800721e <CO_process_SYNC+0x68>
 800720c:	2b02      	cmp	r3, #2
 800720e:	dc0f      	bgt.n	8007230 <CO_process_SYNC+0x7a>
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00c      	beq.n	800722e <CO_process_SYNC+0x78>
 8007214:	2b01      	cmp	r3, #1
 8007216:	d10b      	bne.n	8007230 <CO_process_SYNC+0x7a>
            case CO_SYNC_NONE:
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
 8007218:	2301      	movs	r3, #1
 800721a:	61fb      	str	r3, [r7, #28]
                break;
 800721c:	e008      	b.n	8007230 <CO_process_SYNC+0x7a>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	4618      	mov	r0, r3
 8007224:	f7f9 fb19 	bl	800085a <CO_CANclearPendingSyncPDOs>
                break;
 8007228:	e002      	b.n	8007230 <CO_process_SYNC+0x7a>
        }
    }
 800722a:	bf00      	nop
 800722c:	e000      	b.n	8007230 <CO_process_SYNC+0x7a>
                break;
 800722e:	bf00      	nop

    return syncWas;
 8007230:	69fb      	ldr	r3, [r7, #28]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b088      	sub	sp, #32
 800723e:	af02      	add	r7, sp, #8
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d129      	bne.n	80072a4 <CO_process_RPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff fa76 	bl	8006746 <CO_NMT_getInternalState>
 800725a:	4603      	mov	r3, r0
 800725c:	2b05      	cmp	r3, #5
 800725e:	bf0c      	ite	eq
 8007260:	2301      	moveq	r3, #1
 8007262:	2300      	movne	r3, #0
 8007264:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8007266:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007268:	2300      	movs	r3, #0
 800726a:	82fb      	strh	r3, [r7, #22]
 800726c:	e015      	b.n	800729a <CO_process_RPDO+0x60>
        CO_RPDO_process(&co->RPDO[i],
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007272:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007276:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800727a:	fb01 f303 	mul.w	r3, r1, r3
 800727e:	18d0      	adds	r0, r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	6879      	ldr	r1, [r7, #4]
 800728a:	f7fb ff0d 	bl	80030a8 <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 800728e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007292:	b29b      	uxth	r3, r3
 8007294:	3301      	adds	r3, #1
 8007296:	b29b      	uxth	r3, r3
 8007298:	82fb      	strh	r3, [r7, #22]
 800729a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800729e:	2b03      	cmp	r3, #3
 80072a0:	dde5      	ble.n	800726e <CO_process_RPDO+0x34>
 80072a2:	e000      	b.n	80072a6 <CO_process_RPDO+0x6c>
        return;
 80072a4:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b088      	sub	sp, #32
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d129      	bne.n	8007316 <CO_process_TPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff fa3d 	bl	8006746 <CO_NMT_getInternalState>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	bf0c      	ite	eq
 80072d2:	2301      	moveq	r3, #1
 80072d4:	2300      	movne	r3, #0
 80072d6:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 80072d8:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80072da:	2300      	movs	r3, #0
 80072dc:	82fb      	strh	r3, [r7, #22]
 80072de:	e015      	b.n	800730c <CO_process_TPDO+0x60>
        CO_TPDO_process(&co->TPDO[i],
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80072e8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	18d0      	adds	r0, r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	f7fc fb78 	bl	80039f0 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007300:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007304:	b29b      	uxth	r3, r3
 8007306:	3301      	adds	r3, #1
 8007308:	b29b      	uxth	r3, r3
 800730a:	82fb      	strh	r3, [r7, #22]
 800730c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007310:	2b03      	cmp	r3, #3
 8007312:	dde5      	ble.n	80072e0 <CO_process_TPDO+0x34>
 8007314:	e000      	b.n	8007318 <CO_process_TPDO+0x6c>
        return;
 8007316:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
	...

08007320 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8007324:	4b17      	ldr	r3, [pc, #92]	; (8007384 <MX_CAN_Init+0x64>)
 8007326:	4a18      	ldr	r2, [pc, #96]	; (8007388 <MX_CAN_Init+0x68>)
 8007328:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800732a:	4b16      	ldr	r3, [pc, #88]	; (8007384 <MX_CAN_Init+0x64>)
 800732c:	2208      	movs	r2, #8
 800732e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007330:	4b14      	ldr	r3, [pc, #80]	; (8007384 <MX_CAN_Init+0x64>)
 8007332:	2200      	movs	r2, #0
 8007334:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007336:	4b13      	ldr	r3, [pc, #76]	; (8007384 <MX_CAN_Init+0x64>)
 8007338:	2200      	movs	r2, #0
 800733a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800733c:	4b11      	ldr	r3, [pc, #68]	; (8007384 <MX_CAN_Init+0x64>)
 800733e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8007342:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8007344:	4b0f      	ldr	r3, [pc, #60]	; (8007384 <MX_CAN_Init+0x64>)
 8007346:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800734a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800734c:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <MX_CAN_Init+0x64>)
 800734e:	2200      	movs	r2, #0
 8007350:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007352:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <MX_CAN_Init+0x64>)
 8007354:	2200      	movs	r2, #0
 8007356:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007358:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <MX_CAN_Init+0x64>)
 800735a:	2200      	movs	r2, #0
 800735c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <MX_CAN_Init+0x64>)
 8007360:	2200      	movs	r2, #0
 8007362:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <MX_CAN_Init+0x64>)
 8007366:	2200      	movs	r2, #0
 8007368:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800736a:	4b06      	ldr	r3, [pc, #24]	; (8007384 <MX_CAN_Init+0x64>)
 800736c:	2200      	movs	r2, #0
 800736e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007370:	4804      	ldr	r0, [pc, #16]	; (8007384 <MX_CAN_Init+0x64>)
 8007372:	f000 fbcf 	bl	8007b14 <HAL_CAN_Init>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800737c:	f000 f94e 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8007380:	bf00      	nop
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20000a78 	.word	0x20000a78
 8007388:	40006400 	.word	0x40006400

0800738c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	; 0x28
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007394:	f107 0314 	add.w	r3, r7, #20
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	605a      	str	r2, [r3, #4]
 800739e:	609a      	str	r2, [r3, #8]
 80073a0:	60da      	str	r2, [r3, #12]
 80073a2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a1c      	ldr	r2, [pc, #112]	; (800741c <HAL_CAN_MspInit+0x90>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d131      	bne.n	8007412 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80073ae:	4b1c      	ldr	r3, [pc, #112]	; (8007420 <HAL_CAN_MspInit+0x94>)
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	4a1b      	ldr	r2, [pc, #108]	; (8007420 <HAL_CAN_MspInit+0x94>)
 80073b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80073b8:	61d3      	str	r3, [r2, #28]
 80073ba:	4b19      	ldr	r3, [pc, #100]	; (8007420 <HAL_CAN_MspInit+0x94>)
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073c6:	4b16      	ldr	r3, [pc, #88]	; (8007420 <HAL_CAN_MspInit+0x94>)
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	4a15      	ldr	r2, [pc, #84]	; (8007420 <HAL_CAN_MspInit+0x94>)
 80073cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d0:	6153      	str	r3, [r2, #20]
 80073d2:	4b13      	ldr	r3, [pc, #76]	; (8007420 <HAL_CAN_MspInit+0x94>)
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80073de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073e4:	2302      	movs	r3, #2
 80073e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073e8:	2301      	movs	r3, #1
 80073ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80073ec:	2303      	movs	r3, #3
 80073ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80073f0:	2309      	movs	r3, #9
 80073f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073f4:	f107 0314 	add.w	r3, r7, #20
 80073f8:	4619      	mov	r1, r3
 80073fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073fe:	f001 fb0b 	bl	8008a18 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8007402:	2200      	movs	r2, #0
 8007404:	2100      	movs	r1, #0
 8007406:	2014      	movs	r0, #20
 8007408:	f001 facf 	bl	80089aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800740c:	2014      	movs	r0, #20
 800740e:	f001 fae8 	bl	80089e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8007412:	bf00      	nop
 8007414:	3728      	adds	r7, #40	; 0x28
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40006400 	.word	0x40006400
 8007420:	40021000 	.word	0x40021000

08007424 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	; 0x28
 8007428:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800742a:	f107 0314 	add.w	r3, r7, #20
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	605a      	str	r2, [r3, #4]
 8007434:	609a      	str	r2, [r3, #8]
 8007436:	60da      	str	r2, [r3, #12]
 8007438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800743a:	4b2b      	ldr	r3, [pc, #172]	; (80074e8 <MX_GPIO_Init+0xc4>)
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	4a2a      	ldr	r2, [pc, #168]	; (80074e8 <MX_GPIO_Init+0xc4>)
 8007440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007444:	6153      	str	r3, [r2, #20]
 8007446:	4b28      	ldr	r3, [pc, #160]	; (80074e8 <MX_GPIO_Init+0xc4>)
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800744e:	613b      	str	r3, [r7, #16]
 8007450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007452:	4b25      	ldr	r3, [pc, #148]	; (80074e8 <MX_GPIO_Init+0xc4>)
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	4a24      	ldr	r2, [pc, #144]	; (80074e8 <MX_GPIO_Init+0xc4>)
 8007458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800745c:	6153      	str	r3, [r2, #20]
 800745e:	4b22      	ldr	r3, [pc, #136]	; (80074e8 <MX_GPIO_Init+0xc4>)
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800746a:	4b1f      	ldr	r3, [pc, #124]	; (80074e8 <MX_GPIO_Init+0xc4>)
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <MX_GPIO_Init+0xc4>)
 8007470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007474:	6153      	str	r3, [r2, #20]
 8007476:	4b1c      	ldr	r3, [pc, #112]	; (80074e8 <MX_GPIO_Init+0xc4>)
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800747e:	60bb      	str	r3, [r7, #8]
 8007480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007482:	4b19      	ldr	r3, [pc, #100]	; (80074e8 <MX_GPIO_Init+0xc4>)
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <MX_GPIO_Init+0xc4>)
 8007488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800748c:	6153      	str	r3, [r2, #20]
 800748e:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <MX_GPIO_Init+0xc4>)
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007496:	607b      	str	r3, [r7, #4]
 8007498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800749a:	2200      	movs	r2, #0
 800749c:	2120      	movs	r1, #32
 800749e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074a2:	f001 fc43 	bl	8008d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80074a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80074ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80074b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80074b6:	f107 0314 	add.w	r3, r7, #20
 80074ba:	4619      	mov	r1, r3
 80074bc:	480b      	ldr	r0, [pc, #44]	; (80074ec <MX_GPIO_Init+0xc8>)
 80074be:	f001 faab 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80074c2:	2320      	movs	r3, #32
 80074c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074c6:	2301      	movs	r3, #1
 80074c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074ce:	2300      	movs	r3, #0
 80074d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80074d2:	f107 0314 	add.w	r3, r7, #20
 80074d6:	4619      	mov	r1, r3
 80074d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074dc:	f001 fa9c 	bl	8008a18 <HAL_GPIO_Init>

}
 80074e0:	bf00      	nop
 80074e2:	3728      	adds	r7, #40	; 0x28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	40021000 	.word	0x40021000
 80074ec:	48000800 	.word	0x48000800

080074f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80074f4:	f000 faa8 	bl	8007a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80074f8:	f000 f81e 	bl	8007538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80074fc:	f7ff ff92 	bl	8007424 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8007500:	f000 fa06 	bl	8007910 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8007504:	f7ff ff0c 	bl	8007320 <MX_CAN_Init>
  MX_TIM6_Init();
 8007508:	f000 f9a6 	bl	8007858 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  xCANopenNodeInit();
 800750c:	f7f8 fec0 	bl	8000290 <xCANopenNodeInit>
  HAL_TIM_Base_Start_IT(&htim6);
 8007510:	4806      	ldr	r0, [pc, #24]	; (800752c <main+0x3c>)
 8007512:	f003 f923 	bl	800a75c <HAL_TIM_Base_Start_IT>
  HAL_UART_Transmit(&huart2, (uint8_t *)"Program started\n", 16, 1000);
 8007516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800751a:	2210      	movs	r2, #16
 800751c:	4904      	ldr	r1, [pc, #16]	; (8007530 <main+0x40>)
 800751e:	4805      	ldr	r0, [pc, #20]	; (8007534 <main+0x44>)
 8007520:	f003 fc6a 	bl	800adf8 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	vCANopenNodeProcess();
 8007524:	f7f8 ffd4 	bl	80004d0 <vCANopenNodeProcess>
 8007528:	e7fc      	b.n	8007524 <main+0x34>
 800752a:	bf00      	nop
 800752c:	20000aa4 	.word	0x20000aa4
 8007530:	0800c8f0 	.word	0x0800c8f0
 8007534:	20000af0 	.word	0x20000af0

08007538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b0a6      	sub	sp, #152	; 0x98
 800753c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800753e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007542:	2228      	movs	r2, #40	; 0x28
 8007544:	2100      	movs	r1, #0
 8007546:	4618      	mov	r0, r3
 8007548:	f004 f8d2 	bl	800b6f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800754c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	605a      	str	r2, [r3, #4]
 8007556:	609a      	str	r2, [r3, #8]
 8007558:	60da      	str	r2, [r3, #12]
 800755a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800755c:	1d3b      	adds	r3, r7, #4
 800755e:	2258      	movs	r2, #88	; 0x58
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f004 f8c4 	bl	800b6f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007568:	2302      	movs	r3, #2
 800756a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800756c:	2301      	movs	r3, #1
 800756e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007570:	2310      	movs	r3, #16
 8007572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007576:	2302      	movs	r3, #2
 8007578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800757c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007580:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007584:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800758c:	2300      	movs	r3, #0
 800758e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007592:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007596:	4618      	mov	r0, r3
 8007598:	f001 fbe0 	bl	8008d5c <HAL_RCC_OscConfig>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80075a2:	f000 f83b 	bl	800761c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075a6:	230f      	movs	r3, #15
 80075a8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075aa:	2302      	movs	r3, #2
 80075ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075ae:	2300      	movs	r3, #0
 80075b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80075b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80075b8:	2300      	movs	r3, #0
 80075ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80075bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80075c0:	2102      	movs	r1, #2
 80075c2:	4618      	mov	r0, r3
 80075c4:	f002 fc1e 	bl	8009e04 <HAL_RCC_ClockConfig>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80075ce:	f000 f825 	bl	800761c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80075d2:	2302      	movs	r3, #2
 80075d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80075d6:	2300      	movs	r3, #0
 80075d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80075da:	1d3b      	adds	r3, r7, #4
 80075dc:	4618      	mov	r0, r3
 80075de:	f002 fe47 	bl	800a270 <HAL_RCCEx_PeriphCLKConfig>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80075e8:	f000 f818 	bl	800761c <Error_Handler>
  }
}
 80075ec:	bf00      	nop
 80075ee:	3798      	adds	r7, #152	; 0x98
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	vCANopenNodeReceiveInterrupt();
 80075fc:	f7f8 ffb8 	bl	8000570 <vCANopenNodeReceiveInterrupt>
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	vCANopenNodeTimerInterrupt();
 8007610:	f7f8 ff7e 	bl	8000510 <vCANopenNodeTimerInterrupt>
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007620:	b672      	cpsid	i
}
 8007622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007624:	e7fe      	b.n	8007624 <Error_Handler+0x8>
	...

08007628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <HAL_MspInit+0x44>)
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	4a0e      	ldr	r2, [pc, #56]	; (800766c <HAL_MspInit+0x44>)
 8007634:	f043 0301 	orr.w	r3, r3, #1
 8007638:	6193      	str	r3, [r2, #24]
 800763a:	4b0c      	ldr	r3, [pc, #48]	; (800766c <HAL_MspInit+0x44>)
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	607b      	str	r3, [r7, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007646:	4b09      	ldr	r3, [pc, #36]	; (800766c <HAL_MspInit+0x44>)
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	4a08      	ldr	r2, [pc, #32]	; (800766c <HAL_MspInit+0x44>)
 800764c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007650:	61d3      	str	r3, [r2, #28]
 8007652:	4b06      	ldr	r3, [pc, #24]	; (800766c <HAL_MspInit+0x44>)
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800765e:	2007      	movs	r0, #7
 8007660:	f001 f998 	bl	8008994 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40021000 	.word	0x40021000

08007670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007674:	e7fe      	b.n	8007674 <NMI_Handler+0x4>

08007676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007676:	b480      	push	{r7}
 8007678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800767a:	e7fe      	b.n	800767a <HardFault_Handler+0x4>

0800767c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007680:	e7fe      	b.n	8007680 <MemManage_Handler+0x4>

08007682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007682:	b480      	push	{r7}
 8007684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007686:	e7fe      	b.n	8007686 <BusFault_Handler+0x4>

08007688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800768c:	e7fe      	b.n	800768c <UsageFault_Handler+0x4>

0800768e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800768e:	b480      	push	{r7}
 8007690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007692:	bf00      	nop
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076a0:	bf00      	nop
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076aa:	b480      	push	{r7}
 80076ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076ae:	bf00      	nop
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076bc:	f000 fa0a 	bl	8007ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076c0:	bf00      	nop
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80076c8:	4802      	ldr	r0, [pc, #8]	; (80076d4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80076ca:	f000 fe63 	bl	8008394 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80076ce:	bf00      	nop
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000a78 	.word	0x20000a78

080076d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80076dc:	4802      	ldr	r0, [pc, #8]	; (80076e8 <TIM6_DAC_IRQHandler+0x10>)
 80076de:	f003 f8ad 	bl	800a83c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80076e2:	bf00      	nop
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000aa4 	.word	0x20000aa4

080076ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	e00a      	b.n	8007714 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80076fe:	f3af 8000 	nop.w
 8007702:	4601      	mov	r1, r0
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	60ba      	str	r2, [r7, #8]
 800770a:	b2ca      	uxtb	r2, r1
 800770c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	3301      	adds	r3, #1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	429a      	cmp	r2, r3
 800771a:	dbf0      	blt.n	80076fe <_read+0x12>
	}

return len;
 800771c:	687b      	ldr	r3, [r7, #4]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	e009      	b.n	800774c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	60ba      	str	r2, [r7, #8]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	4618      	mov	r0, r3
 8007742:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	3301      	adds	r3, #1
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	dbf1      	blt.n	8007738 <_write+0x12>
	}
	return len;
 8007754:	687b      	ldr	r3, [r7, #4]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <_close>:

int _close(int file)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
	return -1;
 8007766:	f04f 33ff 	mov.w	r3, #4294967295
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007786:	605a      	str	r2, [r3, #4]
	return 0;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <_isatty>:

int _isatty(int file)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
	return 1;
 800779e:	2301      	movs	r3, #1
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
	return 0;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80077d0:	4a14      	ldr	r2, [pc, #80]	; (8007824 <_sbrk+0x5c>)
 80077d2:	4b15      	ldr	r3, [pc, #84]	; (8007828 <_sbrk+0x60>)
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80077dc:	4b13      	ldr	r3, [pc, #76]	; (800782c <_sbrk+0x64>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80077e4:	4b11      	ldr	r3, [pc, #68]	; (800782c <_sbrk+0x64>)
 80077e6:	4a12      	ldr	r2, [pc, #72]	; (8007830 <_sbrk+0x68>)
 80077e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077ea:	4b10      	ldr	r3, [pc, #64]	; (800782c <_sbrk+0x64>)
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4413      	add	r3, r2
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d207      	bcs.n	8007808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80077f8:	f003 ff20 	bl	800b63c <__errno>
 80077fc:	4603      	mov	r3, r0
 80077fe:	220c      	movs	r2, #12
 8007800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007802:	f04f 33ff 	mov.w	r3, #4294967295
 8007806:	e009      	b.n	800781c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007808:	4b08      	ldr	r3, [pc, #32]	; (800782c <_sbrk+0x64>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800780e:	4b07      	ldr	r3, [pc, #28]	; (800782c <_sbrk+0x64>)
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4413      	add	r3, r2
 8007816:	4a05      	ldr	r2, [pc, #20]	; (800782c <_sbrk+0x64>)
 8007818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800781a:	68fb      	ldr	r3, [r7, #12]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20010000 	.word	0x20010000
 8007828:	00000400 	.word	0x00000400
 800782c:	20000aa0 	.word	0x20000aa0
 8007830:	20000b88 	.word	0x20000b88

08007834 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007834:	b480      	push	{r7}
 8007836:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007838:	4b06      	ldr	r3, [pc, #24]	; (8007854 <SystemInit+0x20>)
 800783a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800783e:	4a05      	ldr	r2, [pc, #20]	; (8007854 <SystemInit+0x20>)
 8007840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007848:	bf00      	nop
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	e000ed00 	.word	0xe000ed00

08007858 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800785e:	1d3b      	adds	r3, r7, #4
 8007860:	2200      	movs	r2, #0
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	605a      	str	r2, [r3, #4]
 8007866:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007868:	4b14      	ldr	r3, [pc, #80]	; (80078bc <MX_TIM6_Init+0x64>)
 800786a:	4a15      	ldr	r2, [pc, #84]	; (80078c0 <MX_TIM6_Init+0x68>)
 800786c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1;
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <MX_TIM6_Init+0x64>)
 8007870:	2201      	movs	r2, #1
 8007872:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007874:	4b11      	ldr	r3, [pc, #68]	; (80078bc <MX_TIM6_Init+0x64>)
 8007876:	2200      	movs	r2, #0
 8007878:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 35999;
 800787a:	4b10      	ldr	r3, [pc, #64]	; (80078bc <MX_TIM6_Init+0x64>)
 800787c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007880:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007882:	4b0e      	ldr	r3, [pc, #56]	; (80078bc <MX_TIM6_Init+0x64>)
 8007884:	2200      	movs	r2, #0
 8007886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007888:	480c      	ldr	r0, [pc, #48]	; (80078bc <MX_TIM6_Init+0x64>)
 800788a:	f002 ff0f 	bl	800a6ac <HAL_TIM_Base_Init>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8007894:	f7ff fec2 	bl	800761c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007898:	2300      	movs	r3, #0
 800789a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80078a0:	1d3b      	adds	r3, r7, #4
 80078a2:	4619      	mov	r1, r3
 80078a4:	4805      	ldr	r0, [pc, #20]	; (80078bc <MX_TIM6_Init+0x64>)
 80078a6:	f003 f9af 	bl	800ac08 <HAL_TIMEx_MasterConfigSynchronization>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80078b0:	f7ff feb4 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80078b4:	bf00      	nop
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	20000aa4 	.word	0x20000aa4
 80078c0:	40001000 	.word	0x40001000

080078c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a0d      	ldr	r2, [pc, #52]	; (8007908 <HAL_TIM_Base_MspInit+0x44>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d113      	bne.n	80078fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <HAL_TIM_Base_MspInit+0x48>)
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	4a0c      	ldr	r2, [pc, #48]	; (800790c <HAL_TIM_Base_MspInit+0x48>)
 80078dc:	f043 0310 	orr.w	r3, r3, #16
 80078e0:	61d3      	str	r3, [r2, #28]
 80078e2:	4b0a      	ldr	r3, [pc, #40]	; (800790c <HAL_TIM_Base_MspInit+0x48>)
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80078ee:	2200      	movs	r2, #0
 80078f0:	2100      	movs	r1, #0
 80078f2:	2036      	movs	r0, #54	; 0x36
 80078f4:	f001 f859 	bl	80089aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80078f8:	2036      	movs	r0, #54	; 0x36
 80078fa:	f001 f872 	bl	80089e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	40001000 	.word	0x40001000
 800790c:	40021000 	.word	0x40021000

08007910 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007914:	4b14      	ldr	r3, [pc, #80]	; (8007968 <MX_USART2_UART_Init+0x58>)
 8007916:	4a15      	ldr	r2, [pc, #84]	; (800796c <MX_USART2_UART_Init+0x5c>)
 8007918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800791a:	4b13      	ldr	r3, [pc, #76]	; (8007968 <MX_USART2_UART_Init+0x58>)
 800791c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007922:	4b11      	ldr	r3, [pc, #68]	; (8007968 <MX_USART2_UART_Init+0x58>)
 8007924:	2200      	movs	r2, #0
 8007926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007928:	4b0f      	ldr	r3, [pc, #60]	; (8007968 <MX_USART2_UART_Init+0x58>)
 800792a:	2200      	movs	r2, #0
 800792c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800792e:	4b0e      	ldr	r3, [pc, #56]	; (8007968 <MX_USART2_UART_Init+0x58>)
 8007930:	2200      	movs	r2, #0
 8007932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007934:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <MX_USART2_UART_Init+0x58>)
 8007936:	220c      	movs	r2, #12
 8007938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800793a:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <MX_USART2_UART_Init+0x58>)
 800793c:	2200      	movs	r2, #0
 800793e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007940:	4b09      	ldr	r3, [pc, #36]	; (8007968 <MX_USART2_UART_Init+0x58>)
 8007942:	2200      	movs	r2, #0
 8007944:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007946:	4b08      	ldr	r3, [pc, #32]	; (8007968 <MX_USART2_UART_Init+0x58>)
 8007948:	2200      	movs	r2, #0
 800794a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <MX_USART2_UART_Init+0x58>)
 800794e:	2200      	movs	r2, #0
 8007950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007952:	4805      	ldr	r0, [pc, #20]	; (8007968 <MX_USART2_UART_Init+0x58>)
 8007954:	f003 fa02 	bl	800ad5c <HAL_UART_Init>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800795e:	f7ff fe5d 	bl	800761c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007962:	bf00      	nop
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20000af0 	.word	0x20000af0
 800796c:	40004400 	.word	0x40004400

08007970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	; 0x28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007978:	f107 0314 	add.w	r3, r7, #20
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	609a      	str	r2, [r3, #8]
 8007984:	60da      	str	r2, [r3, #12]
 8007986:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a17      	ldr	r2, [pc, #92]	; (80079ec <HAL_UART_MspInit+0x7c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d128      	bne.n	80079e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007992:	4b17      	ldr	r3, [pc, #92]	; (80079f0 <HAL_UART_MspInit+0x80>)
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	4a16      	ldr	r2, [pc, #88]	; (80079f0 <HAL_UART_MspInit+0x80>)
 8007998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800799c:	61d3      	str	r3, [r2, #28]
 800799e:	4b14      	ldr	r3, [pc, #80]	; (80079f0 <HAL_UART_MspInit+0x80>)
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <HAL_UART_MspInit+0x80>)
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	4a10      	ldr	r2, [pc, #64]	; (80079f0 <HAL_UART_MspInit+0x80>)
 80079b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b4:	6153      	str	r3, [r2, #20]
 80079b6:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <HAL_UART_MspInit+0x80>)
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80079c2:	230c      	movs	r3, #12
 80079c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c6:	2302      	movs	r3, #2
 80079c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ce:	2300      	movs	r3, #0
 80079d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80079d2:	2307      	movs	r3, #7
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079d6:	f107 0314 	add.w	r3, r7, #20
 80079da:	4619      	mov	r1, r3
 80079dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079e0:	f001 f81a 	bl	8008a18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80079e4:	bf00      	nop
 80079e6:	3728      	adds	r7, #40	; 0x28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	40004400 	.word	0x40004400
 80079f0:	40021000 	.word	0x40021000

080079f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80079f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a2c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80079f8:	480d      	ldr	r0, [pc, #52]	; (8007a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80079fa:	490e      	ldr	r1, [pc, #56]	; (8007a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 80079fc:	4a0e      	ldr	r2, [pc, #56]	; (8007a38 <LoopForever+0xe>)
  movs r3, #0
 80079fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a00:	e002      	b.n	8007a08 <LoopCopyDataInit>

08007a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a06:	3304      	adds	r3, #4

08007a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a0c:	d3f9      	bcc.n	8007a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a0e:	4a0b      	ldr	r2, [pc, #44]	; (8007a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007a10:	4c0b      	ldr	r4, [pc, #44]	; (8007a40 <LoopForever+0x16>)
  movs r3, #0
 8007a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007a14:	e001      	b.n	8007a1a <LoopFillZerobss>

08007a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a18:	3204      	adds	r2, #4

08007a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a1c:	d3fb      	bcc.n	8007a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007a1e:	f7ff ff09 	bl	8007834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a22:	f003 fe11 	bl	800b648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007a26:	f7ff fd63 	bl	80074f0 <main>

08007a2a <LoopForever>:

LoopForever:
    b LoopForever
 8007a2a:	e7fe      	b.n	8007a2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007a2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8007a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007a34:	20000a50 	.word	0x20000a50
  ldr r2, =_sidata
 8007a38:	0800d248 	.word	0x0800d248
  ldr r2, =_sbss
 8007a3c:	20000a50 	.word	0x20000a50
  ldr r4, =_ebss
 8007a40:	20000b88 	.word	0x20000b88

08007a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007a44:	e7fe      	b.n	8007a44 <ADC1_2_IRQHandler>
	...

08007a48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a4c:	4b08      	ldr	r3, [pc, #32]	; (8007a70 <HAL_Init+0x28>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a07      	ldr	r2, [pc, #28]	; (8007a70 <HAL_Init+0x28>)
 8007a52:	f043 0310 	orr.w	r3, r3, #16
 8007a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a58:	2003      	movs	r0, #3
 8007a5a:	f000 ff9b 	bl	8008994 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007a5e:	2000      	movs	r0, #0
 8007a60:	f000 f808 	bl	8007a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007a64:	f7ff fde0 	bl	8007628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	40022000 	.word	0x40022000

08007a74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a7c:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <HAL_InitTick+0x54>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	4b12      	ldr	r3, [pc, #72]	; (8007acc <HAL_InitTick+0x58>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 ffb3 	bl	80089fe <HAL_SYSTICK_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e00e      	b.n	8007ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b0f      	cmp	r3, #15
 8007aa6:	d80a      	bhi.n	8007abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	f000 ff7b 	bl	80089aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ab4:	4a06      	ldr	r2, [pc, #24]	; (8007ad0 <HAL_InitTick+0x5c>)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	e000      	b.n	8007ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	200009e0 	.word	0x200009e0
 8007acc:	200009e8 	.word	0x200009e8
 8007ad0:	200009e4 	.word	0x200009e4

08007ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ad8:	4b06      	ldr	r3, [pc, #24]	; (8007af4 <HAL_IncTick+0x20>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <HAL_IncTick+0x24>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	4a04      	ldr	r2, [pc, #16]	; (8007af8 <HAL_IncTick+0x24>)
 8007ae6:	6013      	str	r3, [r2, #0]
}
 8007ae8:	bf00      	nop
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	200009e8 	.word	0x200009e8
 8007af8:	20000b74 	.word	0x20000b74

08007afc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
  return uwTick;  
 8007b00:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <HAL_GetTick+0x14>)
 8007b02:	681b      	ldr	r3, [r3, #0]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	20000b74 	.word	0x20000b74

08007b14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e0ed      	b.n	8007d02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff fc2a 	bl	800738c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b48:	f7ff ffd8 	bl	8007afc <HAL_GetTick>
 8007b4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007b4e:	e012      	b.n	8007b76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b50:	f7ff ffd4 	bl	8007afc <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b0a      	cmp	r3, #10
 8007b5c:	d90b      	bls.n	8007b76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2205      	movs	r2, #5
 8007b6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e0c5      	b.n	8007d02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0e5      	beq.n	8007b50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0202 	bic.w	r2, r2, #2
 8007b92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b94:	f7ff ffb2 	bl	8007afc <HAL_GetTick>
 8007b98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007b9a:	e012      	b.n	8007bc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b9c:	f7ff ffae 	bl	8007afc <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b0a      	cmp	r3, #10
 8007ba8:	d90b      	bls.n	8007bc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2205      	movs	r2, #5
 8007bba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e09f      	b.n	8007d02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e5      	bne.n	8007b9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	7e1b      	ldrb	r3, [r3, #24]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d108      	bne.n	8007bea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	e007      	b.n	8007bfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	7e5b      	ldrb	r3, [r3, #25]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d108      	bne.n	8007c14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e007      	b.n	8007c24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7e9b      	ldrb	r3, [r3, #26]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d108      	bne.n	8007c3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0220 	orr.w	r2, r2, #32
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	e007      	b.n	8007c4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0220 	bic.w	r2, r2, #32
 8007c4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7edb      	ldrb	r3, [r3, #27]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d108      	bne.n	8007c68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0210 	bic.w	r2, r2, #16
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	e007      	b.n	8007c78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0210 	orr.w	r2, r2, #16
 8007c76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7f1b      	ldrb	r3, [r3, #28]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d108      	bne.n	8007c92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0208 	orr.w	r2, r2, #8
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	e007      	b.n	8007ca2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0208 	bic.w	r2, r2, #8
 8007ca0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7f5b      	ldrb	r3, [r3, #29]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d108      	bne.n	8007cbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f042 0204 	orr.w	r2, r2, #4
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	e007      	b.n	8007ccc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0204 	bic.w	r2, r2, #4
 8007cca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	ea42 0103 	orr.w	r1, r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	1e5a      	subs	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b087      	sub	sp, #28
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d20:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007d22:	7cfb      	ldrb	r3, [r7, #19]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d003      	beq.n	8007d30 <HAL_CAN_ConfigFilter+0x26>
 8007d28:	7cfb      	ldrb	r3, [r7, #19]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	f040 80aa 	bne.w	8007e84 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d36:	f043 0201 	orr.w	r2, r3, #1
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	f003 031f 	and.w	r3, r3, #31
 8007d48:	2201      	movs	r2, #1
 8007d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	43db      	mvns	r3, r3
 8007d5a:	401a      	ands	r2, r3
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d123      	bne.n	8007db2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	43db      	mvns	r3, r3
 8007d74:	401a      	ands	r2, r3
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007d8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	3248      	adds	r2, #72	; 0x48
 8007d92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007da6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007da8:	6979      	ldr	r1, [r7, #20]
 8007daa:	3348      	adds	r3, #72	; 0x48
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	440b      	add	r3, r1
 8007db0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d122      	bne.n	8007e00 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007dda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	3248      	adds	r2, #72	; 0x48
 8007de0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007df4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007df6:	6979      	ldr	r1, [r7, #20]
 8007df8:	3348      	adds	r3, #72	; 0x48
 8007dfa:	00db      	lsls	r3, r3, #3
 8007dfc:	440b      	add	r3, r1
 8007dfe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	43db      	mvns	r3, r3
 8007e12:	401a      	ands	r2, r3
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007e1a:	e007      	b.n	8007e2c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	431a      	orrs	r2, r3
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	43db      	mvns	r3, r3
 8007e3e:	401a      	ands	r2, r3
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007e46:	e007      	b.n	8007e58 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	431a      	orrs	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d107      	bne.n	8007e70 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e76:	f023 0201 	bic.w	r2, r3, #1
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	e006      	b.n	8007e92 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
  }
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d12e      	bne.n	8007f10 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 0201 	bic.w	r2, r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007eca:	f7ff fe17 	bl	8007afc <HAL_GetTick>
 8007ece:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007ed0:	e012      	b.n	8007ef8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007ed2:	f7ff fe13 	bl	8007afc <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b0a      	cmp	r3, #10
 8007ede:	d90b      	bls.n	8007ef8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2205      	movs	r2, #5
 8007ef0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e012      	b.n	8007f1e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e5      	bne.n	8007ed2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e006      	b.n	8007f1e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
  }
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b089      	sub	sp, #36	; 0x24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007f44:	7ffb      	ldrb	r3, [r7, #31]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d003      	beq.n	8007f52 <HAL_CAN_AddTxMessage+0x2c>
 8007f4a:	7ffb      	ldrb	r3, [r7, #31]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	f040 80b8 	bne.w	80080c2 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d105      	bne.n	8007f72 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80a0 	beq.w	80080b2 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	0e1b      	lsrs	r3, r3, #24
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d907      	bls.n	8007f92 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e09e      	b.n	80080d0 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007f92:	2201      	movs	r2, #1
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	409a      	lsls	r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10d      	bne.n	8007fc0 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	6809      	ldr	r1, [r1, #0]
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	3318      	adds	r3, #24
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	440b      	add	r3, r1
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e00f      	b.n	8007fe0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fd0:	68f9      	ldr	r1, [r7, #12]
 8007fd2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007fd4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	3318      	adds	r3, #24
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	440b      	add	r3, r1
 8007fde:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	3318      	adds	r3, #24
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	440b      	add	r3, r1
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	7d1b      	ldrb	r3, [r3, #20]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d111      	bne.n	8008020 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	3318      	adds	r3, #24
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	4413      	add	r3, r2
 8008008:	3304      	adds	r3, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	6811      	ldr	r1, [r2, #0]
 8008010:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	3318      	adds	r3, #24
 8008018:	011b      	lsls	r3, r3, #4
 800801a:	440b      	add	r3, r1
 800801c:	3304      	adds	r3, #4
 800801e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3307      	adds	r3, #7
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	061a      	lsls	r2, r3, #24
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3306      	adds	r3, #6
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	041b      	lsls	r3, r3, #16
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3305      	adds	r3, #5
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	4313      	orrs	r3, r2
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	3204      	adds	r2, #4
 8008040:	7812      	ldrb	r2, [r2, #0]
 8008042:	4610      	mov	r0, r2
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	6811      	ldr	r1, [r2, #0]
 8008048:	ea43 0200 	orr.w	r2, r3, r0
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	440b      	add	r3, r1
 8008052:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008056:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3303      	adds	r3, #3
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	061a      	lsls	r2, r3, #24
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3302      	adds	r3, #2
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	041b      	lsls	r3, r3, #16
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3301      	adds	r3, #1
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	4313      	orrs	r3, r2
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	4610      	mov	r0, r2
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	6811      	ldr	r1, [r2, #0]
 800807e:	ea43 0200 	orr.w	r2, r3, r0
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	011b      	lsls	r3, r3, #4
 8008086:	440b      	add	r3, r1
 8008088:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800808c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	3318      	adds	r3, #24
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	4413      	add	r3, r2
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	6811      	ldr	r1, [r2, #0]
 80080a0:	f043 0201 	orr.w	r2, r3, #1
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	3318      	adds	r3, #24
 80080a8:	011b      	lsls	r3, r3, #4
 80080aa:	440b      	add	r3, r1
 80080ac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	e00e      	b.n	80080d0 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e006      	b.n	80080d0 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
  }
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3724      	adds	r7, #36	; 0x24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080f0:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80080f2:	7afb      	ldrb	r3, [r7, #11]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d002      	beq.n	80080fe <HAL_CAN_IsTxMessagePending+0x22>
 80080f8:	7afb      	ldrb	r3, [r7, #11]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d10b      	bne.n	8008116 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	069b      	lsls	r3, r3, #26
 8008108:	401a      	ands	r2, r3
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	069b      	lsls	r3, r3, #26
 800810e:	429a      	cmp	r2, r3
 8008110:	d001      	beq.n	8008116 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8008112:	2301      	movs	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8008116:	68fb      	ldr	r3, [r7, #12]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008138:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d003      	beq.n	8008148 <HAL_CAN_GetRxMessage+0x24>
 8008140:	7dfb      	ldrb	r3, [r7, #23]
 8008142:	2b02      	cmp	r3, #2
 8008144:	f040 80f3 	bne.w	800832e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10e      	bne.n	800816c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f003 0303 	and.w	r3, r3, #3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d116      	bne.n	800818a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e0e7      	b.n	800833c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d107      	bne.n	800818a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e0d8      	b.n	800833c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	331b      	adds	r3, #27
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	4413      	add	r3, r2
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0204 	and.w	r2, r3, #4
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10c      	bne.n	80081c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	331b      	adds	r3, #27
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	4413      	add	r3, r2
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	0d5b      	lsrs	r3, r3, #21
 80081b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	e00b      	b.n	80081da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	331b      	adds	r3, #27
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	4413      	add	r3, r2
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	08db      	lsrs	r3, r3, #3
 80081d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	331b      	adds	r3, #27
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	4413      	add	r3, r2
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0202 	and.w	r2, r3, #2
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	331b      	adds	r3, #27
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	4413      	add	r3, r2
 80081fc:	3304      	adds	r3, #4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 020f 	and.w	r2, r3, #15
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	331b      	adds	r3, #27
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	4413      	add	r3, r2
 8008214:	3304      	adds	r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	0a1b      	lsrs	r3, r3, #8
 800821a:	b2da      	uxtb	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	331b      	adds	r3, #27
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	4413      	add	r3, r2
 800822c:	3304      	adds	r3, #4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	0c1b      	lsrs	r3, r3, #16
 8008232:	b29a      	uxth	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	4413      	add	r3, r2
 8008242:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	b2da      	uxtb	r2, r3
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	4413      	add	r3, r2
 8008258:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	0a1a      	lsrs	r2, r3, #8
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	3301      	adds	r3, #1
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	4413      	add	r3, r2
 8008272:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	0c1a      	lsrs	r2, r3, #16
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	3302      	adds	r3, #2
 800827e:	b2d2      	uxtb	r2, r2
 8008280:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	011b      	lsls	r3, r3, #4
 800828a:	4413      	add	r3, r2
 800828c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	0e1a      	lsrs	r2, r3, #24
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	3303      	adds	r3, #3
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	3304      	adds	r3, #4
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	4413      	add	r3, r2
 80082be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	0a1a      	lsrs	r2, r3, #8
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	3305      	adds	r3, #5
 80082ca:	b2d2      	uxtb	r2, r2
 80082cc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	0c1a      	lsrs	r2, r3, #16
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	3306      	adds	r3, #6
 80082e4:	b2d2      	uxtb	r2, r2
 80082e6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	0e1a      	lsrs	r2, r3, #24
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	3307      	adds	r3, #7
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d108      	bne.n	800831a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0220 	orr.w	r2, r2, #32
 8008316:	60da      	str	r2, [r3, #12]
 8008318:	e007      	b.n	800832a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0220 	orr.w	r2, r2, #32
 8008328:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	e006      	b.n	800833c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
  }
}
 800833c:	4618      	mov	r0, r3
 800833e:	371c      	adds	r7, #28
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008358:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d002      	beq.n	8008366 <HAL_CAN_ActivateNotification+0x1e>
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d109      	bne.n	800837a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6959      	ldr	r1, [r3, #20]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	e006      	b.n	8008388 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
  }
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08a      	sub	sp, #40	; 0x28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800839c:	2300      	movs	r3, #0
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d07c      	beq.n	80084d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d023      	beq.n	800842c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2201      	movs	r2, #1
 80083ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	f003 0302 	and.w	r3, r3, #2
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f983 	bl	8008702 <HAL_CAN_TxMailbox0CompleteCallback>
 80083fc:	e016      	b.n	800842c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
 8008410:	e00c      	b.n	800842c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	f003 0308 	and.w	r3, r3, #8
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008422:	627b      	str	r3, [r7, #36]	; 0x24
 8008424:	e002      	b.n	800842c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f989 	bl	800873e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008432:	2b00      	cmp	r3, #0
 8008434:	d024      	beq.n	8008480 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800843e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f963 	bl	8008716 <HAL_CAN_TxMailbox1CompleteCallback>
 8008450:	e016      	b.n	8008480 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008458:	2b00      	cmp	r3, #0
 800845a:	d004      	beq.n	8008466 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
 8008464:	e00c      	b.n	8008480 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800846c:	2b00      	cmp	r3, #0
 800846e:	d004      	beq.n	800847a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
 8008478:	e002      	b.n	8008480 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f969 	bl	8008752 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d024      	beq.n	80084d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008492:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f943 	bl	800872a <HAL_CAN_TxMailbox2CompleteCallback>
 80084a4:	e016      	b.n	80084d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
 80084b8:	e00c      	b.n	80084d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d004      	beq.n	80084ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
 80084cc:	e002      	b.n	80084d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f949 	bl	8008766 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	f003 0308 	and.w	r3, r3, #8
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00c      	beq.n	80084f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f003 0310 	and.w	r3, r3, #16
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d007      	beq.n	80084f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2210      	movs	r2, #16
 80084f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	f003 0304 	and.w	r3, r3, #4
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00b      	beq.n	800851a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d006      	beq.n	800851a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2208      	movs	r2, #8
 8008512:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f930 	bl	800877a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d009      	beq.n	8008538 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff f85e 	bl	80075f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00c      	beq.n	800855c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008552:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2210      	movs	r2, #16
 800855a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	f003 0320 	and.w	r3, r3, #32
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f003 0308 	and.w	r3, r3, #8
 800856c:	2b00      	cmp	r3, #0
 800856e:	d006      	beq.n	800857e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2208      	movs	r2, #8
 8008576:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f912 	bl	80087a2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b00      	cmp	r3, #0
 8008586:	d009      	beq.n	800859c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f8f9 	bl	800878e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800859c:	6a3b      	ldr	r3, [r7, #32]
 800859e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00b      	beq.n	80085be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2210      	movs	r2, #16
 80085b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f8fc 	bl	80087b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00b      	beq.n	80085e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d006      	beq.n	80085e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2208      	movs	r2, #8
 80085d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f8f5 	bl	80087ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d07b      	beq.n	80086e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d072      	beq.n	80086da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80085f4:	6a3b      	ldr	r3, [r7, #32]
 80085f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d008      	beq.n	8008610 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	f043 0301 	orr.w	r3, r3, #1
 800860e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008616:	2b00      	cmp	r3, #0
 8008618:	d008      	beq.n	800862c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	f043 0302 	orr.w	r3, r3, #2
 800862a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008632:	2b00      	cmp	r3, #0
 8008634:	d008      	beq.n	8008648 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	f043 0304 	orr.w	r3, r3, #4
 8008646:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800864e:	2b00      	cmp	r3, #0
 8008650:	d043      	beq.n	80086da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008658:	2b00      	cmp	r3, #0
 800865a:	d03e      	beq.n	80086da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008662:	2b60      	cmp	r3, #96	; 0x60
 8008664:	d02b      	beq.n	80086be <HAL_CAN_IRQHandler+0x32a>
 8008666:	2b60      	cmp	r3, #96	; 0x60
 8008668:	d82e      	bhi.n	80086c8 <HAL_CAN_IRQHandler+0x334>
 800866a:	2b50      	cmp	r3, #80	; 0x50
 800866c:	d022      	beq.n	80086b4 <HAL_CAN_IRQHandler+0x320>
 800866e:	2b50      	cmp	r3, #80	; 0x50
 8008670:	d82a      	bhi.n	80086c8 <HAL_CAN_IRQHandler+0x334>
 8008672:	2b40      	cmp	r3, #64	; 0x40
 8008674:	d019      	beq.n	80086aa <HAL_CAN_IRQHandler+0x316>
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	d826      	bhi.n	80086c8 <HAL_CAN_IRQHandler+0x334>
 800867a:	2b30      	cmp	r3, #48	; 0x30
 800867c:	d010      	beq.n	80086a0 <HAL_CAN_IRQHandler+0x30c>
 800867e:	2b30      	cmp	r3, #48	; 0x30
 8008680:	d822      	bhi.n	80086c8 <HAL_CAN_IRQHandler+0x334>
 8008682:	2b10      	cmp	r3, #16
 8008684:	d002      	beq.n	800868c <HAL_CAN_IRQHandler+0x2f8>
 8008686:	2b20      	cmp	r3, #32
 8008688:	d005      	beq.n	8008696 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800868a:	e01d      	b.n	80086c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	f043 0308 	orr.w	r3, r3, #8
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008694:	e019      	b.n	80086ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	f043 0310 	orr.w	r3, r3, #16
 800869c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800869e:	e014      	b.n	80086ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	f043 0320 	orr.w	r3, r3, #32
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086a8:	e00f      	b.n	80086ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086b2:	e00a      	b.n	80086ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086bc:	e005      	b.n	80086ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086c6:	e000      	b.n	80086ca <HAL_CAN_IRQHandler+0x336>
            break;
 80086c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	699a      	ldr	r2, [r3, #24]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2204      	movs	r2, #4
 80086e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f872 	bl	80087de <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80086fa:	bf00      	nop
 80086fc:	3728      	adds	r7, #40	; 0x28
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800871e:	bf00      	nop
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800872a:	b480      	push	{r7}
 800872c:	b083      	sub	sp, #12
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008732:	bf00      	nop
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008746:	bf00      	nop
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800875a:	bf00      	nop
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008782:	bf00      	nop
 8008784:	370c      	adds	r7, #12
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b083      	sub	sp, #12
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
	...

080087f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f003 0307 	and.w	r3, r3, #7
 8008802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008804:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <__NVIC_SetPriorityGrouping+0x44>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008810:	4013      	ands	r3, r2
 8008812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800881c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008826:	4a04      	ldr	r2, [pc, #16]	; (8008838 <__NVIC_SetPriorityGrouping+0x44>)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	60d3      	str	r3, [r2, #12]
}
 800882c:	bf00      	nop
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	e000ed00 	.word	0xe000ed00

0800883c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008840:	4b04      	ldr	r3, [pc, #16]	; (8008854 <__NVIC_GetPriorityGrouping+0x18>)
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	0a1b      	lsrs	r3, r3, #8
 8008846:	f003 0307 	and.w	r3, r3, #7
}
 800884a:	4618      	mov	r0, r3
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	e000ed00 	.word	0xe000ed00

08008858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008866:	2b00      	cmp	r3, #0
 8008868:	db0b      	blt.n	8008882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	f003 021f 	and.w	r2, r3, #31
 8008870:	4907      	ldr	r1, [pc, #28]	; (8008890 <__NVIC_EnableIRQ+0x38>)
 8008872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008876:	095b      	lsrs	r3, r3, #5
 8008878:	2001      	movs	r0, #1
 800887a:	fa00 f202 	lsl.w	r2, r0, r2
 800887e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	e000e100 	.word	0xe000e100

08008894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	6039      	str	r1, [r7, #0]
 800889e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	db0a      	blt.n	80088be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	490c      	ldr	r1, [pc, #48]	; (80088e0 <__NVIC_SetPriority+0x4c>)
 80088ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b2:	0112      	lsls	r2, r2, #4
 80088b4:	b2d2      	uxtb	r2, r2
 80088b6:	440b      	add	r3, r1
 80088b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80088bc:	e00a      	b.n	80088d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	4908      	ldr	r1, [pc, #32]	; (80088e4 <__NVIC_SetPriority+0x50>)
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	f003 030f 	and.w	r3, r3, #15
 80088ca:	3b04      	subs	r3, #4
 80088cc:	0112      	lsls	r2, r2, #4
 80088ce:	b2d2      	uxtb	r2, r2
 80088d0:	440b      	add	r3, r1
 80088d2:	761a      	strb	r2, [r3, #24]
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	e000e100 	.word	0xe000e100
 80088e4:	e000ed00 	.word	0xe000ed00

080088e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b089      	sub	sp, #36	; 0x24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f1c3 0307 	rsb	r3, r3, #7
 8008902:	2b04      	cmp	r3, #4
 8008904:	bf28      	it	cs
 8008906:	2304      	movcs	r3, #4
 8008908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	3304      	adds	r3, #4
 800890e:	2b06      	cmp	r3, #6
 8008910:	d902      	bls.n	8008918 <NVIC_EncodePriority+0x30>
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	3b03      	subs	r3, #3
 8008916:	e000      	b.n	800891a <NVIC_EncodePriority+0x32>
 8008918:	2300      	movs	r3, #0
 800891a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800891c:	f04f 32ff 	mov.w	r2, #4294967295
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	fa02 f303 	lsl.w	r3, r2, r3
 8008926:	43da      	mvns	r2, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	401a      	ands	r2, r3
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008930:	f04f 31ff 	mov.w	r1, #4294967295
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	fa01 f303 	lsl.w	r3, r1, r3
 800893a:	43d9      	mvns	r1, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008940:	4313      	orrs	r3, r2
         );
}
 8008942:	4618      	mov	r0, r3
 8008944:	3724      	adds	r7, #36	; 0x24
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
	...

08008950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3b01      	subs	r3, #1
 800895c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008960:	d301      	bcc.n	8008966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008962:	2301      	movs	r3, #1
 8008964:	e00f      	b.n	8008986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008966:	4a0a      	ldr	r2, [pc, #40]	; (8008990 <SysTick_Config+0x40>)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3b01      	subs	r3, #1
 800896c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800896e:	210f      	movs	r1, #15
 8008970:	f04f 30ff 	mov.w	r0, #4294967295
 8008974:	f7ff ff8e 	bl	8008894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008978:	4b05      	ldr	r3, [pc, #20]	; (8008990 <SysTick_Config+0x40>)
 800897a:	2200      	movs	r2, #0
 800897c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800897e:	4b04      	ldr	r3, [pc, #16]	; (8008990 <SysTick_Config+0x40>)
 8008980:	2207      	movs	r2, #7
 8008982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	e000e010 	.word	0xe000e010

08008994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff ff29 	bl	80087f4 <__NVIC_SetPriorityGrouping>
}
 80089a2:	bf00      	nop
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b086      	sub	sp, #24
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	4603      	mov	r3, r0
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80089bc:	f7ff ff3e 	bl	800883c <__NVIC_GetPriorityGrouping>
 80089c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	6978      	ldr	r0, [r7, #20]
 80089c8:	f7ff ff8e 	bl	80088e8 <NVIC_EncodePriority>
 80089cc:	4602      	mov	r2, r0
 80089ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089d2:	4611      	mov	r1, r2
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7ff ff5d 	bl	8008894 <__NVIC_SetPriority>
}
 80089da:	bf00      	nop
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	4603      	mov	r3, r0
 80089ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80089ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff ff31 	bl	8008858 <__NVIC_EnableIRQ>
}
 80089f6:	bf00      	nop
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff ffa2 	bl	8008950 <SysTick_Config>
 8008a0c:	4603      	mov	r3, r0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008a22:	2300      	movs	r3, #0
 8008a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a26:	e160      	b.n	8008cea <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	fa01 f303 	lsl.w	r3, r1, r3
 8008a34:	4013      	ands	r3, r2
 8008a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 8152 	beq.w	8008ce4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f003 0303 	and.w	r3, r3, #3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d005      	beq.n	8008a58 <HAL_GPIO_Init+0x40>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f003 0303 	and.w	r3, r3, #3
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d130      	bne.n	8008aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	2203      	movs	r2, #3
 8008a64:	fa02 f303 	lsl.w	r3, r2, r3
 8008a68:	43db      	mvns	r3, r3
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	68da      	ldr	r2, [r3, #12]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a8e:	2201      	movs	r2, #1
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	43db      	mvns	r3, r3
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	091b      	lsrs	r3, r3, #4
 8008aa4:	f003 0201 	and.w	r2, r3, #1
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f003 0303 	and.w	r3, r3, #3
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d017      	beq.n	8008af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	2203      	movs	r2, #3
 8008ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad6:	43db      	mvns	r3, r3
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	4013      	ands	r3, r2
 8008adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d123      	bne.n	8008b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	08da      	lsrs	r2, r3, #3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3208      	adds	r2, #8
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	220f      	movs	r2, #15
 8008b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1e:	43db      	mvns	r3, r3
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	4013      	ands	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	691a      	ldr	r2, [r3, #16]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	fa02 f303 	lsl.w	r3, r2, r3
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	08da      	lsrs	r2, r3, #3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3208      	adds	r2, #8
 8008b44:	6939      	ldr	r1, [r7, #16]
 8008b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	2203      	movs	r2, #3
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	43db      	mvns	r3, r3
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	4013      	ands	r3, r2
 8008b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f003 0203 	and.w	r2, r3, #3
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 80ac 	beq.w	8008ce4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b8c:	4b5e      	ldr	r3, [pc, #376]	; (8008d08 <HAL_GPIO_Init+0x2f0>)
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	4a5d      	ldr	r2, [pc, #372]	; (8008d08 <HAL_GPIO_Init+0x2f0>)
 8008b92:	f043 0301 	orr.w	r3, r3, #1
 8008b96:	6193      	str	r3, [r2, #24]
 8008b98:	4b5b      	ldr	r3, [pc, #364]	; (8008d08 <HAL_GPIO_Init+0x2f0>)
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	f003 0301 	and.w	r3, r3, #1
 8008ba0:	60bb      	str	r3, [r7, #8]
 8008ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008ba4:	4a59      	ldr	r2, [pc, #356]	; (8008d0c <HAL_GPIO_Init+0x2f4>)
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	089b      	lsrs	r3, r3, #2
 8008baa:	3302      	adds	r3, #2
 8008bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f003 0303 	and.w	r3, r3, #3
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	220f      	movs	r2, #15
 8008bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008bce:	d025      	beq.n	8008c1c <HAL_GPIO_Init+0x204>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a4f      	ldr	r2, [pc, #316]	; (8008d10 <HAL_GPIO_Init+0x2f8>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d01f      	beq.n	8008c18 <HAL_GPIO_Init+0x200>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a4e      	ldr	r2, [pc, #312]	; (8008d14 <HAL_GPIO_Init+0x2fc>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d019      	beq.n	8008c14 <HAL_GPIO_Init+0x1fc>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a4d      	ldr	r2, [pc, #308]	; (8008d18 <HAL_GPIO_Init+0x300>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d013      	beq.n	8008c10 <HAL_GPIO_Init+0x1f8>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a4c      	ldr	r2, [pc, #304]	; (8008d1c <HAL_GPIO_Init+0x304>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d00d      	beq.n	8008c0c <HAL_GPIO_Init+0x1f4>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a4b      	ldr	r2, [pc, #300]	; (8008d20 <HAL_GPIO_Init+0x308>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d007      	beq.n	8008c08 <HAL_GPIO_Init+0x1f0>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a4a      	ldr	r2, [pc, #296]	; (8008d24 <HAL_GPIO_Init+0x30c>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d101      	bne.n	8008c04 <HAL_GPIO_Init+0x1ec>
 8008c00:	2306      	movs	r3, #6
 8008c02:	e00c      	b.n	8008c1e <HAL_GPIO_Init+0x206>
 8008c04:	2307      	movs	r3, #7
 8008c06:	e00a      	b.n	8008c1e <HAL_GPIO_Init+0x206>
 8008c08:	2305      	movs	r3, #5
 8008c0a:	e008      	b.n	8008c1e <HAL_GPIO_Init+0x206>
 8008c0c:	2304      	movs	r3, #4
 8008c0e:	e006      	b.n	8008c1e <HAL_GPIO_Init+0x206>
 8008c10:	2303      	movs	r3, #3
 8008c12:	e004      	b.n	8008c1e <HAL_GPIO_Init+0x206>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e002      	b.n	8008c1e <HAL_GPIO_Init+0x206>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e000      	b.n	8008c1e <HAL_GPIO_Init+0x206>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	f002 0203 	and.w	r2, r2, #3
 8008c24:	0092      	lsls	r2, r2, #2
 8008c26:	4093      	lsls	r3, r2
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008c2e:	4937      	ldr	r1, [pc, #220]	; (8008d0c <HAL_GPIO_Init+0x2f4>)
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	089b      	lsrs	r3, r3, #2
 8008c34:	3302      	adds	r3, #2
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c3c:	4b3a      	ldr	r3, [pc, #232]	; (8008d28 <HAL_GPIO_Init+0x310>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	43db      	mvns	r3, r3
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	4013      	ands	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008c60:	4a31      	ldr	r2, [pc, #196]	; (8008d28 <HAL_GPIO_Init+0x310>)
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008c66:	4b30      	ldr	r3, [pc, #192]	; (8008d28 <HAL_GPIO_Init+0x310>)
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	43db      	mvns	r3, r3
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	4013      	ands	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d003      	beq.n	8008c8a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008c8a:	4a27      	ldr	r2, [pc, #156]	; (8008d28 <HAL_GPIO_Init+0x310>)
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c90:	4b25      	ldr	r3, [pc, #148]	; (8008d28 <HAL_GPIO_Init+0x310>)
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008cb4:	4a1c      	ldr	r2, [pc, #112]	; (8008d28 <HAL_GPIO_Init+0x310>)
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008cba:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <HAL_GPIO_Init+0x310>)
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008cde:	4a12      	ldr	r2, [pc, #72]	; (8008d28 <HAL_GPIO_Init+0x310>)
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f47f ae97 	bne.w	8008a28 <HAL_GPIO_Init+0x10>
  }
}
 8008cfa:	bf00      	nop
 8008cfc:	bf00      	nop
 8008cfe:	371c      	adds	r7, #28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	40021000 	.word	0x40021000
 8008d0c:	40010000 	.word	0x40010000
 8008d10:	48000400 	.word	0x48000400
 8008d14:	48000800 	.word	0x48000800
 8008d18:	48000c00 	.word	0x48000c00
 8008d1c:	48001000 	.word	0x48001000
 8008d20:	48001400 	.word	0x48001400
 8008d24:	48001800 	.word	0x48001800
 8008d28:	40010400 	.word	0x40010400

08008d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	807b      	strh	r3, [r7, #2]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d3c:	787b      	ldrb	r3, [r7, #1]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008d42:	887a      	ldrh	r2, [r7, #2]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008d48:	e002      	b.n	8008d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008d4a:	887a      	ldrh	r2, [r7, #2]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d6c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d102      	bne.n	8008d82 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f001 b83a 	b.w	8009df6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 816f 	beq.w	8009076 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008d98:	4bb5      	ldr	r3, [pc, #724]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f003 030c 	and.w	r3, r3, #12
 8008da0:	2b04      	cmp	r3, #4
 8008da2:	d00c      	beq.n	8008dbe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008da4:	4bb2      	ldr	r3, [pc, #712]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f003 030c 	and.w	r3, r3, #12
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d15c      	bne.n	8008e6a <HAL_RCC_OscConfig+0x10e>
 8008db0:	4baf      	ldr	r3, [pc, #700]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dbc:	d155      	bne.n	8008e6a <HAL_RCC_OscConfig+0x10e>
 8008dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008dc2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dc6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008dca:	fa93 f3a3 	rbit	r3, r3
 8008dce:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008dd2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dd6:	fab3 f383 	clz	r3, r3
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	095b      	lsrs	r3, r3, #5
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	f043 0301 	orr.w	r3, r3, #1
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d102      	bne.n	8008df0 <HAL_RCC_OscConfig+0x94>
 8008dea:	4ba1      	ldr	r3, [pc, #644]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	e015      	b.n	8008e1c <HAL_RCC_OscConfig+0xc0>
 8008df0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008df4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008dfc:	fa93 f3a3 	rbit	r3, r3
 8008e00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008e0c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008e10:	fa93 f3a3 	rbit	r3, r3
 8008e14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008e18:	4b95      	ldr	r3, [pc, #596]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008e20:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008e24:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008e28:	fa92 f2a2 	rbit	r2, r2
 8008e2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8008e30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008e34:	fab2 f282 	clz	r2, r2
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	f042 0220 	orr.w	r2, r2, #32
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	f002 021f 	and.w	r2, r2, #31
 8008e44:	2101      	movs	r1, #1
 8008e46:	fa01 f202 	lsl.w	r2, r1, r2
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 8111 	beq.w	8009074 <HAL_RCC_OscConfig+0x318>
 8008e52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f040 8108 	bne.w	8009074 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	f000 bfc6 	b.w	8009df6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7a:	d106      	bne.n	8008e8a <HAL_RCC_OscConfig+0x12e>
 8008e7c:	4b7c      	ldr	r3, [pc, #496]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a7b      	ldr	r2, [pc, #492]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	e036      	b.n	8008ef8 <HAL_RCC_OscConfig+0x19c>
 8008e8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e8e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10c      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x158>
 8008e9a:	4b75      	ldr	r3, [pc, #468]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a74      	ldr	r2, [pc, #464]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	4b72      	ldr	r3, [pc, #456]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a71      	ldr	r2, [pc, #452]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	e021      	b.n	8008ef8 <HAL_RCC_OscConfig+0x19c>
 8008eb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008eb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ec4:	d10c      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x184>
 8008ec6:	4b6a      	ldr	r3, [pc, #424]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a69      	ldr	r2, [pc, #420]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	4b67      	ldr	r3, [pc, #412]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a66      	ldr	r2, [pc, #408]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	e00b      	b.n	8008ef8 <HAL_RCC_OscConfig+0x19c>
 8008ee0:	4b63      	ldr	r3, [pc, #396]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a62      	ldr	r2, [pc, #392]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eea:	6013      	str	r3, [r2, #0]
 8008eec:	4b60      	ldr	r3, [pc, #384]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a5f      	ldr	r2, [pc, #380]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ef6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008efc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d059      	beq.n	8008fbc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f08:	f7fe fdf8 	bl	8007afc <HAL_GetTick>
 8008f0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f10:	e00a      	b.n	8008f28 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f12:	f7fe fdf3 	bl	8007afc <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b64      	cmp	r3, #100	; 0x64
 8008f20:	d902      	bls.n	8008f28 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	f000 bf67 	b.w	8009df6 <HAL_RCC_OscConfig+0x109a>
 8008f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f2c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f30:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008f34:	fa93 f3a3 	rbit	r3, r3
 8008f38:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8008f3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f40:	fab3 f383 	clz	r3, r3
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	095b      	lsrs	r3, r3, #5
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	f043 0301 	orr.w	r3, r3, #1
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d102      	bne.n	8008f5a <HAL_RCC_OscConfig+0x1fe>
 8008f54:	4b46      	ldr	r3, [pc, #280]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	e015      	b.n	8008f86 <HAL_RCC_OscConfig+0x22a>
 8008f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f5e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008f66:	fa93 f3a3 	rbit	r3, r3
 8008f6a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f72:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008f76:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008f7a:	fa93 f3a3 	rbit	r3, r3
 8008f7e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008f82:	4b3b      	ldr	r3, [pc, #236]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008f8a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8008f8e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8008f92:	fa92 f2a2 	rbit	r2, r2
 8008f96:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8008f9a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008f9e:	fab2 f282 	clz	r2, r2
 8008fa2:	b2d2      	uxtb	r2, r2
 8008fa4:	f042 0220 	orr.w	r2, r2, #32
 8008fa8:	b2d2      	uxtb	r2, r2
 8008faa:	f002 021f 	and.w	r2, r2, #31
 8008fae:	2101      	movs	r1, #1
 8008fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0ab      	beq.n	8008f12 <HAL_RCC_OscConfig+0x1b6>
 8008fba:	e05c      	b.n	8009076 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fbc:	f7fe fd9e 	bl	8007afc <HAL_GetTick>
 8008fc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fc4:	e00a      	b.n	8008fdc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fc6:	f7fe fd99 	bl	8007afc <HAL_GetTick>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b64      	cmp	r3, #100	; 0x64
 8008fd4:	d902      	bls.n	8008fdc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	f000 bf0d 	b.w	8009df6 <HAL_RCC_OscConfig+0x109a>
 8008fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fe0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fe4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008fe8:	fa93 f3a3 	rbit	r3, r3
 8008fec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8008ff0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ff4:	fab3 f383 	clz	r3, r3
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	095b      	lsrs	r3, r3, #5
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	f043 0301 	orr.w	r3, r3, #1
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b01      	cmp	r3, #1
 8009006:	d102      	bne.n	800900e <HAL_RCC_OscConfig+0x2b2>
 8009008:	4b19      	ldr	r3, [pc, #100]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	e015      	b.n	800903a <HAL_RCC_OscConfig+0x2de>
 800900e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009012:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009016:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800901a:	fa93 f3a3 	rbit	r3, r3
 800901e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8009022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009026:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800902a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800902e:	fa93 f3a3 	rbit	r3, r3
 8009032:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009036:	4b0e      	ldr	r3, [pc, #56]	; (8009070 <HAL_RCC_OscConfig+0x314>)
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800903e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8009042:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8009046:	fa92 f2a2 	rbit	r2, r2
 800904a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800904e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8009052:	fab2 f282 	clz	r2, r2
 8009056:	b2d2      	uxtb	r2, r2
 8009058:	f042 0220 	orr.w	r2, r2, #32
 800905c:	b2d2      	uxtb	r2, r2
 800905e:	f002 021f 	and.w	r2, r2, #31
 8009062:	2101      	movs	r1, #1
 8009064:	fa01 f202 	lsl.w	r2, r1, r2
 8009068:	4013      	ands	r3, r2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1ab      	bne.n	8008fc6 <HAL_RCC_OscConfig+0x26a>
 800906e:	e002      	b.n	8009076 <HAL_RCC_OscConfig+0x31a>
 8009070:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800907a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 817f 	beq.w	800938a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800908c:	4ba7      	ldr	r3, [pc, #668]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f003 030c 	and.w	r3, r3, #12
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00c      	beq.n	80090b2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009098:	4ba4      	ldr	r3, [pc, #656]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f003 030c 	and.w	r3, r3, #12
 80090a0:	2b08      	cmp	r3, #8
 80090a2:	d173      	bne.n	800918c <HAL_RCC_OscConfig+0x430>
 80090a4:	4ba1      	ldr	r3, [pc, #644]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80090ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090b0:	d16c      	bne.n	800918c <HAL_RCC_OscConfig+0x430>
 80090b2:	2302      	movs	r3, #2
 80090b4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80090bc:	fa93 f3a3 	rbit	r3, r3
 80090c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80090c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090c8:	fab3 f383 	clz	r3, r3
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	095b      	lsrs	r3, r3, #5
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	f043 0301 	orr.w	r3, r3, #1
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d102      	bne.n	80090e2 <HAL_RCC_OscConfig+0x386>
 80090dc:	4b93      	ldr	r3, [pc, #588]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	e013      	b.n	800910a <HAL_RCC_OscConfig+0x3ae>
 80090e2:	2302      	movs	r3, #2
 80090e4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80090ec:	fa93 f3a3 	rbit	r3, r3
 80090f0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80090f4:	2302      	movs	r3, #2
 80090f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80090fa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80090fe:	fa93 f3a3 	rbit	r3, r3
 8009102:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009106:	4b89      	ldr	r3, [pc, #548]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	2202      	movs	r2, #2
 800910c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8009110:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8009114:	fa92 f2a2 	rbit	r2, r2
 8009118:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800911c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8009120:	fab2 f282 	clz	r2, r2
 8009124:	b2d2      	uxtb	r2, r2
 8009126:	f042 0220 	orr.w	r2, r2, #32
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	f002 021f 	and.w	r2, r2, #31
 8009130:	2101      	movs	r1, #1
 8009132:	fa01 f202 	lsl.w	r2, r1, r2
 8009136:	4013      	ands	r3, r2
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <HAL_RCC_OscConfig+0x3f6>
 800913c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009140:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d002      	beq.n	8009152 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	f000 be52 	b.w	8009df6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009152:	4b76      	ldr	r3, [pc, #472]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800915a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800915e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	21f8      	movs	r1, #248	; 0xf8
 8009168:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800916c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8009170:	fa91 f1a1 	rbit	r1, r1
 8009174:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8009178:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800917c:	fab1 f181 	clz	r1, r1
 8009180:	b2c9      	uxtb	r1, r1
 8009182:	408b      	lsls	r3, r1
 8009184:	4969      	ldr	r1, [pc, #420]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 8009186:	4313      	orrs	r3, r2
 8009188:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800918a:	e0fe      	b.n	800938a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800918c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009190:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 8088 	beq.w	80092ae <HAL_RCC_OscConfig+0x552>
 800919e:	2301      	movs	r3, #1
 80091a0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80091a8:	fa93 f3a3 	rbit	r3, r3
 80091ac:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80091b0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091b4:	fab3 f383 	clz	r3, r3
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80091be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	461a      	mov	r2, r3
 80091c6:	2301      	movs	r3, #1
 80091c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091ca:	f7fe fc97 	bl	8007afc <HAL_GetTick>
 80091ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091d2:	e00a      	b.n	80091ea <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091d4:	f7fe fc92 	bl	8007afc <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d902      	bls.n	80091ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	f000 be06 	b.w	8009df6 <HAL_RCC_OscConfig+0x109a>
 80091ea:	2302      	movs	r3, #2
 80091ec:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80091f4:	fa93 f3a3 	rbit	r3, r3
 80091f8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80091fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009200:	fab3 f383 	clz	r3, r3
 8009204:	b2db      	uxtb	r3, r3
 8009206:	095b      	lsrs	r3, r3, #5
 8009208:	b2db      	uxtb	r3, r3
 800920a:	f043 0301 	orr.w	r3, r3, #1
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b01      	cmp	r3, #1
 8009212:	d102      	bne.n	800921a <HAL_RCC_OscConfig+0x4be>
 8009214:	4b45      	ldr	r3, [pc, #276]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	e013      	b.n	8009242 <HAL_RCC_OscConfig+0x4e6>
 800921a:	2302      	movs	r3, #2
 800921c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009220:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009224:	fa93 f3a3 	rbit	r3, r3
 8009228:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800922c:	2302      	movs	r3, #2
 800922e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009232:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009236:	fa93 f3a3 	rbit	r3, r3
 800923a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800923e:	4b3b      	ldr	r3, [pc, #236]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	2202      	movs	r2, #2
 8009244:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009248:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800924c:	fa92 f2a2 	rbit	r2, r2
 8009250:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8009254:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009258:	fab2 f282 	clz	r2, r2
 800925c:	b2d2      	uxtb	r2, r2
 800925e:	f042 0220 	orr.w	r2, r2, #32
 8009262:	b2d2      	uxtb	r2, r2
 8009264:	f002 021f 	and.w	r2, r2, #31
 8009268:	2101      	movs	r1, #1
 800926a:	fa01 f202 	lsl.w	r2, r1, r2
 800926e:	4013      	ands	r3, r2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d0af      	beq.n	80091d4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009274:	4b2d      	ldr	r3, [pc, #180]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800927c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009280:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	21f8      	movs	r1, #248	; 0xf8
 800928a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800928e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8009292:	fa91 f1a1 	rbit	r1, r1
 8009296:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800929a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800929e:	fab1 f181 	clz	r1, r1
 80092a2:	b2c9      	uxtb	r1, r1
 80092a4:	408b      	lsls	r3, r1
 80092a6:	4921      	ldr	r1, [pc, #132]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	600b      	str	r3, [r1, #0]
 80092ac:	e06d      	b.n	800938a <HAL_RCC_OscConfig+0x62e>
 80092ae:	2301      	movs	r3, #1
 80092b0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80092b8:	fa93 f3a3 	rbit	r3, r3
 80092bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80092c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092c4:	fab3 f383 	clz	r3, r3
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80092ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	461a      	mov	r2, r3
 80092d6:	2300      	movs	r3, #0
 80092d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092da:	f7fe fc0f 	bl	8007afc <HAL_GetTick>
 80092de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092e2:	e00a      	b.n	80092fa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092e4:	f7fe fc0a 	bl	8007afc <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d902      	bls.n	80092fa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	f000 bd7e 	b.w	8009df6 <HAL_RCC_OscConfig+0x109a>
 80092fa:	2302      	movs	r3, #2
 80092fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009300:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009304:	fa93 f3a3 	rbit	r3, r3
 8009308:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800930c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009310:	fab3 f383 	clz	r3, r3
 8009314:	b2db      	uxtb	r3, r3
 8009316:	095b      	lsrs	r3, r3, #5
 8009318:	b2db      	uxtb	r3, r3
 800931a:	f043 0301 	orr.w	r3, r3, #1
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b01      	cmp	r3, #1
 8009322:	d105      	bne.n	8009330 <HAL_RCC_OscConfig+0x5d4>
 8009324:	4b01      	ldr	r3, [pc, #4]	; (800932c <HAL_RCC_OscConfig+0x5d0>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	e016      	b.n	8009358 <HAL_RCC_OscConfig+0x5fc>
 800932a:	bf00      	nop
 800932c:	40021000 	.word	0x40021000
 8009330:	2302      	movs	r3, #2
 8009332:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800933a:	fa93 f3a3 	rbit	r3, r3
 800933e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009342:	2302      	movs	r3, #2
 8009344:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009348:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800934c:	fa93 f3a3 	rbit	r3, r3
 8009350:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009354:	4bbf      	ldr	r3, [pc, #764]	; (8009654 <HAL_RCC_OscConfig+0x8f8>)
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	2202      	movs	r2, #2
 800935a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800935e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009362:	fa92 f2a2 	rbit	r2, r2
 8009366:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800936a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800936e:	fab2 f282 	clz	r2, r2
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	f042 0220 	orr.w	r2, r2, #32
 8009378:	b2d2      	uxtb	r2, r2
 800937a:	f002 021f 	and.w	r2, r2, #31
 800937e:	2101      	movs	r1, #1
 8009380:	fa01 f202 	lsl.w	r2, r1, r2
 8009384:	4013      	ands	r3, r2
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1ac      	bne.n	80092e4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800938a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800938e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 8113 	beq.w	80095c6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80093a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80093a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d07c      	beq.n	80094aa <HAL_RCC_OscConfig+0x74e>
 80093b0:	2301      	movs	r3, #1
 80093b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ba:	fa93 f3a3 	rbit	r3, r3
 80093be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80093c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093c6:	fab3 f383 	clz	r3, r3
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	461a      	mov	r2, r3
 80093ce:	4ba2      	ldr	r3, [pc, #648]	; (8009658 <HAL_RCC_OscConfig+0x8fc>)
 80093d0:	4413      	add	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	461a      	mov	r2, r3
 80093d6:	2301      	movs	r3, #1
 80093d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093da:	f7fe fb8f 	bl	8007afc <HAL_GetTick>
 80093de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093e2:	e00a      	b.n	80093fa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093e4:	f7fe fb8a 	bl	8007afc <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d902      	bls.n	80093fa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	f000 bcfe 	b.w	8009df6 <HAL_RCC_OscConfig+0x109a>
 80093fa:	2302      	movs	r3, #2
 80093fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009404:	fa93 f2a3 	rbit	r2, r3
 8009408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800940c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800941a:	2202      	movs	r2, #2
 800941c:	601a      	str	r2, [r3, #0]
 800941e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	fa93 f2a3 	rbit	r2, r3
 800942c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800943a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800943e:	2202      	movs	r2, #2
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009446:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	fa93 f2a3 	rbit	r2, r3
 8009450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009454:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009458:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800945a:	4b7e      	ldr	r3, [pc, #504]	; (8009654 <HAL_RCC_OscConfig+0x8f8>)
 800945c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800945e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009462:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009466:	2102      	movs	r1, #2
 8009468:	6019      	str	r1, [r3, #0]
 800946a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800946e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	fa93 f1a3 	rbit	r1, r3
 8009478:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800947c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009480:	6019      	str	r1, [r3, #0]
  return result;
 8009482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009486:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	fab3 f383 	clz	r3, r3
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009496:	b2db      	uxtb	r3, r3
 8009498:	f003 031f 	and.w	r3, r3, #31
 800949c:	2101      	movs	r1, #1
 800949e:	fa01 f303 	lsl.w	r3, r1, r3
 80094a2:	4013      	ands	r3, r2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d09d      	beq.n	80093e4 <HAL_RCC_OscConfig+0x688>
 80094a8:	e08d      	b.n	80095c6 <HAL_RCC_OscConfig+0x86a>
 80094aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80094b2:	2201      	movs	r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	fa93 f2a3 	rbit	r2, r3
 80094c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80094cc:	601a      	str	r2, [r3, #0]
  return result;
 80094ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80094d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80094d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094d8:	fab3 f383 	clz	r3, r3
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	461a      	mov	r2, r3
 80094e0:	4b5d      	ldr	r3, [pc, #372]	; (8009658 <HAL_RCC_OscConfig+0x8fc>)
 80094e2:	4413      	add	r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	461a      	mov	r2, r3
 80094e8:	2300      	movs	r3, #0
 80094ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094ec:	f7fe fb06 	bl	8007afc <HAL_GetTick>
 80094f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094f4:	e00a      	b.n	800950c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094f6:	f7fe fb01 	bl	8007afc <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	2b02      	cmp	r3, #2
 8009504:	d902      	bls.n	800950c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	f000 bc75 	b.w	8009df6 <HAL_RCC_OscConfig+0x109a>
 800950c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009510:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009514:	2202      	movs	r2, #2
 8009516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800951c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	fa93 f2a3 	rbit	r2, r3
 8009526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800952a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800952e:	601a      	str	r2, [r3, #0]
 8009530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009538:	2202      	movs	r2, #2
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	fa93 f2a3 	rbit	r2, r3
 800954a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800954e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009558:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800955c:	2202      	movs	r2, #2
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009564:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	fa93 f2a3 	rbit	r2, r3
 800956e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009572:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009576:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009578:	4b36      	ldr	r3, [pc, #216]	; (8009654 <HAL_RCC_OscConfig+0x8f8>)
 800957a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800957c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009580:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009584:	2102      	movs	r1, #2
 8009586:	6019      	str	r1, [r3, #0]
 8009588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800958c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	fa93 f1a3 	rbit	r1, r3
 8009596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800959a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800959e:	6019      	str	r1, [r3, #0]
  return result;
 80095a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	fab3 f383 	clz	r3, r3
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	f003 031f 	and.w	r3, r3, #31
 80095ba:	2101      	movs	r1, #1
 80095bc:	fa01 f303 	lsl.w	r3, r1, r3
 80095c0:	4013      	ands	r3, r2
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d197      	bne.n	80094f6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80095ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0304 	and.w	r3, r3, #4
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 81a5 	beq.w	8009926 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095dc:	2300      	movs	r3, #0
 80095de:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095e2:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <HAL_RCC_OscConfig+0x8f8>)
 80095e4:	69db      	ldr	r3, [r3, #28]
 80095e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d116      	bne.n	800961c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095ee:	4b19      	ldr	r3, [pc, #100]	; (8009654 <HAL_RCC_OscConfig+0x8f8>)
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	4a18      	ldr	r2, [pc, #96]	; (8009654 <HAL_RCC_OscConfig+0x8f8>)
 80095f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095f8:	61d3      	str	r3, [r2, #28]
 80095fa:	4b16      	ldr	r3, [pc, #88]	; (8009654 <HAL_RCC_OscConfig+0x8f8>)
 80095fc:	69db      	ldr	r3, [r3, #28]
 80095fe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009610:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009614:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8009616:	2301      	movs	r3, #1
 8009618:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <HAL_RCC_OscConfig+0x900>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009624:	2b00      	cmp	r3, #0
 8009626:	d121      	bne.n	800966c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009628:	4b0c      	ldr	r3, [pc, #48]	; (800965c <HAL_RCC_OscConfig+0x900>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a0b      	ldr	r2, [pc, #44]	; (800965c <HAL_RCC_OscConfig+0x900>)
 800962e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009632:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009634:	f7fe fa62 	bl	8007afc <HAL_GetTick>
 8009638:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800963c:	e010      	b.n	8009660 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800963e:	f7fe fa5d 	bl	8007afc <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	2b64      	cmp	r3, #100	; 0x64
 800964c:	d908      	bls.n	8009660 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e3d1      	b.n	8009df6 <HAL_RCC_OscConfig+0x109a>
 8009652:	bf00      	nop
 8009654:	40021000 	.word	0x40021000
 8009658:	10908120 	.word	0x10908120
 800965c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009660:	4b8d      	ldr	r3, [pc, #564]	; (8009898 <HAL_RCC_OscConfig+0xb3c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009668:	2b00      	cmp	r3, #0
 800966a:	d0e8      	beq.n	800963e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800966c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009670:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d106      	bne.n	800968a <HAL_RCC_OscConfig+0x92e>
 800967c:	4b87      	ldr	r3, [pc, #540]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	4a86      	ldr	r2, [pc, #536]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 8009682:	f043 0301 	orr.w	r3, r3, #1
 8009686:	6213      	str	r3, [r2, #32]
 8009688:	e035      	b.n	80096f6 <HAL_RCC_OscConfig+0x99a>
 800968a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800968e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d10c      	bne.n	80096b4 <HAL_RCC_OscConfig+0x958>
 800969a:	4b80      	ldr	r3, [pc, #512]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	4a7f      	ldr	r2, [pc, #508]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096a0:	f023 0301 	bic.w	r3, r3, #1
 80096a4:	6213      	str	r3, [r2, #32]
 80096a6:	4b7d      	ldr	r3, [pc, #500]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	4a7c      	ldr	r2, [pc, #496]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096ac:	f023 0304 	bic.w	r3, r3, #4
 80096b0:	6213      	str	r3, [r2, #32]
 80096b2:	e020      	b.n	80096f6 <HAL_RCC_OscConfig+0x99a>
 80096b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	2b05      	cmp	r3, #5
 80096c2:	d10c      	bne.n	80096de <HAL_RCC_OscConfig+0x982>
 80096c4:	4b75      	ldr	r3, [pc, #468]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096c6:	6a1b      	ldr	r3, [r3, #32]
 80096c8:	4a74      	ldr	r2, [pc, #464]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096ca:	f043 0304 	orr.w	r3, r3, #4
 80096ce:	6213      	str	r3, [r2, #32]
 80096d0:	4b72      	ldr	r3, [pc, #456]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	4a71      	ldr	r2, [pc, #452]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	6213      	str	r3, [r2, #32]
 80096dc:	e00b      	b.n	80096f6 <HAL_RCC_OscConfig+0x99a>
 80096de:	4b6f      	ldr	r3, [pc, #444]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	4a6e      	ldr	r2, [pc, #440]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096e4:	f023 0301 	bic.w	r3, r3, #1
 80096e8:	6213      	str	r3, [r2, #32]
 80096ea:	4b6c      	ldr	r3, [pc, #432]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	4a6b      	ldr	r2, [pc, #428]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80096f0:	f023 0304 	bic.w	r3, r3, #4
 80096f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80096f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80096fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 8081 	beq.w	800980a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009708:	f7fe f9f8 	bl	8007afc <HAL_GetTick>
 800970c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009710:	e00b      	b.n	800972a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009712:	f7fe f9f3 	bl	8007afc <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009722:	4293      	cmp	r3, r2
 8009724:	d901      	bls.n	800972a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e365      	b.n	8009df6 <HAL_RCC_OscConfig+0x109a>
 800972a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800972e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8009732:	2202      	movs	r2, #2
 8009734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800973a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	fa93 f2a3 	rbit	r2, r3
 8009744:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009748:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800974c:	601a      	str	r2, [r3, #0]
 800974e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009752:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009756:	2202      	movs	r2, #2
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800975e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	fa93 f2a3 	rbit	r2, r3
 8009768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800976c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009770:	601a      	str	r2, [r3, #0]
  return result;
 8009772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009776:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800977a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800977c:	fab3 f383 	clz	r3, r3
 8009780:	b2db      	uxtb	r3, r3
 8009782:	095b      	lsrs	r3, r3, #5
 8009784:	b2db      	uxtb	r3, r3
 8009786:	f043 0302 	orr.w	r3, r3, #2
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b02      	cmp	r3, #2
 800978e:	d102      	bne.n	8009796 <HAL_RCC_OscConfig+0xa3a>
 8009790:	4b42      	ldr	r3, [pc, #264]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	e013      	b.n	80097be <HAL_RCC_OscConfig+0xa62>
 8009796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800979a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800979e:	2202      	movs	r2, #2
 80097a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80097a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	fa93 f2a3 	rbit	r2, r3
 80097b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80097b4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80097b8:	601a      	str	r2, [r3, #0]
 80097ba:	4b38      	ldr	r3, [pc, #224]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 80097bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80097c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80097c6:	2102      	movs	r1, #2
 80097c8:	6011      	str	r1, [r2, #0]
 80097ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80097ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80097d2:	6812      	ldr	r2, [r2, #0]
 80097d4:	fa92 f1a2 	rbit	r1, r2
 80097d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80097dc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80097e0:	6011      	str	r1, [r2, #0]
  return result;
 80097e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80097e6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80097ea:	6812      	ldr	r2, [r2, #0]
 80097ec:	fab2 f282 	clz	r2, r2
 80097f0:	b2d2      	uxtb	r2, r2
 80097f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097f6:	b2d2      	uxtb	r2, r2
 80097f8:	f002 021f 	and.w	r2, r2, #31
 80097fc:	2101      	movs	r1, #1
 80097fe:	fa01 f202 	lsl.w	r2, r1, r2
 8009802:	4013      	ands	r3, r2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d084      	beq.n	8009712 <HAL_RCC_OscConfig+0x9b6>
 8009808:	e083      	b.n	8009912 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800980a:	f7fe f977 	bl	8007afc <HAL_GetTick>
 800980e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009812:	e00b      	b.n	800982c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009814:	f7fe f972 	bl	8007afc <HAL_GetTick>
 8009818:	4602      	mov	r2, r0
 800981a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	f241 3288 	movw	r2, #5000	; 0x1388
 8009824:	4293      	cmp	r3, r2
 8009826:	d901      	bls.n	800982c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e2e4      	b.n	8009df6 <HAL_RCC_OscConfig+0x109a>
 800982c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009830:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009834:	2202      	movs	r2, #2
 8009836:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800983c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	fa93 f2a3 	rbit	r2, r3
 8009846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800984a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009854:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009858:	2202      	movs	r2, #2
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009860:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	fa93 f2a3 	rbit	r2, r3
 800986a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800986e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009872:	601a      	str	r2, [r3, #0]
  return result;
 8009874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009878:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800987c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800987e:	fab3 f383 	clz	r3, r3
 8009882:	b2db      	uxtb	r3, r3
 8009884:	095b      	lsrs	r3, r3, #5
 8009886:	b2db      	uxtb	r3, r3
 8009888:	f043 0302 	orr.w	r3, r3, #2
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b02      	cmp	r3, #2
 8009890:	d106      	bne.n	80098a0 <HAL_RCC_OscConfig+0xb44>
 8009892:	4b02      	ldr	r3, [pc, #8]	; (800989c <HAL_RCC_OscConfig+0xb40>)
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	e017      	b.n	80098c8 <HAL_RCC_OscConfig+0xb6c>
 8009898:	40007000 	.word	0x40007000
 800989c:	40021000 	.word	0x40021000
 80098a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80098a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80098a8:	2202      	movs	r2, #2
 80098aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80098b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	fa93 f2a3 	rbit	r2, r3
 80098ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80098be:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	4bb3      	ldr	r3, [pc, #716]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80098cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80098d0:	2102      	movs	r1, #2
 80098d2:	6011      	str	r1, [r2, #0]
 80098d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80098d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80098dc:	6812      	ldr	r2, [r2, #0]
 80098de:	fa92 f1a2 	rbit	r1, r2
 80098e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80098e6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80098ea:	6011      	str	r1, [r2, #0]
  return result;
 80098ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80098f0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80098f4:	6812      	ldr	r2, [r2, #0]
 80098f6:	fab2 f282 	clz	r2, r2
 80098fa:	b2d2      	uxtb	r2, r2
 80098fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009900:	b2d2      	uxtb	r2, r2
 8009902:	f002 021f 	and.w	r2, r2, #31
 8009906:	2101      	movs	r1, #1
 8009908:	fa01 f202 	lsl.w	r2, r1, r2
 800990c:	4013      	ands	r3, r2
 800990e:	2b00      	cmp	r3, #0
 8009910:	d180      	bne.n	8009814 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009912:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8009916:	2b01      	cmp	r3, #1
 8009918:	d105      	bne.n	8009926 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800991a:	4b9e      	ldr	r3, [pc, #632]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 800991c:	69db      	ldr	r3, [r3, #28]
 800991e:	4a9d      	ldr	r2, [pc, #628]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 8009920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009924:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800992a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 825e 	beq.w	8009df4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009938:	4b96      	ldr	r3, [pc, #600]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	f003 030c 	and.w	r3, r3, #12
 8009940:	2b08      	cmp	r3, #8
 8009942:	f000 821f 	beq.w	8009d84 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800994a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	2b02      	cmp	r3, #2
 8009954:	f040 8170 	bne.w	8009c38 <HAL_RCC_OscConfig+0xedc>
 8009958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800995c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800996a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	fa93 f2a3 	rbit	r2, r3
 8009974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009978:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800997c:	601a      	str	r2, [r3, #0]
  return result;
 800997e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009982:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009986:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009988:	fab3 f383 	clz	r3, r3
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009992:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	461a      	mov	r2, r3
 800999a:	2300      	movs	r3, #0
 800999c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800999e:	f7fe f8ad 	bl	8007afc <HAL_GetTick>
 80099a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80099a6:	e009      	b.n	80099bc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099a8:	f7fe f8a8 	bl	8007afc <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d901      	bls.n	80099bc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e21c      	b.n	8009df6 <HAL_RCC_OscConfig+0x109a>
 80099bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80099c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80099c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80099c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80099ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	fa93 f2a3 	rbit	r2, r3
 80099d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80099dc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80099e0:	601a      	str	r2, [r3, #0]
  return result;
 80099e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80099e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80099ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80099ec:	fab3 f383 	clz	r3, r3
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	095b      	lsrs	r3, r3, #5
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f043 0301 	orr.w	r3, r3, #1
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d102      	bne.n	8009a06 <HAL_RCC_OscConfig+0xcaa>
 8009a00:	4b64      	ldr	r3, [pc, #400]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	e027      	b.n	8009a56 <HAL_RCC_OscConfig+0xcfa>
 8009a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a18:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	fa93 f2a3 	rbit	r2, r3
 8009a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a3e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	fa93 f2a3 	rbit	r2, r3
 8009a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009a4c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	4b50      	ldr	r3, [pc, #320]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 8009a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009a5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009a5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009a62:	6011      	str	r1, [r2, #0]
 8009a64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009a68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009a6c:	6812      	ldr	r2, [r2, #0]
 8009a6e:	fa92 f1a2 	rbit	r1, r2
 8009a72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009a76:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8009a7a:	6011      	str	r1, [r2, #0]
  return result;
 8009a7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009a80:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8009a84:	6812      	ldr	r2, [r2, #0]
 8009a86:	fab2 f282 	clz	r2, r2
 8009a8a:	b2d2      	uxtb	r2, r2
 8009a8c:	f042 0220 	orr.w	r2, r2, #32
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	f002 021f 	and.w	r2, r2, #31
 8009a96:	2101      	movs	r1, #1
 8009a98:	fa01 f202 	lsl.w	r2, r1, r2
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d182      	bne.n	80099a8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009aa2:	4b3c      	ldr	r3, [pc, #240]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 8009aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa6:	f023 020f 	bic.w	r2, r3, #15
 8009aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009aae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	4937      	ldr	r1, [pc, #220]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	62cb      	str	r3, [r1, #44]	; 0x2c
 8009abc:	4b35      	ldr	r3, [pc, #212]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8009ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009ac8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6a19      	ldr	r1, [r3, #32]
 8009ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009ad4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	430b      	orrs	r3, r1
 8009ade:	492d      	ldr	r1, [pc, #180]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	604b      	str	r3, [r1, #4]
 8009ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009ae8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009aec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009af6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	fa93 f2a3 	rbit	r2, r3
 8009b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b04:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009b08:	601a      	str	r2, [r3, #0]
  return result;
 8009b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b0e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009b12:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b14:	fab3 f383 	clz	r3, r3
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009b1e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	461a      	mov	r2, r3
 8009b26:	2301      	movs	r3, #1
 8009b28:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b2a:	f7fd ffe7 	bl	8007afc <HAL_GetTick>
 8009b2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009b32:	e009      	b.n	8009b48 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b34:	f7fd ffe2 	bl	8007afc <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d901      	bls.n	8009b48 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e156      	b.n	8009df6 <HAL_RCC_OscConfig+0x109a>
 8009b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b5a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	fa93 f2a3 	rbit	r2, r3
 8009b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009b6c:	601a      	str	r2, [r3, #0]
  return result;
 8009b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009b76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009b78:	fab3 f383 	clz	r3, r3
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	f043 0301 	orr.w	r3, r3, #1
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d105      	bne.n	8009b98 <HAL_RCC_OscConfig+0xe3c>
 8009b8c:	4b01      	ldr	r3, [pc, #4]	; (8009b94 <HAL_RCC_OscConfig+0xe38>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	e02a      	b.n	8009be8 <HAL_RCC_OscConfig+0xe8c>
 8009b92:	bf00      	nop
 8009b94:	40021000 	.word	0x40021000
 8009b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009b9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009ba4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009baa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	fa93 f2a3 	rbit	r2, r3
 8009bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009bb8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009bc2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009bc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009bd0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	fa93 f2a3 	rbit	r2, r3
 8009bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009bde:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	4b86      	ldr	r3, [pc, #536]	; (8009e00 <HAL_RCC_OscConfig+0x10a4>)
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009bec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009bf0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009bf4:	6011      	str	r1, [r2, #0]
 8009bf6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009bfa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009bfe:	6812      	ldr	r2, [r2, #0]
 8009c00:	fa92 f1a2 	rbit	r1, r2
 8009c04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009c08:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8009c0c:	6011      	str	r1, [r2, #0]
  return result;
 8009c0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009c12:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8009c16:	6812      	ldr	r2, [r2, #0]
 8009c18:	fab2 f282 	clz	r2, r2
 8009c1c:	b2d2      	uxtb	r2, r2
 8009c1e:	f042 0220 	orr.w	r2, r2, #32
 8009c22:	b2d2      	uxtb	r2, r2
 8009c24:	f002 021f 	and.w	r2, r2, #31
 8009c28:	2101      	movs	r1, #1
 8009c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8009c2e:	4013      	ands	r3, r2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f43f af7f 	beq.w	8009b34 <HAL_RCC_OscConfig+0xdd8>
 8009c36:	e0dd      	b.n	8009df4 <HAL_RCC_OscConfig+0x1098>
 8009c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009c3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009c40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009c4a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	fa93 f2a3 	rbit	r2, r3
 8009c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009c58:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009c5c:	601a      	str	r2, [r3, #0]
  return result;
 8009c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009c62:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009c66:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c68:	fab3 f383 	clz	r3, r3
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009c72:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	461a      	mov	r2, r3
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c7e:	f7fd ff3d 	bl	8007afc <HAL_GetTick>
 8009c82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c86:	e009      	b.n	8009c9c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c88:	f7fd ff38 	bl	8007afc <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d901      	bls.n	8009c9c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e0ac      	b.n	8009df6 <HAL_RCC_OscConfig+0x109a>
 8009c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009ca0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009ca4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009cae:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	fa93 f2a3 	rbit	r2, r3
 8009cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009cbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009cc0:	601a      	str	r2, [r3, #0]
  return result;
 8009cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009cc6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009cca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009ccc:	fab3 f383 	clz	r3, r3
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	095b      	lsrs	r3, r3, #5
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	f043 0301 	orr.w	r3, r3, #1
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d102      	bne.n	8009ce6 <HAL_RCC_OscConfig+0xf8a>
 8009ce0:	4b47      	ldr	r3, [pc, #284]	; (8009e00 <HAL_RCC_OscConfig+0x10a4>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	e027      	b.n	8009d36 <HAL_RCC_OscConfig+0xfda>
 8009ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009cea:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009cee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009cf8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	fa93 f2a3 	rbit	r2, r3
 8009d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009d06:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009d10:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d18:	601a      	str	r2, [r3, #0]
 8009d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009d1e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	fa93 f2a3 	rbit	r2, r3
 8009d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009d2c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	4b33      	ldr	r3, [pc, #204]	; (8009e00 <HAL_RCC_OscConfig+0x10a4>)
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009d3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009d3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009d42:	6011      	str	r1, [r2, #0]
 8009d44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009d48:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009d4c:	6812      	ldr	r2, [r2, #0]
 8009d4e:	fa92 f1a2 	rbit	r1, r2
 8009d52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009d56:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8009d5a:	6011      	str	r1, [r2, #0]
  return result;
 8009d5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8009d60:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8009d64:	6812      	ldr	r2, [r2, #0]
 8009d66:	fab2 f282 	clz	r2, r2
 8009d6a:	b2d2      	uxtb	r2, r2
 8009d6c:	f042 0220 	orr.w	r2, r2, #32
 8009d70:	b2d2      	uxtb	r2, r2
 8009d72:	f002 021f 	and.w	r2, r2, #31
 8009d76:	2101      	movs	r1, #1
 8009d78:	fa01 f202 	lsl.w	r2, r1, r2
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d182      	bne.n	8009c88 <HAL_RCC_OscConfig+0xf2c>
 8009d82:	e037      	b.n	8009df4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009d88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e02e      	b.n	8009df6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009d98:	4b19      	ldr	r3, [pc, #100]	; (8009e00 <HAL_RCC_OscConfig+0x10a4>)
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8009da0:	4b17      	ldr	r3, [pc, #92]	; (8009e00 <HAL_RCC_OscConfig+0x10a4>)
 8009da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009da8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009dac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8009db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009db4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d117      	bne.n	8009df0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009dc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009dc4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009dc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009dcc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d10b      	bne.n	8009df0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8009dd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009ddc:	f003 020f 	and.w	r2, r3, #15
 8009de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8009de4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d001      	beq.n	8009df4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e000      	b.n	8009df6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	40021000 	.word	0x40021000

08009e04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b09e      	sub	sp, #120	; 0x78
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e162      	b.n	800a0e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e1c:	4b90      	ldr	r3, [pc, #576]	; (800a060 <HAL_RCC_ClockConfig+0x25c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0307 	and.w	r3, r3, #7
 8009e24:	683a      	ldr	r2, [r7, #0]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d910      	bls.n	8009e4c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e2a:	4b8d      	ldr	r3, [pc, #564]	; (800a060 <HAL_RCC_ClockConfig+0x25c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f023 0207 	bic.w	r2, r3, #7
 8009e32:	498b      	ldr	r1, [pc, #556]	; (800a060 <HAL_RCC_ClockConfig+0x25c>)
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e3a:	4b89      	ldr	r3, [pc, #548]	; (800a060 <HAL_RCC_ClockConfig+0x25c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 0307 	and.w	r3, r3, #7
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d001      	beq.n	8009e4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e14a      	b.n	800a0e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d008      	beq.n	8009e6a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e58:	4b82      	ldr	r3, [pc, #520]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	497f      	ldr	r1, [pc, #508]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 80dc 	beq.w	800a030 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d13c      	bne.n	8009efa <HAL_RCC_ClockConfig+0xf6>
 8009e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e84:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e88:	fa93 f3a3 	rbit	r3, r3
 8009e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e90:	fab3 f383 	clz	r3, r3
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	095b      	lsrs	r3, r3, #5
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	f043 0301 	orr.w	r3, r3, #1
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d102      	bne.n	8009eaa <HAL_RCC_ClockConfig+0xa6>
 8009ea4:	4b6f      	ldr	r3, [pc, #444]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	e00f      	b.n	8009eca <HAL_RCC_ClockConfig+0xc6>
 8009eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009eae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009eb2:	fa93 f3a3 	rbit	r3, r3
 8009eb6:	667b      	str	r3, [r7, #100]	; 0x64
 8009eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8009ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ec0:	fa93 f3a3 	rbit	r3, r3
 8009ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ec6:	4b67      	ldr	r3, [pc, #412]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009ece:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ed0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ed2:	fa92 f2a2 	rbit	r2, r2
 8009ed6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009ed8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009eda:	fab2 f282 	clz	r2, r2
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	f042 0220 	orr.w	r2, r2, #32
 8009ee4:	b2d2      	uxtb	r2, r2
 8009ee6:	f002 021f 	and.w	r2, r2, #31
 8009eea:	2101      	movs	r1, #1
 8009eec:	fa01 f202 	lsl.w	r2, r1, r2
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d17b      	bne.n	8009fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e0f3      	b.n	800a0e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d13c      	bne.n	8009f7c <HAL_RCC_ClockConfig+0x178>
 8009f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f0a:	fa93 f3a3 	rbit	r3, r3
 8009f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f12:	fab3 f383 	clz	r3, r3
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	095b      	lsrs	r3, r3, #5
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	f043 0301 	orr.w	r3, r3, #1
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d102      	bne.n	8009f2c <HAL_RCC_ClockConfig+0x128>
 8009f26:	4b4f      	ldr	r3, [pc, #316]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	e00f      	b.n	8009f4c <HAL_RCC_ClockConfig+0x148>
 8009f2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f34:	fa93 f3a3 	rbit	r3, r3
 8009f38:	647b      	str	r3, [r7, #68]	; 0x44
 8009f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8009f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f42:	fa93 f3a3 	rbit	r3, r3
 8009f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f48:	4b46      	ldr	r3, [pc, #280]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f50:	63ba      	str	r2, [r7, #56]	; 0x38
 8009f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f54:	fa92 f2a2 	rbit	r2, r2
 8009f58:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8009f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f5c:	fab2 f282 	clz	r2, r2
 8009f60:	b2d2      	uxtb	r2, r2
 8009f62:	f042 0220 	orr.w	r2, r2, #32
 8009f66:	b2d2      	uxtb	r2, r2
 8009f68:	f002 021f 	and.w	r2, r2, #31
 8009f6c:	2101      	movs	r1, #1
 8009f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8009f72:	4013      	ands	r3, r2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d13a      	bne.n	8009fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e0b2      	b.n	800a0e2 <HAL_RCC_ClockConfig+0x2de>
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	fa93 f3a3 	rbit	r3, r3
 8009f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f8a:	fab3 f383 	clz	r3, r3
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	095b      	lsrs	r3, r3, #5
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f043 0301 	orr.w	r3, r3, #1
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d102      	bne.n	8009fa4 <HAL_RCC_ClockConfig+0x1a0>
 8009f9e:	4b31      	ldr	r3, [pc, #196]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	e00d      	b.n	8009fc0 <HAL_RCC_ClockConfig+0x1bc>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	fa93 f3a3 	rbit	r3, r3
 8009fae:	627b      	str	r3, [r7, #36]	; 0x24
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	623b      	str	r3, [r7, #32]
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	fa93 f3a3 	rbit	r3, r3
 8009fba:	61fb      	str	r3, [r7, #28]
 8009fbc:	4b29      	ldr	r3, [pc, #164]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	61ba      	str	r2, [r7, #24]
 8009fc4:	69ba      	ldr	r2, [r7, #24]
 8009fc6:	fa92 f2a2 	rbit	r2, r2
 8009fca:	617a      	str	r2, [r7, #20]
  return result;
 8009fcc:	697a      	ldr	r2, [r7, #20]
 8009fce:	fab2 f282 	clz	r2, r2
 8009fd2:	b2d2      	uxtb	r2, r2
 8009fd4:	f042 0220 	orr.w	r2, r2, #32
 8009fd8:	b2d2      	uxtb	r2, r2
 8009fda:	f002 021f 	and.w	r2, r2, #31
 8009fde:	2101      	movs	r1, #1
 8009fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e079      	b.n	800a0e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fee:	4b1d      	ldr	r3, [pc, #116]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f023 0203 	bic.w	r2, r3, #3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	491a      	ldr	r1, [pc, #104]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a000:	f7fd fd7c 	bl	8007afc <HAL_GetTick>
 800a004:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a006:	e00a      	b.n	800a01e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a008:	f7fd fd78 	bl	8007afc <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	f241 3288 	movw	r2, #5000	; 0x1388
 800a016:	4293      	cmp	r3, r2
 800a018:	d901      	bls.n	800a01e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e061      	b.n	800a0e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a01e:	4b11      	ldr	r3, [pc, #68]	; (800a064 <HAL_RCC_ClockConfig+0x260>)
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	f003 020c 	and.w	r2, r3, #12
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d1eb      	bne.n	800a008 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a030:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <HAL_RCC_ClockConfig+0x25c>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f003 0307 	and.w	r3, r3, #7
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d214      	bcs.n	800a068 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a03e:	4b08      	ldr	r3, [pc, #32]	; (800a060 <HAL_RCC_ClockConfig+0x25c>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f023 0207 	bic.w	r2, r3, #7
 800a046:	4906      	ldr	r1, [pc, #24]	; (800a060 <HAL_RCC_ClockConfig+0x25c>)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a04e:	4b04      	ldr	r3, [pc, #16]	; (800a060 <HAL_RCC_ClockConfig+0x25c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0307 	and.w	r3, r3, #7
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d005      	beq.n	800a068 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e040      	b.n	800a0e2 <HAL_RCC_ClockConfig+0x2de>
 800a060:	40022000 	.word	0x40022000
 800a064:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d008      	beq.n	800a086 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a074:	4b1d      	ldr	r3, [pc, #116]	; (800a0ec <HAL_RCC_ClockConfig+0x2e8>)
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	491a      	ldr	r1, [pc, #104]	; (800a0ec <HAL_RCC_ClockConfig+0x2e8>)
 800a082:	4313      	orrs	r3, r2
 800a084:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0308 	and.w	r3, r3, #8
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d009      	beq.n	800a0a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a092:	4b16      	ldr	r3, [pc, #88]	; (800a0ec <HAL_RCC_ClockConfig+0x2e8>)
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	4912      	ldr	r1, [pc, #72]	; (800a0ec <HAL_RCC_ClockConfig+0x2e8>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a0a6:	f000 f829 	bl	800a0fc <HAL_RCC_GetSysClockFreq>
 800a0aa:	4601      	mov	r1, r0
 800a0ac:	4b0f      	ldr	r3, [pc, #60]	; (800a0ec <HAL_RCC_ClockConfig+0x2e8>)
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0b4:	22f0      	movs	r2, #240	; 0xf0
 800a0b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	fa92 f2a2 	rbit	r2, r2
 800a0be:	60fa      	str	r2, [r7, #12]
  return result;
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	fab2 f282 	clz	r2, r2
 800a0c6:	b2d2      	uxtb	r2, r2
 800a0c8:	40d3      	lsrs	r3, r2
 800a0ca:	4a09      	ldr	r2, [pc, #36]	; (800a0f0 <HAL_RCC_ClockConfig+0x2ec>)
 800a0cc:	5cd3      	ldrb	r3, [r2, r3]
 800a0ce:	fa21 f303 	lsr.w	r3, r1, r3
 800a0d2:	4a08      	ldr	r2, [pc, #32]	; (800a0f4 <HAL_RCC_ClockConfig+0x2f0>)
 800a0d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a0d6:	4b08      	ldr	r3, [pc, #32]	; (800a0f8 <HAL_RCC_ClockConfig+0x2f4>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fd fcca 	bl	8007a74 <HAL_InitTick>
  
  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3778      	adds	r7, #120	; 0x78
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	40021000 	.word	0x40021000
 800a0f0:	0800d170 	.word	0x0800d170
 800a0f4:	200009e0 	.word	0x200009e0
 800a0f8:	200009e4 	.word	0x200009e4

0800a0fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b08b      	sub	sp, #44	; 0x2c
 800a100:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	61fb      	str	r3, [r7, #28]
 800a106:	2300      	movs	r3, #0
 800a108:	61bb      	str	r3, [r7, #24]
 800a10a:	2300      	movs	r3, #0
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a116:	4b2a      	ldr	r3, [pc, #168]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f003 030c 	and.w	r3, r3, #12
 800a122:	2b04      	cmp	r3, #4
 800a124:	d002      	beq.n	800a12c <HAL_RCC_GetSysClockFreq+0x30>
 800a126:	2b08      	cmp	r3, #8
 800a128:	d003      	beq.n	800a132 <HAL_RCC_GetSysClockFreq+0x36>
 800a12a:	e03f      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a12c:	4b25      	ldr	r3, [pc, #148]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a12e:	623b      	str	r3, [r7, #32]
      break;
 800a130:	e03f      	b.n	800a1b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a138:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a13c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	fa92 f2a2 	rbit	r2, r2
 800a144:	607a      	str	r2, [r7, #4]
  return result;
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	fab2 f282 	clz	r2, r2
 800a14c:	b2d2      	uxtb	r2, r2
 800a14e:	40d3      	lsrs	r3, r2
 800a150:	4a1d      	ldr	r2, [pc, #116]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a152:	5cd3      	ldrb	r3, [r2, r3]
 800a154:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a156:	4b1a      	ldr	r3, [pc, #104]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15a:	f003 030f 	and.w	r3, r3, #15
 800a15e:	220f      	movs	r2, #15
 800a160:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a162:	693a      	ldr	r2, [r7, #16]
 800a164:	fa92 f2a2 	rbit	r2, r2
 800a168:	60fa      	str	r2, [r7, #12]
  return result;
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	fab2 f282 	clz	r2, r2
 800a170:	b2d2      	uxtb	r2, r2
 800a172:	40d3      	lsrs	r3, r2
 800a174:	4a15      	ldr	r2, [pc, #84]	; (800a1cc <HAL_RCC_GetSysClockFreq+0xd0>)
 800a176:	5cd3      	ldrb	r3, [r2, r3]
 800a178:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d008      	beq.n	800a196 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a184:	4a0f      	ldr	r2, [pc, #60]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	fbb2 f2f3 	udiv	r2, r2, r3
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	fb02 f303 	mul.w	r3, r2, r3
 800a192:	627b      	str	r3, [r7, #36]	; 0x24
 800a194:	e007      	b.n	800a1a6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a196:	4a0b      	ldr	r2, [pc, #44]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	fb02 f303 	mul.w	r3, r2, r3
 800a1a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	623b      	str	r3, [r7, #32]
      break;
 800a1aa:	e002      	b.n	800a1b2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a1ac:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a1ae:	623b      	str	r3, [r7, #32]
      break;
 800a1b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	372c      	adds	r7, #44	; 0x2c
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	40021000 	.word	0x40021000
 800a1c4:	007a1200 	.word	0x007a1200
 800a1c8:	0800d188 	.word	0x0800d188
 800a1cc:	0800d198 	.word	0x0800d198

0800a1d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1d4:	4b03      	ldr	r3, [pc, #12]	; (800a1e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	200009e0 	.word	0x200009e0

0800a1e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a1ee:	f7ff ffef 	bl	800a1d0 <HAL_RCC_GetHCLKFreq>
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	4b0b      	ldr	r3, [pc, #44]	; (800a224 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1fc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a200:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	fa92 f2a2 	rbit	r2, r2
 800a208:	603a      	str	r2, [r7, #0]
  return result;
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	fab2 f282 	clz	r2, r2
 800a210:	b2d2      	uxtb	r2, r2
 800a212:	40d3      	lsrs	r3, r2
 800a214:	4a04      	ldr	r2, [pc, #16]	; (800a228 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a216:	5cd3      	ldrb	r3, [r2, r3]
 800a218:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	40021000 	.word	0x40021000
 800a228:	0800d180 	.word	0x0800d180

0800a22c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a232:	f7ff ffcd 	bl	800a1d0 <HAL_RCC_GetHCLKFreq>
 800a236:	4601      	mov	r1, r0
 800a238:	4b0b      	ldr	r3, [pc, #44]	; (800a268 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a240:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a244:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	fa92 f2a2 	rbit	r2, r2
 800a24c:	603a      	str	r2, [r7, #0]
  return result;
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	fab2 f282 	clz	r2, r2
 800a254:	b2d2      	uxtb	r2, r2
 800a256:	40d3      	lsrs	r3, r2
 800a258:	4a04      	ldr	r2, [pc, #16]	; (800a26c <HAL_RCC_GetPCLK2Freq+0x40>)
 800a25a:	5cd3      	ldrb	r3, [r2, r3]
 800a25c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	40021000 	.word	0x40021000
 800a26c:	0800d180 	.word	0x0800d180

0800a270 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b092      	sub	sp, #72	; 0x48
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a280:	2300      	movs	r3, #0
 800a282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f000 80d4 	beq.w	800a43c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a294:	4b4e      	ldr	r3, [pc, #312]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10e      	bne.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2a0:	4b4b      	ldr	r3, [pc, #300]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	4a4a      	ldr	r2, [pc, #296]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a2a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2aa:	61d3      	str	r3, [r2, #28]
 800a2ac:	4b48      	ldr	r3, [pc, #288]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a2ae:	69db      	ldr	r3, [r3, #28]
 800a2b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2b4:	60bb      	str	r3, [r7, #8]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2be:	4b45      	ldr	r3, [pc, #276]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d118      	bne.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a2ca:	4b42      	ldr	r3, [pc, #264]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a41      	ldr	r2, [pc, #260]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a2d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a2d6:	f7fd fc11 	bl	8007afc <HAL_GetTick>
 800a2da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2dc:	e008      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2de:	f7fd fc0d 	bl	8007afc <HAL_GetTick>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	2b64      	cmp	r3, #100	; 0x64
 800a2ea:	d901      	bls.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e1d6      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2f0:	4b38      	ldr	r3, [pc, #224]	; (800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d0f0      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a2fc:	4b34      	ldr	r3, [pc, #208]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a304:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 8084 	beq.w	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a318:	429a      	cmp	r2, r3
 800a31a:	d07c      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a31c:	4b2c      	ldr	r3, [pc, #176]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a324:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a32a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	fa93 f3a3 	rbit	r3, r3
 800a332:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a336:	fab3 f383 	clz	r3, r3
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	461a      	mov	r2, r3
 800a33e:	4b26      	ldr	r3, [pc, #152]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a340:	4413      	add	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	461a      	mov	r2, r3
 800a346:	2301      	movs	r3, #1
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a34e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a352:	fa93 f3a3 	rbit	r3, r3
 800a356:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a35a:	fab3 f383 	clz	r3, r3
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	461a      	mov	r2, r3
 800a362:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a364:	4413      	add	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	461a      	mov	r2, r3
 800a36a:	2300      	movs	r3, #0
 800a36c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a36e:	4a18      	ldr	r2, [pc, #96]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a372:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d04b      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a37e:	f7fd fbbd 	bl	8007afc <HAL_GetTick>
 800a382:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a384:	e00a      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a386:	f7fd fbb9 	bl	8007afc <HAL_GetTick>
 800a38a:	4602      	mov	r2, r0
 800a38c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	f241 3288 	movw	r2, #5000	; 0x1388
 800a394:	4293      	cmp	r3, r2
 800a396:	d901      	bls.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e180      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a39c:	2302      	movs	r3, #2
 800a39e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	fa93 f3a3 	rbit	r3, r3
 800a3a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	623b      	str	r3, [r7, #32]
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	fa93 f3a3 	rbit	r3, r3
 800a3b2:	61fb      	str	r3, [r7, #28]
  return result;
 800a3b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3b6:	fab3 f383 	clz	r3, r3
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	095b      	lsrs	r3, r3, #5
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	f043 0302 	orr.w	r3, r3, #2
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d108      	bne.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a3ca:	4b01      	ldr	r3, [pc, #4]	; (800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	e00d      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a3d0:	40021000 	.word	0x40021000
 800a3d4:	40007000 	.word	0x40007000
 800a3d8:	10908100 	.word	0x10908100
 800a3dc:	2302      	movs	r3, #2
 800a3de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	fa93 f3a3 	rbit	r3, r3
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	4b9a      	ldr	r3, [pc, #616]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	613a      	str	r2, [r7, #16]
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	fa92 f2a2 	rbit	r2, r2
 800a3f6:	60fa      	str	r2, [r7, #12]
  return result;
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	fab2 f282 	clz	r2, r2
 800a3fe:	b2d2      	uxtb	r2, r2
 800a400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a404:	b2d2      	uxtb	r2, r2
 800a406:	f002 021f 	and.w	r2, r2, #31
 800a40a:	2101      	movs	r1, #1
 800a40c:	fa01 f202 	lsl.w	r2, r1, r2
 800a410:	4013      	ands	r3, r2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0b7      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a416:	4b8f      	ldr	r3, [pc, #572]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	498c      	ldr	r1, [pc, #560]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a424:	4313      	orrs	r3, r2
 800a426:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a428:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d105      	bne.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a430:	4b88      	ldr	r3, [pc, #544]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	4a87      	ldr	r2, [pc, #540]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a43a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0301 	and.w	r3, r3, #1
 800a444:	2b00      	cmp	r3, #0
 800a446:	d008      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a448:	4b82      	ldr	r3, [pc, #520]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	f023 0203 	bic.w	r2, r3, #3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	497f      	ldr	r1, [pc, #508]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a456:	4313      	orrs	r3, r2
 800a458:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 0302 	and.w	r3, r3, #2
 800a462:	2b00      	cmp	r3, #0
 800a464:	d008      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a466:	4b7b      	ldr	r3, [pc, #492]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	4978      	ldr	r1, [pc, #480]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a474:	4313      	orrs	r3, r2
 800a476:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b00      	cmp	r3, #0
 800a482:	d008      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a484:	4b73      	ldr	r3, [pc, #460]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a488:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	4970      	ldr	r1, [pc, #448]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a492:	4313      	orrs	r3, r2
 800a494:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 0320 	and.w	r3, r3, #32
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d008      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a4a2:	4b6c      	ldr	r3, [pc, #432]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a6:	f023 0210 	bic.w	r2, r3, #16
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	4969      	ldr	r1, [pc, #420]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d008      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a4c0:	4b64      	ldr	r3, [pc, #400]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4cc:	4961      	ldr	r1, [pc, #388]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d008      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a4de:	4b5d      	ldr	r3, [pc, #372]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e2:	f023 0220 	bic.w	r2, r3, #32
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	495a      	ldr	r1, [pc, #360]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d008      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a4fc:	4b55      	ldr	r3, [pc, #340]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a500:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a508:	4952      	ldr	r1, [pc, #328]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a50a:	4313      	orrs	r3, r2
 800a50c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0308 	and.w	r3, r3, #8
 800a516:	2b00      	cmp	r3, #0
 800a518:	d008      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a51a:	4b4e      	ldr	r3, [pc, #312]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	494b      	ldr	r1, [pc, #300]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a528:	4313      	orrs	r3, r2
 800a52a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0310 	and.w	r3, r3, #16
 800a534:	2b00      	cmp	r3, #0
 800a536:	d008      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a538:	4b46      	ldr	r3, [pc, #280]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	4943      	ldr	r1, [pc, #268]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a546:	4313      	orrs	r3, r2
 800a548:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a552:	2b00      	cmp	r3, #0
 800a554:	d008      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a556:	4b3f      	ldr	r3, [pc, #252]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a562:	493c      	ldr	r1, [pc, #240]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a564:	4313      	orrs	r3, r2
 800a566:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a570:	2b00      	cmp	r3, #0
 800a572:	d008      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a574:	4b37      	ldr	r3, [pc, #220]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a578:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a580:	4934      	ldr	r1, [pc, #208]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a582:	4313      	orrs	r3, r2
 800a584:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d008      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a592:	4b30      	ldr	r3, [pc, #192]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a596:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59e:	492d      	ldr	r1, [pc, #180]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d008      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a5b0:	4b28      	ldr	r3, [pc, #160]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5bc:	4925      	ldr	r1, [pc, #148]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d008      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a5ce:	4b21      	ldr	r3, [pc, #132]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5da:	491e      	ldr	r1, [pc, #120]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d008      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800a5ec:	4b19      	ldr	r3, [pc, #100]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	4916      	ldr	r1, [pc, #88]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d008      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800a60a:	4b12      	ldr	r3, [pc, #72]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a616:	490f      	ldr	r1, [pc, #60]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a618:	4313      	orrs	r3, r2
 800a61a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a624:	2b00      	cmp	r3, #0
 800a626:	d008      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a628:	4b0a      	ldr	r3, [pc, #40]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a634:	4907      	ldr	r1, [pc, #28]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a636:	4313      	orrs	r3, r2
 800a638:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00c      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800a646:	4b03      	ldr	r3, [pc, #12]	; (800a654 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800a648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	e002      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800a652:	bf00      	nop
 800a654:	40021000 	.word	0x40021000
 800a658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a65a:	4913      	ldr	r1, [pc, #76]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a65c:	4313      	orrs	r3, r2
 800a65e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d008      	beq.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800a66c:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a670:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a678:	490b      	ldr	r1, [pc, #44]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a67a:	4313      	orrs	r3, r2
 800a67c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d008      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800a68a:	4b07      	ldr	r3, [pc, #28]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a68e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a696:	4904      	ldr	r1, [pc, #16]	; (800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a698:	4313      	orrs	r3, r2
 800a69a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3748      	adds	r7, #72	; 0x48
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	40021000 	.word	0x40021000

0800a6ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e049      	b.n	800a752 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d106      	bne.n	800a6d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7fd f8f6 	bl	80078c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	f000 f9ee 	bl	800aacc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
	...

0800a75c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d001      	beq.n	800a774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e04f      	b.n	800a814 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2202      	movs	r2, #2
 800a778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	68da      	ldr	r2, [r3, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f042 0201 	orr.w	r2, r2, #1
 800a78a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a23      	ldr	r2, [pc, #140]	; (800a820 <HAL_TIM_Base_Start_IT+0xc4>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d01d      	beq.n	800a7d2 <HAL_TIM_Base_Start_IT+0x76>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a79e:	d018      	beq.n	800a7d2 <HAL_TIM_Base_Start_IT+0x76>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a1f      	ldr	r2, [pc, #124]	; (800a824 <HAL_TIM_Base_Start_IT+0xc8>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d013      	beq.n	800a7d2 <HAL_TIM_Base_Start_IT+0x76>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a1e      	ldr	r2, [pc, #120]	; (800a828 <HAL_TIM_Base_Start_IT+0xcc>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d00e      	beq.n	800a7d2 <HAL_TIM_Base_Start_IT+0x76>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a1c      	ldr	r2, [pc, #112]	; (800a82c <HAL_TIM_Base_Start_IT+0xd0>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d009      	beq.n	800a7d2 <HAL_TIM_Base_Start_IT+0x76>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a1b      	ldr	r2, [pc, #108]	; (800a830 <HAL_TIM_Base_Start_IT+0xd4>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d004      	beq.n	800a7d2 <HAL_TIM_Base_Start_IT+0x76>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a19      	ldr	r2, [pc, #100]	; (800a834 <HAL_TIM_Base_Start_IT+0xd8>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d115      	bne.n	800a7fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	4b17      	ldr	r3, [pc, #92]	; (800a838 <HAL_TIM_Base_Start_IT+0xdc>)
 800a7da:	4013      	ands	r3, r2
 800a7dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2b06      	cmp	r3, #6
 800a7e2:	d015      	beq.n	800a810 <HAL_TIM_Base_Start_IT+0xb4>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ea:	d011      	beq.n	800a810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f042 0201 	orr.w	r2, r2, #1
 800a7fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7fc:	e008      	b.n	800a810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f042 0201 	orr.w	r2, r2, #1
 800a80c:	601a      	str	r2, [r3, #0]
 800a80e:	e000      	b.n	800a812 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a810:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	40012c00 	.word	0x40012c00
 800a824:	40000400 	.word	0x40000400
 800a828:	40000800 	.word	0x40000800
 800a82c:	40013400 	.word	0x40013400
 800a830:	40014000 	.word	0x40014000
 800a834:	40015000 	.word	0x40015000
 800a838:	00010007 	.word	0x00010007

0800a83c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d122      	bne.n	800a898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d11b      	bne.n	800a898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f06f 0202 	mvn.w	r2, #2
 800a868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f905 	bl	800aa8e <HAL_TIM_IC_CaptureCallback>
 800a884:	e005      	b.n	800a892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f8f7 	bl	800aa7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f908 	bl	800aaa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	f003 0304 	and.w	r3, r3, #4
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d122      	bne.n	800a8ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f003 0304 	and.w	r3, r3, #4
 800a8b0:	2b04      	cmp	r3, #4
 800a8b2:	d11b      	bne.n	800a8ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f06f 0204 	mvn.w	r2, #4
 800a8bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2202      	movs	r2, #2
 800a8c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f8db 	bl	800aa8e <HAL_TIM_IC_CaptureCallback>
 800a8d8:	e005      	b.n	800a8e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f8cd 	bl	800aa7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 f8de 	bl	800aaa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f003 0308 	and.w	r3, r3, #8
 800a8f6:	2b08      	cmp	r3, #8
 800a8f8:	d122      	bne.n	800a940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f003 0308 	and.w	r3, r3, #8
 800a904:	2b08      	cmp	r3, #8
 800a906:	d11b      	bne.n	800a940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f06f 0208 	mvn.w	r2, #8
 800a910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2204      	movs	r2, #4
 800a916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	f003 0303 	and.w	r3, r3, #3
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f8b1 	bl	800aa8e <HAL_TIM_IC_CaptureCallback>
 800a92c:	e005      	b.n	800a93a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f8a3 	bl	800aa7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f8b4 	bl	800aaa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	f003 0310 	and.w	r3, r3, #16
 800a94a:	2b10      	cmp	r3, #16
 800a94c:	d122      	bne.n	800a994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	f003 0310 	and.w	r3, r3, #16
 800a958:	2b10      	cmp	r3, #16
 800a95a:	d11b      	bne.n	800a994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f06f 0210 	mvn.w	r2, #16
 800a964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2208      	movs	r2, #8
 800a96a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f887 	bl	800aa8e <HAL_TIM_IC_CaptureCallback>
 800a980:	e005      	b.n	800a98e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f879 	bl	800aa7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f88a 	bl	800aaa2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d10e      	bne.n	800a9c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d107      	bne.n	800a9c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f06f 0201 	mvn.w	r2, #1
 800a9b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7fc fe24 	bl	8007608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ca:	2b80      	cmp	r3, #128	; 0x80
 800a9cc:	d10e      	bne.n	800a9ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d8:	2b80      	cmp	r3, #128	; 0x80
 800a9da:	d107      	bne.n	800a9ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f9a4 	bl	800ad34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9fa:	d10e      	bne.n	800aa1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa06:	2b80      	cmp	r3, #128	; 0x80
 800aa08:	d107      	bne.n	800aa1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f997 	bl	800ad48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa24:	2b40      	cmp	r3, #64	; 0x40
 800aa26:	d10e      	bne.n	800aa46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa32:	2b40      	cmp	r3, #64	; 0x40
 800aa34:	d107      	bne.n	800aa46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f838 	bl	800aab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	f003 0320 	and.w	r3, r3, #32
 800aa50:	2b20      	cmp	r3, #32
 800aa52:	d10e      	bne.n	800aa72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	f003 0320 	and.w	r3, r3, #32
 800aa5e:	2b20      	cmp	r3, #32
 800aa60:	d107      	bne.n	800aa72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f06f 0220 	mvn.w	r2, #32
 800aa6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f957 	bl	800ad20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa72:	bf00      	nop
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b083      	sub	sp, #12
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa82:	bf00      	nop
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aaa2:	b480      	push	{r7}
 800aaa4:	b083      	sub	sp, #12
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaaa:	bf00      	nop
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aabe:	bf00      	nop
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
	...

0800aacc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a42      	ldr	r2, [pc, #264]	; (800abe8 <TIM_Base_SetConfig+0x11c>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d013      	beq.n	800ab0c <TIM_Base_SetConfig+0x40>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaea:	d00f      	beq.n	800ab0c <TIM_Base_SetConfig+0x40>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a3f      	ldr	r2, [pc, #252]	; (800abec <TIM_Base_SetConfig+0x120>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d00b      	beq.n	800ab0c <TIM_Base_SetConfig+0x40>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a3e      	ldr	r2, [pc, #248]	; (800abf0 <TIM_Base_SetConfig+0x124>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d007      	beq.n	800ab0c <TIM_Base_SetConfig+0x40>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a3d      	ldr	r2, [pc, #244]	; (800abf4 <TIM_Base_SetConfig+0x128>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d003      	beq.n	800ab0c <TIM_Base_SetConfig+0x40>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a3c      	ldr	r2, [pc, #240]	; (800abf8 <TIM_Base_SetConfig+0x12c>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d108      	bne.n	800ab1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a31      	ldr	r2, [pc, #196]	; (800abe8 <TIM_Base_SetConfig+0x11c>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d01f      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab2c:	d01b      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a2e      	ldr	r2, [pc, #184]	; (800abec <TIM_Base_SetConfig+0x120>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d017      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4a2d      	ldr	r2, [pc, #180]	; (800abf0 <TIM_Base_SetConfig+0x124>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d013      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	4a2c      	ldr	r2, [pc, #176]	; (800abf4 <TIM_Base_SetConfig+0x128>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d00f      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a2c      	ldr	r2, [pc, #176]	; (800abfc <TIM_Base_SetConfig+0x130>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d00b      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a2b      	ldr	r2, [pc, #172]	; (800ac00 <TIM_Base_SetConfig+0x134>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d007      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a2a      	ldr	r2, [pc, #168]	; (800ac04 <TIM_Base_SetConfig+0x138>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d003      	beq.n	800ab66 <TIM_Base_SetConfig+0x9a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a25      	ldr	r2, [pc, #148]	; (800abf8 <TIM_Base_SetConfig+0x12c>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d108      	bne.n	800ab78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	4313      	orrs	r3, r2
 800ab76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	689a      	ldr	r2, [r3, #8]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a12      	ldr	r2, [pc, #72]	; (800abe8 <TIM_Base_SetConfig+0x11c>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d013      	beq.n	800abcc <TIM_Base_SetConfig+0x100>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a13      	ldr	r2, [pc, #76]	; (800abf4 <TIM_Base_SetConfig+0x128>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d00f      	beq.n	800abcc <TIM_Base_SetConfig+0x100>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a13      	ldr	r2, [pc, #76]	; (800abfc <TIM_Base_SetConfig+0x130>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d00b      	beq.n	800abcc <TIM_Base_SetConfig+0x100>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a12      	ldr	r2, [pc, #72]	; (800ac00 <TIM_Base_SetConfig+0x134>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d007      	beq.n	800abcc <TIM_Base_SetConfig+0x100>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a11      	ldr	r2, [pc, #68]	; (800ac04 <TIM_Base_SetConfig+0x138>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d003      	beq.n	800abcc <TIM_Base_SetConfig+0x100>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a0c      	ldr	r2, [pc, #48]	; (800abf8 <TIM_Base_SetConfig+0x12c>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d103      	bne.n	800abd4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	691a      	ldr	r2, [r3, #16]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	615a      	str	r2, [r3, #20]
}
 800abda:	bf00      	nop
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	40012c00 	.word	0x40012c00
 800abec:	40000400 	.word	0x40000400
 800abf0:	40000800 	.word	0x40000800
 800abf4:	40013400 	.word	0x40013400
 800abf8:	40015000 	.word	0x40015000
 800abfc:	40014000 	.word	0x40014000
 800ac00:	40014400 	.word	0x40014400
 800ac04:	40014800 	.word	0x40014800

0800ac08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d101      	bne.n	800ac20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	e06d      	b.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a30      	ldr	r2, [pc, #192]	; (800ad08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d009      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a2f      	ldr	r2, [pc, #188]	; (800ad0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d004      	beq.n	800ac5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a2d      	ldr	r2, [pc, #180]	; (800ad10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d108      	bne.n	800ac70 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ac64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a1e      	ldr	r2, [pc, #120]	; (800ad08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d01d      	beq.n	800acd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9c:	d018      	beq.n	800acd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a1c      	ldr	r2, [pc, #112]	; (800ad14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d013      	beq.n	800acd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a1a      	ldr	r2, [pc, #104]	; (800ad18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d00e      	beq.n	800acd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a15      	ldr	r2, [pc, #84]	; (800ad0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d009      	beq.n	800acd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a16      	ldr	r2, [pc, #88]	; (800ad1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d004      	beq.n	800acd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a11      	ldr	r2, [pc, #68]	; (800ad10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d10c      	bne.n	800acea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	40012c00 	.word	0x40012c00
 800ad0c:	40013400 	.word	0x40013400
 800ad10:	40015000 	.word	0x40015000
 800ad14:	40000400 	.word	0x40000400
 800ad18:	40000800 	.word	0x40000800
 800ad1c:	40014000 	.word	0x40014000

0800ad20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e040      	b.n	800adf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7fc fdf6 	bl	8007970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2224      	movs	r2, #36	; 0x24
 800ad88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f022 0201 	bic.w	r2, r2, #1
 800ad98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f8c0 	bl	800af20 <UART_SetConfig>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d101      	bne.n	800adaa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e022      	b.n	800adf0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d002      	beq.n	800adb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fa8a 	bl	800b2cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	685a      	ldr	r2, [r3, #4]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	689a      	ldr	r2, [r3, #8]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800add6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f042 0201 	orr.w	r2, r2, #1
 800ade6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fb11 	bl	800b410 <UART_CheckIdleState>
 800adee:	4603      	mov	r3, r0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08a      	sub	sp, #40	; 0x28
 800adfc:	af02      	add	r7, sp, #8
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	603b      	str	r3, [r7, #0]
 800ae04:	4613      	mov	r3, r2
 800ae06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae0c:	2b20      	cmp	r3, #32
 800ae0e:	f040 8082 	bne.w	800af16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <HAL_UART_Transmit+0x26>
 800ae18:	88fb      	ldrh	r3, [r7, #6]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e07a      	b.n	800af18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d101      	bne.n	800ae30 <HAL_UART_Transmit+0x38>
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e073      	b.n	800af18 <HAL_UART_Transmit+0x120>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2221      	movs	r2, #33	; 0x21
 800ae44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae46:	f7fc fe59 	bl	8007afc <HAL_GetTick>
 800ae4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	88fa      	ldrh	r2, [r7, #6]
 800ae50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	88fa      	ldrh	r2, [r7, #6]
 800ae58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae64:	d108      	bne.n	800ae78 <HAL_UART_Transmit+0x80>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d104      	bne.n	800ae78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	61bb      	str	r3, [r7, #24]
 800ae76:	e003      	b.n	800ae80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800ae88:	e02d      	b.n	800aee6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2200      	movs	r2, #0
 800ae92:	2180      	movs	r1, #128	; 0x80
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 fb04 	bl	800b4a2 <UART_WaitOnFlagUntilTimeout>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e039      	b.n	800af18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10b      	bne.n	800aec2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	881a      	ldrh	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aeb6:	b292      	uxth	r2, r2
 800aeb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	3302      	adds	r3, #2
 800aebe:	61bb      	str	r3, [r7, #24]
 800aec0:	e008      	b.n	800aed4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	781a      	ldrb	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	b292      	uxth	r2, r2
 800aecc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	3301      	adds	r3, #1
 800aed2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	3b01      	subs	r3, #1
 800aede:	b29a      	uxth	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1cb      	bne.n	800ae8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2200      	movs	r2, #0
 800aefa:	2140      	movs	r1, #64	; 0x40
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 fad0 	bl	800b4a2 <UART_WaitOnFlagUntilTimeout>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e005      	b.n	800af18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2220      	movs	r2, #32
 800af10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	e000      	b.n	800af18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800af16:	2302      	movs	r3, #2
  }
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3720      	adds	r7, #32
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b088      	sub	sp, #32
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689a      	ldr	r2, [r3, #8]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	431a      	orrs	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	431a      	orrs	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	69db      	ldr	r3, [r3, #28]
 800af40:	4313      	orrs	r3, r2
 800af42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	4b92      	ldr	r3, [pc, #584]	; (800b194 <UART_SetConfig+0x274>)
 800af4c:	4013      	ands	r3, r2
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	6812      	ldr	r2, [r2, #0]
 800af52:	6979      	ldr	r1, [r7, #20]
 800af54:	430b      	orrs	r3, r1
 800af56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a1b      	ldr	r3, [r3, #32]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	430a      	orrs	r2, r1
 800af90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a80      	ldr	r2, [pc, #512]	; (800b198 <UART_SetConfig+0x278>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d120      	bne.n	800afde <UART_SetConfig+0xbe>
 800af9c:	4b7f      	ldr	r3, [pc, #508]	; (800b19c <UART_SetConfig+0x27c>)
 800af9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa0:	f003 0303 	and.w	r3, r3, #3
 800afa4:	2b03      	cmp	r3, #3
 800afa6:	d817      	bhi.n	800afd8 <UART_SetConfig+0xb8>
 800afa8:	a201      	add	r2, pc, #4	; (adr r2, 800afb0 <UART_SetConfig+0x90>)
 800afaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afae:	bf00      	nop
 800afb0:	0800afc1 	.word	0x0800afc1
 800afb4:	0800afcd 	.word	0x0800afcd
 800afb8:	0800afd3 	.word	0x0800afd3
 800afbc:	0800afc7 	.word	0x0800afc7
 800afc0:	2301      	movs	r3, #1
 800afc2:	77fb      	strb	r3, [r7, #31]
 800afc4:	e0b5      	b.n	800b132 <UART_SetConfig+0x212>
 800afc6:	2302      	movs	r3, #2
 800afc8:	77fb      	strb	r3, [r7, #31]
 800afca:	e0b2      	b.n	800b132 <UART_SetConfig+0x212>
 800afcc:	2304      	movs	r3, #4
 800afce:	77fb      	strb	r3, [r7, #31]
 800afd0:	e0af      	b.n	800b132 <UART_SetConfig+0x212>
 800afd2:	2308      	movs	r3, #8
 800afd4:	77fb      	strb	r3, [r7, #31]
 800afd6:	e0ac      	b.n	800b132 <UART_SetConfig+0x212>
 800afd8:	2310      	movs	r3, #16
 800afda:	77fb      	strb	r3, [r7, #31]
 800afdc:	e0a9      	b.n	800b132 <UART_SetConfig+0x212>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a6f      	ldr	r2, [pc, #444]	; (800b1a0 <UART_SetConfig+0x280>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d124      	bne.n	800b032 <UART_SetConfig+0x112>
 800afe8:	4b6c      	ldr	r3, [pc, #432]	; (800b19c <UART_SetConfig+0x27c>)
 800afea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aff0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aff4:	d011      	beq.n	800b01a <UART_SetConfig+0xfa>
 800aff6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800affa:	d817      	bhi.n	800b02c <UART_SetConfig+0x10c>
 800affc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b000:	d011      	beq.n	800b026 <UART_SetConfig+0x106>
 800b002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b006:	d811      	bhi.n	800b02c <UART_SetConfig+0x10c>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d003      	beq.n	800b014 <UART_SetConfig+0xf4>
 800b00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b010:	d006      	beq.n	800b020 <UART_SetConfig+0x100>
 800b012:	e00b      	b.n	800b02c <UART_SetConfig+0x10c>
 800b014:	2300      	movs	r3, #0
 800b016:	77fb      	strb	r3, [r7, #31]
 800b018:	e08b      	b.n	800b132 <UART_SetConfig+0x212>
 800b01a:	2302      	movs	r3, #2
 800b01c:	77fb      	strb	r3, [r7, #31]
 800b01e:	e088      	b.n	800b132 <UART_SetConfig+0x212>
 800b020:	2304      	movs	r3, #4
 800b022:	77fb      	strb	r3, [r7, #31]
 800b024:	e085      	b.n	800b132 <UART_SetConfig+0x212>
 800b026:	2308      	movs	r3, #8
 800b028:	77fb      	strb	r3, [r7, #31]
 800b02a:	e082      	b.n	800b132 <UART_SetConfig+0x212>
 800b02c:	2310      	movs	r3, #16
 800b02e:	77fb      	strb	r3, [r7, #31]
 800b030:	e07f      	b.n	800b132 <UART_SetConfig+0x212>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a5b      	ldr	r2, [pc, #364]	; (800b1a4 <UART_SetConfig+0x284>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d124      	bne.n	800b086 <UART_SetConfig+0x166>
 800b03c:	4b57      	ldr	r3, [pc, #348]	; (800b19c <UART_SetConfig+0x27c>)
 800b03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b040:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800b044:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b048:	d011      	beq.n	800b06e <UART_SetConfig+0x14e>
 800b04a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b04e:	d817      	bhi.n	800b080 <UART_SetConfig+0x160>
 800b050:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b054:	d011      	beq.n	800b07a <UART_SetConfig+0x15a>
 800b056:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b05a:	d811      	bhi.n	800b080 <UART_SetConfig+0x160>
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <UART_SetConfig+0x148>
 800b060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b064:	d006      	beq.n	800b074 <UART_SetConfig+0x154>
 800b066:	e00b      	b.n	800b080 <UART_SetConfig+0x160>
 800b068:	2300      	movs	r3, #0
 800b06a:	77fb      	strb	r3, [r7, #31]
 800b06c:	e061      	b.n	800b132 <UART_SetConfig+0x212>
 800b06e:	2302      	movs	r3, #2
 800b070:	77fb      	strb	r3, [r7, #31]
 800b072:	e05e      	b.n	800b132 <UART_SetConfig+0x212>
 800b074:	2304      	movs	r3, #4
 800b076:	77fb      	strb	r3, [r7, #31]
 800b078:	e05b      	b.n	800b132 <UART_SetConfig+0x212>
 800b07a:	2308      	movs	r3, #8
 800b07c:	77fb      	strb	r3, [r7, #31]
 800b07e:	e058      	b.n	800b132 <UART_SetConfig+0x212>
 800b080:	2310      	movs	r3, #16
 800b082:	77fb      	strb	r3, [r7, #31]
 800b084:	e055      	b.n	800b132 <UART_SetConfig+0x212>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a47      	ldr	r2, [pc, #284]	; (800b1a8 <UART_SetConfig+0x288>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d124      	bne.n	800b0da <UART_SetConfig+0x1ba>
 800b090:	4b42      	ldr	r3, [pc, #264]	; (800b19c <UART_SetConfig+0x27c>)
 800b092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b094:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b09c:	d011      	beq.n	800b0c2 <UART_SetConfig+0x1a2>
 800b09e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0a2:	d817      	bhi.n	800b0d4 <UART_SetConfig+0x1b4>
 800b0a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0a8:	d011      	beq.n	800b0ce <UART_SetConfig+0x1ae>
 800b0aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0ae:	d811      	bhi.n	800b0d4 <UART_SetConfig+0x1b4>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <UART_SetConfig+0x19c>
 800b0b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0b8:	d006      	beq.n	800b0c8 <UART_SetConfig+0x1a8>
 800b0ba:	e00b      	b.n	800b0d4 <UART_SetConfig+0x1b4>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	77fb      	strb	r3, [r7, #31]
 800b0c0:	e037      	b.n	800b132 <UART_SetConfig+0x212>
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	77fb      	strb	r3, [r7, #31]
 800b0c6:	e034      	b.n	800b132 <UART_SetConfig+0x212>
 800b0c8:	2304      	movs	r3, #4
 800b0ca:	77fb      	strb	r3, [r7, #31]
 800b0cc:	e031      	b.n	800b132 <UART_SetConfig+0x212>
 800b0ce:	2308      	movs	r3, #8
 800b0d0:	77fb      	strb	r3, [r7, #31]
 800b0d2:	e02e      	b.n	800b132 <UART_SetConfig+0x212>
 800b0d4:	2310      	movs	r3, #16
 800b0d6:	77fb      	strb	r3, [r7, #31]
 800b0d8:	e02b      	b.n	800b132 <UART_SetConfig+0x212>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a33      	ldr	r2, [pc, #204]	; (800b1ac <UART_SetConfig+0x28c>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d124      	bne.n	800b12e <UART_SetConfig+0x20e>
 800b0e4:	4b2d      	ldr	r3, [pc, #180]	; (800b19c <UART_SetConfig+0x27c>)
 800b0e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b0ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0f0:	d011      	beq.n	800b116 <UART_SetConfig+0x1f6>
 800b0f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b0f6:	d817      	bhi.n	800b128 <UART_SetConfig+0x208>
 800b0f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0fc:	d011      	beq.n	800b122 <UART_SetConfig+0x202>
 800b0fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b102:	d811      	bhi.n	800b128 <UART_SetConfig+0x208>
 800b104:	2b00      	cmp	r3, #0
 800b106:	d003      	beq.n	800b110 <UART_SetConfig+0x1f0>
 800b108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b10c:	d006      	beq.n	800b11c <UART_SetConfig+0x1fc>
 800b10e:	e00b      	b.n	800b128 <UART_SetConfig+0x208>
 800b110:	2300      	movs	r3, #0
 800b112:	77fb      	strb	r3, [r7, #31]
 800b114:	e00d      	b.n	800b132 <UART_SetConfig+0x212>
 800b116:	2302      	movs	r3, #2
 800b118:	77fb      	strb	r3, [r7, #31]
 800b11a:	e00a      	b.n	800b132 <UART_SetConfig+0x212>
 800b11c:	2304      	movs	r3, #4
 800b11e:	77fb      	strb	r3, [r7, #31]
 800b120:	e007      	b.n	800b132 <UART_SetConfig+0x212>
 800b122:	2308      	movs	r3, #8
 800b124:	77fb      	strb	r3, [r7, #31]
 800b126:	e004      	b.n	800b132 <UART_SetConfig+0x212>
 800b128:	2310      	movs	r3, #16
 800b12a:	77fb      	strb	r3, [r7, #31]
 800b12c:	e001      	b.n	800b132 <UART_SetConfig+0x212>
 800b12e:	2310      	movs	r3, #16
 800b130:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	69db      	ldr	r3, [r3, #28]
 800b136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b13a:	d16c      	bne.n	800b216 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800b13c:	7ffb      	ldrb	r3, [r7, #31]
 800b13e:	2b08      	cmp	r3, #8
 800b140:	d838      	bhi.n	800b1b4 <UART_SetConfig+0x294>
 800b142:	a201      	add	r2, pc, #4	; (adr r2, 800b148 <UART_SetConfig+0x228>)
 800b144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b148:	0800b16d 	.word	0x0800b16d
 800b14c:	0800b175 	.word	0x0800b175
 800b150:	0800b17d 	.word	0x0800b17d
 800b154:	0800b1b5 	.word	0x0800b1b5
 800b158:	0800b183 	.word	0x0800b183
 800b15c:	0800b1b5 	.word	0x0800b1b5
 800b160:	0800b1b5 	.word	0x0800b1b5
 800b164:	0800b1b5 	.word	0x0800b1b5
 800b168:	0800b18b 	.word	0x0800b18b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b16c:	f7ff f83c 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
 800b170:	61b8      	str	r0, [r7, #24]
        break;
 800b172:	e024      	b.n	800b1be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b174:	f7ff f85a 	bl	800a22c <HAL_RCC_GetPCLK2Freq>
 800b178:	61b8      	str	r0, [r7, #24]
        break;
 800b17a:	e020      	b.n	800b1be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b17c:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <UART_SetConfig+0x290>)
 800b17e:	61bb      	str	r3, [r7, #24]
        break;
 800b180:	e01d      	b.n	800b1be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b182:	f7fe ffbb 	bl	800a0fc <HAL_RCC_GetSysClockFreq>
 800b186:	61b8      	str	r0, [r7, #24]
        break;
 800b188:	e019      	b.n	800b1be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b18a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b18e:	61bb      	str	r3, [r7, #24]
        break;
 800b190:	e015      	b.n	800b1be <UART_SetConfig+0x29e>
 800b192:	bf00      	nop
 800b194:	efff69f3 	.word	0xefff69f3
 800b198:	40013800 	.word	0x40013800
 800b19c:	40021000 	.word	0x40021000
 800b1a0:	40004400 	.word	0x40004400
 800b1a4:	40004800 	.word	0x40004800
 800b1a8:	40004c00 	.word	0x40004c00
 800b1ac:	40005000 	.word	0x40005000
 800b1b0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	77bb      	strb	r3, [r7, #30]
        break;
 800b1bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d075      	beq.n	800b2b0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	005a      	lsls	r2, r3, #1
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	085b      	lsrs	r3, r3, #1
 800b1ce:	441a      	add	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	2b0f      	cmp	r3, #15
 800b1e0:	d916      	bls.n	800b210 <UART_SetConfig+0x2f0>
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1e8:	d212      	bcs.n	800b210 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	f023 030f 	bic.w	r3, r3, #15
 800b1f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	085b      	lsrs	r3, r3, #1
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	f003 0307 	and.w	r3, r3, #7
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	89fb      	ldrh	r3, [r7, #14]
 800b202:	4313      	orrs	r3, r2
 800b204:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	89fa      	ldrh	r2, [r7, #14]
 800b20c:	60da      	str	r2, [r3, #12]
 800b20e:	e04f      	b.n	800b2b0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	77bb      	strb	r3, [r7, #30]
 800b214:	e04c      	b.n	800b2b0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b216:	7ffb      	ldrb	r3, [r7, #31]
 800b218:	2b08      	cmp	r3, #8
 800b21a:	d828      	bhi.n	800b26e <UART_SetConfig+0x34e>
 800b21c:	a201      	add	r2, pc, #4	; (adr r2, 800b224 <UART_SetConfig+0x304>)
 800b21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b222:	bf00      	nop
 800b224:	0800b249 	.word	0x0800b249
 800b228:	0800b251 	.word	0x0800b251
 800b22c:	0800b259 	.word	0x0800b259
 800b230:	0800b26f 	.word	0x0800b26f
 800b234:	0800b25f 	.word	0x0800b25f
 800b238:	0800b26f 	.word	0x0800b26f
 800b23c:	0800b26f 	.word	0x0800b26f
 800b240:	0800b26f 	.word	0x0800b26f
 800b244:	0800b267 	.word	0x0800b267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b248:	f7fe ffce 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
 800b24c:	61b8      	str	r0, [r7, #24]
        break;
 800b24e:	e013      	b.n	800b278 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b250:	f7fe ffec 	bl	800a22c <HAL_RCC_GetPCLK2Freq>
 800b254:	61b8      	str	r0, [r7, #24]
        break;
 800b256:	e00f      	b.n	800b278 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b258:	4b1b      	ldr	r3, [pc, #108]	; (800b2c8 <UART_SetConfig+0x3a8>)
 800b25a:	61bb      	str	r3, [r7, #24]
        break;
 800b25c:	e00c      	b.n	800b278 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b25e:	f7fe ff4d 	bl	800a0fc <HAL_RCC_GetSysClockFreq>
 800b262:	61b8      	str	r0, [r7, #24]
        break;
 800b264:	e008      	b.n	800b278 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b26a:	61bb      	str	r3, [r7, #24]
        break;
 800b26c:	e004      	b.n	800b278 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800b26e:	2300      	movs	r3, #0
 800b270:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	77bb      	strb	r3, [r7, #30]
        break;
 800b276:	bf00      	nop
    }

    if (pclk != 0U)
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d018      	beq.n	800b2b0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	085a      	lsrs	r2, r3, #1
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	441a      	add	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b290:	b29b      	uxth	r3, r3
 800b292:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	2b0f      	cmp	r3, #15
 800b298:	d908      	bls.n	800b2ac <UART_SetConfig+0x38c>
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a0:	d204      	bcs.n	800b2ac <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	60da      	str	r2, [r3, #12]
 800b2aa:	e001      	b.n	800b2b0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b2bc:	7fbb      	ldrb	r3, [r7, #30]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3720      	adds	r7, #32
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	007a1200 	.word	0x007a1200

0800b2cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00a      	beq.n	800b2f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	430a      	orrs	r2, r1
 800b2f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fa:	f003 0302 	and.w	r3, r3, #2
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00a      	beq.n	800b318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	430a      	orrs	r2, r1
 800b316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31c:	f003 0304 	and.w	r3, r3, #4
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00a      	beq.n	800b33a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	430a      	orrs	r2, r1
 800b338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33e:	f003 0308 	and.w	r3, r3, #8
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00a      	beq.n	800b35c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	430a      	orrs	r2, r1
 800b35a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	f003 0310 	and.w	r3, r3, #16
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00a      	beq.n	800b37e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	430a      	orrs	r2, r1
 800b37c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	f003 0320 	and.w	r3, r3, #32
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00a      	beq.n	800b3a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	430a      	orrs	r2, r1
 800b39e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d01a      	beq.n	800b3e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	430a      	orrs	r2, r1
 800b3c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3ca:	d10a      	bne.n	800b3e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00a      	beq.n	800b404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	430a      	orrs	r2, r1
 800b402:	605a      	str	r2, [r3, #4]
  }
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af02      	add	r7, sp, #8
 800b416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b420:	f7fc fb6c 	bl	8007afc <HAL_GetTick>
 800b424:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 0308 	and.w	r3, r3, #8
 800b430:	2b08      	cmp	r3, #8
 800b432:	d10e      	bne.n	800b452 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 f82d 	bl	800b4a2 <UART_WaitOnFlagUntilTimeout>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e023      	b.n	800b49a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0304 	and.w	r3, r3, #4
 800b45c:	2b04      	cmp	r3, #4
 800b45e:	d10e      	bne.n	800b47e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f817 	bl	800b4a2 <UART_WaitOnFlagUntilTimeout>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e00d      	b.n	800b49a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2220      	movs	r2, #32
 800b482:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2220      	movs	r2, #32
 800b488:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b09c      	sub	sp, #112	; 0x70
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	603b      	str	r3, [r7, #0]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4b2:	e0a5      	b.n	800b600 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ba:	f000 80a1 	beq.w	800b600 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4be:	f7fc fb1d 	bl	8007afc <HAL_GetTick>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d302      	bcc.n	800b4d4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b4ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d13e      	bne.n	800b552 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4dc:	e853 3f00 	ldrex	r3, [r3]
 800b4e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b4e8:	667b      	str	r3, [r7, #100]	; 0x64
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b4f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4fa:	e841 2300 	strex	r3, r2, [r1]
 800b4fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1e6      	bne.n	800b4d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3308      	adds	r3, #8
 800b50c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b510:	e853 3f00 	ldrex	r3, [r3]
 800b514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b518:	f023 0301 	bic.w	r3, r3, #1
 800b51c:	663b      	str	r3, [r7, #96]	; 0x60
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	3308      	adds	r3, #8
 800b524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b526:	64ba      	str	r2, [r7, #72]	; 0x48
 800b528:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b52c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b52e:	e841 2300 	strex	r3, r2, [r1]
 800b532:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1e5      	bne.n	800b506 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2220      	movs	r2, #32
 800b53e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2220      	movs	r2, #32
 800b544:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	e067      	b.n	800b622 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 0304 	and.w	r3, r3, #4
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d04f      	beq.n	800b600 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b56a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b56e:	d147      	bne.n	800b600 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b578:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b58e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	461a      	mov	r2, r3
 800b596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b598:	637b      	str	r3, [r7, #52]	; 0x34
 800b59a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5a0:	e841 2300 	strex	r3, r2, [r1]
 800b5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1e6      	bne.n	800b57a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	e853 3f00 	ldrex	r3, [r3]
 800b5ba:	613b      	str	r3, [r7, #16]
   return(result);
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f023 0301 	bic.w	r3, r3, #1
 800b5c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5cc:	623a      	str	r2, [r7, #32]
 800b5ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d0:	69f9      	ldr	r1, [r7, #28]
 800b5d2:	6a3a      	ldr	r2, [r7, #32]
 800b5d4:	e841 2300 	strex	r3, r2, [r1]
 800b5d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1e5      	bne.n	800b5ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2220      	movs	r2, #32
 800b5f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e010      	b.n	800b622 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	69da      	ldr	r2, [r3, #28]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	4013      	ands	r3, r2
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	bf0c      	ite	eq
 800b610:	2301      	moveq	r3, #1
 800b612:	2300      	movne	r3, #0
 800b614:	b2db      	uxtb	r3, r3
 800b616:	461a      	mov	r2, r3
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	f43f af4a 	beq.w	800b4b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3770      	adds	r7, #112	; 0x70
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
	...

0800b62c <calloc>:
 800b62c:	4b02      	ldr	r3, [pc, #8]	; (800b638 <calloc+0xc>)
 800b62e:	460a      	mov	r2, r1
 800b630:	4601      	mov	r1, r0
 800b632:	6818      	ldr	r0, [r3, #0]
 800b634:	f000 b864 	b.w	800b700 <_calloc_r>
 800b638:	200009ec 	.word	0x200009ec

0800b63c <__errno>:
 800b63c:	4b01      	ldr	r3, [pc, #4]	; (800b644 <__errno+0x8>)
 800b63e:	6818      	ldr	r0, [r3, #0]
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	200009ec 	.word	0x200009ec

0800b648 <__libc_init_array>:
 800b648:	b570      	push	{r4, r5, r6, lr}
 800b64a:	4d0d      	ldr	r5, [pc, #52]	; (800b680 <__libc_init_array+0x38>)
 800b64c:	4c0d      	ldr	r4, [pc, #52]	; (800b684 <__libc_init_array+0x3c>)
 800b64e:	1b64      	subs	r4, r4, r5
 800b650:	10a4      	asrs	r4, r4, #2
 800b652:	2600      	movs	r6, #0
 800b654:	42a6      	cmp	r6, r4
 800b656:	d109      	bne.n	800b66c <__libc_init_array+0x24>
 800b658:	4d0b      	ldr	r5, [pc, #44]	; (800b688 <__libc_init_array+0x40>)
 800b65a:	4c0c      	ldr	r4, [pc, #48]	; (800b68c <__libc_init_array+0x44>)
 800b65c:	f001 f86a 	bl	800c734 <_init>
 800b660:	1b64      	subs	r4, r4, r5
 800b662:	10a4      	asrs	r4, r4, #2
 800b664:	2600      	movs	r6, #0
 800b666:	42a6      	cmp	r6, r4
 800b668:	d105      	bne.n	800b676 <__libc_init_array+0x2e>
 800b66a:	bd70      	pop	{r4, r5, r6, pc}
 800b66c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b670:	4798      	blx	r3
 800b672:	3601      	adds	r6, #1
 800b674:	e7ee      	b.n	800b654 <__libc_init_array+0xc>
 800b676:	f855 3b04 	ldr.w	r3, [r5], #4
 800b67a:	4798      	blx	r3
 800b67c:	3601      	adds	r6, #1
 800b67e:	e7f2      	b.n	800b666 <__libc_init_array+0x1e>
 800b680:	0800d240 	.word	0x0800d240
 800b684:	0800d240 	.word	0x0800d240
 800b688:	0800d240 	.word	0x0800d240
 800b68c:	0800d244 	.word	0x0800d244

0800b690 <free>:
 800b690:	4b02      	ldr	r3, [pc, #8]	; (800b69c <free+0xc>)
 800b692:	4601      	mov	r1, r0
 800b694:	6818      	ldr	r0, [r3, #0]
 800b696:	f000 b849 	b.w	800b72c <_free_r>
 800b69a:	bf00      	nop
 800b69c:	200009ec 	.word	0x200009ec

0800b6a0 <memcpy>:
 800b6a0:	440a      	add	r2, r1
 800b6a2:	4291      	cmp	r1, r2
 800b6a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6a8:	d100      	bne.n	800b6ac <memcpy+0xc>
 800b6aa:	4770      	bx	lr
 800b6ac:	b510      	push	{r4, lr}
 800b6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6b6:	4291      	cmp	r1, r2
 800b6b8:	d1f9      	bne.n	800b6ae <memcpy+0xe>
 800b6ba:	bd10      	pop	{r4, pc}

0800b6bc <memmove>:
 800b6bc:	4288      	cmp	r0, r1
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	eb01 0402 	add.w	r4, r1, r2
 800b6c4:	d902      	bls.n	800b6cc <memmove+0x10>
 800b6c6:	4284      	cmp	r4, r0
 800b6c8:	4623      	mov	r3, r4
 800b6ca:	d807      	bhi.n	800b6dc <memmove+0x20>
 800b6cc:	1e43      	subs	r3, r0, #1
 800b6ce:	42a1      	cmp	r1, r4
 800b6d0:	d008      	beq.n	800b6e4 <memmove+0x28>
 800b6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6da:	e7f8      	b.n	800b6ce <memmove+0x12>
 800b6dc:	4402      	add	r2, r0
 800b6de:	4601      	mov	r1, r0
 800b6e0:	428a      	cmp	r2, r1
 800b6e2:	d100      	bne.n	800b6e6 <memmove+0x2a>
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ee:	e7f7      	b.n	800b6e0 <memmove+0x24>

0800b6f0 <memset>:
 800b6f0:	4402      	add	r2, r0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d100      	bne.n	800b6fa <memset+0xa>
 800b6f8:	4770      	bx	lr
 800b6fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b6fe:	e7f9      	b.n	800b6f4 <memset+0x4>

0800b700 <_calloc_r>:
 800b700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b702:	fba1 2402 	umull	r2, r4, r1, r2
 800b706:	b94c      	cbnz	r4, 800b71c <_calloc_r+0x1c>
 800b708:	4611      	mov	r1, r2
 800b70a:	9201      	str	r2, [sp, #4]
 800b70c:	f000 f87a 	bl	800b804 <_malloc_r>
 800b710:	9a01      	ldr	r2, [sp, #4]
 800b712:	4605      	mov	r5, r0
 800b714:	b930      	cbnz	r0, 800b724 <_calloc_r+0x24>
 800b716:	4628      	mov	r0, r5
 800b718:	b003      	add	sp, #12
 800b71a:	bd30      	pop	{r4, r5, pc}
 800b71c:	220c      	movs	r2, #12
 800b71e:	6002      	str	r2, [r0, #0]
 800b720:	2500      	movs	r5, #0
 800b722:	e7f8      	b.n	800b716 <_calloc_r+0x16>
 800b724:	4621      	mov	r1, r4
 800b726:	f7ff ffe3 	bl	800b6f0 <memset>
 800b72a:	e7f4      	b.n	800b716 <_calloc_r+0x16>

0800b72c <_free_r>:
 800b72c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b72e:	2900      	cmp	r1, #0
 800b730:	d044      	beq.n	800b7bc <_free_r+0x90>
 800b732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b736:	9001      	str	r0, [sp, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f1a1 0404 	sub.w	r4, r1, #4
 800b73e:	bfb8      	it	lt
 800b740:	18e4      	addlt	r4, r4, r3
 800b742:	f000 fc51 	bl	800bfe8 <__malloc_lock>
 800b746:	4a1e      	ldr	r2, [pc, #120]	; (800b7c0 <_free_r+0x94>)
 800b748:	9801      	ldr	r0, [sp, #4]
 800b74a:	6813      	ldr	r3, [r2, #0]
 800b74c:	b933      	cbnz	r3, 800b75c <_free_r+0x30>
 800b74e:	6063      	str	r3, [r4, #4]
 800b750:	6014      	str	r4, [r2, #0]
 800b752:	b003      	add	sp, #12
 800b754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b758:	f000 bc4c 	b.w	800bff4 <__malloc_unlock>
 800b75c:	42a3      	cmp	r3, r4
 800b75e:	d908      	bls.n	800b772 <_free_r+0x46>
 800b760:	6825      	ldr	r5, [r4, #0]
 800b762:	1961      	adds	r1, r4, r5
 800b764:	428b      	cmp	r3, r1
 800b766:	bf01      	itttt	eq
 800b768:	6819      	ldreq	r1, [r3, #0]
 800b76a:	685b      	ldreq	r3, [r3, #4]
 800b76c:	1949      	addeq	r1, r1, r5
 800b76e:	6021      	streq	r1, [r4, #0]
 800b770:	e7ed      	b.n	800b74e <_free_r+0x22>
 800b772:	461a      	mov	r2, r3
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	b10b      	cbz	r3, 800b77c <_free_r+0x50>
 800b778:	42a3      	cmp	r3, r4
 800b77a:	d9fa      	bls.n	800b772 <_free_r+0x46>
 800b77c:	6811      	ldr	r1, [r2, #0]
 800b77e:	1855      	adds	r5, r2, r1
 800b780:	42a5      	cmp	r5, r4
 800b782:	d10b      	bne.n	800b79c <_free_r+0x70>
 800b784:	6824      	ldr	r4, [r4, #0]
 800b786:	4421      	add	r1, r4
 800b788:	1854      	adds	r4, r2, r1
 800b78a:	42a3      	cmp	r3, r4
 800b78c:	6011      	str	r1, [r2, #0]
 800b78e:	d1e0      	bne.n	800b752 <_free_r+0x26>
 800b790:	681c      	ldr	r4, [r3, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	6053      	str	r3, [r2, #4]
 800b796:	4421      	add	r1, r4
 800b798:	6011      	str	r1, [r2, #0]
 800b79a:	e7da      	b.n	800b752 <_free_r+0x26>
 800b79c:	d902      	bls.n	800b7a4 <_free_r+0x78>
 800b79e:	230c      	movs	r3, #12
 800b7a0:	6003      	str	r3, [r0, #0]
 800b7a2:	e7d6      	b.n	800b752 <_free_r+0x26>
 800b7a4:	6825      	ldr	r5, [r4, #0]
 800b7a6:	1961      	adds	r1, r4, r5
 800b7a8:	428b      	cmp	r3, r1
 800b7aa:	bf04      	itt	eq
 800b7ac:	6819      	ldreq	r1, [r3, #0]
 800b7ae:	685b      	ldreq	r3, [r3, #4]
 800b7b0:	6063      	str	r3, [r4, #4]
 800b7b2:	bf04      	itt	eq
 800b7b4:	1949      	addeq	r1, r1, r5
 800b7b6:	6021      	streq	r1, [r4, #0]
 800b7b8:	6054      	str	r4, [r2, #4]
 800b7ba:	e7ca      	b.n	800b752 <_free_r+0x26>
 800b7bc:	b003      	add	sp, #12
 800b7be:	bd30      	pop	{r4, r5, pc}
 800b7c0:	20000b78 	.word	0x20000b78

0800b7c4 <sbrk_aligned>:
 800b7c4:	b570      	push	{r4, r5, r6, lr}
 800b7c6:	4e0e      	ldr	r6, [pc, #56]	; (800b800 <sbrk_aligned+0x3c>)
 800b7c8:	460c      	mov	r4, r1
 800b7ca:	6831      	ldr	r1, [r6, #0]
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	b911      	cbnz	r1, 800b7d6 <sbrk_aligned+0x12>
 800b7d0:	f000 f91a 	bl	800ba08 <_sbrk_r>
 800b7d4:	6030      	str	r0, [r6, #0]
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f000 f915 	bl	800ba08 <_sbrk_r>
 800b7de:	1c43      	adds	r3, r0, #1
 800b7e0:	d00a      	beq.n	800b7f8 <sbrk_aligned+0x34>
 800b7e2:	1cc4      	adds	r4, r0, #3
 800b7e4:	f024 0403 	bic.w	r4, r4, #3
 800b7e8:	42a0      	cmp	r0, r4
 800b7ea:	d007      	beq.n	800b7fc <sbrk_aligned+0x38>
 800b7ec:	1a21      	subs	r1, r4, r0
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f000 f90a 	bl	800ba08 <_sbrk_r>
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	d101      	bne.n	800b7fc <sbrk_aligned+0x38>
 800b7f8:	f04f 34ff 	mov.w	r4, #4294967295
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	bd70      	pop	{r4, r5, r6, pc}
 800b800:	20000b7c 	.word	0x20000b7c

0800b804 <_malloc_r>:
 800b804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b808:	1ccd      	adds	r5, r1, #3
 800b80a:	f025 0503 	bic.w	r5, r5, #3
 800b80e:	3508      	adds	r5, #8
 800b810:	2d0c      	cmp	r5, #12
 800b812:	bf38      	it	cc
 800b814:	250c      	movcc	r5, #12
 800b816:	2d00      	cmp	r5, #0
 800b818:	4607      	mov	r7, r0
 800b81a:	db01      	blt.n	800b820 <_malloc_r+0x1c>
 800b81c:	42a9      	cmp	r1, r5
 800b81e:	d905      	bls.n	800b82c <_malloc_r+0x28>
 800b820:	230c      	movs	r3, #12
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	2600      	movs	r6, #0
 800b826:	4630      	mov	r0, r6
 800b828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b82c:	4e2e      	ldr	r6, [pc, #184]	; (800b8e8 <_malloc_r+0xe4>)
 800b82e:	f000 fbdb 	bl	800bfe8 <__malloc_lock>
 800b832:	6833      	ldr	r3, [r6, #0]
 800b834:	461c      	mov	r4, r3
 800b836:	bb34      	cbnz	r4, 800b886 <_malloc_r+0x82>
 800b838:	4629      	mov	r1, r5
 800b83a:	4638      	mov	r0, r7
 800b83c:	f7ff ffc2 	bl	800b7c4 <sbrk_aligned>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	4604      	mov	r4, r0
 800b844:	d14d      	bne.n	800b8e2 <_malloc_r+0xde>
 800b846:	6834      	ldr	r4, [r6, #0]
 800b848:	4626      	mov	r6, r4
 800b84a:	2e00      	cmp	r6, #0
 800b84c:	d140      	bne.n	800b8d0 <_malloc_r+0xcc>
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	4631      	mov	r1, r6
 800b852:	4638      	mov	r0, r7
 800b854:	eb04 0803 	add.w	r8, r4, r3
 800b858:	f000 f8d6 	bl	800ba08 <_sbrk_r>
 800b85c:	4580      	cmp	r8, r0
 800b85e:	d13a      	bne.n	800b8d6 <_malloc_r+0xd2>
 800b860:	6821      	ldr	r1, [r4, #0]
 800b862:	3503      	adds	r5, #3
 800b864:	1a6d      	subs	r5, r5, r1
 800b866:	f025 0503 	bic.w	r5, r5, #3
 800b86a:	3508      	adds	r5, #8
 800b86c:	2d0c      	cmp	r5, #12
 800b86e:	bf38      	it	cc
 800b870:	250c      	movcc	r5, #12
 800b872:	4629      	mov	r1, r5
 800b874:	4638      	mov	r0, r7
 800b876:	f7ff ffa5 	bl	800b7c4 <sbrk_aligned>
 800b87a:	3001      	adds	r0, #1
 800b87c:	d02b      	beq.n	800b8d6 <_malloc_r+0xd2>
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	442b      	add	r3, r5
 800b882:	6023      	str	r3, [r4, #0]
 800b884:	e00e      	b.n	800b8a4 <_malloc_r+0xa0>
 800b886:	6822      	ldr	r2, [r4, #0]
 800b888:	1b52      	subs	r2, r2, r5
 800b88a:	d41e      	bmi.n	800b8ca <_malloc_r+0xc6>
 800b88c:	2a0b      	cmp	r2, #11
 800b88e:	d916      	bls.n	800b8be <_malloc_r+0xba>
 800b890:	1961      	adds	r1, r4, r5
 800b892:	42a3      	cmp	r3, r4
 800b894:	6025      	str	r5, [r4, #0]
 800b896:	bf18      	it	ne
 800b898:	6059      	strne	r1, [r3, #4]
 800b89a:	6863      	ldr	r3, [r4, #4]
 800b89c:	bf08      	it	eq
 800b89e:	6031      	streq	r1, [r6, #0]
 800b8a0:	5162      	str	r2, [r4, r5]
 800b8a2:	604b      	str	r3, [r1, #4]
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f104 060b 	add.w	r6, r4, #11
 800b8aa:	f000 fba3 	bl	800bff4 <__malloc_unlock>
 800b8ae:	f026 0607 	bic.w	r6, r6, #7
 800b8b2:	1d23      	adds	r3, r4, #4
 800b8b4:	1af2      	subs	r2, r6, r3
 800b8b6:	d0b6      	beq.n	800b826 <_malloc_r+0x22>
 800b8b8:	1b9b      	subs	r3, r3, r6
 800b8ba:	50a3      	str	r3, [r4, r2]
 800b8bc:	e7b3      	b.n	800b826 <_malloc_r+0x22>
 800b8be:	6862      	ldr	r2, [r4, #4]
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	bf0c      	ite	eq
 800b8c4:	6032      	streq	r2, [r6, #0]
 800b8c6:	605a      	strne	r2, [r3, #4]
 800b8c8:	e7ec      	b.n	800b8a4 <_malloc_r+0xa0>
 800b8ca:	4623      	mov	r3, r4
 800b8cc:	6864      	ldr	r4, [r4, #4]
 800b8ce:	e7b2      	b.n	800b836 <_malloc_r+0x32>
 800b8d0:	4634      	mov	r4, r6
 800b8d2:	6876      	ldr	r6, [r6, #4]
 800b8d4:	e7b9      	b.n	800b84a <_malloc_r+0x46>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	603b      	str	r3, [r7, #0]
 800b8da:	4638      	mov	r0, r7
 800b8dc:	f000 fb8a 	bl	800bff4 <__malloc_unlock>
 800b8e0:	e7a1      	b.n	800b826 <_malloc_r+0x22>
 800b8e2:	6025      	str	r5, [r4, #0]
 800b8e4:	e7de      	b.n	800b8a4 <_malloc_r+0xa0>
 800b8e6:	bf00      	nop
 800b8e8:	20000b78 	.word	0x20000b78

0800b8ec <iprintf>:
 800b8ec:	b40f      	push	{r0, r1, r2, r3}
 800b8ee:	4b0a      	ldr	r3, [pc, #40]	; (800b918 <iprintf+0x2c>)
 800b8f0:	b513      	push	{r0, r1, r4, lr}
 800b8f2:	681c      	ldr	r4, [r3, #0]
 800b8f4:	b124      	cbz	r4, 800b900 <iprintf+0x14>
 800b8f6:	69a3      	ldr	r3, [r4, #24]
 800b8f8:	b913      	cbnz	r3, 800b900 <iprintf+0x14>
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 fa6e 	bl	800bddc <__sinit>
 800b900:	ab05      	add	r3, sp, #20
 800b902:	9a04      	ldr	r2, [sp, #16]
 800b904:	68a1      	ldr	r1, [r4, #8]
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	4620      	mov	r0, r4
 800b90a:	f000 fba3 	bl	800c054 <_vfiprintf_r>
 800b90e:	b002      	add	sp, #8
 800b910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b914:	b004      	add	sp, #16
 800b916:	4770      	bx	lr
 800b918:	200009ec 	.word	0x200009ec

0800b91c <_puts_r>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	460e      	mov	r6, r1
 800b920:	4605      	mov	r5, r0
 800b922:	b118      	cbz	r0, 800b92c <_puts_r+0x10>
 800b924:	6983      	ldr	r3, [r0, #24]
 800b926:	b90b      	cbnz	r3, 800b92c <_puts_r+0x10>
 800b928:	f000 fa58 	bl	800bddc <__sinit>
 800b92c:	69ab      	ldr	r3, [r5, #24]
 800b92e:	68ac      	ldr	r4, [r5, #8]
 800b930:	b913      	cbnz	r3, 800b938 <_puts_r+0x1c>
 800b932:	4628      	mov	r0, r5
 800b934:	f000 fa52 	bl	800bddc <__sinit>
 800b938:	4b2c      	ldr	r3, [pc, #176]	; (800b9ec <_puts_r+0xd0>)
 800b93a:	429c      	cmp	r4, r3
 800b93c:	d120      	bne.n	800b980 <_puts_r+0x64>
 800b93e:	686c      	ldr	r4, [r5, #4]
 800b940:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b942:	07db      	lsls	r3, r3, #31
 800b944:	d405      	bmi.n	800b952 <_puts_r+0x36>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	0598      	lsls	r0, r3, #22
 800b94a:	d402      	bmi.n	800b952 <_puts_r+0x36>
 800b94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b94e:	f000 fae3 	bl	800bf18 <__retarget_lock_acquire_recursive>
 800b952:	89a3      	ldrh	r3, [r4, #12]
 800b954:	0719      	lsls	r1, r3, #28
 800b956:	d51d      	bpl.n	800b994 <_puts_r+0x78>
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	b1db      	cbz	r3, 800b994 <_puts_r+0x78>
 800b95c:	3e01      	subs	r6, #1
 800b95e:	68a3      	ldr	r3, [r4, #8]
 800b960:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b964:	3b01      	subs	r3, #1
 800b966:	60a3      	str	r3, [r4, #8]
 800b968:	bb39      	cbnz	r1, 800b9ba <_puts_r+0x9e>
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	da38      	bge.n	800b9e0 <_puts_r+0xc4>
 800b96e:	4622      	mov	r2, r4
 800b970:	210a      	movs	r1, #10
 800b972:	4628      	mov	r0, r5
 800b974:	f000 f858 	bl	800ba28 <__swbuf_r>
 800b978:	3001      	adds	r0, #1
 800b97a:	d011      	beq.n	800b9a0 <_puts_r+0x84>
 800b97c:	250a      	movs	r5, #10
 800b97e:	e011      	b.n	800b9a4 <_puts_r+0x88>
 800b980:	4b1b      	ldr	r3, [pc, #108]	; (800b9f0 <_puts_r+0xd4>)
 800b982:	429c      	cmp	r4, r3
 800b984:	d101      	bne.n	800b98a <_puts_r+0x6e>
 800b986:	68ac      	ldr	r4, [r5, #8]
 800b988:	e7da      	b.n	800b940 <_puts_r+0x24>
 800b98a:	4b1a      	ldr	r3, [pc, #104]	; (800b9f4 <_puts_r+0xd8>)
 800b98c:	429c      	cmp	r4, r3
 800b98e:	bf08      	it	eq
 800b990:	68ec      	ldreq	r4, [r5, #12]
 800b992:	e7d5      	b.n	800b940 <_puts_r+0x24>
 800b994:	4621      	mov	r1, r4
 800b996:	4628      	mov	r0, r5
 800b998:	f000 f898 	bl	800bacc <__swsetup_r>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d0dd      	beq.n	800b95c <_puts_r+0x40>
 800b9a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b9a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9a6:	07da      	lsls	r2, r3, #31
 800b9a8:	d405      	bmi.n	800b9b6 <_puts_r+0x9a>
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	059b      	lsls	r3, r3, #22
 800b9ae:	d402      	bmi.n	800b9b6 <_puts_r+0x9a>
 800b9b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9b2:	f000 fab2 	bl	800bf1a <__retarget_lock_release_recursive>
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	da04      	bge.n	800b9c8 <_puts_r+0xac>
 800b9be:	69a2      	ldr	r2, [r4, #24]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	dc06      	bgt.n	800b9d2 <_puts_r+0xb6>
 800b9c4:	290a      	cmp	r1, #10
 800b9c6:	d004      	beq.n	800b9d2 <_puts_r+0xb6>
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	1c5a      	adds	r2, r3, #1
 800b9cc:	6022      	str	r2, [r4, #0]
 800b9ce:	7019      	strb	r1, [r3, #0]
 800b9d0:	e7c5      	b.n	800b95e <_puts_r+0x42>
 800b9d2:	4622      	mov	r2, r4
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	f000 f827 	bl	800ba28 <__swbuf_r>
 800b9da:	3001      	adds	r0, #1
 800b9dc:	d1bf      	bne.n	800b95e <_puts_r+0x42>
 800b9de:	e7df      	b.n	800b9a0 <_puts_r+0x84>
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	250a      	movs	r5, #10
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	6022      	str	r2, [r4, #0]
 800b9e8:	701d      	strb	r5, [r3, #0]
 800b9ea:	e7db      	b.n	800b9a4 <_puts_r+0x88>
 800b9ec:	0800d1cc 	.word	0x0800d1cc
 800b9f0:	0800d1ec 	.word	0x0800d1ec
 800b9f4:	0800d1ac 	.word	0x0800d1ac

0800b9f8 <puts>:
 800b9f8:	4b02      	ldr	r3, [pc, #8]	; (800ba04 <puts+0xc>)
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	f7ff bf8d 	b.w	800b91c <_puts_r>
 800ba02:	bf00      	nop
 800ba04:	200009ec 	.word	0x200009ec

0800ba08 <_sbrk_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	4d06      	ldr	r5, [pc, #24]	; (800ba24 <_sbrk_r+0x1c>)
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	4604      	mov	r4, r0
 800ba10:	4608      	mov	r0, r1
 800ba12:	602b      	str	r3, [r5, #0]
 800ba14:	f7fb fed8 	bl	80077c8 <_sbrk>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	d102      	bne.n	800ba22 <_sbrk_r+0x1a>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	b103      	cbz	r3, 800ba22 <_sbrk_r+0x1a>
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	bd38      	pop	{r3, r4, r5, pc}
 800ba24:	20000b84 	.word	0x20000b84

0800ba28 <__swbuf_r>:
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	460e      	mov	r6, r1
 800ba2c:	4614      	mov	r4, r2
 800ba2e:	4605      	mov	r5, r0
 800ba30:	b118      	cbz	r0, 800ba3a <__swbuf_r+0x12>
 800ba32:	6983      	ldr	r3, [r0, #24]
 800ba34:	b90b      	cbnz	r3, 800ba3a <__swbuf_r+0x12>
 800ba36:	f000 f9d1 	bl	800bddc <__sinit>
 800ba3a:	4b21      	ldr	r3, [pc, #132]	; (800bac0 <__swbuf_r+0x98>)
 800ba3c:	429c      	cmp	r4, r3
 800ba3e:	d12b      	bne.n	800ba98 <__swbuf_r+0x70>
 800ba40:	686c      	ldr	r4, [r5, #4]
 800ba42:	69a3      	ldr	r3, [r4, #24]
 800ba44:	60a3      	str	r3, [r4, #8]
 800ba46:	89a3      	ldrh	r3, [r4, #12]
 800ba48:	071a      	lsls	r2, r3, #28
 800ba4a:	d52f      	bpl.n	800baac <__swbuf_r+0x84>
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	b36b      	cbz	r3, 800baac <__swbuf_r+0x84>
 800ba50:	6923      	ldr	r3, [r4, #16]
 800ba52:	6820      	ldr	r0, [r4, #0]
 800ba54:	1ac0      	subs	r0, r0, r3
 800ba56:	6963      	ldr	r3, [r4, #20]
 800ba58:	b2f6      	uxtb	r6, r6
 800ba5a:	4283      	cmp	r3, r0
 800ba5c:	4637      	mov	r7, r6
 800ba5e:	dc04      	bgt.n	800ba6a <__swbuf_r+0x42>
 800ba60:	4621      	mov	r1, r4
 800ba62:	4628      	mov	r0, r5
 800ba64:	f000 f926 	bl	800bcb4 <_fflush_r>
 800ba68:	bb30      	cbnz	r0, 800bab8 <__swbuf_r+0x90>
 800ba6a:	68a3      	ldr	r3, [r4, #8]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	60a3      	str	r3, [r4, #8]
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	6022      	str	r2, [r4, #0]
 800ba76:	701e      	strb	r6, [r3, #0]
 800ba78:	6963      	ldr	r3, [r4, #20]
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	4283      	cmp	r3, r0
 800ba7e:	d004      	beq.n	800ba8a <__swbuf_r+0x62>
 800ba80:	89a3      	ldrh	r3, [r4, #12]
 800ba82:	07db      	lsls	r3, r3, #31
 800ba84:	d506      	bpl.n	800ba94 <__swbuf_r+0x6c>
 800ba86:	2e0a      	cmp	r6, #10
 800ba88:	d104      	bne.n	800ba94 <__swbuf_r+0x6c>
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f000 f911 	bl	800bcb4 <_fflush_r>
 800ba92:	b988      	cbnz	r0, 800bab8 <__swbuf_r+0x90>
 800ba94:	4638      	mov	r0, r7
 800ba96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba98:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <__swbuf_r+0x9c>)
 800ba9a:	429c      	cmp	r4, r3
 800ba9c:	d101      	bne.n	800baa2 <__swbuf_r+0x7a>
 800ba9e:	68ac      	ldr	r4, [r5, #8]
 800baa0:	e7cf      	b.n	800ba42 <__swbuf_r+0x1a>
 800baa2:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <__swbuf_r+0xa0>)
 800baa4:	429c      	cmp	r4, r3
 800baa6:	bf08      	it	eq
 800baa8:	68ec      	ldreq	r4, [r5, #12]
 800baaa:	e7ca      	b.n	800ba42 <__swbuf_r+0x1a>
 800baac:	4621      	mov	r1, r4
 800baae:	4628      	mov	r0, r5
 800bab0:	f000 f80c 	bl	800bacc <__swsetup_r>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d0cb      	beq.n	800ba50 <__swbuf_r+0x28>
 800bab8:	f04f 37ff 	mov.w	r7, #4294967295
 800babc:	e7ea      	b.n	800ba94 <__swbuf_r+0x6c>
 800babe:	bf00      	nop
 800bac0:	0800d1cc 	.word	0x0800d1cc
 800bac4:	0800d1ec 	.word	0x0800d1ec
 800bac8:	0800d1ac 	.word	0x0800d1ac

0800bacc <__swsetup_r>:
 800bacc:	4b32      	ldr	r3, [pc, #200]	; (800bb98 <__swsetup_r+0xcc>)
 800bace:	b570      	push	{r4, r5, r6, lr}
 800bad0:	681d      	ldr	r5, [r3, #0]
 800bad2:	4606      	mov	r6, r0
 800bad4:	460c      	mov	r4, r1
 800bad6:	b125      	cbz	r5, 800bae2 <__swsetup_r+0x16>
 800bad8:	69ab      	ldr	r3, [r5, #24]
 800bada:	b913      	cbnz	r3, 800bae2 <__swsetup_r+0x16>
 800badc:	4628      	mov	r0, r5
 800bade:	f000 f97d 	bl	800bddc <__sinit>
 800bae2:	4b2e      	ldr	r3, [pc, #184]	; (800bb9c <__swsetup_r+0xd0>)
 800bae4:	429c      	cmp	r4, r3
 800bae6:	d10f      	bne.n	800bb08 <__swsetup_r+0x3c>
 800bae8:	686c      	ldr	r4, [r5, #4]
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baf0:	0719      	lsls	r1, r3, #28
 800baf2:	d42c      	bmi.n	800bb4e <__swsetup_r+0x82>
 800baf4:	06dd      	lsls	r5, r3, #27
 800baf6:	d411      	bmi.n	800bb1c <__swsetup_r+0x50>
 800baf8:	2309      	movs	r3, #9
 800bafa:	6033      	str	r3, [r6, #0]
 800bafc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb00:	81a3      	strh	r3, [r4, #12]
 800bb02:	f04f 30ff 	mov.w	r0, #4294967295
 800bb06:	e03e      	b.n	800bb86 <__swsetup_r+0xba>
 800bb08:	4b25      	ldr	r3, [pc, #148]	; (800bba0 <__swsetup_r+0xd4>)
 800bb0a:	429c      	cmp	r4, r3
 800bb0c:	d101      	bne.n	800bb12 <__swsetup_r+0x46>
 800bb0e:	68ac      	ldr	r4, [r5, #8]
 800bb10:	e7eb      	b.n	800baea <__swsetup_r+0x1e>
 800bb12:	4b24      	ldr	r3, [pc, #144]	; (800bba4 <__swsetup_r+0xd8>)
 800bb14:	429c      	cmp	r4, r3
 800bb16:	bf08      	it	eq
 800bb18:	68ec      	ldreq	r4, [r5, #12]
 800bb1a:	e7e6      	b.n	800baea <__swsetup_r+0x1e>
 800bb1c:	0758      	lsls	r0, r3, #29
 800bb1e:	d512      	bpl.n	800bb46 <__swsetup_r+0x7a>
 800bb20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb22:	b141      	cbz	r1, 800bb36 <__swsetup_r+0x6a>
 800bb24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb28:	4299      	cmp	r1, r3
 800bb2a:	d002      	beq.n	800bb32 <__swsetup_r+0x66>
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	f7ff fdfd 	bl	800b72c <_free_r>
 800bb32:	2300      	movs	r3, #0
 800bb34:	6363      	str	r3, [r4, #52]	; 0x34
 800bb36:	89a3      	ldrh	r3, [r4, #12]
 800bb38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb3c:	81a3      	strh	r3, [r4, #12]
 800bb3e:	2300      	movs	r3, #0
 800bb40:	6063      	str	r3, [r4, #4]
 800bb42:	6923      	ldr	r3, [r4, #16]
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	89a3      	ldrh	r3, [r4, #12]
 800bb48:	f043 0308 	orr.w	r3, r3, #8
 800bb4c:	81a3      	strh	r3, [r4, #12]
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	b94b      	cbnz	r3, 800bb66 <__swsetup_r+0x9a>
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb5c:	d003      	beq.n	800bb66 <__swsetup_r+0x9a>
 800bb5e:	4621      	mov	r1, r4
 800bb60:	4630      	mov	r0, r6
 800bb62:	f000 fa01 	bl	800bf68 <__smakebuf_r>
 800bb66:	89a0      	ldrh	r0, [r4, #12]
 800bb68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb6c:	f010 0301 	ands.w	r3, r0, #1
 800bb70:	d00a      	beq.n	800bb88 <__swsetup_r+0xbc>
 800bb72:	2300      	movs	r3, #0
 800bb74:	60a3      	str	r3, [r4, #8]
 800bb76:	6963      	ldr	r3, [r4, #20]
 800bb78:	425b      	negs	r3, r3
 800bb7a:	61a3      	str	r3, [r4, #24]
 800bb7c:	6923      	ldr	r3, [r4, #16]
 800bb7e:	b943      	cbnz	r3, 800bb92 <__swsetup_r+0xc6>
 800bb80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb84:	d1ba      	bne.n	800bafc <__swsetup_r+0x30>
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
 800bb88:	0781      	lsls	r1, r0, #30
 800bb8a:	bf58      	it	pl
 800bb8c:	6963      	ldrpl	r3, [r4, #20]
 800bb8e:	60a3      	str	r3, [r4, #8]
 800bb90:	e7f4      	b.n	800bb7c <__swsetup_r+0xb0>
 800bb92:	2000      	movs	r0, #0
 800bb94:	e7f7      	b.n	800bb86 <__swsetup_r+0xba>
 800bb96:	bf00      	nop
 800bb98:	200009ec 	.word	0x200009ec
 800bb9c:	0800d1cc 	.word	0x0800d1cc
 800bba0:	0800d1ec 	.word	0x0800d1ec
 800bba4:	0800d1ac 	.word	0x0800d1ac

0800bba8 <__sflush_r>:
 800bba8:	898a      	ldrh	r2, [r1, #12]
 800bbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbae:	4605      	mov	r5, r0
 800bbb0:	0710      	lsls	r0, r2, #28
 800bbb2:	460c      	mov	r4, r1
 800bbb4:	d458      	bmi.n	800bc68 <__sflush_r+0xc0>
 800bbb6:	684b      	ldr	r3, [r1, #4]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	dc05      	bgt.n	800bbc8 <__sflush_r+0x20>
 800bbbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	dc02      	bgt.n	800bbc8 <__sflush_r+0x20>
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbca:	2e00      	cmp	r6, #0
 800bbcc:	d0f9      	beq.n	800bbc2 <__sflush_r+0x1a>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbd4:	682f      	ldr	r7, [r5, #0]
 800bbd6:	602b      	str	r3, [r5, #0]
 800bbd8:	d032      	beq.n	800bc40 <__sflush_r+0x98>
 800bbda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	075a      	lsls	r2, r3, #29
 800bbe0:	d505      	bpl.n	800bbee <__sflush_r+0x46>
 800bbe2:	6863      	ldr	r3, [r4, #4]
 800bbe4:	1ac0      	subs	r0, r0, r3
 800bbe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbe8:	b10b      	cbz	r3, 800bbee <__sflush_r+0x46>
 800bbea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbec:	1ac0      	subs	r0, r0, r3
 800bbee:	2300      	movs	r3, #0
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbf4:	6a21      	ldr	r1, [r4, #32]
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	47b0      	blx	r6
 800bbfa:	1c43      	adds	r3, r0, #1
 800bbfc:	89a3      	ldrh	r3, [r4, #12]
 800bbfe:	d106      	bne.n	800bc0e <__sflush_r+0x66>
 800bc00:	6829      	ldr	r1, [r5, #0]
 800bc02:	291d      	cmp	r1, #29
 800bc04:	d82c      	bhi.n	800bc60 <__sflush_r+0xb8>
 800bc06:	4a2a      	ldr	r2, [pc, #168]	; (800bcb0 <__sflush_r+0x108>)
 800bc08:	40ca      	lsrs	r2, r1
 800bc0a:	07d6      	lsls	r6, r2, #31
 800bc0c:	d528      	bpl.n	800bc60 <__sflush_r+0xb8>
 800bc0e:	2200      	movs	r2, #0
 800bc10:	6062      	str	r2, [r4, #4]
 800bc12:	04d9      	lsls	r1, r3, #19
 800bc14:	6922      	ldr	r2, [r4, #16]
 800bc16:	6022      	str	r2, [r4, #0]
 800bc18:	d504      	bpl.n	800bc24 <__sflush_r+0x7c>
 800bc1a:	1c42      	adds	r2, r0, #1
 800bc1c:	d101      	bne.n	800bc22 <__sflush_r+0x7a>
 800bc1e:	682b      	ldr	r3, [r5, #0]
 800bc20:	b903      	cbnz	r3, 800bc24 <__sflush_r+0x7c>
 800bc22:	6560      	str	r0, [r4, #84]	; 0x54
 800bc24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc26:	602f      	str	r7, [r5, #0]
 800bc28:	2900      	cmp	r1, #0
 800bc2a:	d0ca      	beq.n	800bbc2 <__sflush_r+0x1a>
 800bc2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc30:	4299      	cmp	r1, r3
 800bc32:	d002      	beq.n	800bc3a <__sflush_r+0x92>
 800bc34:	4628      	mov	r0, r5
 800bc36:	f7ff fd79 	bl	800b72c <_free_r>
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	6360      	str	r0, [r4, #52]	; 0x34
 800bc3e:	e7c1      	b.n	800bbc4 <__sflush_r+0x1c>
 800bc40:	6a21      	ldr	r1, [r4, #32]
 800bc42:	2301      	movs	r3, #1
 800bc44:	4628      	mov	r0, r5
 800bc46:	47b0      	blx	r6
 800bc48:	1c41      	adds	r1, r0, #1
 800bc4a:	d1c7      	bne.n	800bbdc <__sflush_r+0x34>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d0c4      	beq.n	800bbdc <__sflush_r+0x34>
 800bc52:	2b1d      	cmp	r3, #29
 800bc54:	d001      	beq.n	800bc5a <__sflush_r+0xb2>
 800bc56:	2b16      	cmp	r3, #22
 800bc58:	d101      	bne.n	800bc5e <__sflush_r+0xb6>
 800bc5a:	602f      	str	r7, [r5, #0]
 800bc5c:	e7b1      	b.n	800bbc2 <__sflush_r+0x1a>
 800bc5e:	89a3      	ldrh	r3, [r4, #12]
 800bc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc64:	81a3      	strh	r3, [r4, #12]
 800bc66:	e7ad      	b.n	800bbc4 <__sflush_r+0x1c>
 800bc68:	690f      	ldr	r7, [r1, #16]
 800bc6a:	2f00      	cmp	r7, #0
 800bc6c:	d0a9      	beq.n	800bbc2 <__sflush_r+0x1a>
 800bc6e:	0793      	lsls	r3, r2, #30
 800bc70:	680e      	ldr	r6, [r1, #0]
 800bc72:	bf08      	it	eq
 800bc74:	694b      	ldreq	r3, [r1, #20]
 800bc76:	600f      	str	r7, [r1, #0]
 800bc78:	bf18      	it	ne
 800bc7a:	2300      	movne	r3, #0
 800bc7c:	eba6 0807 	sub.w	r8, r6, r7
 800bc80:	608b      	str	r3, [r1, #8]
 800bc82:	f1b8 0f00 	cmp.w	r8, #0
 800bc86:	dd9c      	ble.n	800bbc2 <__sflush_r+0x1a>
 800bc88:	6a21      	ldr	r1, [r4, #32]
 800bc8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc8c:	4643      	mov	r3, r8
 800bc8e:	463a      	mov	r2, r7
 800bc90:	4628      	mov	r0, r5
 800bc92:	47b0      	blx	r6
 800bc94:	2800      	cmp	r0, #0
 800bc96:	dc06      	bgt.n	800bca6 <__sflush_r+0xfe>
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc9e:	81a3      	strh	r3, [r4, #12]
 800bca0:	f04f 30ff 	mov.w	r0, #4294967295
 800bca4:	e78e      	b.n	800bbc4 <__sflush_r+0x1c>
 800bca6:	4407      	add	r7, r0
 800bca8:	eba8 0800 	sub.w	r8, r8, r0
 800bcac:	e7e9      	b.n	800bc82 <__sflush_r+0xda>
 800bcae:	bf00      	nop
 800bcb0:	20400001 	.word	0x20400001

0800bcb4 <_fflush_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	690b      	ldr	r3, [r1, #16]
 800bcb8:	4605      	mov	r5, r0
 800bcba:	460c      	mov	r4, r1
 800bcbc:	b913      	cbnz	r3, 800bcc4 <_fflush_r+0x10>
 800bcbe:	2500      	movs	r5, #0
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	b118      	cbz	r0, 800bcce <_fflush_r+0x1a>
 800bcc6:	6983      	ldr	r3, [r0, #24]
 800bcc8:	b90b      	cbnz	r3, 800bcce <_fflush_r+0x1a>
 800bcca:	f000 f887 	bl	800bddc <__sinit>
 800bcce:	4b14      	ldr	r3, [pc, #80]	; (800bd20 <_fflush_r+0x6c>)
 800bcd0:	429c      	cmp	r4, r3
 800bcd2:	d11b      	bne.n	800bd0c <_fflush_r+0x58>
 800bcd4:	686c      	ldr	r4, [r5, #4]
 800bcd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0ef      	beq.n	800bcbe <_fflush_r+0xa>
 800bcde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bce0:	07d0      	lsls	r0, r2, #31
 800bce2:	d404      	bmi.n	800bcee <_fflush_r+0x3a>
 800bce4:	0599      	lsls	r1, r3, #22
 800bce6:	d402      	bmi.n	800bcee <_fflush_r+0x3a>
 800bce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcea:	f000 f915 	bl	800bf18 <__retarget_lock_acquire_recursive>
 800bcee:	4628      	mov	r0, r5
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	f7ff ff59 	bl	800bba8 <__sflush_r>
 800bcf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcf8:	07da      	lsls	r2, r3, #31
 800bcfa:	4605      	mov	r5, r0
 800bcfc:	d4e0      	bmi.n	800bcc0 <_fflush_r+0xc>
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	059b      	lsls	r3, r3, #22
 800bd02:	d4dd      	bmi.n	800bcc0 <_fflush_r+0xc>
 800bd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd06:	f000 f908 	bl	800bf1a <__retarget_lock_release_recursive>
 800bd0a:	e7d9      	b.n	800bcc0 <_fflush_r+0xc>
 800bd0c:	4b05      	ldr	r3, [pc, #20]	; (800bd24 <_fflush_r+0x70>)
 800bd0e:	429c      	cmp	r4, r3
 800bd10:	d101      	bne.n	800bd16 <_fflush_r+0x62>
 800bd12:	68ac      	ldr	r4, [r5, #8]
 800bd14:	e7df      	b.n	800bcd6 <_fflush_r+0x22>
 800bd16:	4b04      	ldr	r3, [pc, #16]	; (800bd28 <_fflush_r+0x74>)
 800bd18:	429c      	cmp	r4, r3
 800bd1a:	bf08      	it	eq
 800bd1c:	68ec      	ldreq	r4, [r5, #12]
 800bd1e:	e7da      	b.n	800bcd6 <_fflush_r+0x22>
 800bd20:	0800d1cc 	.word	0x0800d1cc
 800bd24:	0800d1ec 	.word	0x0800d1ec
 800bd28:	0800d1ac 	.word	0x0800d1ac

0800bd2c <std>:
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	b510      	push	{r4, lr}
 800bd30:	4604      	mov	r4, r0
 800bd32:	e9c0 3300 	strd	r3, r3, [r0]
 800bd36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd3a:	6083      	str	r3, [r0, #8]
 800bd3c:	8181      	strh	r1, [r0, #12]
 800bd3e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd40:	81c2      	strh	r2, [r0, #14]
 800bd42:	6183      	str	r3, [r0, #24]
 800bd44:	4619      	mov	r1, r3
 800bd46:	2208      	movs	r2, #8
 800bd48:	305c      	adds	r0, #92	; 0x5c
 800bd4a:	f7ff fcd1 	bl	800b6f0 <memset>
 800bd4e:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <std+0x38>)
 800bd50:	6263      	str	r3, [r4, #36]	; 0x24
 800bd52:	4b05      	ldr	r3, [pc, #20]	; (800bd68 <std+0x3c>)
 800bd54:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd56:	4b05      	ldr	r3, [pc, #20]	; (800bd6c <std+0x40>)
 800bd58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd5a:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <std+0x44>)
 800bd5c:	6224      	str	r4, [r4, #32]
 800bd5e:	6323      	str	r3, [r4, #48]	; 0x30
 800bd60:	bd10      	pop	{r4, pc}
 800bd62:	bf00      	nop
 800bd64:	0800c5dd 	.word	0x0800c5dd
 800bd68:	0800c5ff 	.word	0x0800c5ff
 800bd6c:	0800c637 	.word	0x0800c637
 800bd70:	0800c65b 	.word	0x0800c65b

0800bd74 <_cleanup_r>:
 800bd74:	4901      	ldr	r1, [pc, #4]	; (800bd7c <_cleanup_r+0x8>)
 800bd76:	f000 b8af 	b.w	800bed8 <_fwalk_reent>
 800bd7a:	bf00      	nop
 800bd7c:	0800bcb5 	.word	0x0800bcb5

0800bd80 <__sfmoreglue>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	2268      	movs	r2, #104	; 0x68
 800bd84:	1e4d      	subs	r5, r1, #1
 800bd86:	4355      	muls	r5, r2
 800bd88:	460e      	mov	r6, r1
 800bd8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd8e:	f7ff fd39 	bl	800b804 <_malloc_r>
 800bd92:	4604      	mov	r4, r0
 800bd94:	b140      	cbz	r0, 800bda8 <__sfmoreglue+0x28>
 800bd96:	2100      	movs	r1, #0
 800bd98:	e9c0 1600 	strd	r1, r6, [r0]
 800bd9c:	300c      	adds	r0, #12
 800bd9e:	60a0      	str	r0, [r4, #8]
 800bda0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bda4:	f7ff fca4 	bl	800b6f0 <memset>
 800bda8:	4620      	mov	r0, r4
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}

0800bdac <__sfp_lock_acquire>:
 800bdac:	4801      	ldr	r0, [pc, #4]	; (800bdb4 <__sfp_lock_acquire+0x8>)
 800bdae:	f000 b8b3 	b.w	800bf18 <__retarget_lock_acquire_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	20000b81 	.word	0x20000b81

0800bdb8 <__sfp_lock_release>:
 800bdb8:	4801      	ldr	r0, [pc, #4]	; (800bdc0 <__sfp_lock_release+0x8>)
 800bdba:	f000 b8ae 	b.w	800bf1a <__retarget_lock_release_recursive>
 800bdbe:	bf00      	nop
 800bdc0:	20000b81 	.word	0x20000b81

0800bdc4 <__sinit_lock_acquire>:
 800bdc4:	4801      	ldr	r0, [pc, #4]	; (800bdcc <__sinit_lock_acquire+0x8>)
 800bdc6:	f000 b8a7 	b.w	800bf18 <__retarget_lock_acquire_recursive>
 800bdca:	bf00      	nop
 800bdcc:	20000b82 	.word	0x20000b82

0800bdd0 <__sinit_lock_release>:
 800bdd0:	4801      	ldr	r0, [pc, #4]	; (800bdd8 <__sinit_lock_release+0x8>)
 800bdd2:	f000 b8a2 	b.w	800bf1a <__retarget_lock_release_recursive>
 800bdd6:	bf00      	nop
 800bdd8:	20000b82 	.word	0x20000b82

0800bddc <__sinit>:
 800bddc:	b510      	push	{r4, lr}
 800bdde:	4604      	mov	r4, r0
 800bde0:	f7ff fff0 	bl	800bdc4 <__sinit_lock_acquire>
 800bde4:	69a3      	ldr	r3, [r4, #24]
 800bde6:	b11b      	cbz	r3, 800bdf0 <__sinit+0x14>
 800bde8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdec:	f7ff bff0 	b.w	800bdd0 <__sinit_lock_release>
 800bdf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bdf4:	6523      	str	r3, [r4, #80]	; 0x50
 800bdf6:	4b13      	ldr	r3, [pc, #76]	; (800be44 <__sinit+0x68>)
 800bdf8:	4a13      	ldr	r2, [pc, #76]	; (800be48 <__sinit+0x6c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	62a2      	str	r2, [r4, #40]	; 0x28
 800bdfe:	42a3      	cmp	r3, r4
 800be00:	bf04      	itt	eq
 800be02:	2301      	moveq	r3, #1
 800be04:	61a3      	streq	r3, [r4, #24]
 800be06:	4620      	mov	r0, r4
 800be08:	f000 f820 	bl	800be4c <__sfp>
 800be0c:	6060      	str	r0, [r4, #4]
 800be0e:	4620      	mov	r0, r4
 800be10:	f000 f81c 	bl	800be4c <__sfp>
 800be14:	60a0      	str	r0, [r4, #8]
 800be16:	4620      	mov	r0, r4
 800be18:	f000 f818 	bl	800be4c <__sfp>
 800be1c:	2200      	movs	r2, #0
 800be1e:	60e0      	str	r0, [r4, #12]
 800be20:	2104      	movs	r1, #4
 800be22:	6860      	ldr	r0, [r4, #4]
 800be24:	f7ff ff82 	bl	800bd2c <std>
 800be28:	68a0      	ldr	r0, [r4, #8]
 800be2a:	2201      	movs	r2, #1
 800be2c:	2109      	movs	r1, #9
 800be2e:	f7ff ff7d 	bl	800bd2c <std>
 800be32:	68e0      	ldr	r0, [r4, #12]
 800be34:	2202      	movs	r2, #2
 800be36:	2112      	movs	r1, #18
 800be38:	f7ff ff78 	bl	800bd2c <std>
 800be3c:	2301      	movs	r3, #1
 800be3e:	61a3      	str	r3, [r4, #24]
 800be40:	e7d2      	b.n	800bde8 <__sinit+0xc>
 800be42:	bf00      	nop
 800be44:	0800d1a8 	.word	0x0800d1a8
 800be48:	0800bd75 	.word	0x0800bd75

0800be4c <__sfp>:
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	4607      	mov	r7, r0
 800be50:	f7ff ffac 	bl	800bdac <__sfp_lock_acquire>
 800be54:	4b1e      	ldr	r3, [pc, #120]	; (800bed0 <__sfp+0x84>)
 800be56:	681e      	ldr	r6, [r3, #0]
 800be58:	69b3      	ldr	r3, [r6, #24]
 800be5a:	b913      	cbnz	r3, 800be62 <__sfp+0x16>
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7ff ffbd 	bl	800bddc <__sinit>
 800be62:	3648      	adds	r6, #72	; 0x48
 800be64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be68:	3b01      	subs	r3, #1
 800be6a:	d503      	bpl.n	800be74 <__sfp+0x28>
 800be6c:	6833      	ldr	r3, [r6, #0]
 800be6e:	b30b      	cbz	r3, 800beb4 <__sfp+0x68>
 800be70:	6836      	ldr	r6, [r6, #0]
 800be72:	e7f7      	b.n	800be64 <__sfp+0x18>
 800be74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be78:	b9d5      	cbnz	r5, 800beb0 <__sfp+0x64>
 800be7a:	4b16      	ldr	r3, [pc, #88]	; (800bed4 <__sfp+0x88>)
 800be7c:	60e3      	str	r3, [r4, #12]
 800be7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be82:	6665      	str	r5, [r4, #100]	; 0x64
 800be84:	f000 f847 	bl	800bf16 <__retarget_lock_init_recursive>
 800be88:	f7ff ff96 	bl	800bdb8 <__sfp_lock_release>
 800be8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be94:	6025      	str	r5, [r4, #0]
 800be96:	61a5      	str	r5, [r4, #24]
 800be98:	2208      	movs	r2, #8
 800be9a:	4629      	mov	r1, r5
 800be9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bea0:	f7ff fc26 	bl	800b6f0 <memset>
 800bea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800beac:	4620      	mov	r0, r4
 800beae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb0:	3468      	adds	r4, #104	; 0x68
 800beb2:	e7d9      	b.n	800be68 <__sfp+0x1c>
 800beb4:	2104      	movs	r1, #4
 800beb6:	4638      	mov	r0, r7
 800beb8:	f7ff ff62 	bl	800bd80 <__sfmoreglue>
 800bebc:	4604      	mov	r4, r0
 800bebe:	6030      	str	r0, [r6, #0]
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d1d5      	bne.n	800be70 <__sfp+0x24>
 800bec4:	f7ff ff78 	bl	800bdb8 <__sfp_lock_release>
 800bec8:	230c      	movs	r3, #12
 800beca:	603b      	str	r3, [r7, #0]
 800becc:	e7ee      	b.n	800beac <__sfp+0x60>
 800bece:	bf00      	nop
 800bed0:	0800d1a8 	.word	0x0800d1a8
 800bed4:	ffff0001 	.word	0xffff0001

0800bed8 <_fwalk_reent>:
 800bed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bedc:	4606      	mov	r6, r0
 800bede:	4688      	mov	r8, r1
 800bee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bee4:	2700      	movs	r7, #0
 800bee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800beea:	f1b9 0901 	subs.w	r9, r9, #1
 800beee:	d505      	bpl.n	800befc <_fwalk_reent+0x24>
 800bef0:	6824      	ldr	r4, [r4, #0]
 800bef2:	2c00      	cmp	r4, #0
 800bef4:	d1f7      	bne.n	800bee6 <_fwalk_reent+0xe>
 800bef6:	4638      	mov	r0, r7
 800bef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800befc:	89ab      	ldrh	r3, [r5, #12]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d907      	bls.n	800bf12 <_fwalk_reent+0x3a>
 800bf02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf06:	3301      	adds	r3, #1
 800bf08:	d003      	beq.n	800bf12 <_fwalk_reent+0x3a>
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	47c0      	blx	r8
 800bf10:	4307      	orrs	r7, r0
 800bf12:	3568      	adds	r5, #104	; 0x68
 800bf14:	e7e9      	b.n	800beea <_fwalk_reent+0x12>

0800bf16 <__retarget_lock_init_recursive>:
 800bf16:	4770      	bx	lr

0800bf18 <__retarget_lock_acquire_recursive>:
 800bf18:	4770      	bx	lr

0800bf1a <__retarget_lock_release_recursive>:
 800bf1a:	4770      	bx	lr

0800bf1c <__swhatbuf_r>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	460e      	mov	r6, r1
 800bf20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf24:	2900      	cmp	r1, #0
 800bf26:	b096      	sub	sp, #88	; 0x58
 800bf28:	4614      	mov	r4, r2
 800bf2a:	461d      	mov	r5, r3
 800bf2c:	da08      	bge.n	800bf40 <__swhatbuf_r+0x24>
 800bf2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf32:	2200      	movs	r2, #0
 800bf34:	602a      	str	r2, [r5, #0]
 800bf36:	061a      	lsls	r2, r3, #24
 800bf38:	d410      	bmi.n	800bf5c <__swhatbuf_r+0x40>
 800bf3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf3e:	e00e      	b.n	800bf5e <__swhatbuf_r+0x42>
 800bf40:	466a      	mov	r2, sp
 800bf42:	f000 fbb1 	bl	800c6a8 <_fstat_r>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	dbf1      	blt.n	800bf2e <__swhatbuf_r+0x12>
 800bf4a:	9a01      	ldr	r2, [sp, #4]
 800bf4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf54:	425a      	negs	r2, r3
 800bf56:	415a      	adcs	r2, r3
 800bf58:	602a      	str	r2, [r5, #0]
 800bf5a:	e7ee      	b.n	800bf3a <__swhatbuf_r+0x1e>
 800bf5c:	2340      	movs	r3, #64	; 0x40
 800bf5e:	2000      	movs	r0, #0
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	b016      	add	sp, #88	; 0x58
 800bf64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf68 <__smakebuf_r>:
 800bf68:	898b      	ldrh	r3, [r1, #12]
 800bf6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf6c:	079d      	lsls	r5, r3, #30
 800bf6e:	4606      	mov	r6, r0
 800bf70:	460c      	mov	r4, r1
 800bf72:	d507      	bpl.n	800bf84 <__smakebuf_r+0x1c>
 800bf74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	6123      	str	r3, [r4, #16]
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	6163      	str	r3, [r4, #20]
 800bf80:	b002      	add	sp, #8
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	ab01      	add	r3, sp, #4
 800bf86:	466a      	mov	r2, sp
 800bf88:	f7ff ffc8 	bl	800bf1c <__swhatbuf_r>
 800bf8c:	9900      	ldr	r1, [sp, #0]
 800bf8e:	4605      	mov	r5, r0
 800bf90:	4630      	mov	r0, r6
 800bf92:	f7ff fc37 	bl	800b804 <_malloc_r>
 800bf96:	b948      	cbnz	r0, 800bfac <__smakebuf_r+0x44>
 800bf98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf9c:	059a      	lsls	r2, r3, #22
 800bf9e:	d4ef      	bmi.n	800bf80 <__smakebuf_r+0x18>
 800bfa0:	f023 0303 	bic.w	r3, r3, #3
 800bfa4:	f043 0302 	orr.w	r3, r3, #2
 800bfa8:	81a3      	strh	r3, [r4, #12]
 800bfaa:	e7e3      	b.n	800bf74 <__smakebuf_r+0xc>
 800bfac:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <__smakebuf_r+0x7c>)
 800bfae:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	6020      	str	r0, [r4, #0]
 800bfb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb8:	81a3      	strh	r3, [r4, #12]
 800bfba:	9b00      	ldr	r3, [sp, #0]
 800bfbc:	6163      	str	r3, [r4, #20]
 800bfbe:	9b01      	ldr	r3, [sp, #4]
 800bfc0:	6120      	str	r0, [r4, #16]
 800bfc2:	b15b      	cbz	r3, 800bfdc <__smakebuf_r+0x74>
 800bfc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfc8:	4630      	mov	r0, r6
 800bfca:	f000 fb7f 	bl	800c6cc <_isatty_r>
 800bfce:	b128      	cbz	r0, 800bfdc <__smakebuf_r+0x74>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	f023 0303 	bic.w	r3, r3, #3
 800bfd6:	f043 0301 	orr.w	r3, r3, #1
 800bfda:	81a3      	strh	r3, [r4, #12]
 800bfdc:	89a0      	ldrh	r0, [r4, #12]
 800bfde:	4305      	orrs	r5, r0
 800bfe0:	81a5      	strh	r5, [r4, #12]
 800bfe2:	e7cd      	b.n	800bf80 <__smakebuf_r+0x18>
 800bfe4:	0800bd75 	.word	0x0800bd75

0800bfe8 <__malloc_lock>:
 800bfe8:	4801      	ldr	r0, [pc, #4]	; (800bff0 <__malloc_lock+0x8>)
 800bfea:	f7ff bf95 	b.w	800bf18 <__retarget_lock_acquire_recursive>
 800bfee:	bf00      	nop
 800bff0:	20000b80 	.word	0x20000b80

0800bff4 <__malloc_unlock>:
 800bff4:	4801      	ldr	r0, [pc, #4]	; (800bffc <__malloc_unlock+0x8>)
 800bff6:	f7ff bf90 	b.w	800bf1a <__retarget_lock_release_recursive>
 800bffa:	bf00      	nop
 800bffc:	20000b80 	.word	0x20000b80

0800c000 <__sfputc_r>:
 800c000:	6893      	ldr	r3, [r2, #8]
 800c002:	3b01      	subs	r3, #1
 800c004:	2b00      	cmp	r3, #0
 800c006:	b410      	push	{r4}
 800c008:	6093      	str	r3, [r2, #8]
 800c00a:	da08      	bge.n	800c01e <__sfputc_r+0x1e>
 800c00c:	6994      	ldr	r4, [r2, #24]
 800c00e:	42a3      	cmp	r3, r4
 800c010:	db01      	blt.n	800c016 <__sfputc_r+0x16>
 800c012:	290a      	cmp	r1, #10
 800c014:	d103      	bne.n	800c01e <__sfputc_r+0x1e>
 800c016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c01a:	f7ff bd05 	b.w	800ba28 <__swbuf_r>
 800c01e:	6813      	ldr	r3, [r2, #0]
 800c020:	1c58      	adds	r0, r3, #1
 800c022:	6010      	str	r0, [r2, #0]
 800c024:	7019      	strb	r1, [r3, #0]
 800c026:	4608      	mov	r0, r1
 800c028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c02c:	4770      	bx	lr

0800c02e <__sfputs_r>:
 800c02e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c030:	4606      	mov	r6, r0
 800c032:	460f      	mov	r7, r1
 800c034:	4614      	mov	r4, r2
 800c036:	18d5      	adds	r5, r2, r3
 800c038:	42ac      	cmp	r4, r5
 800c03a:	d101      	bne.n	800c040 <__sfputs_r+0x12>
 800c03c:	2000      	movs	r0, #0
 800c03e:	e007      	b.n	800c050 <__sfputs_r+0x22>
 800c040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c044:	463a      	mov	r2, r7
 800c046:	4630      	mov	r0, r6
 800c048:	f7ff ffda 	bl	800c000 <__sfputc_r>
 800c04c:	1c43      	adds	r3, r0, #1
 800c04e:	d1f3      	bne.n	800c038 <__sfputs_r+0xa>
 800c050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c054 <_vfiprintf_r>:
 800c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c058:	460d      	mov	r5, r1
 800c05a:	b09d      	sub	sp, #116	; 0x74
 800c05c:	4614      	mov	r4, r2
 800c05e:	4698      	mov	r8, r3
 800c060:	4606      	mov	r6, r0
 800c062:	b118      	cbz	r0, 800c06c <_vfiprintf_r+0x18>
 800c064:	6983      	ldr	r3, [r0, #24]
 800c066:	b90b      	cbnz	r3, 800c06c <_vfiprintf_r+0x18>
 800c068:	f7ff feb8 	bl	800bddc <__sinit>
 800c06c:	4b89      	ldr	r3, [pc, #548]	; (800c294 <_vfiprintf_r+0x240>)
 800c06e:	429d      	cmp	r5, r3
 800c070:	d11b      	bne.n	800c0aa <_vfiprintf_r+0x56>
 800c072:	6875      	ldr	r5, [r6, #4]
 800c074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c076:	07d9      	lsls	r1, r3, #31
 800c078:	d405      	bmi.n	800c086 <_vfiprintf_r+0x32>
 800c07a:	89ab      	ldrh	r3, [r5, #12]
 800c07c:	059a      	lsls	r2, r3, #22
 800c07e:	d402      	bmi.n	800c086 <_vfiprintf_r+0x32>
 800c080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c082:	f7ff ff49 	bl	800bf18 <__retarget_lock_acquire_recursive>
 800c086:	89ab      	ldrh	r3, [r5, #12]
 800c088:	071b      	lsls	r3, r3, #28
 800c08a:	d501      	bpl.n	800c090 <_vfiprintf_r+0x3c>
 800c08c:	692b      	ldr	r3, [r5, #16]
 800c08e:	b9eb      	cbnz	r3, 800c0cc <_vfiprintf_r+0x78>
 800c090:	4629      	mov	r1, r5
 800c092:	4630      	mov	r0, r6
 800c094:	f7ff fd1a 	bl	800bacc <__swsetup_r>
 800c098:	b1c0      	cbz	r0, 800c0cc <_vfiprintf_r+0x78>
 800c09a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c09c:	07dc      	lsls	r4, r3, #31
 800c09e:	d50e      	bpl.n	800c0be <_vfiprintf_r+0x6a>
 800c0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a4:	b01d      	add	sp, #116	; 0x74
 800c0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0aa:	4b7b      	ldr	r3, [pc, #492]	; (800c298 <_vfiprintf_r+0x244>)
 800c0ac:	429d      	cmp	r5, r3
 800c0ae:	d101      	bne.n	800c0b4 <_vfiprintf_r+0x60>
 800c0b0:	68b5      	ldr	r5, [r6, #8]
 800c0b2:	e7df      	b.n	800c074 <_vfiprintf_r+0x20>
 800c0b4:	4b79      	ldr	r3, [pc, #484]	; (800c29c <_vfiprintf_r+0x248>)
 800c0b6:	429d      	cmp	r5, r3
 800c0b8:	bf08      	it	eq
 800c0ba:	68f5      	ldreq	r5, [r6, #12]
 800c0bc:	e7da      	b.n	800c074 <_vfiprintf_r+0x20>
 800c0be:	89ab      	ldrh	r3, [r5, #12]
 800c0c0:	0598      	lsls	r0, r3, #22
 800c0c2:	d4ed      	bmi.n	800c0a0 <_vfiprintf_r+0x4c>
 800c0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0c6:	f7ff ff28 	bl	800bf1a <__retarget_lock_release_recursive>
 800c0ca:	e7e9      	b.n	800c0a0 <_vfiprintf_r+0x4c>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c0d0:	2320      	movs	r3, #32
 800c0d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0da:	2330      	movs	r3, #48	; 0x30
 800c0dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c2a0 <_vfiprintf_r+0x24c>
 800c0e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0e4:	f04f 0901 	mov.w	r9, #1
 800c0e8:	4623      	mov	r3, r4
 800c0ea:	469a      	mov	sl, r3
 800c0ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0f0:	b10a      	cbz	r2, 800c0f6 <_vfiprintf_r+0xa2>
 800c0f2:	2a25      	cmp	r2, #37	; 0x25
 800c0f4:	d1f9      	bne.n	800c0ea <_vfiprintf_r+0x96>
 800c0f6:	ebba 0b04 	subs.w	fp, sl, r4
 800c0fa:	d00b      	beq.n	800c114 <_vfiprintf_r+0xc0>
 800c0fc:	465b      	mov	r3, fp
 800c0fe:	4622      	mov	r2, r4
 800c100:	4629      	mov	r1, r5
 800c102:	4630      	mov	r0, r6
 800c104:	f7ff ff93 	bl	800c02e <__sfputs_r>
 800c108:	3001      	adds	r0, #1
 800c10a:	f000 80aa 	beq.w	800c262 <_vfiprintf_r+0x20e>
 800c10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c110:	445a      	add	r2, fp
 800c112:	9209      	str	r2, [sp, #36]	; 0x24
 800c114:	f89a 3000 	ldrb.w	r3, [sl]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f000 80a2 	beq.w	800c262 <_vfiprintf_r+0x20e>
 800c11e:	2300      	movs	r3, #0
 800c120:	f04f 32ff 	mov.w	r2, #4294967295
 800c124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c128:	f10a 0a01 	add.w	sl, sl, #1
 800c12c:	9304      	str	r3, [sp, #16]
 800c12e:	9307      	str	r3, [sp, #28]
 800c130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c134:	931a      	str	r3, [sp, #104]	; 0x68
 800c136:	4654      	mov	r4, sl
 800c138:	2205      	movs	r2, #5
 800c13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c13e:	4858      	ldr	r0, [pc, #352]	; (800c2a0 <_vfiprintf_r+0x24c>)
 800c140:	f7f4 f856 	bl	80001f0 <memchr>
 800c144:	9a04      	ldr	r2, [sp, #16]
 800c146:	b9d8      	cbnz	r0, 800c180 <_vfiprintf_r+0x12c>
 800c148:	06d1      	lsls	r1, r2, #27
 800c14a:	bf44      	itt	mi
 800c14c:	2320      	movmi	r3, #32
 800c14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c152:	0713      	lsls	r3, r2, #28
 800c154:	bf44      	itt	mi
 800c156:	232b      	movmi	r3, #43	; 0x2b
 800c158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c15c:	f89a 3000 	ldrb.w	r3, [sl]
 800c160:	2b2a      	cmp	r3, #42	; 0x2a
 800c162:	d015      	beq.n	800c190 <_vfiprintf_r+0x13c>
 800c164:	9a07      	ldr	r2, [sp, #28]
 800c166:	4654      	mov	r4, sl
 800c168:	2000      	movs	r0, #0
 800c16a:	f04f 0c0a 	mov.w	ip, #10
 800c16e:	4621      	mov	r1, r4
 800c170:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c174:	3b30      	subs	r3, #48	; 0x30
 800c176:	2b09      	cmp	r3, #9
 800c178:	d94e      	bls.n	800c218 <_vfiprintf_r+0x1c4>
 800c17a:	b1b0      	cbz	r0, 800c1aa <_vfiprintf_r+0x156>
 800c17c:	9207      	str	r2, [sp, #28]
 800c17e:	e014      	b.n	800c1aa <_vfiprintf_r+0x156>
 800c180:	eba0 0308 	sub.w	r3, r0, r8
 800c184:	fa09 f303 	lsl.w	r3, r9, r3
 800c188:	4313      	orrs	r3, r2
 800c18a:	9304      	str	r3, [sp, #16]
 800c18c:	46a2      	mov	sl, r4
 800c18e:	e7d2      	b.n	800c136 <_vfiprintf_r+0xe2>
 800c190:	9b03      	ldr	r3, [sp, #12]
 800c192:	1d19      	adds	r1, r3, #4
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	9103      	str	r1, [sp, #12]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	bfbb      	ittet	lt
 800c19c:	425b      	neglt	r3, r3
 800c19e:	f042 0202 	orrlt.w	r2, r2, #2
 800c1a2:	9307      	strge	r3, [sp, #28]
 800c1a4:	9307      	strlt	r3, [sp, #28]
 800c1a6:	bfb8      	it	lt
 800c1a8:	9204      	strlt	r2, [sp, #16]
 800c1aa:	7823      	ldrb	r3, [r4, #0]
 800c1ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c1ae:	d10c      	bne.n	800c1ca <_vfiprintf_r+0x176>
 800c1b0:	7863      	ldrb	r3, [r4, #1]
 800c1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c1b4:	d135      	bne.n	800c222 <_vfiprintf_r+0x1ce>
 800c1b6:	9b03      	ldr	r3, [sp, #12]
 800c1b8:	1d1a      	adds	r2, r3, #4
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	9203      	str	r2, [sp, #12]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	bfb8      	it	lt
 800c1c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1c6:	3402      	adds	r4, #2
 800c1c8:	9305      	str	r3, [sp, #20]
 800c1ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c2b0 <_vfiprintf_r+0x25c>
 800c1ce:	7821      	ldrb	r1, [r4, #0]
 800c1d0:	2203      	movs	r2, #3
 800c1d2:	4650      	mov	r0, sl
 800c1d4:	f7f4 f80c 	bl	80001f0 <memchr>
 800c1d8:	b140      	cbz	r0, 800c1ec <_vfiprintf_r+0x198>
 800c1da:	2340      	movs	r3, #64	; 0x40
 800c1dc:	eba0 000a 	sub.w	r0, r0, sl
 800c1e0:	fa03 f000 	lsl.w	r0, r3, r0
 800c1e4:	9b04      	ldr	r3, [sp, #16]
 800c1e6:	4303      	orrs	r3, r0
 800c1e8:	3401      	adds	r4, #1
 800c1ea:	9304      	str	r3, [sp, #16]
 800c1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1f0:	482c      	ldr	r0, [pc, #176]	; (800c2a4 <_vfiprintf_r+0x250>)
 800c1f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1f6:	2206      	movs	r2, #6
 800c1f8:	f7f3 fffa 	bl	80001f0 <memchr>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d03f      	beq.n	800c280 <_vfiprintf_r+0x22c>
 800c200:	4b29      	ldr	r3, [pc, #164]	; (800c2a8 <_vfiprintf_r+0x254>)
 800c202:	bb1b      	cbnz	r3, 800c24c <_vfiprintf_r+0x1f8>
 800c204:	9b03      	ldr	r3, [sp, #12]
 800c206:	3307      	adds	r3, #7
 800c208:	f023 0307 	bic.w	r3, r3, #7
 800c20c:	3308      	adds	r3, #8
 800c20e:	9303      	str	r3, [sp, #12]
 800c210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c212:	443b      	add	r3, r7
 800c214:	9309      	str	r3, [sp, #36]	; 0x24
 800c216:	e767      	b.n	800c0e8 <_vfiprintf_r+0x94>
 800c218:	fb0c 3202 	mla	r2, ip, r2, r3
 800c21c:	460c      	mov	r4, r1
 800c21e:	2001      	movs	r0, #1
 800c220:	e7a5      	b.n	800c16e <_vfiprintf_r+0x11a>
 800c222:	2300      	movs	r3, #0
 800c224:	3401      	adds	r4, #1
 800c226:	9305      	str	r3, [sp, #20]
 800c228:	4619      	mov	r1, r3
 800c22a:	f04f 0c0a 	mov.w	ip, #10
 800c22e:	4620      	mov	r0, r4
 800c230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c234:	3a30      	subs	r2, #48	; 0x30
 800c236:	2a09      	cmp	r2, #9
 800c238:	d903      	bls.n	800c242 <_vfiprintf_r+0x1ee>
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d0c5      	beq.n	800c1ca <_vfiprintf_r+0x176>
 800c23e:	9105      	str	r1, [sp, #20]
 800c240:	e7c3      	b.n	800c1ca <_vfiprintf_r+0x176>
 800c242:	fb0c 2101 	mla	r1, ip, r1, r2
 800c246:	4604      	mov	r4, r0
 800c248:	2301      	movs	r3, #1
 800c24a:	e7f0      	b.n	800c22e <_vfiprintf_r+0x1da>
 800c24c:	ab03      	add	r3, sp, #12
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	462a      	mov	r2, r5
 800c252:	4b16      	ldr	r3, [pc, #88]	; (800c2ac <_vfiprintf_r+0x258>)
 800c254:	a904      	add	r1, sp, #16
 800c256:	4630      	mov	r0, r6
 800c258:	f3af 8000 	nop.w
 800c25c:	4607      	mov	r7, r0
 800c25e:	1c78      	adds	r0, r7, #1
 800c260:	d1d6      	bne.n	800c210 <_vfiprintf_r+0x1bc>
 800c262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c264:	07d9      	lsls	r1, r3, #31
 800c266:	d405      	bmi.n	800c274 <_vfiprintf_r+0x220>
 800c268:	89ab      	ldrh	r3, [r5, #12]
 800c26a:	059a      	lsls	r2, r3, #22
 800c26c:	d402      	bmi.n	800c274 <_vfiprintf_r+0x220>
 800c26e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c270:	f7ff fe53 	bl	800bf1a <__retarget_lock_release_recursive>
 800c274:	89ab      	ldrh	r3, [r5, #12]
 800c276:	065b      	lsls	r3, r3, #25
 800c278:	f53f af12 	bmi.w	800c0a0 <_vfiprintf_r+0x4c>
 800c27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c27e:	e711      	b.n	800c0a4 <_vfiprintf_r+0x50>
 800c280:	ab03      	add	r3, sp, #12
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	462a      	mov	r2, r5
 800c286:	4b09      	ldr	r3, [pc, #36]	; (800c2ac <_vfiprintf_r+0x258>)
 800c288:	a904      	add	r1, sp, #16
 800c28a:	4630      	mov	r0, r6
 800c28c:	f000 f880 	bl	800c390 <_printf_i>
 800c290:	e7e4      	b.n	800c25c <_vfiprintf_r+0x208>
 800c292:	bf00      	nop
 800c294:	0800d1cc 	.word	0x0800d1cc
 800c298:	0800d1ec 	.word	0x0800d1ec
 800c29c:	0800d1ac 	.word	0x0800d1ac
 800c2a0:	0800d20c 	.word	0x0800d20c
 800c2a4:	0800d216 	.word	0x0800d216
 800c2a8:	00000000 	.word	0x00000000
 800c2ac:	0800c02f 	.word	0x0800c02f
 800c2b0:	0800d212 	.word	0x0800d212

0800c2b4 <_printf_common>:
 800c2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b8:	4616      	mov	r6, r2
 800c2ba:	4699      	mov	r9, r3
 800c2bc:	688a      	ldr	r2, [r1, #8]
 800c2be:	690b      	ldr	r3, [r1, #16]
 800c2c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	bfb8      	it	lt
 800c2c8:	4613      	movlt	r3, r2
 800c2ca:	6033      	str	r3, [r6, #0]
 800c2cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	460c      	mov	r4, r1
 800c2d4:	b10a      	cbz	r2, 800c2da <_printf_common+0x26>
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	6033      	str	r3, [r6, #0]
 800c2da:	6823      	ldr	r3, [r4, #0]
 800c2dc:	0699      	lsls	r1, r3, #26
 800c2de:	bf42      	ittt	mi
 800c2e0:	6833      	ldrmi	r3, [r6, #0]
 800c2e2:	3302      	addmi	r3, #2
 800c2e4:	6033      	strmi	r3, [r6, #0]
 800c2e6:	6825      	ldr	r5, [r4, #0]
 800c2e8:	f015 0506 	ands.w	r5, r5, #6
 800c2ec:	d106      	bne.n	800c2fc <_printf_common+0x48>
 800c2ee:	f104 0a19 	add.w	sl, r4, #25
 800c2f2:	68e3      	ldr	r3, [r4, #12]
 800c2f4:	6832      	ldr	r2, [r6, #0]
 800c2f6:	1a9b      	subs	r3, r3, r2
 800c2f8:	42ab      	cmp	r3, r5
 800c2fa:	dc26      	bgt.n	800c34a <_printf_common+0x96>
 800c2fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c300:	1e13      	subs	r3, r2, #0
 800c302:	6822      	ldr	r2, [r4, #0]
 800c304:	bf18      	it	ne
 800c306:	2301      	movne	r3, #1
 800c308:	0692      	lsls	r2, r2, #26
 800c30a:	d42b      	bmi.n	800c364 <_printf_common+0xb0>
 800c30c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c310:	4649      	mov	r1, r9
 800c312:	4638      	mov	r0, r7
 800c314:	47c0      	blx	r8
 800c316:	3001      	adds	r0, #1
 800c318:	d01e      	beq.n	800c358 <_printf_common+0xa4>
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	68e5      	ldr	r5, [r4, #12]
 800c31e:	6832      	ldr	r2, [r6, #0]
 800c320:	f003 0306 	and.w	r3, r3, #6
 800c324:	2b04      	cmp	r3, #4
 800c326:	bf08      	it	eq
 800c328:	1aad      	subeq	r5, r5, r2
 800c32a:	68a3      	ldr	r3, [r4, #8]
 800c32c:	6922      	ldr	r2, [r4, #16]
 800c32e:	bf0c      	ite	eq
 800c330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c334:	2500      	movne	r5, #0
 800c336:	4293      	cmp	r3, r2
 800c338:	bfc4      	itt	gt
 800c33a:	1a9b      	subgt	r3, r3, r2
 800c33c:	18ed      	addgt	r5, r5, r3
 800c33e:	2600      	movs	r6, #0
 800c340:	341a      	adds	r4, #26
 800c342:	42b5      	cmp	r5, r6
 800c344:	d11a      	bne.n	800c37c <_printf_common+0xc8>
 800c346:	2000      	movs	r0, #0
 800c348:	e008      	b.n	800c35c <_printf_common+0xa8>
 800c34a:	2301      	movs	r3, #1
 800c34c:	4652      	mov	r2, sl
 800c34e:	4649      	mov	r1, r9
 800c350:	4638      	mov	r0, r7
 800c352:	47c0      	blx	r8
 800c354:	3001      	adds	r0, #1
 800c356:	d103      	bne.n	800c360 <_printf_common+0xac>
 800c358:	f04f 30ff 	mov.w	r0, #4294967295
 800c35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c360:	3501      	adds	r5, #1
 800c362:	e7c6      	b.n	800c2f2 <_printf_common+0x3e>
 800c364:	18e1      	adds	r1, r4, r3
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	2030      	movs	r0, #48	; 0x30
 800c36a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c36e:	4422      	add	r2, r4
 800c370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c378:	3302      	adds	r3, #2
 800c37a:	e7c7      	b.n	800c30c <_printf_common+0x58>
 800c37c:	2301      	movs	r3, #1
 800c37e:	4622      	mov	r2, r4
 800c380:	4649      	mov	r1, r9
 800c382:	4638      	mov	r0, r7
 800c384:	47c0      	blx	r8
 800c386:	3001      	adds	r0, #1
 800c388:	d0e6      	beq.n	800c358 <_printf_common+0xa4>
 800c38a:	3601      	adds	r6, #1
 800c38c:	e7d9      	b.n	800c342 <_printf_common+0x8e>
	...

0800c390 <_printf_i>:
 800c390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c394:	7e0f      	ldrb	r7, [r1, #24]
 800c396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c398:	2f78      	cmp	r7, #120	; 0x78
 800c39a:	4691      	mov	r9, r2
 800c39c:	4680      	mov	r8, r0
 800c39e:	460c      	mov	r4, r1
 800c3a0:	469a      	mov	sl, r3
 800c3a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3a6:	d807      	bhi.n	800c3b8 <_printf_i+0x28>
 800c3a8:	2f62      	cmp	r7, #98	; 0x62
 800c3aa:	d80a      	bhi.n	800c3c2 <_printf_i+0x32>
 800c3ac:	2f00      	cmp	r7, #0
 800c3ae:	f000 80d8 	beq.w	800c562 <_printf_i+0x1d2>
 800c3b2:	2f58      	cmp	r7, #88	; 0x58
 800c3b4:	f000 80a3 	beq.w	800c4fe <_printf_i+0x16e>
 800c3b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3c0:	e03a      	b.n	800c438 <_printf_i+0xa8>
 800c3c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3c6:	2b15      	cmp	r3, #21
 800c3c8:	d8f6      	bhi.n	800c3b8 <_printf_i+0x28>
 800c3ca:	a101      	add	r1, pc, #4	; (adr r1, 800c3d0 <_printf_i+0x40>)
 800c3cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3d0:	0800c429 	.word	0x0800c429
 800c3d4:	0800c43d 	.word	0x0800c43d
 800c3d8:	0800c3b9 	.word	0x0800c3b9
 800c3dc:	0800c3b9 	.word	0x0800c3b9
 800c3e0:	0800c3b9 	.word	0x0800c3b9
 800c3e4:	0800c3b9 	.word	0x0800c3b9
 800c3e8:	0800c43d 	.word	0x0800c43d
 800c3ec:	0800c3b9 	.word	0x0800c3b9
 800c3f0:	0800c3b9 	.word	0x0800c3b9
 800c3f4:	0800c3b9 	.word	0x0800c3b9
 800c3f8:	0800c3b9 	.word	0x0800c3b9
 800c3fc:	0800c549 	.word	0x0800c549
 800c400:	0800c46d 	.word	0x0800c46d
 800c404:	0800c52b 	.word	0x0800c52b
 800c408:	0800c3b9 	.word	0x0800c3b9
 800c40c:	0800c3b9 	.word	0x0800c3b9
 800c410:	0800c56b 	.word	0x0800c56b
 800c414:	0800c3b9 	.word	0x0800c3b9
 800c418:	0800c46d 	.word	0x0800c46d
 800c41c:	0800c3b9 	.word	0x0800c3b9
 800c420:	0800c3b9 	.word	0x0800c3b9
 800c424:	0800c533 	.word	0x0800c533
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	1d1a      	adds	r2, r3, #4
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	602a      	str	r2, [r5, #0]
 800c430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c438:	2301      	movs	r3, #1
 800c43a:	e0a3      	b.n	800c584 <_printf_i+0x1f4>
 800c43c:	6820      	ldr	r0, [r4, #0]
 800c43e:	6829      	ldr	r1, [r5, #0]
 800c440:	0606      	lsls	r6, r0, #24
 800c442:	f101 0304 	add.w	r3, r1, #4
 800c446:	d50a      	bpl.n	800c45e <_printf_i+0xce>
 800c448:	680e      	ldr	r6, [r1, #0]
 800c44a:	602b      	str	r3, [r5, #0]
 800c44c:	2e00      	cmp	r6, #0
 800c44e:	da03      	bge.n	800c458 <_printf_i+0xc8>
 800c450:	232d      	movs	r3, #45	; 0x2d
 800c452:	4276      	negs	r6, r6
 800c454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c458:	485e      	ldr	r0, [pc, #376]	; (800c5d4 <_printf_i+0x244>)
 800c45a:	230a      	movs	r3, #10
 800c45c:	e019      	b.n	800c492 <_printf_i+0x102>
 800c45e:	680e      	ldr	r6, [r1, #0]
 800c460:	602b      	str	r3, [r5, #0]
 800c462:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c466:	bf18      	it	ne
 800c468:	b236      	sxthne	r6, r6
 800c46a:	e7ef      	b.n	800c44c <_printf_i+0xbc>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	6820      	ldr	r0, [r4, #0]
 800c470:	1d19      	adds	r1, r3, #4
 800c472:	6029      	str	r1, [r5, #0]
 800c474:	0601      	lsls	r1, r0, #24
 800c476:	d501      	bpl.n	800c47c <_printf_i+0xec>
 800c478:	681e      	ldr	r6, [r3, #0]
 800c47a:	e002      	b.n	800c482 <_printf_i+0xf2>
 800c47c:	0646      	lsls	r6, r0, #25
 800c47e:	d5fb      	bpl.n	800c478 <_printf_i+0xe8>
 800c480:	881e      	ldrh	r6, [r3, #0]
 800c482:	4854      	ldr	r0, [pc, #336]	; (800c5d4 <_printf_i+0x244>)
 800c484:	2f6f      	cmp	r7, #111	; 0x6f
 800c486:	bf0c      	ite	eq
 800c488:	2308      	moveq	r3, #8
 800c48a:	230a      	movne	r3, #10
 800c48c:	2100      	movs	r1, #0
 800c48e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c492:	6865      	ldr	r5, [r4, #4]
 800c494:	60a5      	str	r5, [r4, #8]
 800c496:	2d00      	cmp	r5, #0
 800c498:	bfa2      	ittt	ge
 800c49a:	6821      	ldrge	r1, [r4, #0]
 800c49c:	f021 0104 	bicge.w	r1, r1, #4
 800c4a0:	6021      	strge	r1, [r4, #0]
 800c4a2:	b90e      	cbnz	r6, 800c4a8 <_printf_i+0x118>
 800c4a4:	2d00      	cmp	r5, #0
 800c4a6:	d04d      	beq.n	800c544 <_printf_i+0x1b4>
 800c4a8:	4615      	mov	r5, r2
 800c4aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4ae:	fb03 6711 	mls	r7, r3, r1, r6
 800c4b2:	5dc7      	ldrb	r7, [r0, r7]
 800c4b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4b8:	4637      	mov	r7, r6
 800c4ba:	42bb      	cmp	r3, r7
 800c4bc:	460e      	mov	r6, r1
 800c4be:	d9f4      	bls.n	800c4aa <_printf_i+0x11a>
 800c4c0:	2b08      	cmp	r3, #8
 800c4c2:	d10b      	bne.n	800c4dc <_printf_i+0x14c>
 800c4c4:	6823      	ldr	r3, [r4, #0]
 800c4c6:	07de      	lsls	r6, r3, #31
 800c4c8:	d508      	bpl.n	800c4dc <_printf_i+0x14c>
 800c4ca:	6923      	ldr	r3, [r4, #16]
 800c4cc:	6861      	ldr	r1, [r4, #4]
 800c4ce:	4299      	cmp	r1, r3
 800c4d0:	bfde      	ittt	le
 800c4d2:	2330      	movle	r3, #48	; 0x30
 800c4d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4dc:	1b52      	subs	r2, r2, r5
 800c4de:	6122      	str	r2, [r4, #16]
 800c4e0:	f8cd a000 	str.w	sl, [sp]
 800c4e4:	464b      	mov	r3, r9
 800c4e6:	aa03      	add	r2, sp, #12
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	4640      	mov	r0, r8
 800c4ec:	f7ff fee2 	bl	800c2b4 <_printf_common>
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d14c      	bne.n	800c58e <_printf_i+0x1fe>
 800c4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f8:	b004      	add	sp, #16
 800c4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fe:	4835      	ldr	r0, [pc, #212]	; (800c5d4 <_printf_i+0x244>)
 800c500:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c504:	6829      	ldr	r1, [r5, #0]
 800c506:	6823      	ldr	r3, [r4, #0]
 800c508:	f851 6b04 	ldr.w	r6, [r1], #4
 800c50c:	6029      	str	r1, [r5, #0]
 800c50e:	061d      	lsls	r5, r3, #24
 800c510:	d514      	bpl.n	800c53c <_printf_i+0x1ac>
 800c512:	07df      	lsls	r7, r3, #31
 800c514:	bf44      	itt	mi
 800c516:	f043 0320 	orrmi.w	r3, r3, #32
 800c51a:	6023      	strmi	r3, [r4, #0]
 800c51c:	b91e      	cbnz	r6, 800c526 <_printf_i+0x196>
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	f023 0320 	bic.w	r3, r3, #32
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	2310      	movs	r3, #16
 800c528:	e7b0      	b.n	800c48c <_printf_i+0xfc>
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	f043 0320 	orr.w	r3, r3, #32
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	2378      	movs	r3, #120	; 0x78
 800c534:	4828      	ldr	r0, [pc, #160]	; (800c5d8 <_printf_i+0x248>)
 800c536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c53a:	e7e3      	b.n	800c504 <_printf_i+0x174>
 800c53c:	0659      	lsls	r1, r3, #25
 800c53e:	bf48      	it	mi
 800c540:	b2b6      	uxthmi	r6, r6
 800c542:	e7e6      	b.n	800c512 <_printf_i+0x182>
 800c544:	4615      	mov	r5, r2
 800c546:	e7bb      	b.n	800c4c0 <_printf_i+0x130>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	6826      	ldr	r6, [r4, #0]
 800c54c:	6961      	ldr	r1, [r4, #20]
 800c54e:	1d18      	adds	r0, r3, #4
 800c550:	6028      	str	r0, [r5, #0]
 800c552:	0635      	lsls	r5, r6, #24
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	d501      	bpl.n	800c55c <_printf_i+0x1cc>
 800c558:	6019      	str	r1, [r3, #0]
 800c55a:	e002      	b.n	800c562 <_printf_i+0x1d2>
 800c55c:	0670      	lsls	r0, r6, #25
 800c55e:	d5fb      	bpl.n	800c558 <_printf_i+0x1c8>
 800c560:	8019      	strh	r1, [r3, #0]
 800c562:	2300      	movs	r3, #0
 800c564:	6123      	str	r3, [r4, #16]
 800c566:	4615      	mov	r5, r2
 800c568:	e7ba      	b.n	800c4e0 <_printf_i+0x150>
 800c56a:	682b      	ldr	r3, [r5, #0]
 800c56c:	1d1a      	adds	r2, r3, #4
 800c56e:	602a      	str	r2, [r5, #0]
 800c570:	681d      	ldr	r5, [r3, #0]
 800c572:	6862      	ldr	r2, [r4, #4]
 800c574:	2100      	movs	r1, #0
 800c576:	4628      	mov	r0, r5
 800c578:	f7f3 fe3a 	bl	80001f0 <memchr>
 800c57c:	b108      	cbz	r0, 800c582 <_printf_i+0x1f2>
 800c57e:	1b40      	subs	r0, r0, r5
 800c580:	6060      	str	r0, [r4, #4]
 800c582:	6863      	ldr	r3, [r4, #4]
 800c584:	6123      	str	r3, [r4, #16]
 800c586:	2300      	movs	r3, #0
 800c588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c58c:	e7a8      	b.n	800c4e0 <_printf_i+0x150>
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	462a      	mov	r2, r5
 800c592:	4649      	mov	r1, r9
 800c594:	4640      	mov	r0, r8
 800c596:	47d0      	blx	sl
 800c598:	3001      	adds	r0, #1
 800c59a:	d0ab      	beq.n	800c4f4 <_printf_i+0x164>
 800c59c:	6823      	ldr	r3, [r4, #0]
 800c59e:	079b      	lsls	r3, r3, #30
 800c5a0:	d413      	bmi.n	800c5ca <_printf_i+0x23a>
 800c5a2:	68e0      	ldr	r0, [r4, #12]
 800c5a4:	9b03      	ldr	r3, [sp, #12]
 800c5a6:	4298      	cmp	r0, r3
 800c5a8:	bfb8      	it	lt
 800c5aa:	4618      	movlt	r0, r3
 800c5ac:	e7a4      	b.n	800c4f8 <_printf_i+0x168>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	4632      	mov	r2, r6
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	4640      	mov	r0, r8
 800c5b6:	47d0      	blx	sl
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	d09b      	beq.n	800c4f4 <_printf_i+0x164>
 800c5bc:	3501      	adds	r5, #1
 800c5be:	68e3      	ldr	r3, [r4, #12]
 800c5c0:	9903      	ldr	r1, [sp, #12]
 800c5c2:	1a5b      	subs	r3, r3, r1
 800c5c4:	42ab      	cmp	r3, r5
 800c5c6:	dcf2      	bgt.n	800c5ae <_printf_i+0x21e>
 800c5c8:	e7eb      	b.n	800c5a2 <_printf_i+0x212>
 800c5ca:	2500      	movs	r5, #0
 800c5cc:	f104 0619 	add.w	r6, r4, #25
 800c5d0:	e7f5      	b.n	800c5be <_printf_i+0x22e>
 800c5d2:	bf00      	nop
 800c5d4:	0800d21d 	.word	0x0800d21d
 800c5d8:	0800d22e 	.word	0x0800d22e

0800c5dc <__sread>:
 800c5dc:	b510      	push	{r4, lr}
 800c5de:	460c      	mov	r4, r1
 800c5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e4:	f000 f894 	bl	800c710 <_read_r>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	bfab      	itete	ge
 800c5ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c5f0:	181b      	addge	r3, r3, r0
 800c5f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5f6:	bfac      	ite	ge
 800c5f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5fa:	81a3      	strhlt	r3, [r4, #12]
 800c5fc:	bd10      	pop	{r4, pc}

0800c5fe <__swrite>:
 800c5fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c602:	461f      	mov	r7, r3
 800c604:	898b      	ldrh	r3, [r1, #12]
 800c606:	05db      	lsls	r3, r3, #23
 800c608:	4605      	mov	r5, r0
 800c60a:	460c      	mov	r4, r1
 800c60c:	4616      	mov	r6, r2
 800c60e:	d505      	bpl.n	800c61c <__swrite+0x1e>
 800c610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c614:	2302      	movs	r3, #2
 800c616:	2200      	movs	r2, #0
 800c618:	f000 f868 	bl	800c6ec <_lseek_r>
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c626:	81a3      	strh	r3, [r4, #12]
 800c628:	4632      	mov	r2, r6
 800c62a:	463b      	mov	r3, r7
 800c62c:	4628      	mov	r0, r5
 800c62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c632:	f000 b817 	b.w	800c664 <_write_r>

0800c636 <__sseek>:
 800c636:	b510      	push	{r4, lr}
 800c638:	460c      	mov	r4, r1
 800c63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c63e:	f000 f855 	bl	800c6ec <_lseek_r>
 800c642:	1c43      	adds	r3, r0, #1
 800c644:	89a3      	ldrh	r3, [r4, #12]
 800c646:	bf15      	itete	ne
 800c648:	6560      	strne	r0, [r4, #84]	; 0x54
 800c64a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c64e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c652:	81a3      	strheq	r3, [r4, #12]
 800c654:	bf18      	it	ne
 800c656:	81a3      	strhne	r3, [r4, #12]
 800c658:	bd10      	pop	{r4, pc}

0800c65a <__sclose>:
 800c65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c65e:	f000 b813 	b.w	800c688 <_close_r>
	...

0800c664 <_write_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4d07      	ldr	r5, [pc, #28]	; (800c684 <_write_r+0x20>)
 800c668:	4604      	mov	r4, r0
 800c66a:	4608      	mov	r0, r1
 800c66c:	4611      	mov	r1, r2
 800c66e:	2200      	movs	r2, #0
 800c670:	602a      	str	r2, [r5, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	f7fb f857 	bl	8007726 <_write>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d102      	bne.n	800c682 <_write_r+0x1e>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	b103      	cbz	r3, 800c682 <_write_r+0x1e>
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	20000b84 	.word	0x20000b84

0800c688 <_close_r>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4d06      	ldr	r5, [pc, #24]	; (800c6a4 <_close_r+0x1c>)
 800c68c:	2300      	movs	r3, #0
 800c68e:	4604      	mov	r4, r0
 800c690:	4608      	mov	r0, r1
 800c692:	602b      	str	r3, [r5, #0]
 800c694:	f7fb f863 	bl	800775e <_close>
 800c698:	1c43      	adds	r3, r0, #1
 800c69a:	d102      	bne.n	800c6a2 <_close_r+0x1a>
 800c69c:	682b      	ldr	r3, [r5, #0]
 800c69e:	b103      	cbz	r3, 800c6a2 <_close_r+0x1a>
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	bd38      	pop	{r3, r4, r5, pc}
 800c6a4:	20000b84 	.word	0x20000b84

0800c6a8 <_fstat_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	4d07      	ldr	r5, [pc, #28]	; (800c6c8 <_fstat_r+0x20>)
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	4611      	mov	r1, r2
 800c6b4:	602b      	str	r3, [r5, #0]
 800c6b6:	f7fb f85e 	bl	8007776 <_fstat>
 800c6ba:	1c43      	adds	r3, r0, #1
 800c6bc:	d102      	bne.n	800c6c4 <_fstat_r+0x1c>
 800c6be:	682b      	ldr	r3, [r5, #0]
 800c6c0:	b103      	cbz	r3, 800c6c4 <_fstat_r+0x1c>
 800c6c2:	6023      	str	r3, [r4, #0]
 800c6c4:	bd38      	pop	{r3, r4, r5, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20000b84 	.word	0x20000b84

0800c6cc <_isatty_r>:
 800c6cc:	b538      	push	{r3, r4, r5, lr}
 800c6ce:	4d06      	ldr	r5, [pc, #24]	; (800c6e8 <_isatty_r+0x1c>)
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	4608      	mov	r0, r1
 800c6d6:	602b      	str	r3, [r5, #0]
 800c6d8:	f7fb f85d 	bl	8007796 <_isatty>
 800c6dc:	1c43      	adds	r3, r0, #1
 800c6de:	d102      	bne.n	800c6e6 <_isatty_r+0x1a>
 800c6e0:	682b      	ldr	r3, [r5, #0]
 800c6e2:	b103      	cbz	r3, 800c6e6 <_isatty_r+0x1a>
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	bd38      	pop	{r3, r4, r5, pc}
 800c6e8:	20000b84 	.word	0x20000b84

0800c6ec <_lseek_r>:
 800c6ec:	b538      	push	{r3, r4, r5, lr}
 800c6ee:	4d07      	ldr	r5, [pc, #28]	; (800c70c <_lseek_r+0x20>)
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	4608      	mov	r0, r1
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	602a      	str	r2, [r5, #0]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	f7fb f856 	bl	80077ac <_lseek>
 800c700:	1c43      	adds	r3, r0, #1
 800c702:	d102      	bne.n	800c70a <_lseek_r+0x1e>
 800c704:	682b      	ldr	r3, [r5, #0]
 800c706:	b103      	cbz	r3, 800c70a <_lseek_r+0x1e>
 800c708:	6023      	str	r3, [r4, #0]
 800c70a:	bd38      	pop	{r3, r4, r5, pc}
 800c70c:	20000b84 	.word	0x20000b84

0800c710 <_read_r>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	4d07      	ldr	r5, [pc, #28]	; (800c730 <_read_r+0x20>)
 800c714:	4604      	mov	r4, r0
 800c716:	4608      	mov	r0, r1
 800c718:	4611      	mov	r1, r2
 800c71a:	2200      	movs	r2, #0
 800c71c:	602a      	str	r2, [r5, #0]
 800c71e:	461a      	mov	r2, r3
 800c720:	f7fa ffe4 	bl	80076ec <_read>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	d102      	bne.n	800c72e <_read_r+0x1e>
 800c728:	682b      	ldr	r3, [r5, #0]
 800c72a:	b103      	cbz	r3, 800c72e <_read_r+0x1e>
 800c72c:	6023      	str	r3, [r4, #0]
 800c72e:	bd38      	pop	{r3, r4, r5, pc}
 800c730:	20000b84 	.word	0x20000b84

0800c734 <_init>:
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	bf00      	nop
 800c738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c73a:	bc08      	pop	{r3}
 800c73c:	469e      	mov	lr, r3
 800c73e:	4770      	bx	lr

0800c740 <_fini>:
 800c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c742:	bf00      	nop
 800c744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c746:	bc08      	pop	{r3}
 800c748:	469e      	mov	lr, r3
 800c74a:	4770      	bx	lr
